// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.System.Power.h"


namespace py::cpp::Microsoft::Windows::System::Power
{
    // ----- PowerManager class --------------------

    static PyObject* _new_PowerManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::System::Power::PowerManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::System::Power::PowerManager>::type_name);
        return nullptr;
    }

    static PyObject* PowerManager_get_BatteryStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"BatteryStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::BatteryStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_DisplayStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"DisplayStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::DisplayStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_EffectivePowerMode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EffectivePowerMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::EffectivePowerMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_EnergySaverStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EnergySaverStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::EnergySaverStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_PowerSourceKind(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSourceKind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::PowerSourceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_PowerSupplyStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSupplyStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::PowerSupplyStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_RemainingChargePercent(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingChargePercent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::RemainingChargePercent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_RemainingDischargeTime(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingDischargeTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::RemainingDischargeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_SystemSuspendStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"SystemSuspendStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::SystemSuspendStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_UserPresenceStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"UserPresenceStatus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::UserPresenceStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_EffectivePowerMode2(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EffectivePowerMode2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::EffectivePowerMode2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_BatteryStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"BatteryStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::BatteryStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_BatteryStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"BatteryStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::BatteryStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_DisplayStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"DisplayStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::DisplayStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_DisplayStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"DisplayStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::DisplayStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_EffectivePowerModeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EffectivePowerModeChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::EffectivePowerModeChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_EffectivePowerModeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EffectivePowerModeChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::EffectivePowerModeChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_EnergySaverStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EnergySaverStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::EnergySaverStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_EnergySaverStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"EnergySaverStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::EnergySaverStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_PowerSourceKindChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSourceKindChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::PowerSourceKindChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_PowerSourceKindChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSourceKindChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::PowerSourceKindChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_PowerSupplyStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSupplyStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::PowerSupplyStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_PowerSupplyStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"PowerSupplyStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::PowerSupplyStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_RemainingChargePercentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingChargePercentChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::RemainingChargePercentChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_RemainingChargePercentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingChargePercentChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::RemainingChargePercentChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_RemainingDischargeTimeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingDischargeTimeChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::RemainingDischargeTimeChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_RemainingDischargeTimeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"RemainingDischargeTimeChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::RemainingDischargeTimeChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_SystemIdleStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"SystemIdleStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::SystemIdleStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_SystemIdleStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"SystemIdleStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::SystemIdleStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_SystemSuspendStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"SystemSuspendStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::SystemSuspendStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_SystemSuspendStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"SystemSuspendStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::SystemSuspendStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_UserPresenceStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"UserPresenceStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Microsoft::Windows::System::Power::PowerManager::UserPresenceStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_UserPresenceStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.System.Power.PowerManager", L"UserPresenceStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Microsoft::Windows::System::Power::PowerManager::UserPresenceStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PowerManager[] = {
        { "add_battery_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_BatteryStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_battery_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_BatteryStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_display_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_DisplayStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_display_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_DisplayStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_effective_power_mode_changed", reinterpret_cast<PyCFunction>(PowerManager_add_EffectivePowerModeChanged), METH_O | METH_STATIC, nullptr },
        { "remove_effective_power_mode_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_EffectivePowerModeChanged), METH_O | METH_STATIC, nullptr },
        { "add_energy_saver_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_EnergySaverStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_energy_saver_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_EnergySaverStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_power_source_kind_changed", reinterpret_cast<PyCFunction>(PowerManager_add_PowerSourceKindChanged), METH_O | METH_STATIC, nullptr },
        { "remove_power_source_kind_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_PowerSourceKindChanged), METH_O | METH_STATIC, nullptr },
        { "add_power_supply_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_PowerSupplyStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_power_supply_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_PowerSupplyStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_remaining_charge_percent_changed", reinterpret_cast<PyCFunction>(PowerManager_add_RemainingChargePercentChanged), METH_O | METH_STATIC, nullptr },
        { "remove_remaining_charge_percent_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_RemainingChargePercentChanged), METH_O | METH_STATIC, nullptr },
        { "add_remaining_discharge_time_changed", reinterpret_cast<PyCFunction>(PowerManager_add_RemainingDischargeTimeChanged), METH_O | METH_STATIC, nullptr },
        { "remove_remaining_discharge_time_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_RemainingDischargeTimeChanged), METH_O | METH_STATIC, nullptr },
        { "add_system_idle_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_SystemIdleStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_system_idle_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_SystemIdleStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_system_suspend_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_SystemSuspendStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_system_suspend_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_SystemSuspendStatusChanged), METH_O | METH_STATIC, nullptr },
        { "add_user_presence_status_changed", reinterpret_cast<PyCFunction>(PowerManager_add_UserPresenceStatusChanged), METH_O | METH_STATIC, nullptr },
        { "remove_user_presence_status_changed", reinterpret_cast<PyCFunction>(PowerManager_remove_UserPresenceStatusChanged), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PowerManager[] = {
        { }
    };

    static PyType_Slot _type_slots_PowerManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PowerManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PowerManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PowerManager) },
        { },
    };

    static PyType_Spec type_spec_PowerManager =
    {
        "winrt._winrt_microsoft_windows_system_power.PowerManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PowerManager
    };

    static PyGetSetDef getset_PowerManager_Static[] = {
        { "battery_status", reinterpret_cast<getter>(PowerManager_get_BatteryStatus), nullptr, nullptr, nullptr },
        { "display_status", reinterpret_cast<getter>(PowerManager_get_DisplayStatus), nullptr, nullptr, nullptr },
        { "effective_power_mode", reinterpret_cast<getter>(PowerManager_get_EffectivePowerMode), nullptr, nullptr, nullptr },
        { "energy_saver_status", reinterpret_cast<getter>(PowerManager_get_EnergySaverStatus), nullptr, nullptr, nullptr },
        { "power_source_kind", reinterpret_cast<getter>(PowerManager_get_PowerSourceKind), nullptr, nullptr, nullptr },
        { "power_supply_status", reinterpret_cast<getter>(PowerManager_get_PowerSupplyStatus), nullptr, nullptr, nullptr },
        { "remaining_charge_percent", reinterpret_cast<getter>(PowerManager_get_RemainingChargePercent), nullptr, nullptr, nullptr },
        { "remaining_discharge_time", reinterpret_cast<getter>(PowerManager_get_RemainingDischargeTime), nullptr, nullptr, nullptr },
        { "system_suspend_status", reinterpret_cast<getter>(PowerManager_get_SystemSuspendStatus), nullptr, nullptr, nullptr },
        { "user_presence_status", reinterpret_cast<getter>(PowerManager_get_UserPresenceStatus), nullptr, nullptr, nullptr },
        { "effective_power_mode2", reinterpret_cast<getter>(PowerManager_get_EffectivePowerMode2), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_PowerManager_Static[] = {
        { }
    };

    static PyType_Slot type_slots_PowerManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PowerManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PowerManager_Static) },
        { }
    };

    static PyType_Spec type_spec_PowerManager_Static =
    {
        "winrt._winrt_microsoft_windows_system_power.PowerManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PowerManager_Static
    };

    // ----- Microsoft.Windows.System.Power Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::System::Power");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_system_power",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::System::Power

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_system_power(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::System::Power;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_PowerManager_Static{PyType_FromSpec(&type_spec_PowerManager_Static)};
    if (!type_PowerManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PowerManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PowerManager_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
