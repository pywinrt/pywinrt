# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage

from winrt.windows.gaming.preview.gamesenumeration import GameListCategory, GameListEntryLaunchableState
from winrt.windows.gaming.preview.gamesenumeration import GameListChangedEventHandler, GameListRemovedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class GameList_Static(type):
    @typing.overload
    def find_all_async(cls) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    @typing.overload
    def find_all_async(cls, package_family_name: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    def merge_entries_async(cls, left: typing.Optional[GameListEntry], right: typing.Optional[GameListEntry], /) -> winrt.windows.foundation.IAsyncOperation[GameListEntry]: ...
    def unmerge_entry_async(cls, merged_entry: typing.Optional[GameListEntry], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    def add_game_added(cls, handler: typing.Optional[GameListChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_game_added(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_game_removed(cls, handler: typing.Optional[GameListRemovedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_game_removed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_game_updated(cls, handler: typing.Optional[GameListChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_game_updated(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class GameList(winrt.system.Object, metaclass=GameList_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameList: ...

@typing.final
class GameListEntry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameListEntry: ...
    def launch_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def set_category_async(self, value: GameListCategory, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def set_launcher_executable_file_async(self, executable_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def set_launcher_executable_file_async(self, executable_file: typing.Optional[winrt.windows.storage.IStorageFile], launch_params: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def set_title_id_async(self, id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def category(self) -> GameListCategory: ...
    @_property
    def display_info(self) -> typing.Optional[winrt.windows.applicationmodel.AppDisplayInfo]: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...
    @_property
    def game_mode_configuration(self) -> typing.Optional[GameModeConfiguration]: ...
    @_property
    def launch_parameters(self) -> str: ...
    @_property
    def launchable_state(self) -> GameListEntryLaunchableState: ...
    @_property
    def launcher_executable(self) -> typing.Optional[winrt.windows.storage.IStorageFile]: ...
    @_property
    def title_id(self) -> str: ...

@typing.final
class GameModeConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameModeConfiguration: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def percent_gpu_time_allocated_to_game(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @percent_gpu_time_allocated_to_game.setter
    def percent_gpu_time_allocated_to_game(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def percent_gpu_memory_allocated_to_system_compositor(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @percent_gpu_memory_allocated_to_system_compositor.setter
    def percent_gpu_memory_allocated_to_system_compositor(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def percent_gpu_memory_allocated_to_game(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @percent_gpu_memory_allocated_to_game.setter
    def percent_gpu_memory_allocated_to_game(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_cpu_count(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_cpu_count.setter
    def max_cpu_count(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def cpu_exclusivity_mask_low(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @cpu_exclusivity_mask_low.setter
    def cpu_exclusivity_mask_low(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def cpu_exclusivity_mask_high(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @cpu_exclusivity_mask_high.setter
    def cpu_exclusivity_mask_high(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def affinitize_to_exclusive_cpus(self) -> bool: ...
    @affinitize_to_exclusive_cpus.setter
    def affinitize_to_exclusive_cpus(self, value: bool) -> None: ...
    @_property
    def related_process_names(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class GameModeUserConfiguration_Static(type):
    def get_default(cls) -> typing.Optional[GameModeUserConfiguration]: ...

@typing.final
class GameModeUserConfiguration(winrt.system.Object, metaclass=GameModeUserConfiguration_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameModeUserConfiguration: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def gaming_related_process_names(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class IGameListEntry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGameListEntry: ...
    def launch_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def set_category_async(self, value: GameListCategory, /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def category(self) -> GameListCategory: ...
    @_property
    def display_info(self) -> typing.Optional[winrt.windows.applicationmodel.AppDisplayInfo]: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...

