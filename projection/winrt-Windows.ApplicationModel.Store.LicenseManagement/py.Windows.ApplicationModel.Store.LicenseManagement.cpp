// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.Store.LicenseManagement.h"


namespace py::cpp::Windows::ApplicationModel::Store::LicenseManagement
{
    // ----- LicenseManager class --------------------

    static PyObject* _new_LicenseManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseManager>::type_name);
        return nullptr;
    }

    static PyObject* LicenseManager_AddLicenseAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseManager", L"AddLicenseAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseManager::AddLicenseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LicenseManager_GetSatisfactionInfosAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseManager", L"GetSatisfactionInfosAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseManager::GetSatisfactionInfosAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LicenseManager_RefreshLicensesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseManager", L"RefreshLicensesAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseRefreshOption>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseManager::RefreshLicensesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_LicenseManager[] = {
        { }
    };

    static PyGetSetDef _getset_LicenseManager[] = {
        { }
    };

    static PyType_Slot _type_slots_LicenseManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LicenseManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LicenseManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LicenseManager) },
        { },
    };

    static PyType_Spec type_spec_LicenseManager =
    {
        "winrt._winrt_windows_applicationmodel_store_licensemanagement.LicenseManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LicenseManager
    };

    static PyGetSetDef getset_LicenseManager_Static[] = {
        { }
    };

    static PyMethodDef methods_LicenseManager_Static[] = {
        { "add_license_async", reinterpret_cast<PyCFunction>(LicenseManager_AddLicenseAsync), METH_VARARGS, nullptr },
        { "get_satisfaction_infos_async", reinterpret_cast<PyCFunction>(LicenseManager_GetSatisfactionInfosAsync), METH_VARARGS, nullptr },
        { "refresh_licenses_async", reinterpret_cast<PyCFunction>(LicenseManager_RefreshLicensesAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_LicenseManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_LicenseManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_LicenseManager_Static) },
        { }
    };

    static PyType_Spec type_spec_LicenseManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_store_licensemanagement.LicenseManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_LicenseManager_Static
    };

    // ----- LicenseSatisfactionInfo class --------------------

    static PyObject* _new_LicenseSatisfactionInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_LicenseSatisfactionInfo(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LicenseSatisfactionInfo_get_IsSatisfied(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"IsSatisfied"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsSatisfied());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedByDevice(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedByDevice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedByDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedByInstallMedia(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedByInstallMedia"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedByInstallMedia());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedByOpenLicense(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedByOpenLicense"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedByOpenLicense());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedByPass(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedByPass"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedByPass());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedBySignedInUser(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedBySignedInUser"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedBySignedInUser());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionInfo_get_SatisfiedByTrial(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo", L"SatisfiedByTrial"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SatisfiedByTrial());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LicenseSatisfactionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LicenseSatisfactionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LicenseSatisfactionInfo[] = {
        { "_assign_array_", _assign_array_LicenseSatisfactionInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LicenseSatisfactionInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LicenseSatisfactionInfo[] = {
        { "is_satisfied", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_IsSatisfied), nullptr, nullptr, nullptr },
        { "satisfied_by_device", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedByDevice), nullptr, nullptr, nullptr },
        { "satisfied_by_install_media", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedByInstallMedia), nullptr, nullptr, nullptr },
        { "satisfied_by_open_license", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedByOpenLicense), nullptr, nullptr, nullptr },
        { "satisfied_by_pass", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedByPass), nullptr, nullptr, nullptr },
        { "satisfied_by_signed_in_user", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedBySignedInUser), nullptr, nullptr, nullptr },
        { "satisfied_by_trial", reinterpret_cast<getter>(LicenseSatisfactionInfo_get_SatisfiedByTrial), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LicenseSatisfactionInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LicenseSatisfactionInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LicenseSatisfactionInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LicenseSatisfactionInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LicenseSatisfactionInfo) },
        { },
    };

    static PyType_Spec type_spec_LicenseSatisfactionInfo =
    {
        "winrt._winrt_windows_applicationmodel_store_licensemanagement.LicenseSatisfactionInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LicenseSatisfactionInfo
    };

    // ----- LicenseSatisfactionResult class --------------------

    static PyObject* _new_LicenseSatisfactionResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult>::type_name);
        return nullptr;
    }

    static void _dealloc_LicenseSatisfactionResult(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LicenseSatisfactionResult_get_ExtendedError(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult", L"ExtendedError"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendedError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LicenseSatisfactionResult_get_LicenseSatisfactionInfos(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult", L"LicenseSatisfactionInfos"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LicenseSatisfactionInfos());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_LicenseSatisfactionResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_LicenseSatisfactionResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LicenseSatisfactionResult[] = {
        { "_assign_array_", _assign_array_LicenseSatisfactionResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LicenseSatisfactionResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LicenseSatisfactionResult[] = {
        { "extended_error", reinterpret_cast<getter>(LicenseSatisfactionResult_get_ExtendedError), nullptr, nullptr, nullptr },
        { "license_satisfaction_infos", reinterpret_cast<getter>(LicenseSatisfactionResult_get_LicenseSatisfactionInfos), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LicenseSatisfactionResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LicenseSatisfactionResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_LicenseSatisfactionResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LicenseSatisfactionResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LicenseSatisfactionResult) },
        { },
    };

    static PyType_Spec type_spec_LicenseSatisfactionResult =
    {
        "winrt._winrt_windows_applicationmodel_store_licensemanagement.LicenseSatisfactionResult",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LicenseSatisfactionResult
    };

    // ----- Windows.ApplicationModel.Store.LicenseManagement Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Store::LicenseManagement");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_store_licensemanagement",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Store::LicenseManagement

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_store_licensemanagement(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Store::LicenseManagement;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_LicenseManager_Static{PyType_FromSpec(&type_spec_LicenseManager_Static)};
    if (!type_LicenseManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_LicenseManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_LicenseManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_LicenseSatisfactionInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_LicenseSatisfactionResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
