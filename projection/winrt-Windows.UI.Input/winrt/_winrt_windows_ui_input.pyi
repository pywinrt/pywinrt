# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.devices.haptics as windows_devices_haptics
import winrt.windows.devices.input as windows_devices_input
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system
import winrt.windows.ui.core as windows_ui_core

from winrt.windows.ui.input import CrossSlidingState, DraggingState, EdgeGestureKind, GazeInputAccessStatus, GestureSettings, HoldingState, InputActivationState, PointerUpdateKind, RadialControllerMenuKnownIcon, RadialControllerSystemMenuItemKind, TouchpadGlobalAction, TouchpadGlobalGestureKinds

Self = typing.TypeVar('Self')

@typing.final
class CrossSlideThresholds:
    @_property
    def selection_start(self) -> winrt.system.Single: ...
    @_property
    def speed_bump_start(self) -> winrt.system.Single: ...
    @_property
    def speed_bump_end(self) -> winrt.system.Single: ...
    @_property
    def rearrange_start(self) -> winrt.system.Single: ...
    def __new__(cls, selection_start: winrt.system.Single = 0, speed_bump_start: winrt.system.Single = 0, speed_bump_end: winrt.system.Single = 0, rearrange_start: winrt.system.Single = 0) -> CrossSlideThresholds: ...
    def __replace__(self, /, **changes: typing.Any) -> CrossSlideThresholds: ...
    def unpack(self) -> typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single, winrt.system.Single]: ...

@typing.final
class ManipulationDelta:
    @_property
    def translation(self) -> windows_foundation.Point: ...
    @_property
    def scale(self) -> winrt.system.Single: ...
    @_property
    def rotation(self) -> winrt.system.Single: ...
    @_property
    def expansion(self) -> winrt.system.Single: ...
    def __new__(cls, translation: windows_foundation.Point = windows_foundation.Point(), scale: winrt.system.Single = 0, rotation: winrt.system.Single = 0, expansion: winrt.system.Single = 0) -> ManipulationDelta: ...
    def __replace__(self, /, **changes: typing.Any) -> ManipulationDelta: ...
    def unpack(self) -> typing.Tuple[typing.Tuple[winrt.system.Single, winrt.system.Single], winrt.system.Single, winrt.system.Single, winrt.system.Single]: ...

@typing.final
class ManipulationVelocities:
    @_property
    def linear(self) -> windows_foundation.Point: ...
    @_property
    def angular(self) -> winrt.system.Single: ...
    @_property
    def expansion(self) -> winrt.system.Single: ...
    def __new__(cls, linear: windows_foundation.Point = windows_foundation.Point(), angular: winrt.system.Single = 0, expansion: winrt.system.Single = 0) -> ManipulationVelocities: ...
    def __replace__(self, /, **changes: typing.Any) -> ManipulationVelocities: ...
    def unpack(self) -> typing.Tuple[typing.Tuple[winrt.system.Single, winrt.system.Single], winrt.system.Single, winrt.system.Single]: ...

class AttachableInputObject_Static(winrt._winrt.IInspectable_Static):
    pass

class AttachableInputObject(winrt.system.Object, windows_foundation.IClosable, metaclass=AttachableInputObject_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.UI.Input.AttachableInputObject::Close()
    def close(self) -> None: ...

@typing.final
class CrossSlidingEventArgs(winrt.system.Object):
    # Windows.UI.Input.CrossSlidingState Windows.UI.Input.CrossSlidingEventArgs::get_CrossSlidingState()
    @_property
    def cross_sliding_state(self) -> CrossSlidingState: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.CrossSlidingEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.CrossSlidingEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.CrossSlidingEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class DraggingEventArgs(winrt.system.Object):
    # Windows.UI.Input.DraggingState Windows.UI.Input.DraggingEventArgs::get_DraggingState()
    @_property
    def dragging_state(self) -> DraggingState: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.DraggingEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.DraggingEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.DraggingEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class EdgeGesture_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.EdgeGesture Windows.UI.Input.EdgeGesture::GetForCurrentView()
    def get_for_current_view(cls) -> EdgeGesture: ...

@typing.final
class EdgeGesture(winrt.system.Object, metaclass=EdgeGesture_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.EdgeGesture::add_Canceled(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.EdgeGesture,Windows.UI.Input.EdgeGestureEventArgs>)
    def add_canceled(self, handler: windows_foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.EdgeGesture::remove_Canceled(Windows.Foundation.EventRegistrationToken)
    def remove_canceled(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.EdgeGesture::add_Completed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.EdgeGesture,Windows.UI.Input.EdgeGestureEventArgs>)
    def add_completed(self, handler: windows_foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.EdgeGesture::remove_Completed(Windows.Foundation.EventRegistrationToken)
    def remove_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.EdgeGesture::add_Starting(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.EdgeGesture,Windows.UI.Input.EdgeGestureEventArgs>)
    def add_starting(self, handler: windows_foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.EdgeGesture::remove_Starting(Windows.Foundation.EventRegistrationToken)
    def remove_starting(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class EdgeGestureEventArgs(winrt.system.Object):
    # Windows.UI.Input.EdgeGestureKind Windows.UI.Input.EdgeGestureEventArgs::get_Kind()
    @_property
    def kind(self) -> EdgeGestureKind: ...

@typing.final
class GestureRecognizer(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::CanBeDoubleTap(Windows.UI.Input.PointerPoint)
    def can_be_double_tap(self, value: PointerPoint, /) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::CompleteGesture()
    def complete_gesture(self) -> None: ...
    # System.Void Windows.UI.Input.GestureRecognizer::ProcessDownEvent(Windows.UI.Input.PointerPoint)
    def process_down_event(self, value: PointerPoint, /) -> None: ...
    # System.Void Windows.UI.Input.GestureRecognizer::ProcessInertia()
    def process_inertia(self) -> None: ...
    # System.Void Windows.UI.Input.GestureRecognizer::ProcessMouseWheelEvent(Windows.UI.Input.PointerPoint,System.Boolean,System.Boolean)
    def process_mouse_wheel_event(self, value: PointerPoint, is_shift_key_down: bool, is_control_key_down: bool, /) -> None: ...
    # System.Void Windows.UI.Input.GestureRecognizer::ProcessMoveEvents(Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint>)
    def process_move_events(self, value: typing.MutableSequence[PointerPoint], /) -> None: ...
    # System.Void Windows.UI.Input.GestureRecognizer::ProcessUpEvent(Windows.UI.Input.PointerPoint)
    def process_up_event(self, value: PointerPoint, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_CrossSliding(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.CrossSlidingEventArgs>)
    def add_cross_sliding(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, CrossSlidingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_CrossSliding(Windows.Foundation.EventRegistrationToken)
    def remove_cross_sliding(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_Dragging(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.DraggingEventArgs>)
    def add_dragging(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, DraggingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_Dragging(Windows.Foundation.EventRegistrationToken)
    def remove_dragging(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_Holding(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.HoldingEventArgs>)
    def add_holding(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, HoldingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_Holding(Windows.Foundation.EventRegistrationToken)
    def remove_holding(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_ManipulationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.ManipulationCompletedEventArgs>)
    def add_manipulation_completed(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, ManipulationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_ManipulationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_ManipulationInertiaStarting(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.ManipulationInertiaStartingEventArgs>)
    def add_manipulation_inertia_starting(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, ManipulationInertiaStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_ManipulationInertiaStarting(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_inertia_starting(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_ManipulationStarted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.ManipulationStartedEventArgs>)
    def add_manipulation_started(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, ManipulationStartedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_ManipulationStarted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_started(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_ManipulationUpdated(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.ManipulationUpdatedEventArgs>)
    def add_manipulation_updated(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, ManipulationUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_ManipulationUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_updated(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_RightTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.RightTappedEventArgs>)
    def add_right_tapped(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, RightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_RightTapped(Windows.Foundation.EventRegistrationToken)
    def remove_right_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.GestureRecognizer::add_Tapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.GestureRecognizer,Windows.UI.Input.TappedEventArgs>)
    def add_tapped(self, handler: windows_foundation.TypedEventHandler[GestureRecognizer, TappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.GestureRecognizer::remove_Tapped(Windows.Foundation.EventRegistrationToken)
    def remove_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_ShowGestureFeedback()
    @_property
    def show_gesture_feedback(self) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_ShowGestureFeedback(System.Boolean)
    @show_gesture_feedback.setter
    def show_gesture_feedback(self, value: bool) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_PivotRadius()
    @_property
    def pivot_radius(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_PivotRadius(System.Single)
    @pivot_radius.setter
    def pivot_radius(self, value: winrt.system.Single) -> None: ...
    # Windows.Foundation.Point Windows.UI.Input.GestureRecognizer::get_PivotCenter()
    @_property
    def pivot_center(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_PivotCenter(Windows.Foundation.Point)
    @pivot_center.setter
    def pivot_center(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_ManipulationExact()
    @_property
    def manipulation_exact(self) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_ManipulationExact(System.Boolean)
    @manipulation_exact.setter
    def manipulation_exact(self, value: bool) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaTranslationDisplacement()
    @_property
    def inertia_translation_displacement(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaTranslationDisplacement(System.Single)
    @inertia_translation_displacement.setter
    def inertia_translation_displacement(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaTranslationDeceleration()
    @_property
    def inertia_translation_deceleration(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaTranslationDeceleration(System.Single)
    @inertia_translation_deceleration.setter
    def inertia_translation_deceleration(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaRotationDeceleration()
    @_property
    def inertia_rotation_deceleration(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaRotationDeceleration(System.Single)
    @inertia_rotation_deceleration.setter
    def inertia_rotation_deceleration(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaRotationAngle()
    @_property
    def inertia_rotation_angle(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaRotationAngle(System.Single)
    @inertia_rotation_angle.setter
    def inertia_rotation_angle(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaExpansionDeceleration()
    @_property
    def inertia_expansion_deceleration(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaExpansionDeceleration(System.Single)
    @inertia_expansion_deceleration.setter
    def inertia_expansion_deceleration(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_InertiaExpansion()
    @_property
    def inertia_expansion(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_InertiaExpansion(System.Single)
    @inertia_expansion.setter
    def inertia_expansion(self, value: winrt.system.Single) -> None: ...
    # Windows.UI.Input.GestureSettings Windows.UI.Input.GestureRecognizer::get_GestureSettings()
    @_property
    def gesture_settings(self) -> GestureSettings: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_GestureSettings(Windows.UI.Input.GestureSettings)
    @gesture_settings.setter
    def gesture_settings(self, value: GestureSettings) -> None: ...
    # Windows.UI.Input.CrossSlideThresholds Windows.UI.Input.GestureRecognizer::get_CrossSlideThresholds()
    @_property
    def cross_slide_thresholds(self) -> CrossSlideThresholds: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_CrossSlideThresholds(Windows.UI.Input.CrossSlideThresholds)
    @cross_slide_thresholds.setter
    def cross_slide_thresholds(self, value: typing.Union[CrossSlideThresholds, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single, winrt.system.Single]]) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_CrossSlideHorizontally()
    @_property
    def cross_slide_horizontally(self) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_CrossSlideHorizontally(System.Boolean)
    @cross_slide_horizontally.setter
    def cross_slide_horizontally(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_CrossSlideExact()
    @_property
    def cross_slide_exact(self) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_CrossSlideExact(System.Boolean)
    @cross_slide_exact.setter
    def cross_slide_exact(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_AutoProcessInertia()
    @_property
    def auto_process_inertia(self) -> bool: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_AutoProcessInertia(System.Boolean)
    @auto_process_inertia.setter
    def auto_process_inertia(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.Boolean Windows.UI.Input.GestureRecognizer::get_IsInertial()
    @_property
    def is_inertial(self) -> bool: ...
    # Windows.UI.Input.MouseWheelParameters Windows.UI.Input.GestureRecognizer::get_MouseWheelParameters()
    @_property
    def mouse_wheel_parameters(self) -> MouseWheelParameters: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_TranslationMinContactCount()
    @_property
    def translation_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_TranslationMinContactCount(System.UInt32)
    @translation_min_contact_count.setter
    def translation_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_TranslationMaxContactCount()
    @_property
    def translation_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_TranslationMaxContactCount(System.UInt32)
    @translation_max_contact_count.setter
    def translation_max_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_TapMinContactCount()
    @_property
    def tap_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_TapMinContactCount(System.UInt32)
    @tap_min_contact_count.setter
    def tap_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_TapMaxContactCount()
    @_property
    def tap_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_TapMaxContactCount(System.UInt32)
    @tap_max_contact_count.setter
    def tap_max_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.UI.Input.GestureRecognizer::get_HoldStartDelay()
    @_property
    def hold_start_delay(self) -> datetime.timedelta: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_HoldStartDelay(Windows.Foundation.TimeSpan)
    @hold_start_delay.setter
    def hold_start_delay(self, value: datetime.timedelta) -> None: ...
    # System.Single Windows.UI.Input.GestureRecognizer::get_HoldRadius()
    @_property
    def hold_radius(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_HoldRadius(System.Single)
    @hold_radius.setter
    def hold_radius(self, value: winrt.system.Single) -> None: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_HoldMinContactCount()
    @_property
    def hold_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_HoldMinContactCount(System.UInt32)
    @hold_min_contact_count.setter
    def hold_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.GestureRecognizer::get_HoldMaxContactCount()
    @_property
    def hold_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.GestureRecognizer::put_HoldMaxContactCount(System.UInt32)
    @hold_max_contact_count.setter
    def hold_max_contact_count(self, value: winrt.system.UInt32) -> None: ...

@typing.final
class HoldingEventArgs(winrt.system.Object):
    # Windows.UI.Input.HoldingState Windows.UI.Input.HoldingEventArgs::get_HoldingState()
    @_property
    def holding_state(self) -> HoldingState: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.HoldingEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.HoldingEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.HoldingEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.Input.HoldingEventArgs::get_CurrentContactCount()
    @_property
    def current_contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class InputActivationListener(AttachableInputObject):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.InputActivationListener::add_InputActivationChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.InputActivationListener,Windows.UI.Input.InputActivationListenerActivationChangedEventArgs>)
    def add_input_activation_changed(self, handler: windows_foundation.TypedEventHandler[InputActivationListener, InputActivationListenerActivationChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.InputActivationListener::remove_InputActivationChanged(Windows.Foundation.EventRegistrationToken)
    def remove_input_activation_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.UI.Input.InputActivationState Windows.UI.Input.InputActivationListener::get_State()
    @_property
    def state(self) -> InputActivationState: ...

@typing.final
class InputActivationListenerActivationChangedEventArgs(winrt.system.Object):
    # Windows.UI.Input.InputActivationState Windows.UI.Input.InputActivationListenerActivationChangedEventArgs::get_State()
    @_property
    def state(self) -> InputActivationState: ...

@typing.final
class KeyboardDeliveryInterceptor_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.KeyboardDeliveryInterceptor Windows.UI.Input.KeyboardDeliveryInterceptor::GetForCurrentView()
    def get_for_current_view(cls) -> KeyboardDeliveryInterceptor: ...

@typing.final
class KeyboardDeliveryInterceptor(winrt.system.Object, metaclass=KeyboardDeliveryInterceptor_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.KeyboardDeliveryInterceptor::add_KeyDown(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.KeyboardDeliveryInterceptor,Windows.UI.Core.KeyEventArgs>)
    def add_key_down(self, handler: windows_foundation.TypedEventHandler[KeyboardDeliveryInterceptor, windows_ui_core.KeyEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.KeyboardDeliveryInterceptor::remove_KeyDown(Windows.Foundation.EventRegistrationToken)
    def remove_key_down(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.KeyboardDeliveryInterceptor::add_KeyUp(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.KeyboardDeliveryInterceptor,Windows.UI.Core.KeyEventArgs>)
    def add_key_up(self, handler: windows_foundation.TypedEventHandler[KeyboardDeliveryInterceptor, windows_ui_core.KeyEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.KeyboardDeliveryInterceptor::remove_KeyUp(Windows.Foundation.EventRegistrationToken)
    def remove_key_up(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.UI.Input.KeyboardDeliveryInterceptor::get_IsInterceptionEnabledWhenInForeground()
    @_property
    def is_interception_enabled_when_in_foreground(self) -> bool: ...
    # System.Void Windows.UI.Input.KeyboardDeliveryInterceptor::put_IsInterceptionEnabledWhenInForeground(System.Boolean)
    @is_interception_enabled_when_in_foreground.setter
    def is_interception_enabled_when_in_foreground(self, value: bool) -> None: ...

@typing.final
class ManipulationCompletedEventArgs(winrt.system.Object):
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationCompletedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.ManipulationCompletedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.ManipulationCompletedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Input.ManipulationCompletedEventArgs::get_Velocities()
    @_property
    def velocities(self) -> ManipulationVelocities: ...
    # System.UInt32 Windows.UI.Input.ManipulationCompletedEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.Input.ManipulationCompletedEventArgs::get_CurrentContactCount()
    @_property
    def current_contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class ManipulationInertiaStartingEventArgs(winrt.system.Object):
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> ManipulationDelta: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_Delta()
    @_property
    def delta(self) -> ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_Velocities()
    @_property
    def velocities(self) -> ManipulationVelocities: ...
    # System.UInt32 Windows.UI.Input.ManipulationInertiaStartingEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class ManipulationStartedEventArgs(winrt.system.Object):
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationStartedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.ManipulationStartedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.ManipulationStartedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.ManipulationStartedEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class ManipulationUpdatedEventArgs(winrt.system.Object):
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationUpdatedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> ManipulationDelta: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Input.ManipulationUpdatedEventArgs::get_Delta()
    @_property
    def delta(self) -> ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.ManipulationUpdatedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.ManipulationUpdatedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Input.ManipulationUpdatedEventArgs::get_Velocities()
    @_property
    def velocities(self) -> ManipulationVelocities: ...
    # System.UInt32 Windows.UI.Input.ManipulationUpdatedEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.Input.ManipulationUpdatedEventArgs::get_CurrentContactCount()
    @_property
    def current_contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class MouseWheelParameters(winrt.system.Object):
    # Windows.Foundation.Point Windows.UI.Input.MouseWheelParameters::get_PageTranslation()
    @_property
    def page_translation(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Input.MouseWheelParameters::put_PageTranslation(Windows.Foundation.Point)
    @page_translation.setter
    def page_translation(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...
    # System.Single Windows.UI.Input.MouseWheelParameters::get_DeltaScale()
    @_property
    def delta_scale(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.MouseWheelParameters::put_DeltaScale(System.Single)
    @delta_scale.setter
    def delta_scale(self, value: winrt.system.Single) -> None: ...
    # System.Single Windows.UI.Input.MouseWheelParameters::get_DeltaRotationAngle()
    @_property
    def delta_rotation_angle(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.MouseWheelParameters::put_DeltaRotationAngle(System.Single)
    @delta_rotation_angle.setter
    def delta_rotation_angle(self, value: winrt.system.Single) -> None: ...
    # Windows.Foundation.Point Windows.UI.Input.MouseWheelParameters::get_CharTranslation()
    @_property
    def char_translation(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Input.MouseWheelParameters::put_CharTranslation(Windows.Foundation.Point)
    @char_translation.setter
    def char_translation(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...

@typing.final
class PhysicalGestureRecognizer(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::CompleteGesture()
    def complete_gesture(self) -> None: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::ProcessDownEvent(Windows.UI.Input.PointerPoint)
    def process_down_event(self, value: PointerPoint, /) -> None: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::ProcessMoveEvents(Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint>)
    def process_move_events(self, value: typing.MutableSequence[PointerPoint], /) -> None: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::ProcessUpEvent(Windows.UI.Input.PointerPoint)
    def process_up_event(self, value: PointerPoint, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.PhysicalGestureRecognizer::add_Holding(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.PhysicalGestureRecognizer,Windows.UI.Input.HoldingEventArgs>)
    def add_holding(self, handler: windows_foundation.TypedEventHandler[PhysicalGestureRecognizer, HoldingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::remove_Holding(Windows.Foundation.EventRegistrationToken)
    def remove_holding(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.PhysicalGestureRecognizer::add_ManipulationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.PhysicalGestureRecognizer,Windows.UI.Input.ManipulationCompletedEventArgs>)
    def add_manipulation_completed(self, handler: windows_foundation.TypedEventHandler[PhysicalGestureRecognizer, ManipulationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::remove_ManipulationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.PhysicalGestureRecognizer::add_ManipulationStarted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.PhysicalGestureRecognizer,Windows.UI.Input.ManipulationStartedEventArgs>)
    def add_manipulation_started(self, handler: windows_foundation.TypedEventHandler[PhysicalGestureRecognizer, ManipulationStartedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::remove_ManipulationStarted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_started(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.PhysicalGestureRecognizer::add_ManipulationUpdated(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.PhysicalGestureRecognizer,Windows.UI.Input.ManipulationUpdatedEventArgs>)
    def add_manipulation_updated(self, handler: windows_foundation.TypedEventHandler[PhysicalGestureRecognizer, ManipulationUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::remove_ManipulationUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_updated(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.PhysicalGestureRecognizer::add_Tapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.PhysicalGestureRecognizer,Windows.UI.Input.TappedEventArgs>)
    def add_tapped(self, handler: windows_foundation.TypedEventHandler[PhysicalGestureRecognizer, TappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::remove_Tapped(Windows.Foundation.EventRegistrationToken)
    def remove_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_TranslationMinContactCount()
    @_property
    def translation_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_TranslationMinContactCount(System.UInt32)
    @translation_min_contact_count.setter
    def translation_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_TranslationMaxContactCount()
    @_property
    def translation_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_TranslationMaxContactCount(System.UInt32)
    @translation_max_contact_count.setter
    def translation_max_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_TapMinContactCount()
    @_property
    def tap_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_TapMinContactCount(System.UInt32)
    @tap_min_contact_count.setter
    def tap_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_TapMaxContactCount()
    @_property
    def tap_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_TapMaxContactCount(System.UInt32)
    @tap_max_contact_count.setter
    def tap_max_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.UI.Input.PhysicalGestureRecognizer::get_HoldStartDelay()
    @_property
    def hold_start_delay(self) -> datetime.timedelta: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_HoldStartDelay(Windows.Foundation.TimeSpan)
    @hold_start_delay.setter
    def hold_start_delay(self, value: datetime.timedelta) -> None: ...
    # System.Single Windows.UI.Input.PhysicalGestureRecognizer::get_HoldRadius()
    @_property
    def hold_radius(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_HoldRadius(System.Single)
    @hold_radius.setter
    def hold_radius(self, value: winrt.system.Single) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_HoldMinContactCount()
    @_property
    def hold_min_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_HoldMinContactCount(System.UInt32)
    @hold_min_contact_count.setter
    def hold_min_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.UI.Input.PhysicalGestureRecognizer::get_HoldMaxContactCount()
    @_property
    def hold_max_contact_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_HoldMaxContactCount(System.UInt32)
    @hold_max_contact_count.setter
    def hold_max_contact_count(self, value: winrt.system.UInt32) -> None: ...
    # Windows.UI.Input.GestureSettings Windows.UI.Input.PhysicalGestureRecognizer::get_GestureSettings()
    @_property
    def gesture_settings(self) -> GestureSettings: ...
    # System.Void Windows.UI.Input.PhysicalGestureRecognizer::put_GestureSettings(Windows.UI.Input.GestureSettings)
    @gesture_settings.setter
    def gesture_settings(self, value: GestureSettings) -> None: ...

@typing.final
class PointerPoint_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.PointerPoint Windows.UI.Input.PointerPoint::GetCurrentPoint(System.UInt32)
    def get_current_point(cls, pointer_id: winrt.system.UInt32, /) -> PointerPoint: ...
    # Windows.UI.Input.PointerPoint Windows.UI.Input.PointerPoint::GetCurrentPoint(System.UInt32,Windows.UI.Input.IPointerPointTransform)
    def get_current_point_transformed(cls, pointer_id: winrt.system.UInt32, transform: IPointerPointTransform, /) -> PointerPoint: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint> Windows.UI.Input.PointerPoint::GetIntermediatePoints(System.UInt32)
    def get_intermediate_points(cls, pointer_id: winrt.system.UInt32, /) -> typing.MutableSequence[PointerPoint]: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint> Windows.UI.Input.PointerPoint::GetIntermediatePoints(System.UInt32,Windows.UI.Input.IPointerPointTransform)
    def get_intermediate_points_transformed(cls, pointer_id: winrt.system.UInt32, transform: IPointerPointTransform, /) -> typing.MutableSequence[PointerPoint]: ...

@typing.final
class PointerPoint(winrt.system.Object, metaclass=PointerPoint_Static):
    # System.UInt32 Windows.UI.Input.PointerPoint::get_FrameId()
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.UI.Input.PointerPoint::get_IsInContact()
    @_property
    def is_in_contact(self) -> bool: ...
    # Windows.Devices.Input.PointerDevice Windows.UI.Input.PointerPoint::get_PointerDevice()
    @_property
    def pointer_device(self) -> windows_devices_input.PointerDevice: ...
    # System.UInt32 Windows.UI.Input.PointerPoint::get_PointerId()
    @_property
    def pointer_id(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Point Windows.UI.Input.PointerPoint::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.PointerPointProperties Windows.UI.Input.PointerPoint::get_Properties()
    @_property
    def properties(self) -> PointerPointProperties: ...
    # Windows.Foundation.Point Windows.UI.Input.PointerPoint::get_RawPosition()
    @_property
    def raw_position(self) -> windows_foundation.Point: ...
    # System.UInt64 Windows.UI.Input.PointerPoint::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...
    # System.Boolean Windows.UI.Input.PointerPoint::get_IsPhysicalPositionSupported()
    @_property
    def is_physical_position_supported(self) -> bool: ...
    # Windows.Foundation.Point Windows.UI.Input.PointerPoint::get_PhysicalPosition()
    @_property
    def physical_position(self) -> windows_foundation.Point: ...

@typing.final
class PointerPointProperties(winrt.system.Object):
    # System.Int32 Windows.UI.Input.PointerPointProperties::GetUsageValue(System.UInt32,System.UInt32)
    def get_usage_value(self, usage_page: winrt.system.UInt32, usage_id: winrt.system.UInt32, /) -> winrt.system.Int32: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::HasUsage(System.UInt32,System.UInt32)
    def has_usage(self, usage_page: winrt.system.UInt32, usage_id: winrt.system.UInt32, /) -> bool: ...
    # Windows.Foundation.Rect Windows.UI.Input.PointerPointProperties::get_ContactRect()
    @_property
    def contact_rect(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.PointerPointProperties::get_ContactRectRaw()
    @_property
    def contact_rect_raw(self) -> windows_foundation.Rect: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsBarrelButtonPressed()
    @_property
    def is_barrel_button_pressed(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsCanceled()
    @_property
    def is_canceled(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsEraser()
    @_property
    def is_eraser(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsHorizontalMouseWheel()
    @_property
    def is_horizontal_mouse_wheel(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsInRange()
    @_property
    def is_in_range(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsInverted()
    @_property
    def is_inverted(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsLeftButtonPressed()
    @_property
    def is_left_button_pressed(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsMiddleButtonPressed()
    @_property
    def is_middle_button_pressed(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsPrimary()
    @_property
    def is_primary(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsRightButtonPressed()
    @_property
    def is_right_button_pressed(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsXButton1Pressed()
    @_property
    def is_x_button1_pressed(self) -> bool: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_IsXButton2Pressed()
    @_property
    def is_x_button2_pressed(self) -> bool: ...
    # System.Int32 Windows.UI.Input.PointerPointProperties::get_MouseWheelDelta()
    @_property
    def mouse_wheel_delta(self) -> winrt.system.Int32: ...
    # System.Single Windows.UI.Input.PointerPointProperties::get_Orientation()
    @_property
    def orientation(self) -> winrt.system.Single: ...
    # Windows.UI.Input.PointerUpdateKind Windows.UI.Input.PointerPointProperties::get_PointerUpdateKind()
    @_property
    def pointer_update_kind(self) -> PointerUpdateKind: ...
    # System.Single Windows.UI.Input.PointerPointProperties::get_Pressure()
    @_property
    def pressure(self) -> winrt.system.Single: ...
    # System.Boolean Windows.UI.Input.PointerPointProperties::get_TouchConfidence()
    @_property
    def touch_confidence(self) -> bool: ...
    # System.Single Windows.UI.Input.PointerPointProperties::get_Twist()
    @_property
    def twist(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.PointerPointProperties::get_XTilt()
    @_property
    def x_tilt(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.PointerPointProperties::get_YTilt()
    @_property
    def y_tilt(self) -> winrt.system.Single: ...
    # Windows.Foundation.IReference`1<System.Single> Windows.UI.Input.PointerPointProperties::get_ZDistance()
    @_property
    def z_distance(self) -> typing.Optional[winrt.system.Single]: ...

@typing.final
class PointerVisualizationSettings_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.PointerVisualizationSettings Windows.UI.Input.PointerVisualizationSettings::GetForCurrentView()
    def get_for_current_view(cls) -> PointerVisualizationSettings: ...

@typing.final
class PointerVisualizationSettings(winrt.system.Object, metaclass=PointerVisualizationSettings_Static):
    # System.Boolean Windows.UI.Input.PointerVisualizationSettings::get_IsContactFeedbackEnabled()
    @_property
    def is_contact_feedback_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.PointerVisualizationSettings::put_IsContactFeedbackEnabled(System.Boolean)
    @is_contact_feedback_enabled.setter
    def is_contact_feedback_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.PointerVisualizationSettings::get_IsBarrelButtonFeedbackEnabled()
    @_property
    def is_barrel_button_feedback_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.PointerVisualizationSettings::put_IsBarrelButtonFeedbackEnabled(System.Boolean)
    @is_barrel_button_feedback_enabled.setter
    def is_barrel_button_feedback_enabled(self, value: bool) -> None: ...

@typing.final
class RadialController_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.RadialController Windows.UI.Input.RadialController::CreateForCurrentView()
    def create_for_current_view(cls) -> RadialController: ...
    # System.Boolean Windows.UI.Input.RadialController::IsSupported()
    def is_supported(cls) -> bool: ...

@typing.final
class RadialController(winrt.system.Object, metaclass=RadialController_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ButtonClicked(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerButtonClickedEventArgs>)
    def add_button_clicked(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerButtonClickedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ButtonClicked(Windows.Foundation.EventRegistrationToken)
    def remove_button_clicked(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ControlAcquired(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerControlAcquiredEventArgs>)
    def add_control_acquired(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerControlAcquiredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ControlAcquired(Windows.Foundation.EventRegistrationToken)
    def remove_control_acquired(self, cookie: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ControlLost(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,System.Object>)
    def add_control_lost(self, handler: windows_foundation.TypedEventHandler[RadialController, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ControlLost(Windows.Foundation.EventRegistrationToken)
    def remove_control_lost(self, cookie: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_RotationChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerRotationChangedEventArgs>)
    def add_rotation_changed(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerRotationChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_RotationChanged(Windows.Foundation.EventRegistrationToken)
    def remove_rotation_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ScreenContactContinued(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs>)
    def add_screen_contact_continued(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerScreenContactContinuedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ScreenContactContinued(Windows.Foundation.EventRegistrationToken)
    def remove_screen_contact_continued(self, cookie: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ScreenContactEnded(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,System.Object>)
    def add_screen_contact_ended(self, handler: windows_foundation.TypedEventHandler[RadialController, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ScreenContactEnded(Windows.Foundation.EventRegistrationToken)
    def remove_screen_contact_ended(self, cookie: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ScreenContactStarted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerScreenContactStartedEventArgs>)
    def add_screen_contact_started(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerScreenContactStartedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ScreenContactStarted(Windows.Foundation.EventRegistrationToken)
    def remove_screen_contact_started(self, cookie: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ButtonHolding(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerButtonHoldingEventArgs>)
    def add_button_holding(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerButtonHoldingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ButtonHolding(Windows.Foundation.EventRegistrationToken)
    def remove_button_holding(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ButtonPressed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerButtonPressedEventArgs>)
    def add_button_pressed(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerButtonPressedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ButtonPressed(Windows.Foundation.EventRegistrationToken)
    def remove_button_pressed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialController::add_ButtonReleased(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialController,Windows.UI.Input.RadialControllerButtonReleasedEventArgs>)
    def add_button_released(self, handler: windows_foundation.TypedEventHandler[RadialController, RadialControllerButtonReleasedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialController::remove_ButtonReleased(Windows.Foundation.EventRegistrationToken)
    def remove_button_released(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.UI.Input.RadialController::get_UseAutomaticHapticFeedback()
    @_property
    def use_automatic_haptic_feedback(self) -> bool: ...
    # System.Void Windows.UI.Input.RadialController::put_UseAutomaticHapticFeedback(System.Boolean)
    @use_automatic_haptic_feedback.setter
    def use_automatic_haptic_feedback(self, value: bool) -> None: ...
    # System.Double Windows.UI.Input.RadialController::get_RotationResolutionInDegrees()
    @_property
    def rotation_resolution_in_degrees(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Input.RadialController::put_RotationResolutionInDegrees(System.Double)
    @rotation_resolution_in_degrees.setter
    def rotation_resolution_in_degrees(self, value: winrt.system.Double) -> None: ...
    # Windows.UI.Input.RadialControllerMenu Windows.UI.Input.RadialController::get_Menu()
    @_property
    def menu(self) -> RadialControllerMenu: ...

@typing.final
class RadialControllerButtonClickedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerButtonClickedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerButtonClickedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerButtonHoldingEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerButtonHoldingEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerButtonHoldingEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerButtonPressedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerButtonPressedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerButtonPressedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerButtonReleasedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerButtonReleasedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerButtonReleasedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerConfiguration_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.RadialControllerConfiguration Windows.UI.Input.RadialControllerConfiguration::GetForCurrentView()
    def get_for_current_view(cls) -> RadialControllerConfiguration: ...
    # System.Boolean Windows.UI.Input.RadialControllerConfiguration::get_IsAppControllerEnabled()
    @_property
    def is_app_controller_enabled(cls) -> bool: ...
    # System.Void Windows.UI.Input.RadialControllerConfiguration::put_IsAppControllerEnabled(System.Boolean)
    @is_app_controller_enabled.setter
    def is_app_controller_enabled(cls, value: bool) -> None: ...
    # Windows.UI.Input.RadialController Windows.UI.Input.RadialControllerConfiguration::get_AppController()
    @_property
    def app_controller(cls) -> RadialController: ...
    # System.Void Windows.UI.Input.RadialControllerConfiguration::put_AppController(Windows.UI.Input.RadialController)
    @app_controller.setter
    def app_controller(cls, value: RadialController) -> None: ...

@typing.final
class RadialControllerConfiguration(winrt.system.Object, metaclass=RadialControllerConfiguration_Static):
    # System.Void Windows.UI.Input.RadialControllerConfiguration::ResetToDefaultMenuItems()
    def reset_to_default_menu_items(self) -> None: ...
    # System.Void Windows.UI.Input.RadialControllerConfiguration::SetDefaultMenuItems(Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.RadialControllerSystemMenuItemKind>)
    def set_default_menu_items(self, buttons: typing.Iterable[RadialControllerSystemMenuItemKind], /) -> None: ...
    # System.Boolean Windows.UI.Input.RadialControllerConfiguration::TrySelectDefaultMenuItem(Windows.UI.Input.RadialControllerSystemMenuItemKind)
    def try_select_default_menu_item(self, type: RadialControllerSystemMenuItemKind, /) -> bool: ...
    # System.Boolean Windows.UI.Input.RadialControllerConfiguration::get_IsMenuSuppressed()
    @_property
    def is_menu_suppressed(self) -> bool: ...
    # System.Void Windows.UI.Input.RadialControllerConfiguration::put_IsMenuSuppressed(System.Boolean)
    @is_menu_suppressed.setter
    def is_menu_suppressed(self, value: bool) -> None: ...
    # Windows.UI.Input.RadialController Windows.UI.Input.RadialControllerConfiguration::get_ActiveControllerWhenMenuIsSuppressed()
    @_property
    def active_controller_when_menu_is_suppressed(self) -> RadialController: ...
    # System.Void Windows.UI.Input.RadialControllerConfiguration::put_ActiveControllerWhenMenuIsSuppressed(Windows.UI.Input.RadialController)
    @active_controller_when_menu_is_suppressed.setter
    def active_controller_when_menu_is_suppressed(self, value: RadialController) -> None: ...

@typing.final
class RadialControllerControlAcquiredEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerControlAcquiredEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # System.Boolean Windows.UI.Input.RadialControllerControlAcquiredEventArgs::get_IsButtonPressed()
    @_property
    def is_button_pressed(self) -> bool: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerControlAcquiredEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerMenu(winrt.system.Object):
    # Windows.UI.Input.RadialControllerMenuItem Windows.UI.Input.RadialControllerMenu::GetSelectedMenuItem()
    def get_selected_menu_item(self) -> RadialControllerMenuItem: ...
    # System.Void Windows.UI.Input.RadialControllerMenu::SelectMenuItem(Windows.UI.Input.RadialControllerMenuItem)
    def select_menu_item(self, menu_item: RadialControllerMenuItem, /) -> None: ...
    # System.Boolean Windows.UI.Input.RadialControllerMenu::TrySelectPreviouslySelectedMenuItem()
    def try_select_previously_selected_menu_item(self) -> bool: ...
    # System.Boolean Windows.UI.Input.RadialControllerMenu::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.RadialControllerMenu::put_IsEnabled(System.Boolean)
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Input.RadialControllerMenuItem> Windows.UI.Input.RadialControllerMenu::get_Items()
    @_property
    def items(self) -> typing.MutableSequence[RadialControllerMenuItem]: ...

@typing.final
class RadialControllerMenuItem_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.RadialControllerMenuItem Windows.UI.Input.RadialControllerMenuItem::CreateFromFontGlyph(System.String,System.String,System.String)
    def create_from_font_glyph(cls, display_text: str, glyph: str, font_family: str, /) -> RadialControllerMenuItem: ...
    # Windows.UI.Input.RadialControllerMenuItem Windows.UI.Input.RadialControllerMenuItem::CreateFromFontGlyph(System.String,System.String,System.String,Windows.Foundation.Uri)
    def create_from_font_glyph_with_uri(cls, display_text: str, glyph: str, font_family: str, font_uri: windows_foundation.Uri, /) -> RadialControllerMenuItem: ...
    # Windows.UI.Input.RadialControllerMenuItem Windows.UI.Input.RadialControllerMenuItem::CreateFromIcon(System.String,Windows.Storage.Streams.RandomAccessStreamReference)
    def create_from_icon(cls, display_text: str, icon: windows_storage_streams.RandomAccessStreamReference, /) -> RadialControllerMenuItem: ...
    # Windows.UI.Input.RadialControllerMenuItem Windows.UI.Input.RadialControllerMenuItem::CreateFromKnownIcon(System.String,Windows.UI.Input.RadialControllerMenuKnownIcon)
    def create_from_known_icon(cls, display_text: str, value: RadialControllerMenuKnownIcon, /) -> RadialControllerMenuItem: ...

@typing.final
class RadialControllerMenuItem(winrt.system.Object, metaclass=RadialControllerMenuItem_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.RadialControllerMenuItem::add_Invoked(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.RadialControllerMenuItem,System.Object>)
    def add_invoked(self, handler: windows_foundation.TypedEventHandler[RadialControllerMenuItem, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.RadialControllerMenuItem::remove_Invoked(Windows.Foundation.EventRegistrationToken)
    def remove_invoked(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Object Windows.UI.Input.RadialControllerMenuItem::get_Tag()
    @_property
    def tag(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Input.RadialControllerMenuItem::put_Tag(System.Object)
    @tag.setter
    def tag(self, value: winrt.system.Object) -> None: ...
    # System.String Windows.UI.Input.RadialControllerMenuItem::get_DisplayText()
    @_property
    def display_text(self) -> str: ...

@typing.final
class RadialControllerRotationChangedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerRotationChangedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # System.Double Windows.UI.Input.RadialControllerRotationChangedEventArgs::get_RotationDeltaInDegrees()
    @_property
    def rotation_delta_in_degrees(self) -> winrt.system.Double: ...
    # System.Boolean Windows.UI.Input.RadialControllerRotationChangedEventArgs::get_IsButtonPressed()
    @_property
    def is_button_pressed(self) -> bool: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerRotationChangedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerScreenContact(winrt.system.Object):
    # Windows.Foundation.Rect Windows.UI.Input.RadialControllerScreenContact::get_Bounds()
    @_property
    def bounds(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Point Windows.UI.Input.RadialControllerScreenContact::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class RadialControllerScreenContactContinuedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # System.Boolean Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs::get_IsButtonPressed()
    @_property
    def is_button_pressed(self) -> bool: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerScreenContactContinuedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerScreenContactEndedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Input.RadialControllerScreenContactEndedEventArgs::get_IsButtonPressed()
    @_property
    def is_button_pressed(self) -> bool: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerScreenContactEndedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RadialControllerScreenContactStartedEventArgs(winrt.system.Object):
    # Windows.UI.Input.RadialControllerScreenContact Windows.UI.Input.RadialControllerScreenContactStartedEventArgs::get_Contact()
    @_property
    def contact(self) -> RadialControllerScreenContact: ...
    # System.Boolean Windows.UI.Input.RadialControllerScreenContactStartedEventArgs::get_IsButtonPressed()
    @_property
    def is_button_pressed(self) -> bool: ...
    # Windows.Devices.Haptics.SimpleHapticsController Windows.UI.Input.RadialControllerScreenContactStartedEventArgs::get_SimpleHapticsController()
    @_property
    def simple_haptics_controller(self) -> windows_devices_haptics.SimpleHapticsController: ...

@typing.final
class RightTappedEventArgs(winrt.system.Object):
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.RightTappedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.RightTappedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.RightTappedEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class SystemButtonEventController_Static(AttachableInputObject_Static):
    # Windows.UI.Input.SystemButtonEventController Windows.UI.Input.SystemButtonEventController::CreateForDispatcherQueue(Windows.System.DispatcherQueue)
    def create_for_dispatcher_queue(cls, queue: windows_system.DispatcherQueue, /) -> SystemButtonEventController: ...

@typing.final
class SystemButtonEventController(AttachableInputObject, metaclass=SystemButtonEventController_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.SystemButtonEventController::add_SystemFunctionButtonPressed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.SystemButtonEventController,Windows.UI.Input.SystemFunctionButtonEventArgs>)
    def add_system_function_button_pressed(self, handler: windows_foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionButtonEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.SystemButtonEventController::remove_SystemFunctionButtonPressed(Windows.Foundation.EventRegistrationToken)
    def remove_system_function_button_pressed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.SystemButtonEventController::add_SystemFunctionButtonReleased(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.SystemButtonEventController,Windows.UI.Input.SystemFunctionButtonEventArgs>)
    def add_system_function_button_released(self, handler: windows_foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionButtonEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.SystemButtonEventController::remove_SystemFunctionButtonReleased(Windows.Foundation.EventRegistrationToken)
    def remove_system_function_button_released(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.SystemButtonEventController::add_SystemFunctionLockChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.SystemButtonEventController,Windows.UI.Input.SystemFunctionLockChangedEventArgs>)
    def add_system_function_lock_changed(self, handler: windows_foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionLockChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.SystemButtonEventController::remove_SystemFunctionLockChanged(Windows.Foundation.EventRegistrationToken)
    def remove_system_function_lock_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.SystemButtonEventController::add_SystemFunctionLockIndicatorChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.SystemButtonEventController,Windows.UI.Input.SystemFunctionLockIndicatorChangedEventArgs>)
    def add_system_function_lock_indicator_changed(self, handler: windows_foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionLockIndicatorChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.SystemButtonEventController::remove_SystemFunctionLockIndicatorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_system_function_lock_indicator_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class SystemFunctionButtonEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Input.SystemFunctionButtonEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Input.SystemFunctionButtonEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.UInt64 Windows.UI.Input.SystemFunctionButtonEventArgs::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...

@typing.final
class SystemFunctionLockChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Input.SystemFunctionLockChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Input.SystemFunctionLockChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.SystemFunctionLockChangedEventArgs::get_IsLocked()
    @_property
    def is_locked(self) -> bool: ...
    # System.UInt64 Windows.UI.Input.SystemFunctionLockChangedEventArgs::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...

@typing.final
class SystemFunctionLockIndicatorChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Input.SystemFunctionLockIndicatorChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Input.SystemFunctionLockIndicatorChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.SystemFunctionLockIndicatorChangedEventArgs::get_IsIndicatorOn()
    @_property
    def is_indicator_on(self) -> bool: ...
    # System.UInt64 Windows.UI.Input.SystemFunctionLockIndicatorChangedEventArgs::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...

@typing.final
class TappedEventArgs(winrt.system.Object):
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Input.TappedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Input.TappedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.UInt32 Windows.UI.Input.TappedEventArgs::get_TapCount()
    @_property
    def tap_count(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.Input.TappedEventArgs::get_ContactCount()
    @_property
    def contact_count(self) -> winrt.system.UInt32: ...

@typing.final
class TouchpadGesturesController_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Input.TouchpadGesturesController Windows.UI.Input.TouchpadGesturesController::CreateForProcess()
    def create_for_process(cls) -> TouchpadGesturesController: ...
    # System.Boolean Windows.UI.Input.TouchpadGesturesController::IsSupported()
    def is_supported(cls) -> bool: ...

@typing.final
class TouchpadGesturesController(winrt.system.Object, metaclass=TouchpadGesturesController_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.TouchpadGesturesController::add_PointerMoved(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.TouchpadGesturesController,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_moved(self, handler: windows_foundation.TypedEventHandler[TouchpadGesturesController, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::remove_PointerMoved(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_moved(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.TouchpadGesturesController::add_PointerPressed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.TouchpadGesturesController,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_pressed(self, handler: windows_foundation.TypedEventHandler[TouchpadGesturesController, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::remove_PointerPressed(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_pressed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.TouchpadGesturesController::add_PointerReleased(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.TouchpadGesturesController,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_released(self, handler: windows_foundation.TypedEventHandler[TouchpadGesturesController, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::remove_PointerReleased(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_released(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.TouchpadGesturesController::add_TouchpadGlobalActionPerformed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.TouchpadGesturesController,Windows.UI.Input.TouchpadGlobalActionEventArgs>)
    def add_touchpad_global_action_performed(self, handler: windows_foundation.TypedEventHandler[TouchpadGesturesController, TouchpadGlobalActionEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::remove_TouchpadGlobalActionPerformed(Windows.Foundation.EventRegistrationToken)
    def remove_touchpad_global_action_performed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.UI.Input.TouchpadGlobalGestureKinds Windows.UI.Input.TouchpadGesturesController::get_SupportedGestures()
    @_property
    def supported_gestures(self) -> TouchpadGlobalGestureKinds: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::put_SupportedGestures(Windows.UI.Input.TouchpadGlobalGestureKinds)
    @supported_gestures.setter
    def supported_gestures(self, value: TouchpadGlobalGestureKinds) -> None: ...
    # System.Boolean Windows.UI.Input.TouchpadGesturesController::get_GesturesEnabled()
    @_property
    def gestures_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.TouchpadGesturesController::put_GesturesEnabled(System.Boolean)
    @gestures_enabled.setter
    def gestures_enabled(self, value: bool) -> None: ...

@typing.final
class TouchpadGlobalActionEventArgs(winrt.system.Object):
    # Windows.UI.Input.TouchpadGlobalAction Windows.UI.Input.TouchpadGlobalActionEventArgs::get_Action()
    @_property
    def action(self) -> TouchpadGlobalAction: ...

@typing.final
class _IPointerPointTransform: ...

class IPointerPointTransform(winrt._winrt.IInspectable):
    # Windows.Foundation.Rect Windows.UI.Input.IPointerPointTransform::TransformBounds(Windows.Foundation.Rect)
    @abstractmethod
    def transform_bounds(self, rect: typing.Union[windows_foundation.Rect, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single, winrt.system.Single]], /) -> windows_foundation.Rect: ...
    # System.Boolean Windows.UI.Input.IPointerPointTransform::TryTransform(Windows.Foundation.Point,Windows.Foundation.Point&)
    @abstractmethod
    def try_transform(self, in_point: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], /) -> typing.Tuple[bool, windows_foundation.Point]: ...
    # Windows.UI.Input.IPointerPointTransform Windows.UI.Input.IPointerPointTransform::get_Inverse()
    @_property
    @abstractmethod
    def inverse(self) -> IPointerPointTransform: ...

