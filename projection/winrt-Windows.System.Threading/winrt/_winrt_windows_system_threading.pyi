# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation

from winrt.windows.system.threading import WorkItemOptions, WorkItemPriority
from winrt.windows.system.threading import TimerDestroyedHandler, TimerElapsedHandler, WorkItemHandler

Self = typing.TypeVar('Self')

@typing.final
class ThreadPool_Static(type):
    @typing.overload
    def run_async(cls, handler: typing.Optional[WorkItemHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def run_async(cls, handler: typing.Optional[WorkItemHandler], priority: WorkItemPriority, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def run_async(cls, handler: typing.Optional[WorkItemHandler], priority: WorkItemPriority, options: WorkItemOptions, /) -> winrt.windows.foundation.IAsyncAction: ...

@typing.final
class ThreadPool(winrt.system.Object, metaclass=ThreadPool_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ThreadPool: ...

@typing.final
class ThreadPoolTimer_Static(type):
    @typing.overload
    def create_periodic_timer(cls, handler: typing.Optional[TimerElapsedHandler], period: datetime.timedelta, /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    def create_periodic_timer(cls, handler: typing.Optional[TimerElapsedHandler], period: datetime.timedelta, destroyed: typing.Optional[TimerDestroyedHandler], /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    def create_timer(cls, handler: typing.Optional[TimerElapsedHandler], delay: datetime.timedelta, /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    def create_timer(cls, handler: typing.Optional[TimerElapsedHandler], delay: datetime.timedelta, destroyed: typing.Optional[TimerDestroyedHandler], /) -> typing.Optional[ThreadPoolTimer]: ...

@typing.final
class ThreadPoolTimer(winrt.system.Object, metaclass=ThreadPoolTimer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ThreadPoolTimer: ...
    def cancel(self) -> None: ...
    @_property
    def delay(self) -> datetime.timedelta: ...
    @_property
    def period(self) -> datetime.timedelta: ...

