# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.storage.streams
import winrt.windows.ui
import winrt.windows.ui.text

from winrt.microsoft.ui.text import CaretType, FindOptions, FormatEffect, HorizontalCharacterAlignment, LetterCase, LineSpacingRule, LinkType, MarkerAlignment, MarkerStyle, MarkerType, ParagraphAlignment, ParagraphStyle, PointOptions, RangeGravity, RichEditMathMode, SelectionOptions, SelectionType, TabAlignment, TabLeader, TextGetOptions, TextRangeUnit, TextScript, TextSetOptions, UnderlineType, VerticalCharacterAlignment

Self = typing.TypeVar('Self')

@typing.final
class FontWeights_Static(type):
    @_property
    def black(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def bold(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def extra_black(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def extra_bold(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def extra_light(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def light(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def medium(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def normal(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def semi_bold(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def semi_light(cls) -> winrt.windows.ui.text.FontWeight: ...
    @_property
    def thin(cls) -> winrt.windows.ui.text.FontWeight: ...

@typing.final
class FontWeights(winrt.system.Object, metaclass=FontWeights_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FontWeights: ...

@typing.final
class RichEditTextDocument(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditTextDocument: ...
    def apply_display_updates(self) -> winrt.system.Int32: ...
    def batch_display_updates(self) -> winrt.system.Int32: ...
    def begin_undo_group(self) -> None: ...
    def can_copy(self) -> bool: ...
    def can_paste(self) -> bool: ...
    def can_redo(self) -> bool: ...
    def can_undo(self) -> bool: ...
    def clear_undo_redo_history(self) -> None: ...
    def end_undo_group(self) -> None: ...
    def get_default_character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    def get_default_paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    def get_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> typing.Optional[ITextRange]: ...
    def get_range_from_point(self, point: winrt.windows.foundation.Point, options: PointOptions, /) -> typing.Optional[ITextRange]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def load_from_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def redo(self) -> None: ...
    def save_to_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def set_default_character_format(self, value: typing.Optional[ITextCharacterFormat], /) -> None: ...
    def set_default_paragraph_format(self, value: typing.Optional[ITextParagraphFormat], /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def undo(self) -> None: ...
    @_property
    def undo_limit(self) -> winrt.system.UInt32: ...
    @undo_limit.setter
    def undo_limit(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def ignore_trailing_character_spacing(self) -> bool: ...
    @ignore_trailing_character_spacing.setter
    def ignore_trailing_character_spacing(self, value: bool) -> None: ...
    @_property
    def default_tab_stop(self) -> winrt.system.Single: ...
    @default_tab_stop.setter
    def default_tab_stop(self, value: winrt.system.Single) -> None: ...
    @_property
    def caret_type(self) -> CaretType: ...
    @caret_type.setter
    def caret_type(self, value: CaretType) -> None: ...
    @_property
    def alignment_includes_trailing_whitespace(self) -> bool: ...
    @alignment_includes_trailing_whitespace.setter
    def alignment_includes_trailing_whitespace(self, value: bool) -> None: ...
    @_property
    def selection(self) -> typing.Optional[ITextSelection]: ...

@typing.final
class RichEditTextRange(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditTextRange: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def start_position(self) -> winrt.system.Int32: ...
    @start_position.setter
    def start_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    @paragraph_format.setter
    def paragraph_format(self, value: typing.Optional[ITextParagraphFormat]) -> None: ...
    @_property
    def link(self) -> str: ...
    @link.setter
    def link(self, value: str) -> None: ...
    @_property
    def gravity(self) -> RangeGravity: ...
    @gravity.setter
    def gravity(self, value: RangeGravity) -> None: ...
    @_property
    def formatted_text(self) -> typing.Optional[ITextRange]: ...
    @formatted_text.setter
    def formatted_text(self, value: typing.Optional[ITextRange]) -> None: ...
    @_property
    def end_position(self) -> winrt.system.Int32: ...
    @end_position.setter
    def end_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    @character_format.setter
    def character_format(self, value: typing.Optional[ITextCharacterFormat]) -> None: ...
    @_property
    def character(self) -> winrt.system.Char16: ...
    @character.setter
    def character(self, value: winrt.system.Char16) -> None: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def story_length(self) -> winrt.system.Int32: ...

@typing.final
class TextConstants_Static(type):
    @_property
    def auto_color(cls) -> winrt.windows.ui.Color: ...
    @_property
    def max_unit_count(cls) -> winrt.system.Int32: ...
    @_property
    def min_unit_count(cls) -> winrt.system.Int32: ...
    @_property
    def undefined_color(cls) -> winrt.windows.ui.Color: ...
    @_property
    def undefined_float_value(cls) -> winrt.system.Single: ...
    @_property
    def undefined_font_stretch(cls) -> winrt.windows.ui.text.FontStretch: ...
    @_property
    def undefined_font_style(cls) -> winrt.windows.ui.text.FontStyle: ...
    @_property
    def undefined_int32_value(cls) -> winrt.system.Int32: ...

@typing.final
class TextConstants(winrt.system.Object, metaclass=TextConstants_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextConstants: ...

@typing.final
class ITextCharacterFormat(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextCharacterFormat: ...
    def get_clone(self) -> typing.Optional[ITextCharacterFormat]: ...
    def is_equal(self, format: typing.Optional[ITextCharacterFormat], /) -> bool: ...
    def set_clone(self, value: typing.Optional[ITextCharacterFormat], /) -> None: ...
    @_property
    def all_caps(self) -> FormatEffect: ...
    @all_caps.setter
    def all_caps(self, value: FormatEffect) -> None: ...
    @_property
    def background_color(self) -> winrt.windows.ui.Color: ...
    @background_color.setter
    def background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def bold(self) -> FormatEffect: ...
    @bold.setter
    def bold(self, value: FormatEffect) -> None: ...
    @_property
    def font_stretch(self) -> winrt.windows.ui.text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: winrt.windows.ui.text.FontStretch) -> None: ...
    @_property
    def font_style(self) -> winrt.windows.ui.text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: winrt.windows.ui.text.FontStyle) -> None: ...
    @_property
    def foreground_color(self) -> winrt.windows.ui.Color: ...
    @foreground_color.setter
    def foreground_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def hidden(self) -> FormatEffect: ...
    @hidden.setter
    def hidden(self, value: FormatEffect) -> None: ...
    @_property
    def italic(self) -> FormatEffect: ...
    @italic.setter
    def italic(self, value: FormatEffect) -> None: ...
    @_property
    def kerning(self) -> winrt.system.Single: ...
    @kerning.setter
    def kerning(self, value: winrt.system.Single) -> None: ...
    @_property
    def language_tag(self) -> str: ...
    @language_tag.setter
    def language_tag(self, value: str) -> None: ...
    @_property
    def link_type(self) -> LinkType: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def outline(self) -> FormatEffect: ...
    @outline.setter
    def outline(self, value: FormatEffect) -> None: ...
    @_property
    def position(self) -> winrt.system.Single: ...
    @position.setter
    def position(self, value: winrt.system.Single) -> None: ...
    @_property
    def protected_text(self) -> FormatEffect: ...
    @protected_text.setter
    def protected_text(self, value: FormatEffect) -> None: ...
    @_property
    def size(self) -> winrt.system.Single: ...
    @size.setter
    def size(self, value: winrt.system.Single) -> None: ...
    @_property
    def small_caps(self) -> FormatEffect: ...
    @small_caps.setter
    def small_caps(self, value: FormatEffect) -> None: ...
    @_property
    def spacing(self) -> winrt.system.Single: ...
    @spacing.setter
    def spacing(self, value: winrt.system.Single) -> None: ...
    @_property
    def strikethrough(self) -> FormatEffect: ...
    @strikethrough.setter
    def strikethrough(self, value: FormatEffect) -> None: ...
    @_property
    def subscript(self) -> FormatEffect: ...
    @subscript.setter
    def subscript(self, value: FormatEffect) -> None: ...
    @_property
    def superscript(self) -> FormatEffect: ...
    @superscript.setter
    def superscript(self, value: FormatEffect) -> None: ...
    @_property
    def text_script(self) -> TextScript: ...
    @text_script.setter
    def text_script(self, value: TextScript) -> None: ...
    @_property
    def underline(self) -> UnderlineType: ...
    @underline.setter
    def underline(self, value: UnderlineType) -> None: ...
    @_property
    def weight(self) -> winrt.system.Int32: ...
    @weight.setter
    def weight(self, value: winrt.system.Int32) -> None: ...

@typing.final
class ITextParagraphFormat(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextParagraphFormat: ...
    def add_tab(self, position: winrt.system.Single, align: TabAlignment, leader: TabLeader, /) -> None: ...
    def clear_all_tabs(self) -> None: ...
    def delete_tab(self, position: winrt.system.Single, /) -> None: ...
    def get_clone(self) -> typing.Optional[ITextParagraphFormat]: ...
    def get_tab(self, index: winrt.system.Int32, /) -> typing.Tuple[winrt.system.Single, TabAlignment, TabLeader]: ...
    def is_equal(self, format: typing.Optional[ITextParagraphFormat], /) -> bool: ...
    def set_clone(self, format: typing.Optional[ITextParagraphFormat], /) -> None: ...
    def set_indents(self, start: winrt.system.Single, left: winrt.system.Single, right: winrt.system.Single, /) -> None: ...
    def set_line_spacing(self, rule: LineSpacingRule, spacing: winrt.system.Single, /) -> None: ...
    @_property
    def alignment(self) -> ParagraphAlignment: ...
    @alignment.setter
    def alignment(self, value: ParagraphAlignment) -> None: ...
    @_property
    def first_line_indent(self) -> winrt.system.Single: ...
    @_property
    def keep_together(self) -> FormatEffect: ...
    @keep_together.setter
    def keep_together(self, value: FormatEffect) -> None: ...
    @_property
    def keep_with_next(self) -> FormatEffect: ...
    @keep_with_next.setter
    def keep_with_next(self, value: FormatEffect) -> None: ...
    @_property
    def left_indent(self) -> winrt.system.Single: ...
    @_property
    def line_spacing(self) -> winrt.system.Single: ...
    @_property
    def line_spacing_rule(self) -> LineSpacingRule: ...
    @_property
    def list_alignment(self) -> MarkerAlignment: ...
    @list_alignment.setter
    def list_alignment(self, value: MarkerAlignment) -> None: ...
    @_property
    def list_level_index(self) -> winrt.system.Int32: ...
    @list_level_index.setter
    def list_level_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def list_start(self) -> winrt.system.Int32: ...
    @list_start.setter
    def list_start(self, value: winrt.system.Int32) -> None: ...
    @_property
    def list_style(self) -> MarkerStyle: ...
    @list_style.setter
    def list_style(self, value: MarkerStyle) -> None: ...
    @_property
    def list_tab(self) -> winrt.system.Single: ...
    @list_tab.setter
    def list_tab(self, value: winrt.system.Single) -> None: ...
    @_property
    def list_type(self) -> MarkerType: ...
    @list_type.setter
    def list_type(self, value: MarkerType) -> None: ...
    @_property
    def no_line_number(self) -> FormatEffect: ...
    @no_line_number.setter
    def no_line_number(self, value: FormatEffect) -> None: ...
    @_property
    def page_break_before(self) -> FormatEffect: ...
    @page_break_before.setter
    def page_break_before(self, value: FormatEffect) -> None: ...
    @_property
    def right_indent(self) -> winrt.system.Single: ...
    @right_indent.setter
    def right_indent(self, value: winrt.system.Single) -> None: ...
    @_property
    def right_to_left(self) -> FormatEffect: ...
    @right_to_left.setter
    def right_to_left(self, value: FormatEffect) -> None: ...
    @_property
    def space_after(self) -> winrt.system.Single: ...
    @space_after.setter
    def space_after(self, value: winrt.system.Single) -> None: ...
    @_property
    def space_before(self) -> winrt.system.Single: ...
    @space_before.setter
    def space_before(self, value: winrt.system.Single) -> None: ...
    @_property
    def style(self) -> ParagraphStyle: ...
    @style.setter
    def style(self, value: ParagraphStyle) -> None: ...
    @_property
    def tab_count(self) -> winrt.system.Int32: ...
    @_property
    def widow_control(self) -> FormatEffect: ...
    @widow_control.setter
    def widow_control(self, value: FormatEffect) -> None: ...

@typing.final
class ITextRange(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextRange: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    @_property
    def character(self) -> winrt.system.Char16: ...
    @character.setter
    def character(self, value: winrt.system.Char16) -> None: ...
    @_property
    def character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    @character_format.setter
    def character_format(self, value: typing.Optional[ITextCharacterFormat]) -> None: ...
    @_property
    def end_position(self) -> winrt.system.Int32: ...
    @end_position.setter
    def end_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def formatted_text(self) -> typing.Optional[ITextRange]: ...
    @formatted_text.setter
    def formatted_text(self, value: typing.Optional[ITextRange]) -> None: ...
    @_property
    def gravity(self) -> RangeGravity: ...
    @gravity.setter
    def gravity(self, value: RangeGravity) -> None: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def link(self) -> str: ...
    @link.setter
    def link(self, value: str) -> None: ...
    @_property
    def paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    @paragraph_format.setter
    def paragraph_format(self, value: typing.Optional[ITextParagraphFormat]) -> None: ...
    @_property
    def start_position(self) -> winrt.system.Int32: ...
    @start_position.setter
    def start_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def story_length(self) -> winrt.system.Int32: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...

@typing.final
class ITextSelection(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextSelection: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_key(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def home_key(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_down(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_left(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_right(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_up(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def type_text(self, value: str, /) -> None: ...
    @_property
    def options(self) -> SelectionOptions: ...
    @options.setter
    def options(self, value: SelectionOptions) -> None: ...
    @_property
    def type(self) -> SelectionType: ...
    @_property
    def character(self) -> winrt.system.Char16: ...
    @character.setter
    def character(self, value: winrt.system.Char16) -> None: ...
    @_property
    def character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    @character_format.setter
    def character_format(self, value: typing.Optional[ITextCharacterFormat]) -> None: ...
    @_property
    def end_position(self) -> winrt.system.Int32: ...
    @end_position.setter
    def end_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def formatted_text(self) -> typing.Optional[ITextRange]: ...
    @formatted_text.setter
    def formatted_text(self, value: typing.Optional[ITextRange]) -> None: ...
    @_property
    def gravity(self) -> RangeGravity: ...
    @gravity.setter
    def gravity(self, value: RangeGravity) -> None: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def link(self) -> str: ...
    @link.setter
    def link(self, value: str) -> None: ...
    @_property
    def paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    @paragraph_format.setter
    def paragraph_format(self, value: typing.Optional[ITextParagraphFormat]) -> None: ...
    @_property
    def start_position(self) -> winrt.system.Int32: ...
    @start_position.setter
    def start_position(self, value: winrt.system.Int32) -> None: ...
    @_property
    def story_length(self) -> winrt.system.Int32: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...

