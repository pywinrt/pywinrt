# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.appservice as windows_applicationmodel_appservice
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.networking.sockets as windows_networking_sockets
import winrt.windows.web.http as windows_web_http

from winrt.windows.system.diagnostics.deviceportal import DevicePortalConnectionClosedReason

Self = typing.TypeVar('Self')

@typing.final
class DevicePortalConnection_Static(type):
    def get_for_app_service_connection(cls, app_service_connection: typing.Optional[windows_applicationmodel_appservice.AppServiceConnection], /) -> typing.Optional[DevicePortalConnection]: ...

@typing.final
class DevicePortalConnection(winrt.system.Object, metaclass=DevicePortalConnection_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnection: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[windows_web_http.HttpRequestMessage], /) -> typing.Optional[windows_networking_sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[windows_web_http.HttpRequestMessage], message_type: windows_networking_sockets.SocketMessageType, protocol: str, /) -> typing.Optional[windows_networking_sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[windows_web_http.HttpRequestMessage], message_type: windows_networking_sockets.SocketMessageType, protocol: str, outbound_buffer_size_in_bytes: winrt.system.UInt32, max_message_size: winrt.system.UInt32, receive_mode: windows_networking_sockets.MessageWebSocketReceiveMode, /) -> typing.Optional[windows_networking_sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_stream_web_socket_for_request(self, request: typing.Optional[windows_web_http.HttpRequestMessage], /) -> typing.Optional[windows_networking_sockets.ServerStreamWebSocket]: ...
    @typing.overload
    def get_server_stream_web_socket_for_request(self, request: typing.Optional[windows_web_http.HttpRequestMessage], protocol: str, outbound_buffer_size_in_bytes: winrt.system.UInt32, no_delay: bool, /) -> typing.Optional[windows_networking_sockets.ServerStreamWebSocket]: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[DevicePortalConnection, DevicePortalConnectionClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_request_received(self, handler: windows_foundation.TypedEventHandler[DevicePortalConnection, DevicePortalConnectionRequestReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_request_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class DevicePortalConnectionClosedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnectionClosedEventArgs: ...
    @_property
    def reason(self) -> DevicePortalConnectionClosedReason: ...

@typing.final
class DevicePortalConnectionRequestReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnectionRequestReceivedEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_foundation.Deferral]: ...
    @_property
    def request_message(self) -> typing.Optional[windows_web_http.HttpRequestMessage]: ...
    @_property
    def response_message(self) -> typing.Optional[windows_web_http.HttpResponseMessage]: ...
    @_property
    def is_web_socket_upgrade_request(self) -> bool: ...
    @_property
    def web_socket_protocols_requested(self) -> typing.Optional[windows_foundation_collections.IVectorView[str]]: ...

