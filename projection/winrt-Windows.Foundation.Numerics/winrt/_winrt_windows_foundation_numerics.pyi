# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system

Self = typing.TypeVar('Self')

@typing.final
class Matrix3x2_Static(type):
    pass

@typing.final
class Matrix3x2(metaclass=Matrix3x2_Static):
    m11: winrt.system.Single
    m12: winrt.system.Single
    m21: winrt.system.Single
    m22: winrt.system.Single
    m31: winrt.system.Single
    m32: winrt.system.Single
    def __init__(self, m11: winrt.system.Single, m12: winrt.system.Single, m21: winrt.system.Single, m22: winrt.system.Single, m31: winrt.system.Single, m32: winrt.system.Single) -> None: ...
    def is_identity(self) -> bool: ...
    def determinant(self) -> float: ...
    def translation(self) -> Vector2: ...
    def invert(self) -> Matrix3x2: ...
    def lerp(self, value: Matrix3x2, amount: float) -> Matrix3x2: ...

@typing.final
class Matrix4x4_Static(type):
    pass

@typing.final
class Matrix4x4(metaclass=Matrix4x4_Static):
    m11: winrt.system.Single
    m12: winrt.system.Single
    m13: winrt.system.Single
    m14: winrt.system.Single
    m21: winrt.system.Single
    m22: winrt.system.Single
    m23: winrt.system.Single
    m24: winrt.system.Single
    m31: winrt.system.Single
    m32: winrt.system.Single
    m33: winrt.system.Single
    m34: winrt.system.Single
    m41: winrt.system.Single
    m42: winrt.system.Single
    m43: winrt.system.Single
    m44: winrt.system.Single
    def __init__(self, m11: winrt.system.Single, m12: winrt.system.Single, m13: winrt.system.Single, m14: winrt.system.Single, m21: winrt.system.Single, m22: winrt.system.Single, m23: winrt.system.Single, m24: winrt.system.Single, m31: winrt.system.Single, m32: winrt.system.Single, m33: winrt.system.Single, m34: winrt.system.Single, m41: winrt.system.Single, m42: winrt.system.Single, m43: winrt.system.Single, m44: winrt.system.Single) -> None: ...
    def is_identity(self) -> bool: ...
    def determinant(self) -> float: ...
    def translation(self) -> Vector2: ...
    def invert(self) -> Matrix4x4: ...
    def decompose(self) -> typing.Tuple[Vector3, Quaternion, Vector3]: ...
    def transform(self, rotation: Quaternion) -> Matrix4x4: ...
    def transpose(self) -> Matrix4x4: ...
    def lerp(self, value: Matrix4x4, amount: float) -> Matrix4x4: ...

@typing.final
class Plane_Static(type):
    pass

@typing.final
class Plane(metaclass=Plane_Static):
    normal: Vector3
    d: winrt.system.Single
    def __init__(self, normal: Vector3, d: winrt.system.Single) -> None: ...
    def normalize(self) -> Plane: ...
    @typing.overload
    def transform(self, matrix: Matrix4x4) -> Plane: ...
    @typing.overload
    def transform(self, rotation: Quaternion) -> Plane: ...
    def dot(self, value: Vector4) -> float: ...
    def dot_coordinate(self, value: Vector3) -> float: ...
    def dot_normal(self, value: Vector3) -> float: ...

@typing.final
class Quaternion_Static(type):
    pass

@typing.final
class Quaternion(metaclass=Quaternion_Static):
    x: winrt.system.Single
    y: winrt.system.Single
    z: winrt.system.Single
    w: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single, z: winrt.system.Single, w: winrt.system.Single) -> None: ...
    def is_identity(self) -> bool: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def dot(self, value: Quaternion) -> float: ...
    def normalize(self) -> Quaternion: ...
    def conjugate(self) -> Quaternion: ...
    def inverse(self) -> Quaternion: ...
    def slerp(self, value: Quaternion, amount: float) -> Quaternion: ...
    def lerp(self, value: Quaternion, amount: float) -> Quaternion: ...
    def concatenate(self, value: Quaternion) -> Quaternion: ...

@typing.final
class Rational:
    numerator: winrt.system.UInt32
    denominator: winrt.system.UInt32
    def __init__(self, numerator: winrt.system.UInt32, denominator: winrt.system.UInt32) -> None: ...

@typing.final
class Vector2_Static(type):
    pass

@typing.final
class Vector2(metaclass=Vector2_Static):
    x: winrt.system.Single
    y: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single) -> None: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def distance(self, value: Vector2) -> float: ...
    def distance_squared(self, value: Vector2) -> float: ...
    def dot(self, value: Vector2) -> float: ...
    def normalize(self) -> Vector2: ...
    def reflect(self, normal: Vector2) -> Vector2: ...
    def min(self, value: Vector2) -> Vector2: ...
    def max(self, value: Vector2) -> Vector2: ...
    def clamp(self, min: Vector2, max: Vector2) -> Vector2: ...
    def lerp(self, value: Vector2, amount: float) -> Vector2: ...
    @typing.overload
    def transform(self, matrix: Matrix3x2) -> Vector2: ...
    @typing.overload
    def transform(self, matrix: Matrix4x4) -> Vector2: ...
    @typing.overload
    def transform(self, rotation: Quaternion) -> Vector2: ...
    @typing.overload
    def transform_normal(self, matrix: Matrix3x2) -> Vector2: ...
    @typing.overload
    def transform_normal(self, matrix: Matrix4x4) -> Vector2: ...
    @typing.overload
    def transform4(self, matrix: Matrix4x4) -> Vector4: ...
    @typing.overload
    def transform4(self, rotation: Quaternion) -> Vector4: ...

@typing.final
class Vector3_Static(type):
    pass

@typing.final
class Vector3(metaclass=Vector3_Static):
    x: winrt.system.Single
    y: winrt.system.Single
    z: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single, z: winrt.system.Single) -> None: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def distance(self, value: Vector3) -> float: ...
    def distance_squared(self, value: Vector3) -> float: ...
    def dot(self, value: Vector3) -> float: ...
    def cross(self, value: Vector3) -> Vector3: ...
    def normalize(self) -> Vector3: ...
    def reflect(self, normal: Vector3) -> Vector3: ...
    def min(self, value: Vector3) -> Vector3: ...
    def max(self, value: Vector3) -> Vector3: ...
    def clamp(self, min: Vector3, max: Vector3) -> Vector3: ...
    def lerp(self, value: Vector3, amount: float) -> Vector3: ...
    @typing.overload
    def transform(self, matrix: Matrix4x4) -> Vector3: ...
    @typing.overload
    def transform(self, rotation: Quaternion) -> Vector3: ...
    def transform_normal(self, matrix: Matrix4x4) -> Vector3: ...
    @typing.overload
    def transform4(self, matrix: Matrix4x4) -> Vector4: ...
    @typing.overload
    def transform4(self, rotation: Quaternion) -> Vector4: ...

@typing.final
class Vector4_Static(type):
    pass

@typing.final
class Vector4(metaclass=Vector4_Static):
    x: winrt.system.Single
    y: winrt.system.Single
    z: winrt.system.Single
    w: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single, z: winrt.system.Single, w: winrt.system.Single) -> None: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def distance(self, value: Vector4) -> float: ...
    def distance_squared(self, value: Vector4) -> float: ...
    def dot(self, value: Vector4) -> float: ...
    def normalize(self) -> Vector4: ...
    def min(self, value: Vector4) -> Vector4: ...
    def max(self, value: Vector4) -> Vector4: ...
    def clamp(self, min: Vector4, max: Vector4) -> Vector4: ...
    def lerp(self, value: Vector4, amount: float) -> Vector4: ...
    @typing.overload
    def transform(self, matrix: Matrix4x4) -> Vector4: ...
    @typing.overload
    def transform(self, rotation: Quaternion) -> Vector4: ...

