// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Foundation.Numerics.h"

namespace py::cpp::Windows::Foundation::Numerics
{
    // ----- Matrix3x2 struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* _new_Matrix3x2(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _M11{};
        float _M12{};
        float _M21{};
        float _M22{};
        float _M31{};
        float _M32{};

        static const char* kwlist[] = {"m11", "m12", "m21", "m22", "m31", "m32", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ffffff", const_cast<char**>(kwlist), &_M11, &_M12, &_M21, &_M22, &_M31, &_M32))
        {
            return -1;
        }

        try
        {
            self->obj.m11 = _M11;
            self->obj.m12 = _M12;
            self->obj.m21 = _M21;
            self->obj.m22 = _M22;
            self->obj.m31 = _M31;
            self->obj.m32 = _M32;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Matrix3x2(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* is_identity_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::is_identity(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* determinant_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::determinant(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* translation_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::translation(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* invert_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            winrt::Windows::Foundation::Numerics::float3x2 _result;

            if (!winrt::Windows::Foundation::Numerics::invert(self->obj, &_result))
            {
                PyErr_SetString(PyExc_ValueError, "Matrix is not invertible");
                return nullptr;
            }

            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Matrix3x2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3x2>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3x2>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Matrix3x2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::float3x2>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Matrix3x2[] = {
        { "is_identity", reinterpret_cast<PyCFunction>(is_identity_Matrix3x2), METH_NOARGS, nullptr },
        { "determinant", reinterpret_cast<PyCFunction>(determinant_Matrix3x2), METH_NOARGS, nullptr },
        { "translation", reinterpret_cast<PyCFunction>(translation_Matrix3x2), METH_NOARGS, nullptr },
        { "invert", reinterpret_cast<PyCFunction>(invert_Matrix3x2), METH_NOARGS, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Matrix3x2), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_Matrix3x2, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Matrix3x2_get_M11(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m11);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M11(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m11 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3x2_get_M12(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m12);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M12(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m12 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3x2_get_M21(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m21);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M21(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m21 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3x2_get_M22(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m22);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M22(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m22 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3x2_get_M31(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m31);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M31(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m31 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3x2_get_M32(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m32);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3x2_set_M32(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m32 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Matrix3x2[] = {
        { "m11", reinterpret_cast<getter>(Matrix3x2_get_M11), reinterpret_cast<setter>(Matrix3x2_set_M11), nullptr, nullptr },
        { "m12", reinterpret_cast<getter>(Matrix3x2_get_M12), reinterpret_cast<setter>(Matrix3x2_set_M12), nullptr, nullptr },
        { "m21", reinterpret_cast<getter>(Matrix3x2_get_M21), reinterpret_cast<setter>(Matrix3x2_set_M21), nullptr, nullptr },
        { "m22", reinterpret_cast<getter>(Matrix3x2_get_M22), reinterpret_cast<setter>(Matrix3x2_set_M22), nullptr, nullptr },
        { "m31", reinterpret_cast<getter>(Matrix3x2_get_M31), reinterpret_cast<setter>(Matrix3x2_set_M31), nullptr, nullptr },
        { "m32", reinterpret_cast<getter>(Matrix3x2_get_M32), reinterpret_cast<setter>(Matrix3x2_set_M32), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Matrix3x2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Matrix3x2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Matrix3x2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Matrix3x2(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Matrix3x2(py::wrapper::Windows::Foundation::Numerics::Matrix3x2* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Matrix3x2(PyObject* self) noexcept
    {
        py::pyobj_handle M11{PyObject_GetAttrString(self, "m11")};
        if (!M11)
        {
            return nullptr;
        }

        py::pyobj_handle M12{PyObject_GetAttrString(self, "m12")};
        if (!M12)
        {
            return nullptr;
        }

        py::pyobj_handle M21{PyObject_GetAttrString(self, "m21")};
        if (!M21)
        {
            return nullptr;
        }

        py::pyobj_handle M22{PyObject_GetAttrString(self, "m22")};
        if (!M22)
        {
            return nullptr;
        }

        py::pyobj_handle M31{PyObject_GetAttrString(self, "m31")};
        if (!M31)
        {
            return nullptr;
        }

        py::pyobj_handle M32{PyObject_GetAttrString(self, "m32")};
        if (!M32)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Matrix3x2(m11=%R, m12=%R, m21=%R, m22=%R, m31=%R, m32=%R)", M11.get(), M12.get(), M21.get(), M22.get(), M31.get(), M32.get());
    }

    static PyType_Slot _type_slots_Matrix3x2[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Matrix3x2) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Matrix3x2) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Matrix3x2) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Matrix3x2) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Matrix3x2) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Matrix3x2) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Matrix3x2) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Matrix3x2) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Matrix3x2) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Matrix3x2) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Matrix3x2) },
        { }
    };

    static PyType_Spec type_spec_Matrix3x2 = {
        "winrt._winrt_windows_foundation_numerics.Matrix3x2",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Matrix3x2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Matrix3x2};

    // ----- Matrix4x4 struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* _new_Matrix4x4(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _M11{};
        float _M12{};
        float _M13{};
        float _M14{};
        float _M21{};
        float _M22{};
        float _M23{};
        float _M24{};
        float _M31{};
        float _M32{};
        float _M33{};
        float _M34{};
        float _M41{};
        float _M42{};
        float _M43{};
        float _M44{};

        static const char* kwlist[] = {"m11", "m12", "m13", "m14", "m21", "m22", "m23", "m24", "m31", "m32", "m33", "m34", "m41", "m42", "m43", "m44", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ffffffffffffffff", const_cast<char**>(kwlist), &_M11, &_M12, &_M13, &_M14, &_M21, &_M22, &_M23, &_M24, &_M31, &_M32, &_M33, &_M34, &_M41, &_M42, &_M43, &_M44))
        {
            return -1;
        }

        try
        {
            self->obj.m11 = _M11;
            self->obj.m12 = _M12;
            self->obj.m13 = _M13;
            self->obj.m14 = _M14;
            self->obj.m21 = _M21;
            self->obj.m22 = _M22;
            self->obj.m23 = _M23;
            self->obj.m24 = _M24;
            self->obj.m31 = _M31;
            self->obj.m32 = _M32;
            self->obj.m33 = _M33;
            self->obj.m34 = _M34;
            self->obj.m41 = _M41;
            self->obj.m42 = _M42;
            self->obj.m43 = _M43;
            self->obj.m44 = _M44;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Matrix4x4(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* is_identity_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::is_identity(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* determinant_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::determinant(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* translation_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::translation(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* invert_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            winrt::Windows::Foundation::Numerics::float4x4 _result;

            if (!winrt::Windows::Foundation::Numerics::invert(self->obj, &_result))
            {
                PyErr_SetString(PyExc_ValueError, "Matrix is not invertible");
                return nullptr;
            }

            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* decompose_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            winrt::Windows::Foundation::Numerics::float3 _out0;
            winrt::Windows::Foundation::Numerics::quaternion _out1;
            winrt::Windows::Foundation::Numerics::float3 _out2;

            if (!winrt::Windows::Foundation::Numerics::decompose(self->obj, &_out0, &_out1, &_out2))
            {
                PyErr_SetString(PyExc_ValueError, "Matrix is not decomposable");
                return nullptr;
            }

            py::pyobj_handle out0{py::convert(_out0)};
            py::pyobj_handle out1{py::convert(_out1)};
            py::pyobj_handle out2{py::convert(_out2)};

            return PyTuple_Pack(3, out0.get(), out1.get(), out2.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Matrix4x4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4x4>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float4x4>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Matrix4x4(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::float4x4>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Matrix4x4[] = {
        { "is_identity", reinterpret_cast<PyCFunction>(is_identity_Matrix4x4), METH_NOARGS, nullptr },
        { "determinant", reinterpret_cast<PyCFunction>(determinant_Matrix4x4), METH_NOARGS, nullptr },
        { "translation", reinterpret_cast<PyCFunction>(translation_Matrix4x4), METH_NOARGS, nullptr },
        { "invert", reinterpret_cast<PyCFunction>(invert_Matrix4x4), METH_NOARGS, nullptr },
        { "decompose", reinterpret_cast<PyCFunction>(decompose_Matrix4x4), METH_NOARGS, nullptr },
        { "transform", reinterpret_cast<PyCFunction>(transform_Matrix4x4), METH_O, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Matrix4x4), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_Matrix4x4, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Matrix4x4_get_M11(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m11);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M11(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m11 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M12(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m12);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M12(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m12 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M13(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m13);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M13(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m13 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M14(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m14);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M14(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m14 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M21(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m21);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M21(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m21 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M22(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m22);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M22(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m22 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M23(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m23);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M23(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m23 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M24(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m24);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M24(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m24 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M31(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m31);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M31(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m31 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M32(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m32);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M32(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m32 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M33(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m33);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M33(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m33 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M34(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m34);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M34(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m34 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M41(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m41);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M41(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m41 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M42(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m42);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M42(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m42 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M43(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m43);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M43(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m43 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix4x4_get_M44(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.m44);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix4x4_set_M44(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.m44 = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Matrix4x4[] = {
        { "m11", reinterpret_cast<getter>(Matrix4x4_get_M11), reinterpret_cast<setter>(Matrix4x4_set_M11), nullptr, nullptr },
        { "m12", reinterpret_cast<getter>(Matrix4x4_get_M12), reinterpret_cast<setter>(Matrix4x4_set_M12), nullptr, nullptr },
        { "m13", reinterpret_cast<getter>(Matrix4x4_get_M13), reinterpret_cast<setter>(Matrix4x4_set_M13), nullptr, nullptr },
        { "m14", reinterpret_cast<getter>(Matrix4x4_get_M14), reinterpret_cast<setter>(Matrix4x4_set_M14), nullptr, nullptr },
        { "m21", reinterpret_cast<getter>(Matrix4x4_get_M21), reinterpret_cast<setter>(Matrix4x4_set_M21), nullptr, nullptr },
        { "m22", reinterpret_cast<getter>(Matrix4x4_get_M22), reinterpret_cast<setter>(Matrix4x4_set_M22), nullptr, nullptr },
        { "m23", reinterpret_cast<getter>(Matrix4x4_get_M23), reinterpret_cast<setter>(Matrix4x4_set_M23), nullptr, nullptr },
        { "m24", reinterpret_cast<getter>(Matrix4x4_get_M24), reinterpret_cast<setter>(Matrix4x4_set_M24), nullptr, nullptr },
        { "m31", reinterpret_cast<getter>(Matrix4x4_get_M31), reinterpret_cast<setter>(Matrix4x4_set_M31), nullptr, nullptr },
        { "m32", reinterpret_cast<getter>(Matrix4x4_get_M32), reinterpret_cast<setter>(Matrix4x4_set_M32), nullptr, nullptr },
        { "m33", reinterpret_cast<getter>(Matrix4x4_get_M33), reinterpret_cast<setter>(Matrix4x4_set_M33), nullptr, nullptr },
        { "m34", reinterpret_cast<getter>(Matrix4x4_get_M34), reinterpret_cast<setter>(Matrix4x4_set_M34), nullptr, nullptr },
        { "m41", reinterpret_cast<getter>(Matrix4x4_get_M41), reinterpret_cast<setter>(Matrix4x4_set_M41), nullptr, nullptr },
        { "m42", reinterpret_cast<getter>(Matrix4x4_get_M42), reinterpret_cast<setter>(Matrix4x4_set_M42), nullptr, nullptr },
        { "m43", reinterpret_cast<getter>(Matrix4x4_get_M43), reinterpret_cast<setter>(Matrix4x4_set_M43), nullptr, nullptr },
        { "m44", reinterpret_cast<getter>(Matrix4x4_get_M44), reinterpret_cast<setter>(Matrix4x4_set_M44), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Matrix4x4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Matrix4x4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Matrix4x4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Matrix4x4(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Matrix4x4(py::wrapper::Windows::Foundation::Numerics::Matrix4x4* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Matrix4x4(PyObject* self) noexcept
    {
        py::pyobj_handle M11{PyObject_GetAttrString(self, "m11")};
        if (!M11)
        {
            return nullptr;
        }

        py::pyobj_handle M12{PyObject_GetAttrString(self, "m12")};
        if (!M12)
        {
            return nullptr;
        }

        py::pyobj_handle M13{PyObject_GetAttrString(self, "m13")};
        if (!M13)
        {
            return nullptr;
        }

        py::pyobj_handle M14{PyObject_GetAttrString(self, "m14")};
        if (!M14)
        {
            return nullptr;
        }

        py::pyobj_handle M21{PyObject_GetAttrString(self, "m21")};
        if (!M21)
        {
            return nullptr;
        }

        py::pyobj_handle M22{PyObject_GetAttrString(self, "m22")};
        if (!M22)
        {
            return nullptr;
        }

        py::pyobj_handle M23{PyObject_GetAttrString(self, "m23")};
        if (!M23)
        {
            return nullptr;
        }

        py::pyobj_handle M24{PyObject_GetAttrString(self, "m24")};
        if (!M24)
        {
            return nullptr;
        }

        py::pyobj_handle M31{PyObject_GetAttrString(self, "m31")};
        if (!M31)
        {
            return nullptr;
        }

        py::pyobj_handle M32{PyObject_GetAttrString(self, "m32")};
        if (!M32)
        {
            return nullptr;
        }

        py::pyobj_handle M33{PyObject_GetAttrString(self, "m33")};
        if (!M33)
        {
            return nullptr;
        }

        py::pyobj_handle M34{PyObject_GetAttrString(self, "m34")};
        if (!M34)
        {
            return nullptr;
        }

        py::pyobj_handle M41{PyObject_GetAttrString(self, "m41")};
        if (!M41)
        {
            return nullptr;
        }

        py::pyobj_handle M42{PyObject_GetAttrString(self, "m42")};
        if (!M42)
        {
            return nullptr;
        }

        py::pyobj_handle M43{PyObject_GetAttrString(self, "m43")};
        if (!M43)
        {
            return nullptr;
        }

        py::pyobj_handle M44{PyObject_GetAttrString(self, "m44")};
        if (!M44)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Matrix4x4(m11=%R, m12=%R, m13=%R, m14=%R, m21=%R, m22=%R, m23=%R, m24=%R, m31=%R, m32=%R, m33=%R, m34=%R, m41=%R, m42=%R, m43=%R, m44=%R)", M11.get(), M12.get(), M13.get(), M14.get(), M21.get(), M22.get(), M23.get(), M24.get(), M31.get(), M32.get(), M33.get(), M34.get(), M41.get(), M42.get(), M43.get(), M44.get());
    }

    static PyType_Slot _type_slots_Matrix4x4[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Matrix4x4) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Matrix4x4) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Matrix4x4) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Matrix4x4) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Matrix4x4) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Matrix4x4) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Matrix4x4) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Matrix4x4) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Matrix4x4) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Matrix4x4) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Matrix4x4) },
        { }
    };

    static PyType_Spec type_spec_Matrix4x4 = {
        "winrt._winrt_windows_foundation_numerics.Matrix4x4",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Matrix4x4),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Matrix4x4};

    // ----- Plane struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* _new_Plane(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        PyObject* _Normal{};
        float _D{};

        static const char* kwlist[] = {"normal", "d", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "Of", const_cast<char**>(kwlist), &_Normal, &_D))
        {
            return -1;
        }

        try
        {
            self->obj.normal = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Normal);
            self->obj.d = _D;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Plane(py::wrapper::Windows::Foundation::Numerics::Plane* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* normalize_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::normalize(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_coordinate_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot_coordinate(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_normal_Plane(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::plane>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot_normal(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Plane(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::plane>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Plane[] = {
        { "normalize", reinterpret_cast<PyCFunction>(normalize_Plane), METH_NOARGS, nullptr },
        { "transform", reinterpret_cast<PyCFunction>(transform_Plane), METH_O, nullptr },
        { "dot", reinterpret_cast<PyCFunction>(dot_Plane), METH_O, nullptr },
        { "dot_coordinate", reinterpret_cast<PyCFunction>(dot_coordinate_Plane), METH_O, nullptr },
        { "dot_normal", reinterpret_cast<PyCFunction>(dot_normal_Plane), METH_O, nullptr },
        { "_assign_array_", _assign_array_Plane, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Plane_get_Normal(py::wrapper::Windows::Foundation::Numerics::Plane* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.normal);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Plane_set_Normal(py::wrapper::Windows::Foundation::Numerics::Plane* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.normal = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Plane_get_D(py::wrapper::Windows::Foundation::Numerics::Plane* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.d);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Plane_set_D(py::wrapper::Windows::Foundation::Numerics::Plane* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.d = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Plane[] = {
        { "normal", reinterpret_cast<getter>(Plane_get_Normal), reinterpret_cast<setter>(Plane_set_Normal), nullptr, nullptr },
        { "d", reinterpret_cast<getter>(Plane_get_D), reinterpret_cast<setter>(Plane_set_D), nullptr, nullptr },
        { }
    };

    static PyObject* _richcompare_Plane(py::wrapper::Windows::Foundation::Numerics::Plane* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Plane(PyObject* self) noexcept
    {
        py::pyobj_handle Normal{PyObject_GetAttrString(self, "normal")};
        if (!Normal)
        {
            return nullptr;
        }

        py::pyobj_handle D{PyObject_GetAttrString(self, "d")};
        if (!D)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Plane(normal=%R, d=%R)", Normal.get(), D.get());
    }

    static PyType_Slot _type_slots_Plane[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Plane) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Plane) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Plane) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Plane) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Plane) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Plane) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Plane) },
        { }
    };

    static PyType_Spec type_spec_Plane = {
        "winrt._winrt_windows_foundation_numerics.Plane",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Plane),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Plane};

    // ----- Quaternion struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* _new_Quaternion(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _X{};
        float _Y{};
        float _Z{};
        float _W{};

        static const char* kwlist[] = {"x", "y", "z", "w", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ffff", const_cast<char**>(kwlist), &_X, &_Y, &_Z, &_W))
        {
            return -1;
        }

        try
        {
            self->obj.x = _X;
            self->obj.y = _Y;
            self->obj.z = _Z;
            self->obj.w = _W;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Quaternion(py::wrapper::Windows::Foundation::Numerics::Quaternion* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* is_identity_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::is_identity(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* length_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* length_squared_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length_squared(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* normalize_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::normalize(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* slerp_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::slerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Quaternion(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::quaternion>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Quaternion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::quaternion>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Quaternion[] = {
        { "is_identity", reinterpret_cast<PyCFunction>(is_identity_Quaternion), METH_NOARGS, nullptr },
        { "length", reinterpret_cast<PyCFunction>(length_Quaternion), METH_NOARGS, nullptr },
        { "length_squared", reinterpret_cast<PyCFunction>(length_squared_Quaternion), METH_NOARGS, nullptr },
        { "dot", reinterpret_cast<PyCFunction>(dot_Quaternion), METH_O, nullptr },
        { "normalize", reinterpret_cast<PyCFunction>(normalize_Quaternion), METH_NOARGS, nullptr },
        { "slerp", reinterpret_cast<PyCFunction>(slerp_Quaternion), METH_VARARGS, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Quaternion), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_Quaternion, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Quaternion_get_X(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.x);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Quaternion_set_X(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.x = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Quaternion_get_Y(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.y);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Quaternion_set_Y(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.y = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Quaternion_get_Z(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.z);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Quaternion_set_Z(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.z = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Quaternion_get_W(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.w);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Quaternion_set_W(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.w = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Quaternion[] = {
        { "x", reinterpret_cast<getter>(Quaternion_get_X), reinterpret_cast<setter>(Quaternion_set_X), nullptr, nullptr },
        { "y", reinterpret_cast<getter>(Quaternion_get_Y), reinterpret_cast<setter>(Quaternion_set_Y), nullptr, nullptr },
        { "z", reinterpret_cast<getter>(Quaternion_get_Z), reinterpret_cast<setter>(Quaternion_set_Z), nullptr, nullptr },
        { "w", reinterpret_cast<getter>(Quaternion_get_W), reinterpret_cast<setter>(Quaternion_set_W), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Quaternion(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Quaternion(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Quaternion(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _truediv_Quaternion(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(right);

            auto _result = _left / _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Quaternion(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _abs_Quaternion(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(operand);
            auto _result = winrt::Windows::Foundation::Numerics::length(_operand);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Quaternion(py::wrapper::Windows::Foundation::Numerics::Quaternion* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Quaternion(PyObject* self) noexcept
    {
        py::pyobj_handle X{PyObject_GetAttrString(self, "x")};
        if (!X)
        {
            return nullptr;
        }

        py::pyobj_handle Y{PyObject_GetAttrString(self, "y")};
        if (!Y)
        {
            return nullptr;
        }

        py::pyobj_handle Z{PyObject_GetAttrString(self, "z")};
        if (!Z)
        {
            return nullptr;
        }

        py::pyobj_handle W{PyObject_GetAttrString(self, "w")};
        if (!W)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Quaternion(x=%R, y=%R, z=%R, w=%R)", X.get(), Y.get(), Z.get(), W.get());
    }

    static PyType_Slot _type_slots_Quaternion[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Quaternion) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Quaternion) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Quaternion) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Quaternion) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Quaternion) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Quaternion) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Quaternion) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Quaternion) },
        { Py_nb_true_divide, reinterpret_cast<void*>(_truediv_Quaternion) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Quaternion) },
        { Py_nb_absolute, reinterpret_cast<void*>(_abs_Quaternion) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Quaternion) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Quaternion) },
        { }
    };

    static PyType_Spec type_spec_Quaternion = {
        "winrt._winrt_windows_foundation_numerics.Quaternion",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Quaternion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Quaternion};

    // ----- Rational struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::Rational>* _new_Rational(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::Rational>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Rational(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::Rational>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        uint32_t _Numerator{};
        uint32_t _Denominator{};

        static const char* kwlist[] = {"numerator", "denominator", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "II", const_cast<char**>(kwlist), &_Numerator, &_Denominator))
        {
            return -1;
        }

        try
        {
            self->obj.Numerator = _Numerator;
            self->obj.Denominator = _Denominator;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Rational(py::wrapper::Windows::Foundation::Numerics::Rational* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_Rational(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::Rational>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Rational[] = {
        { "_assign_array_", _assign_array_Rational, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Rational_get_Numerator(py::wrapper::Windows::Foundation::Numerics::Rational* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Numerator);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Rational_set_Numerator(py::wrapper::Windows::Foundation::Numerics::Rational* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Numerator = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Rational_get_Denominator(py::wrapper::Windows::Foundation::Numerics::Rational* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Denominator);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Rational_set_Denominator(py::wrapper::Windows::Foundation::Numerics::Rational* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Denominator = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Rational[] = {
        { "numerator", reinterpret_cast<getter>(Rational_get_Numerator), reinterpret_cast<setter>(Rational_set_Numerator), nullptr, nullptr },
        { "denominator", reinterpret_cast<getter>(Rational_get_Denominator), reinterpret_cast<setter>(Rational_set_Denominator), nullptr, nullptr },
        { }
    };

    static PyObject* _richcompare_Rational(py::wrapper::Windows::Foundation::Numerics::Rational* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::Rational>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Rational(PyObject* self) noexcept
    {
        py::pyobj_handle Numerator{PyObject_GetAttrString(self, "numerator")};
        if (!Numerator)
        {
            return nullptr;
        }

        py::pyobj_handle Denominator{PyObject_GetAttrString(self, "denominator")};
        if (!Denominator)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Rational(numerator=%R, denominator=%R)", Numerator.get(), Denominator.get());
    }

    static PyType_Slot _type_slots_Rational[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Rational) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Rational) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Rational) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Rational) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Rational) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Rational) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Rational) },
        { }
    };

    static PyType_Spec type_spec_Rational = {
        "winrt._winrt_windows_foundation_numerics.Rational",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Rational),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Rational};

    // ----- Vector2 struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* _new_Vector2(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _X{};
        float _Y{};

        static const char* kwlist[] = {"x", "y", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ff", const_cast<char**>(kwlist), &_X, &_Y))
        {
            return -1;
        }

        try
        {
            self->obj.x = _X;
            self->obj.y = _Y;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Vector2(py::wrapper::Windows::Foundation::Numerics::Vector2* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* length_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* length_squared_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length_squared(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_squared_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance_squared(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* normalize_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::normalize(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* reflect_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::reflect(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* min_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::min(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* max_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::max(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* clamp_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 0);
            auto _arg1 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::clamp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix3x2")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix3x2', 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_normal_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix3x2")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3x2>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform_normal(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform_normal(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix3x2', 'winrt._winrt_windows_foundation_numerics.Matrix4x4' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform4_Vector2(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float2>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform4(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform4(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Vector2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::float2>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Vector2[] = {
        { "length", reinterpret_cast<PyCFunction>(length_Vector2), METH_NOARGS, nullptr },
        { "length_squared", reinterpret_cast<PyCFunction>(length_squared_Vector2), METH_NOARGS, nullptr },
        { "distance", reinterpret_cast<PyCFunction>(distance_Vector2), METH_O, nullptr },
        { "distance_squared", reinterpret_cast<PyCFunction>(distance_squared_Vector2), METH_O, nullptr },
        { "dot", reinterpret_cast<PyCFunction>(dot_Vector2), METH_O, nullptr },
        { "normalize", reinterpret_cast<PyCFunction>(normalize_Vector2), METH_NOARGS, nullptr },
        { "reflect", reinterpret_cast<PyCFunction>(reflect_Vector2), METH_O, nullptr },
        { "min", reinterpret_cast<PyCFunction>(min_Vector2), METH_O, nullptr },
        { "max", reinterpret_cast<PyCFunction>(max_Vector2), METH_O, nullptr },
        { "clamp", reinterpret_cast<PyCFunction>(clamp_Vector2), METH_VARARGS, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Vector2), METH_VARARGS, nullptr },
        { "transform", reinterpret_cast<PyCFunction>(transform_Vector2), METH_O, nullptr },
        { "transform_normal", reinterpret_cast<PyCFunction>(transform_normal_Vector2), METH_O, nullptr },
        { "transform4", reinterpret_cast<PyCFunction>(transform4_Vector2), METH_O, nullptr },
        { "_assign_array_", _assign_array_Vector2, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Vector2_get_X(py::wrapper::Windows::Foundation::Numerics::Vector2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.x);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector2_set_X(py::wrapper::Windows::Foundation::Numerics::Vector2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.x = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector2_get_Y(py::wrapper::Windows::Foundation::Numerics::Vector2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.y);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector2_set_Y(py::wrapper::Windows::Foundation::Numerics::Vector2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.y = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Vector2[] = {
        { "x", reinterpret_cast<getter>(Vector2_get_X), reinterpret_cast<setter>(Vector2_set_X), nullptr, nullptr },
        { "y", reinterpret_cast<getter>(Vector2_get_Y), reinterpret_cast<setter>(Vector2_set_Y), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Vector2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Vector2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Vector2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            py::pyobj_handle left_float{PyNumber_Float(left)};
            if (left_float)
            {
                auto _left_float = PyFloat_AsDouble(left_float.get());
                if (_left_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }
                auto _result = static_cast<float>(_left_float) * py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(right);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _truediv_Vector2(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left / static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(right);

            auto _result = _left / _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Vector2(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _abs_Vector2(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(operand);
            auto _result = winrt::Windows::Foundation::Numerics::length(_operand);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Vector2(py::wrapper::Windows::Foundation::Numerics::Vector2* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::float2>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Vector2(PyObject* self) noexcept
    {
        py::pyobj_handle X{PyObject_GetAttrString(self, "x")};
        if (!X)
        {
            return nullptr;
        }

        py::pyobj_handle Y{PyObject_GetAttrString(self, "y")};
        if (!Y)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Vector2(x=%R, y=%R)", X.get(), Y.get());
    }

    static PyType_Slot _type_slots_Vector2[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Vector2) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Vector2) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Vector2) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Vector2) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Vector2) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Vector2) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Vector2) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Vector2) },
        { Py_nb_true_divide, reinterpret_cast<void*>(_truediv_Vector2) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Vector2) },
        { Py_nb_absolute, reinterpret_cast<void*>(_abs_Vector2) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Vector2) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Vector2) },
        { }
    };

    static PyType_Spec type_spec_Vector2 = {
        "winrt._winrt_windows_foundation_numerics.Vector2",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Vector2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Vector2};

    // ----- Vector3 struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* _new_Vector3(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _X{};
        float _Y{};
        float _Z{};

        static const char* kwlist[] = {"x", "y", "z", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "fff", const_cast<char**>(kwlist), &_X, &_Y, &_Z))
        {
            return -1;
        }

        try
        {
            self->obj.x = _X;
            self->obj.y = _Y;
            self->obj.z = _Z;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Vector3(py::wrapper::Windows::Foundation::Numerics::Vector3* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* length_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* length_squared_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length_squared(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_squared_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance_squared(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* cross_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::cross(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* normalize_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::normalize(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* reflect_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::reflect(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* min_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::min(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* max_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::max(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* clamp_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
            auto _arg1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::clamp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_normal_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::transform_normal(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform4_Vector3(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float3>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform4(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform4(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Vector3(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::float3>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Vector3[] = {
        { "length", reinterpret_cast<PyCFunction>(length_Vector3), METH_NOARGS, nullptr },
        { "length_squared", reinterpret_cast<PyCFunction>(length_squared_Vector3), METH_NOARGS, nullptr },
        { "distance", reinterpret_cast<PyCFunction>(distance_Vector3), METH_O, nullptr },
        { "distance_squared", reinterpret_cast<PyCFunction>(distance_squared_Vector3), METH_O, nullptr },
        { "dot", reinterpret_cast<PyCFunction>(dot_Vector3), METH_O, nullptr },
        { "cross", reinterpret_cast<PyCFunction>(cross_Vector3), METH_O, nullptr },
        { "normalize", reinterpret_cast<PyCFunction>(normalize_Vector3), METH_NOARGS, nullptr },
        { "reflect", reinterpret_cast<PyCFunction>(reflect_Vector3), METH_O, nullptr },
        { "min", reinterpret_cast<PyCFunction>(min_Vector3), METH_O, nullptr },
        { "max", reinterpret_cast<PyCFunction>(max_Vector3), METH_O, nullptr },
        { "clamp", reinterpret_cast<PyCFunction>(clamp_Vector3), METH_VARARGS, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Vector3), METH_VARARGS, nullptr },
        { "transform", reinterpret_cast<PyCFunction>(transform_Vector3), METH_O, nullptr },
        { "transform_normal", reinterpret_cast<PyCFunction>(transform_normal_Vector3), METH_O, nullptr },
        { "transform4", reinterpret_cast<PyCFunction>(transform4_Vector3), METH_O, nullptr },
        { "_assign_array_", _assign_array_Vector3, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Vector3_get_X(py::wrapper::Windows::Foundation::Numerics::Vector3* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.x);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector3_set_X(py::wrapper::Windows::Foundation::Numerics::Vector3* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.x = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector3_get_Y(py::wrapper::Windows::Foundation::Numerics::Vector3* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.y);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector3_set_Y(py::wrapper::Windows::Foundation::Numerics::Vector3* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.y = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector3_get_Z(py::wrapper::Windows::Foundation::Numerics::Vector3* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.z);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector3_set_Z(py::wrapper::Windows::Foundation::Numerics::Vector3* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.z = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Vector3[] = {
        { "x", reinterpret_cast<getter>(Vector3_get_X), reinterpret_cast<setter>(Vector3_set_X), nullptr, nullptr },
        { "y", reinterpret_cast<getter>(Vector3_get_Y), reinterpret_cast<setter>(Vector3_set_Y), nullptr, nullptr },
        { "z", reinterpret_cast<getter>(Vector3_get_Z), reinterpret_cast<setter>(Vector3_set_Z), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Vector3(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Vector3(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Vector3(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            py::pyobj_handle left_float{PyNumber_Float(left)};
            if (left_float)
            {
                auto _left_float = PyFloat_AsDouble(left_float.get());
                if (_left_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }
                auto _result = static_cast<float>(_left_float) * py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(right);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _truediv_Vector3(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left / static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(right);

            auto _result = _left / _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Vector3(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _abs_Vector3(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(operand);
            auto _result = winrt::Windows::Foundation::Numerics::length(_operand);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Vector3(py::wrapper::Windows::Foundation::Numerics::Vector3* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Vector3(PyObject* self) noexcept
    {
        py::pyobj_handle X{PyObject_GetAttrString(self, "x")};
        if (!X)
        {
            return nullptr;
        }

        py::pyobj_handle Y{PyObject_GetAttrString(self, "y")};
        if (!Y)
        {
            return nullptr;
        }

        py::pyobj_handle Z{PyObject_GetAttrString(self, "z")};
        if (!Z)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Vector3(x=%R, y=%R, z=%R)", X.get(), Y.get(), Z.get());
    }

    static PyType_Slot _type_slots_Vector3[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Vector3) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Vector3) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Vector3) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Vector3) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Vector3) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Vector3) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Vector3) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Vector3) },
        { Py_nb_true_divide, reinterpret_cast<void*>(_truediv_Vector3) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Vector3) },
        { Py_nb_absolute, reinterpret_cast<void*>(_abs_Vector3) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Vector3) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Vector3) },
        { }
    };

    static PyType_Spec type_spec_Vector3 = {
        "winrt._winrt_windows_foundation_numerics.Vector3",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Vector3),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Vector3};

    // ----- Vector4 struct --------------------

    winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* _new_Vector4(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        float _X{};
        float _Y{};
        float _Z{};
        float _W{};

        static const char* kwlist[] = {"x", "y", "z", "w", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ffff", const_cast<char**>(kwlist), &_X, &_Y, &_Z, &_W))
        {
            return -1;
        }

        try
        {
            self->obj.x = _X;
            self->obj.y = _Y;
            self->obj.z = _Z;
            self->obj.w = _W;

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Vector4(py::wrapper::Windows::Foundation::Numerics::Vector4* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* length_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* length_squared_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::length_squared(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* distance_squared_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::distance_squared(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* dot_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::dot(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* normalize_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            auto _result = winrt::Windows::Foundation::Numerics::normalize(self->obj);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* min_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::min(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* max_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(arg);
            auto _result = winrt::Windows::Foundation::Numerics::max(self->obj, _arg);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* clamp_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float4>(args, 0);
            auto _arg1 = py::convert_to<winrt::Windows::Foundation::Numerics::float4>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::clamp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* lerp_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* args) noexcept
    {
        try
        {
            auto _arg0 = py::convert_to<winrt::Windows::Foundation::Numerics::float4>(args, 0);
            auto _arg1 = py::convert_to<float>(args, 1);
            auto _result = winrt::Windows::Foundation::Numerics::lerp(self->obj, _arg0, _arg1);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* transform_Vector4(winrt_struct_wrapper<winrt::Windows::Foundation::Numerics::float4>* self, PyObject* arg) noexcept
    {
        try
        {
            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Matrix4x4")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            if (std::string_view(Py_TYPE(arg)->tp_name) == "winrt._winrt_windows_foundation_numerics.Quaternion")
            {
                auto _arg = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
                auto _result = winrt::Windows::Foundation::Numerics::transform(self->obj, _arg);
                return py::convert(_result);
            }

            PyErr_Format(PyExc_TypeError, "Expecting one of 'winrt._winrt_windows_foundation_numerics.Matrix4x4', 'winrt._winrt_windows_foundation_numerics.Quaternion' but got '%s'", Py_TYPE(arg)->tp_name);
            return nullptr;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Vector4(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Foundation::Numerics::float4>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Vector4[] = {
        { "length", reinterpret_cast<PyCFunction>(length_Vector4), METH_NOARGS, nullptr },
        { "length_squared", reinterpret_cast<PyCFunction>(length_squared_Vector4), METH_NOARGS, nullptr },
        { "distance", reinterpret_cast<PyCFunction>(distance_Vector4), METH_O, nullptr },
        { "distance_squared", reinterpret_cast<PyCFunction>(distance_squared_Vector4), METH_O, nullptr },
        { "dot", reinterpret_cast<PyCFunction>(dot_Vector4), METH_O, nullptr },
        { "normalize", reinterpret_cast<PyCFunction>(normalize_Vector4), METH_NOARGS, nullptr },
        { "min", reinterpret_cast<PyCFunction>(min_Vector4), METH_O, nullptr },
        { "max", reinterpret_cast<PyCFunction>(max_Vector4), METH_O, nullptr },
        { "clamp", reinterpret_cast<PyCFunction>(clamp_Vector4), METH_VARARGS, nullptr },
        { "lerp", reinterpret_cast<PyCFunction>(lerp_Vector4), METH_VARARGS, nullptr },
        { "transform", reinterpret_cast<PyCFunction>(transform_Vector4), METH_O, nullptr },
        { "_assign_array_", _assign_array_Vector4, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Vector4_get_X(py::wrapper::Windows::Foundation::Numerics::Vector4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.x);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector4_set_X(py::wrapper::Windows::Foundation::Numerics::Vector4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.x = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector4_get_Y(py::wrapper::Windows::Foundation::Numerics::Vector4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.y);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector4_set_Y(py::wrapper::Windows::Foundation::Numerics::Vector4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.y = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector4_get_Z(py::wrapper::Windows::Foundation::Numerics::Vector4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.z);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector4_set_Z(py::wrapper::Windows::Foundation::Numerics::Vector4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.z = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Vector4_get_W(py::wrapper::Windows::Foundation::Numerics::Vector4* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.w);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Vector4_set_W(py::wrapper::Windows::Foundation::Numerics::Vector4* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.w = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Vector4[] = {
        { "x", reinterpret_cast<getter>(Vector4_get_X), reinterpret_cast<setter>(Vector4_set_X), nullptr, nullptr },
        { "y", reinterpret_cast<getter>(Vector4_get_Y), reinterpret_cast<setter>(Vector4_set_Y), nullptr, nullptr },
        { "z", reinterpret_cast<getter>(Vector4_get_Z), reinterpret_cast<setter>(Vector4_set_Z), nullptr, nullptr },
        { "w", reinterpret_cast<getter>(Vector4_get_W), reinterpret_cast<setter>(Vector4_set_W), nullptr, nullptr },
        { }
    };

    static PyObject* _add_Vector4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(right);

            auto _result = _left + _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _sub_Vector4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(left);
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(right);

            auto _result = _left - _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _mul_Vector4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            py::pyobj_handle left_float{PyNumber_Float(left)};
            if (left_float)
            {
                auto _left_float = PyFloat_AsDouble(left_float.get());
                if (_left_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }
                auto _result = static_cast<float>(_left_float) * py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(right);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left * static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }

            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(right);

            auto _result = _left * _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _truediv_Vector4(PyObject* left, PyObject* right) noexcept
    {
        try
        {
            auto _left = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(left);

            py::pyobj_handle right_float{PyNumber_Float(right)};
            if (right_float)
            {
                auto _right_float = PyFloat_AsDouble(right_float.get());
                if (_right_float == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                auto _result = _left / static_cast<float>(_right_float);
                return py::convert(_result);
            }
            else
            {
                PyErr_Clear();
            }
            auto _right = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(right);

            auto _result = _left / _right;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _neg_Vector4(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(operand);
            auto _result = -_operand;
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _abs_Vector4(PyObject* operand) noexcept
    {
        try
        {
            auto _operand = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(operand);
            auto _result = winrt::Windows::Foundation::Numerics::length(_operand);
            return py::convert(_result);
        }
        catch (...)
        {
            py::to_PyErr();

            if (PyErr_ExceptionMatches(PyExc_TypeError))
            {
                PyErr_Clear();
                Py_RETURN_NOTIMPLEMENTED;
            }

            return nullptr;
        }
    }

    static PyObject* _richcompare_Vector4(py::wrapper::Windows::Foundation::Numerics::Vector4* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::converter<winrt::Windows::Foundation::Numerics::float4>::convert_to(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Vector4(PyObject* self) noexcept
    {
        py::pyobj_handle X{PyObject_GetAttrString(self, "x")};
        if (!X)
        {
            return nullptr;
        }

        py::pyobj_handle Y{PyObject_GetAttrString(self, "y")};
        if (!Y)
        {
            return nullptr;
        }

        py::pyobj_handle Z{PyObject_GetAttrString(self, "z")};
        if (!Z)
        {
            return nullptr;
        }

        py::pyobj_handle W{PyObject_GetAttrString(self, "w")};
        if (!W)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Vector4(x=%R, y=%R, z=%R, w=%R)", X.get(), Y.get(), Z.get(), W.get());
    }

    static PyType_Slot _type_slots_Vector4[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Vector4) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Vector4) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Vector4) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Vector4) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Vector4) },
        { Py_nb_add, reinterpret_cast<void*>(_add_Vector4) },
        { Py_nb_subtract, reinterpret_cast<void*>(_sub_Vector4) },
        { Py_nb_multiply, reinterpret_cast<void*>(_mul_Vector4) },
        { Py_nb_true_divide, reinterpret_cast<void*>(_truediv_Vector4) },
        { Py_nb_negative, reinterpret_cast<void*>(_neg_Vector4) },
        { Py_nb_absolute, reinterpret_cast<void*>(_abs_Vector4) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Vector4) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Vector4) },
        { }
    };

    static PyType_Spec type_spec_Vector4 = {
        "winrt._winrt_windows_foundation_numerics.Vector4",
        sizeof(py::wrapper::Windows::Foundation::Numerics::Vector4),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Vector4};

    // ----- Windows.Foundation.Numerics Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Foundation.Numerics");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_foundation_numerics",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Foundation::Numerics

PyMODINIT_FUNC PyInit__winrt_windows_foundation_numerics(void) noexcept
{
    using namespace py::cpp::Windows::Foundation::Numerics;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle Matrix3x2_type{py::register_python_type(module.get(), &type_spec_Matrix3x2, nullptr, nullptr)};
    if (!Matrix3x2_type)
    {
        return nullptr;
    }

    py::pytype_handle Matrix4x4_type{py::register_python_type(module.get(), &type_spec_Matrix4x4, nullptr, nullptr)};
    if (!Matrix4x4_type)
    {
        return nullptr;
    }

    py::pytype_handle Plane_type{py::register_python_type(module.get(), &type_spec_Plane, nullptr, nullptr)};
    if (!Plane_type)
    {
        return nullptr;
    }

    py::pytype_handle Quaternion_type{py::register_python_type(module.get(), &type_spec_Quaternion, nullptr, nullptr)};
    if (!Quaternion_type)
    {
        return nullptr;
    }

    py::pytype_handle Rational_type{py::register_python_type(module.get(), &type_spec_Rational, nullptr, nullptr)};
    if (!Rational_type)
    {
        return nullptr;
    }

    py::pytype_handle Vector2_type{py::register_python_type(module.get(), &type_spec_Vector2, nullptr, nullptr)};
    if (!Vector2_type)
    {
        return nullptr;
    }

    py::pytype_handle Vector3_type{py::register_python_type(module.get(), &type_spec_Vector3, nullptr, nullptr)};
    if (!Vector3_type)
    {
        return nullptr;
    }

    py::pytype_handle Vector4_type{py::register_python_type(module.get(), &type_spec_Vector4, nullptr, nullptr)};
    if (!Vector4_type)
    {
        return nullptr;
    }


    return module.detach();
}
