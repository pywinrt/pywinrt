# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.microsoft.windows.applicationmodel.resources import ResourceCandidateKind

Self = typing.TypeVar('Self')

@typing.final
class KnownResourceQualifierName_Static(type):
    @_property
    def contrast(cls) -> str: ...
    @_property
    def custom(cls) -> str: ...
    @_property
    def device_family(cls) -> str: ...
    @_property
    def home_region(cls) -> str: ...
    @_property
    def language(cls) -> str: ...
    @_property
    def layout_direction(cls) -> str: ...
    @_property
    def scale(cls) -> str: ...
    @_property
    def target_size(cls) -> str: ...
    @_property
    def theme(cls) -> str: ...

@typing.final
class KnownResourceQualifierName(winrt.system.Object, metaclass=KnownResourceQualifierName_Static):
    pass

@typing.final
class ResourceCandidate(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], kind: ResourceCandidateKind, data: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    @_property
    def kind(self) -> ResourceCandidateKind: ...
    @_property
    def qualifier_values(self) -> typing.Mapping[str, str]: ...
    @_property
    def value_as_bytes(self) -> winrt.system.UInt8: ...
    @_property
    def value_as_string(self) -> str: ...

@typing.final
class ResourceContext(winrt.system.Object, ImplementsIResourceContext):
    @_property
    def qualifier_values(self) -> typing.MutableMapping[str, str]: ...

@typing.final
class ResourceLoader_Static(type):
    def get_default_resource_file_path(cls) -> str: ...

@typing.final
class ResourceLoader(winrt.system.Object, metaclass=ResourceLoader_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self], file_name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], file_name: str, resource_map: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def get_string(self, resource_id: str, /) -> str: ...
    def get_string_for_uri(self, resource_uri: windows_foundation.Uri, /) -> str: ...

@typing.final
class ResourceManager(winrt.system.Object, ImplementsIResourceManager):
    @typing.overload
    def __new__(cls: typing.Type[Self], file_name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def create_resource_context(self) -> ResourceContext: ...
    def add_resource_not_found(self, handler: windows_foundation.TypedEventHandler[ResourceManager, ResourceNotFoundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_resource_not_found(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def main_resource_map(self) -> ResourceMap: ...

@typing.final
class ResourceMap(winrt.system.Object):
    def get_subtree(self, reference: str, /) -> ResourceMap: ...
    def get_value(self, resource: str, /) -> ResourceCandidate: ...
    def get_value_by_index(self, index: winrt.system.UInt32, /) -> windows_foundation_collections.IKeyValuePair[str, ResourceCandidate]: ...
    def get_value_by_index_with_context(self, index: winrt.system.UInt32, context: ResourceContext, /) -> windows_foundation_collections.IKeyValuePair[str, ResourceCandidate]: ...
    def get_value_with_context(self, resource: str, context: ResourceContext, /) -> ResourceCandidate: ...
    def try_get_subtree(self, reference: str, /) -> ResourceMap: ...
    def try_get_value(self, resource: str, /) -> ResourceCandidate: ...
    def try_get_value_with_context(self, resource: str, context: ResourceContext, /) -> ResourceCandidate: ...
    @_property
    def resource_count(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceNotFoundEventArgs(winrt.system.Object):
    def set_resolved_candidate(self, candidate: ResourceCandidate, /) -> None: ...
    @_property
    def context(self) -> ResourceContext: ...
    @_property
    def name(self) -> str: ...

class ImplementsIResourceContext():
    pass

@typing.final
class IResourceContext(winrt.system.Object, ImplementsIResourceContext):
    @_property
    def qualifier_values(self) -> typing.MutableMapping[str, str]: ...

class ImplementsIResourceManager():
    pass

@typing.final
class IResourceManager(winrt.system.Object, ImplementsIResourceManager):
    def create_resource_context(self) -> ResourceContext: ...
    def add_resource_not_found(self, handler: windows_foundation.TypedEventHandler[ResourceManager, ResourceNotFoundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_resource_not_found(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def main_resource_map(self) -> ResourceMap: ...

