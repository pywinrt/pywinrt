# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.microsoft.windows.applicationmodel.resources import ResourceCandidateKind

Self = typing.TypeVar('Self')

@typing.final
class KnownResourceQualifierName_Static(type):
    @_property
    def contrast(cls) -> str: ...
    @_property
    def custom(cls) -> str: ...
    @_property
    def device_family(cls) -> str: ...
    @_property
    def home_region(cls) -> str: ...
    @_property
    def language(cls) -> str: ...
    @_property
    def layout_direction(cls) -> str: ...
    @_property
    def scale(cls) -> str: ...
    @_property
    def target_size(cls) -> str: ...
    @_property
    def theme(cls) -> str: ...

@typing.final
class KnownResourceQualifierName(winrt.system.Object, metaclass=KnownResourceQualifierName_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownResourceQualifierName: ...

@typing.final
class ResourceCandidate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceCandidate: ...
    @typing.overload
    def __new__(cls: typing.Type[ResourceCandidate], kind: ResourceCandidateKind, data: str) -> ResourceCandidate:...
    @typing.overload
    def __new__(cls: typing.Type[ResourceCandidate], data: winrt.system.Array[winrt.system.UInt8]) -> ResourceCandidate:...
    @_property
    def kind(self) -> ResourceCandidateKind: ...
    @_property
    def qualifier_values(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    @_property
    def value_as_bytes(self) -> winrt.system.UInt8: ...
    @_property
    def value_as_string(self) -> str: ...

@typing.final
class ResourceContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceContext: ...
    @_property
    def qualifier_values(self) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]: ...

@typing.final
class ResourceLoader_Static(type):
    def get_default_resource_file_path(cls) -> str: ...

@typing.final
class ResourceLoader(winrt.system.Object, metaclass=ResourceLoader_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceLoader: ...
    @typing.overload
    def __new__(cls: typing.Type[ResourceLoader], file_name: str) -> ResourceLoader:...
    @typing.overload
    def __new__(cls: typing.Type[ResourceLoader], file_name: str, resource_map: str) -> ResourceLoader:...
    @typing.overload
    def __new__(cls: typing.Type[ResourceLoader]) -> ResourceLoader:...
    def get_string(self, resource_id: str, /) -> str: ...
    def get_string_for_uri(self, resource_uri: typing.Optional[winrt.windows.foundation.Uri], /) -> str: ...

@typing.final
class ResourceManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceManager: ...
    @typing.overload
    def __new__(cls: typing.Type[ResourceManager], file_name: str) -> ResourceManager:...
    @typing.overload
    def __new__(cls: typing.Type[ResourceManager]) -> ResourceManager:...
    def create_resource_context(self) -> typing.Optional[ResourceContext]: ...
    def add_resource_not_found(self, handler: winrt.windows.foundation.TypedEventHandler[ResourceManager, ResourceNotFoundEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resource_not_found(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def main_resource_map(self) -> typing.Optional[ResourceMap]: ...

@typing.final
class ResourceMap(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceMap: ...
    def get_subtree(self, reference: str, /) -> typing.Optional[ResourceMap]: ...
    @typing.overload
    def get_value(self, resource: str, /) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def get_value(self, resource: str, context: typing.Optional[ResourceContext], /) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def get_value_by_index(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.foundation.collections.IKeyValuePair[str, ResourceCandidate]]: ...
    @typing.overload
    def get_value_by_index(self, index: winrt.system.UInt32, context: typing.Optional[ResourceContext], /) -> typing.Optional[winrt.windows.foundation.collections.IKeyValuePair[str, ResourceCandidate]]: ...
    def try_get_subtree(self, reference: str, /) -> typing.Optional[ResourceMap]: ...
    @typing.overload
    def try_get_value(self, resource: str, /) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def try_get_value(self, resource: str, context: typing.Optional[ResourceContext], /) -> typing.Optional[ResourceCandidate]: ...
    @_property
    def resource_count(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceNotFoundEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceNotFoundEventArgs: ...
    def set_resolved_candidate(self, candidate: typing.Optional[ResourceCandidate], /) -> None: ...
    @_property
    def context(self) -> typing.Optional[ResourceContext]: ...
    @_property
    def name(self) -> str: ...

@typing.final
class IResourceContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IResourceContext: ...
    @_property
    def qualifier_values(self) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]: ...

@typing.final
class IResourceManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IResourceManager: ...
    def create_resource_context(self) -> typing.Optional[ResourceContext]: ...
    def add_resource_not_found(self, handler: winrt.windows.foundation.TypedEventHandler[ResourceManager, ResourceNotFoundEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resource_not_found(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def main_resource_map(self) -> typing.Optional[ResourceMap]: ...

