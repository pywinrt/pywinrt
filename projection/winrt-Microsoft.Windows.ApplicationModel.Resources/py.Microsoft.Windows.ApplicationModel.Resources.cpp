// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.ApplicationModel.Resources.h"


namespace py::cpp::Microsoft::Windows::ApplicationModel::Resources
{
    // ----- KnownResourceQualifierName class --------------------

    static PyObject* _new_KnownResourceQualifierName(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName>::type_name);
        return nullptr;
    }

    static PyObject* KnownResourceQualifierName_get_Contrast(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"Contrast"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::Contrast());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_Custom(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"Custom"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::Custom());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_DeviceFamily(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"DeviceFamily"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::DeviceFamily());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_HomeRegion(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"HomeRegion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::HomeRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_Language(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"Language"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_LayoutDirection(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"LayoutDirection"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::LayoutDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_Scale(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"Scale"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::Scale());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_TargetSize(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"TargetSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::TargetSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownResourceQualifierName_get_Theme(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName", L"Theme"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::KnownResourceQualifierName::Theme());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownResourceQualifierName[] = {
        { }
    };

    static PyGetSetDef _getset_KnownResourceQualifierName[] = {
        { }
    };

    static PyType_Slot _type_slots_KnownResourceQualifierName[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_KnownResourceQualifierName) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_KnownResourceQualifierName) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_KnownResourceQualifierName) },
        { },
    };

    static PyType_Spec type_spec_KnownResourceQualifierName =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.KnownResourceQualifierName",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownResourceQualifierName
    };

    static PyGetSetDef getset_KnownResourceQualifierName_Static[] = {
        { "contrast", reinterpret_cast<getter>(KnownResourceQualifierName_get_Contrast), nullptr, nullptr, nullptr },
        { "custom", reinterpret_cast<getter>(KnownResourceQualifierName_get_Custom), nullptr, nullptr, nullptr },
        { "device_family", reinterpret_cast<getter>(KnownResourceQualifierName_get_DeviceFamily), nullptr, nullptr, nullptr },
        { "home_region", reinterpret_cast<getter>(KnownResourceQualifierName_get_HomeRegion), nullptr, nullptr, nullptr },
        { "language", reinterpret_cast<getter>(KnownResourceQualifierName_get_Language), nullptr, nullptr, nullptr },
        { "layout_direction", reinterpret_cast<getter>(KnownResourceQualifierName_get_LayoutDirection), nullptr, nullptr, nullptr },
        { "scale", reinterpret_cast<getter>(KnownResourceQualifierName_get_Scale), nullptr, nullptr, nullptr },
        { "target_size", reinterpret_cast<getter>(KnownResourceQualifierName_get_TargetSize), nullptr, nullptr, nullptr },
        { "theme", reinterpret_cast<getter>(KnownResourceQualifierName_get_Theme), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_KnownResourceQualifierName_Static[] = {
        { }
    };

    static PyType_Slot type_slots_KnownResourceQualifierName_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_KnownResourceQualifierName_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_KnownResourceQualifierName_Static) },
        { }
    };

    static PyType_Spec type_spec_KnownResourceQualifierName_Static =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.KnownResourceQualifierName_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_KnownResourceQualifierName_Static
    };

    // ----- ResourceCandidate class --------------------

    static PyObject* _new_ResourceCandidate(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidateKind>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceCandidate(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceCandidate_get_Kind(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceCandidate", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_QualifierValues(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceCandidate", L"QualifierValues"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_ValueAsBytes(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceCandidate", L"ValueAsBytes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ValueAsBytes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_ValueAsString(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceCandidate", L"ValueAsString"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ValueAsString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceCandidate(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceCandidate(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCandidate[] = {
        { "_assign_array_", _assign_array_ResourceCandidate, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceCandidate), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceCandidate[] = {
        { "kind", reinterpret_cast<getter>(ResourceCandidate_get_Kind), nullptr, nullptr, nullptr },
        { "qualifier_values", reinterpret_cast<getter>(ResourceCandidate_get_QualifierValues), nullptr, nullptr, nullptr },
        { "value_as_bytes", reinterpret_cast<getter>(ResourceCandidate_get_ValueAsBytes), nullptr, nullptr, nullptr },
        { "value_as_string", reinterpret_cast<getter>(ResourceCandidate_get_ValueAsString), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceCandidate[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceCandidate) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceCandidate) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceCandidate) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceCandidate) },
        { },
    };

    static PyType_Spec type_spec_ResourceCandidate =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceCandidate",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCandidate
    };

    // ----- ResourceContext class --------------------

    static PyObject* _new_ResourceContext(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceContext(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceContext* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceContext_get_QualifierValues(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceContext* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceContext", L"QualifierValues"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceContext[] = {
        { "_assign_array_", _assign_array_ResourceContext, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceContext), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceContext[] = {
        { "qualifier_values", reinterpret_cast<getter>(ResourceContext_get_QualifierValues), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceContext[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceContext) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceContext) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceContext) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceContext) },
        { },
    };

    static PyType_Spec type_spec_ResourceContext =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceContext",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceContext
    };

    // ----- ResourceLoader class --------------------

    static PyObject* _new_ResourceLoader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceLoader(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceLoader_GetDefaultResourceFilePath(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceLoader", L"GetDefaultResourceFilePath", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader::GetDefaultResourceFilePath());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetString(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceLoader", L"GetString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetStringForUri(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceLoader", L"GetStringForUri", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.GetStringForUri(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceLoader[] = {
        { "get_string", reinterpret_cast<PyCFunction>(ResourceLoader_GetString), METH_VARARGS, nullptr },
        { "get_string_for_uri", reinterpret_cast<PyCFunction>(ResourceLoader_GetStringForUri), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceLoader, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceLoader), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceLoader[] = {
        { }
    };

    static PyType_Slot _type_slots_ResourceLoader[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceLoader) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceLoader) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceLoader) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceLoader) },
        { },
    };

    static PyType_Spec type_spec_ResourceLoader =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceLoader",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceLoader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceLoader
    };

    static PyGetSetDef getset_ResourceLoader_Static[] = {
        { }
    };

    static PyMethodDef methods_ResourceLoader_Static[] = {
        { "get_default_resource_file_path", reinterpret_cast<PyCFunction>(ResourceLoader_GetDefaultResourceFilePath), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ResourceLoader_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ResourceLoader_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ResourceLoader_Static) },
        { }
    };

    static PyType_Spec type_spec_ResourceLoader_Static =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceLoader_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ResourceLoader_Static
    };

    // ----- ResourceManager class --------------------

    static PyObject* _new_ResourceManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceManager(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceManager_CreateResourceContext(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceManager", L"CreateResourceContext", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateResourceContext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_MainResourceMap(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceManager", L"MainResourceMap"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MainResourceMap());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_add_ResourceNotFound(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceManager", L"ResourceNotFound"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager, winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>>(arg);

            return py::convert(self->obj.ResourceNotFound(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_remove_ResourceNotFound(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceManager", L"ResourceNotFound"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ResourceNotFound(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceManager[] = {
        { "create_resource_context", reinterpret_cast<PyCFunction>(ResourceManager_CreateResourceContext), METH_VARARGS, nullptr },
        { "add_resource_not_found", reinterpret_cast<PyCFunction>(ResourceManager_add_ResourceNotFound), METH_O, nullptr },
        { "remove_resource_not_found", reinterpret_cast<PyCFunction>(ResourceManager_remove_ResourceNotFound), METH_O, nullptr },
        { "_assign_array_", _assign_array_ResourceManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceManager[] = {
        { "main_resource_map", reinterpret_cast<getter>(ResourceManager_get_MainResourceMap), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceManager) },
        { },
    };

    static PyType_Spec type_spec_ResourceManager =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceManager",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceManager
    };

    // ----- ResourceMap class --------------------

    static PyObject* _new_ResourceMap(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceMap>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceMap>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceMap(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceMap_GetSubtree(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"GetSubtree", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetSubtree(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetValue(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"GetValue", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"GetValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>(args, 1);

                return py::convert(self->obj.GetValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetValueByIndex(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"GetValueByIndex", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetValueByIndex(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"GetValueByIndex", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>(args, 1);

                return py::convert(self->obj.GetValueByIndex(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_TryGetSubtree(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"TryGetSubtree", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryGetSubtree(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_TryGetValue(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"TryGetValue", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryGetValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"TryGetValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceContext>(args, 1);

                return py::convert(self->obj.TryGetValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_get_ResourceCount(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceMap", L"ResourceCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResourceCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceMap>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMap[] = {
        { "get_subtree", reinterpret_cast<PyCFunction>(ResourceMap_GetSubtree), METH_VARARGS, nullptr },
        { "get_value", reinterpret_cast<PyCFunction>(ResourceMap_GetValue), METH_VARARGS, nullptr },
        { "get_value_by_index", reinterpret_cast<PyCFunction>(ResourceMap_GetValueByIndex), METH_VARARGS, nullptr },
        { "try_get_subtree", reinterpret_cast<PyCFunction>(ResourceMap_TryGetSubtree), METH_VARARGS, nullptr },
        { "try_get_value", reinterpret_cast<PyCFunction>(ResourceMap_TryGetValue), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceMap, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceMap), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceMap[] = {
        { "resource_count", reinterpret_cast<getter>(ResourceMap_get_ResourceCount), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceMap[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceMap) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceMap) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceMap) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceMap) },
        { },
    };

    static PyType_Spec type_spec_ResourceMap =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceMap",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMap
    };

    // ----- ResourceNotFoundEventArgs class --------------------

    static PyObject* _new_ResourceNotFoundEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceNotFoundEventArgs(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceNotFoundEventArgs_SetResolvedCandidate(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs", L"SetResolvedCandidate", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceCandidate>(args, 0);

                self->obj.SetResolvedCandidate(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceNotFoundEventArgs_get_Context(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs", L"Context"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Context());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceNotFoundEventArgs_get_Name(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceNotFoundEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceNotFoundEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceNotFoundEventArgs[] = {
        { "set_resolved_candidate", reinterpret_cast<PyCFunction>(ResourceNotFoundEventArgs_SetResolvedCandidate), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceNotFoundEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceNotFoundEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceNotFoundEventArgs[] = {
        { "context", reinterpret_cast<getter>(ResourceNotFoundEventArgs_get_Context), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(ResourceNotFoundEventArgs_get_Name), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceNotFoundEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceNotFoundEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceNotFoundEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceNotFoundEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceNotFoundEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ResourceNotFoundEventArgs =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.ResourceNotFoundEventArgs",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceNotFoundEventArgs
    };

    // ----- IResourceContext interface --------------------

    static PyObject* _new_IResourceContext(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceContext>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceContext>::type_name);
        return nullptr;
    }

    static void _dealloc_IResourceContext(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceContext* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IResourceContext_get_QualifierValues(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceContext* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.IResourceContext", L"QualifierValues"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceContext>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IResourceContext[] = {
        { "_assign_array_", _assign_array_IResourceContext, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IResourceContext), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IResourceContext[] = {
        { "qualifier_values", reinterpret_cast<getter>(IResourceContext_get_QualifierValues), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IResourceContext[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IResourceContext) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IResourceContext) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IResourceContext) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IResourceContext) },
        { },
    };

    static PyType_Spec type_spec_IResourceContext =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.IResourceContext",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IResourceContext
    };

    // ----- IResourceManager interface --------------------

    static PyObject* _new_IResourceManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceManager>::type_name);
        return nullptr;
    }

    static void _dealloc_IResourceManager(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IResourceManager_CreateResourceContext(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.Resources.IResourceManager", L"CreateResourceContext", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateResourceContext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IResourceManager_get_MainResourceMap(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.Resources.IResourceManager", L"MainResourceMap"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MainResourceMap());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IResourceManager_add_ResourceNotFound(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.ApplicationModel.Resources.IResourceManager", L"ResourceNotFound"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager, winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceNotFoundEventArgs>>(arg);

            return py::convert(self->obj.ResourceNotFound(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IResourceManager_remove_ResourceNotFound(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.ApplicationModel.Resources.IResourceManager", L"ResourceNotFound"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ResourceNotFound(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Resources::IResourceManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IResourceManager[] = {
        { "create_resource_context", reinterpret_cast<PyCFunction>(IResourceManager_CreateResourceContext), METH_VARARGS, nullptr },
        { "add_resource_not_found", reinterpret_cast<PyCFunction>(IResourceManager_add_ResourceNotFound), METH_O, nullptr },
        { "remove_resource_not_found", reinterpret_cast<PyCFunction>(IResourceManager_remove_ResourceNotFound), METH_O, nullptr },
        { "_assign_array_", _assign_array_IResourceManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IResourceManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IResourceManager[] = {
        { "main_resource_map", reinterpret_cast<getter>(IResourceManager_get_MainResourceMap), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IResourceManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IResourceManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IResourceManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IResourceManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IResourceManager) },
        { },
    };

    static PyType_Spec type_spec_IResourceManager =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_resources.IResourceManager",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Resources::IResourceManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IResourceManager
    };

    // ----- Microsoft.Windows.ApplicationModel.Resources Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::ApplicationModel::Resources");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_applicationmodel_resources",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::ApplicationModel::Resources

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_applicationmodel_resources(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::ApplicationModel::Resources;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_KnownResourceQualifierName_Static{PyType_FromSpec(&type_spec_KnownResourceQualifierName_Static)};
    if (!type_KnownResourceQualifierName_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_KnownResourceQualifierName, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_KnownResourceQualifierName_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceCandidate, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceContext, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ResourceLoader_Static{PyType_FromSpec(&type_spec_ResourceLoader_Static)};
    if (!type_ResourceLoader_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceLoader, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ResourceLoader_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceManager, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceMap, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceNotFoundEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IResourceContext, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IResourceManager, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
