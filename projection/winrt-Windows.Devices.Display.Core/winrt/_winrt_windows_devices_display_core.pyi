# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.display as windows_devices_display
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.graphics as windows_graphics
import winrt.windows.graphics.directx as windows_graphics_directx
import winrt.windows.graphics.directx.direct3d11 as windows_graphics_directx_direct3d11
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.devices.display.core import DisplayBitsPerChannel, DisplayDeviceCapability, DisplayManagerOptions, DisplayManagerResult, DisplayModeQueryOptions, DisplayPathScaling, DisplayPathStatus, DisplayPresentStatus, DisplayRotation, DisplayScanoutOptions, DisplaySourceStatus, DisplayStateApplyOptions, DisplayStateFunctionalizeOptions, DisplayStateOperationStatus, DisplayTargetPersistence, DisplayTaskSignalKind, DisplayWireFormatColorSpace, DisplayWireFormatEotf, DisplayWireFormatHdrMetadata, DisplayWireFormatPixelEncoding

Self = typing.TypeVar('Self')

@typing.final
class DisplayPresentationRate:
    @_property
    def vertical_sync_rate(self) -> windows_foundation_numerics.Rational: ...
    @_property
    def vertical_syncs_per_presentation(self) -> winrt.system.Int32: ...
    def __new__(cls, vertical_sync_rate: windows_foundation_numerics.Rational = windows_foundation_numerics.Rational(), vertical_syncs_per_presentation: winrt.system.Int32 = 0) -> DisplayPresentationRate: ...

@typing.final
class DisplayAdapter_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Display.Core.DisplayAdapter Windows.Devices.Display.Core.DisplayAdapter::FromId(Windows.Graphics.DisplayAdapterId)
    def from_id(cls, id: windows_graphics.DisplayAdapterId, /) -> DisplayAdapter: ...

@typing.final
class DisplayAdapter(winrt.system.Object, metaclass=DisplayAdapter_Static):
    # System.String Windows.Devices.Display.Core.DisplayAdapter::get_DeviceInterfacePath()
    @_property
    def device_interface_path(self) -> str: ...
    # Windows.Graphics.DisplayAdapterId Windows.Devices.Display.Core.DisplayAdapter::get_Id()
    @_property
    def id(self) -> windows_graphics.DisplayAdapterId: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayAdapter::get_PciDeviceId()
    @_property
    def pci_device_id(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayAdapter::get_PciRevision()
    @_property
    def pci_revision(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayAdapter::get_PciSubSystemId()
    @_property
    def pci_sub_system_id(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayAdapter::get_PciVendorId()
    @_property
    def pci_vendor_id(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayAdapter::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[_uuid.UUID, winrt.system.Object]: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayAdapter::get_SourceCount()
    @_property
    def source_count(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayAdapter::get_IsIndirectDisplayDevice()
    @_property
    def is_indirect_display_device(self) -> bool: ...
    # Windows.Devices.Display.Core.DisplayAdapter Windows.Devices.Display.Core.DisplayAdapter::get_PreferredRenderAdapter()
    @_property
    def preferred_render_adapter(self) -> DisplayAdapter: ...

@typing.final
class DisplayDevice(winrt.system.Object):
    # Windows.Devices.Display.Core.DisplayFence Windows.Devices.Display.Core.DisplayDevice::CreatePeriodicFence(Windows.Devices.Display.Core.DisplayTarget,Windows.Foundation.TimeSpan)
    def create_periodic_fence(self, target: DisplayTarget, offset_from_v_blank: datetime.timedelta, /) -> DisplayFence: ...
    # Windows.Devices.Display.Core.DisplaySurface Windows.Devices.Display.Core.DisplayDevice::CreatePrimary(Windows.Devices.Display.Core.DisplayTarget,Windows.Devices.Display.Core.DisplayPrimaryDescription)
    def create_primary(self, target: DisplayTarget, desc: DisplayPrimaryDescription, /) -> DisplaySurface: ...
    # Windows.Devices.Display.Core.DisplaySource Windows.Devices.Display.Core.DisplayDevice::CreateScanoutSource(Windows.Devices.Display.Core.DisplayTarget)
    def create_scanout_source(self, target: DisplayTarget, /) -> DisplaySource: ...
    # Windows.Devices.Display.Core.DisplayScanout Windows.Devices.Display.Core.DisplayDevice::CreateSimpleScanout(Windows.Devices.Display.Core.DisplaySource,Windows.Devices.Display.Core.DisplaySurface,System.UInt32,System.UInt32)
    def create_simple_scanout(self, p_source: DisplaySource, p_surface: DisplaySurface, sub_resource_index: winrt.system.UInt32, sync_interval: winrt.system.UInt32, /) -> DisplayScanout: ...
    # Windows.Devices.Display.Core.DisplayScanout Windows.Devices.Display.Core.DisplayDevice::CreateSimpleScanoutWithDirtyRectsAndOptions(Windows.Devices.Display.Core.DisplaySource,Windows.Devices.Display.Core.DisplaySurface,System.UInt32,System.UInt32,Windows.Foundation.Collections.IIterable`1<Windows.Graphics.RectInt32>,Windows.Devices.Display.Core.DisplayScanoutOptions)
    def create_simple_scanout_with_dirty_rects_and_options(self, source: DisplaySource, surface: DisplaySurface, subresource_index: winrt.system.UInt32, sync_interval: winrt.system.UInt32, dirty_rects: typing.Iterable[windows_graphics.RectInt32], options: DisplayScanoutOptions, /) -> DisplayScanout: ...
    # Windows.Devices.Display.Core.DisplayTaskPool Windows.Devices.Display.Core.DisplayDevice::CreateTaskPool()
    def create_task_pool(self) -> DisplayTaskPool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayDevice::IsCapabilitySupported(Windows.Devices.Display.Core.DisplayDeviceCapability)
    def is_capability_supported(self, capability: DisplayDeviceCapability, /) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayDevice::WaitForVBlank(Windows.Devices.Display.Core.DisplaySource)
    def wait_for_v_blank(self, source: DisplaySource, /) -> None: ...
    # Windows.Graphics.DisplayAdapterId Windows.Devices.Display.Core.DisplayDevice::get_RenderAdapterId()
    @_property
    def render_adapter_id(self) -> windows_graphics.DisplayAdapterId: ...

@typing.final
class DisplayFence(winrt.system.Object):
    pass

@typing.final
class DisplayManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Display.Core.DisplayManager Windows.Devices.Display.Core.DisplayManager::Create(Windows.Devices.Display.Core.DisplayManagerOptions)
    def create(cls, options: DisplayManagerOptions, /) -> DisplayManager: ...

@typing.final
class DisplayManager(winrt.system.Object, windows_foundation.IClosable, metaclass=DisplayManager_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::Close()
    def close(self) -> None: ...
    # Windows.Devices.Display.Core.DisplayDevice Windows.Devices.Display.Core.DisplayManager::CreateDisplayDevice(Windows.Devices.Display.Core.DisplayAdapter)
    def create_display_device(self, adapter: DisplayAdapter, /) -> DisplayDevice: ...
    # Windows.Devices.Display.Core.DisplayDevice Windows.Devices.Display.Core.DisplayManager::CreateDisplayDeviceForIndirectAdapter(Windows.Devices.Display.Core.DisplayAdapter,Windows.Devices.Display.Core.DisplayAdapter)
    def create_display_device_for_indirect_adapter(self, indirect_adapter: DisplayAdapter, render_adapter: DisplayAdapter, /) -> DisplayDevice: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayAdapter> Windows.Devices.Display.Core.DisplayManager::GetCurrentAdapters()
    def get_current_adapters(self) -> typing.Sequence[DisplayAdapter]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayTarget> Windows.Devices.Display.Core.DisplayManager::GetCurrentTargets()
    def get_current_targets(self) -> typing.Sequence[DisplayTarget]: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::ReleaseTarget(Windows.Devices.Display.Core.DisplayTarget)
    def release_target(self, target: DisplayTarget, /) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::Start()
    def start(self) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::Stop()
    def stop(self) -> None: ...
    # Windows.Devices.Display.Core.DisplayManagerResult Windows.Devices.Display.Core.DisplayManager::TryAcquireTarget(Windows.Devices.Display.Core.DisplayTarget)
    def try_acquire_target(self, target: DisplayTarget, /) -> DisplayManagerResult: ...
    # Windows.Devices.Display.Core.DisplayManagerResultWithState Windows.Devices.Display.Core.DisplayManager::TryAcquireTargetsAndCreateEmptyState(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Display.Core.DisplayTarget>)
    def try_acquire_targets_and_create_empty_state(self, targets: typing.Iterable[DisplayTarget], /) -> DisplayManagerResultWithState: ...
    # Windows.Devices.Display.Core.DisplayManagerResultWithState Windows.Devices.Display.Core.DisplayManager::TryAcquireTargetsAndCreateSubstate(Windows.Devices.Display.Core.DisplayState,Windows.Foundation.Collections.IIterable`1<Windows.Devices.Display.Core.DisplayTarget>)
    def try_acquire_targets_and_create_substate(self, existing_state: DisplayState, targets: typing.Iterable[DisplayTarget], /) -> DisplayManagerResultWithState: ...
    # Windows.Devices.Display.Core.DisplayManagerResultWithState Windows.Devices.Display.Core.DisplayManager::TryAcquireTargetsAndReadCurrentState(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Display.Core.DisplayTarget>)
    def try_acquire_targets_and_read_current_state(self, targets: typing.Iterable[DisplayTarget], /) -> DisplayManagerResultWithState: ...
    # Windows.Devices.Display.Core.DisplayManagerResultWithState Windows.Devices.Display.Core.DisplayManager::TryReadCurrentStateForAllTargets()
    def try_read_current_state_for_all_targets(self) -> DisplayManagerResultWithState: ...
    # Windows.Devices.Display.Core.DisplayManagerResultWithState Windows.Devices.Display.Core.DisplayManager::TryReadCurrentStateForModeQuery()
    def try_read_current_state_for_mode_query(self) -> DisplayManagerResultWithState: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplayManager::add_Changed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplayManager,Windows.Devices.Display.Core.DisplayManagerChangedEventArgs>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[DisplayManager, DisplayManagerChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplayManager::add_Disabled(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplayManager,Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs>)
    def add_disabled(self, handler: windows_foundation.TypedEventHandler[DisplayManager, DisplayManagerDisabledEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::remove_Disabled(Windows.Foundation.EventRegistrationToken)
    def remove_disabled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplayManager::add_Enabled(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplayManager,Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs>)
    def add_enabled(self, handler: windows_foundation.TypedEventHandler[DisplayManager, DisplayManagerEnabledEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::remove_Enabled(Windows.Foundation.EventRegistrationToken)
    def remove_enabled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplayManager::add_PathsFailedOrInvalidated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplayManager,Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs>)
    def add_paths_failed_or_invalidated(self, handler: windows_foundation.TypedEventHandler[DisplayManager, DisplayManagerPathsFailedOrInvalidatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplayManager::remove_PathsFailedOrInvalidated(Windows.Foundation.EventRegistrationToken)
    def remove_paths_failed_or_invalidated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class DisplayManagerChangedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.Devices.Display.Core.DisplayManagerChangedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayManagerChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayManagerChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class DisplayManagerDisabledEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class DisplayManagerEnabledEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class DisplayManagerPathsFailedOrInvalidatedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class DisplayManagerResultWithState(winrt.system.Object):
    # Windows.Devices.Display.Core.DisplayManagerResult Windows.Devices.Display.Core.DisplayManagerResultWithState::get_ErrorCode()
    @_property
    def error_code(self) -> DisplayManagerResult: ...
    # Windows.Foundation.HResult Windows.Devices.Display.Core.DisplayManagerResultWithState::get_ExtendedErrorCode()
    @_property
    def extended_error_code(self) -> windows_foundation.HResult: ...
    # Windows.Devices.Display.Core.DisplayState Windows.Devices.Display.Core.DisplayManagerResultWithState::get_State()
    @_property
    def state(self) -> DisplayState: ...

@typing.final
class DisplayModeInfo(winrt.system.Object):
    # Windows.Devices.Display.Core.DisplayBitsPerChannel Windows.Devices.Display.Core.DisplayModeInfo::GetWireFormatSupportedBitsPerChannel(Windows.Devices.Display.Core.DisplayWireFormatPixelEncoding)
    def get_wire_format_supported_bits_per_channel(self, encoding: DisplayWireFormatPixelEncoding, /) -> DisplayBitsPerChannel: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayModeInfo::IsWireFormatSupported(Windows.Devices.Display.Core.DisplayWireFormat)
    def is_wire_format_supported(self, wire_format: DisplayWireFormat, /) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayModeInfo::get_IsInterlaced()
    @_property
    def is_interlaced(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayModeInfo::get_IsStereo()
    @_property
    def is_stereo(self) -> bool: ...
    # Windows.Devices.Display.Core.DisplayPresentationRate Windows.Devices.Display.Core.DisplayModeInfo::get_PresentationRate()
    @_property
    def presentation_rate(self) -> DisplayPresentationRate: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayModeInfo::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[_uuid.UUID, winrt.system.Object]: ...
    # Windows.Graphics.DirectX.DirectXPixelFormat Windows.Devices.Display.Core.DisplayModeInfo::get_SourcePixelFormat()
    @_property
    def source_pixel_format(self) -> windows_graphics_directx.DirectXPixelFormat: ...
    # Windows.Graphics.SizeInt32 Windows.Devices.Display.Core.DisplayModeInfo::get_SourceResolution()
    @_property
    def source_resolution(self) -> windows_graphics.SizeInt32: ...
    # Windows.Graphics.SizeInt32 Windows.Devices.Display.Core.DisplayModeInfo::get_TargetResolution()
    @_property
    def target_resolution(self) -> windows_graphics.SizeInt32: ...
    # Windows.Devices.Display.Core.DisplayPresentationRate Windows.Devices.Display.Core.DisplayModeInfo::get_PhysicalPresentationRate()
    @_property
    def physical_presentation_rate(self) -> DisplayPresentationRate: ...

@typing.final
class DisplayMuxDevice_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Display.Core.DisplayMuxDevice> Windows.Devices.Display.Core.DisplayMuxDevice::FromIdAsync(System.String)
    def from_id_async(cls, device_interface_id: str, /) -> windows_foundation.IAsyncOperation[DisplayMuxDevice]: ...
    # System.String Windows.Devices.Display.Core.DisplayMuxDevice::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...

@typing.final
class DisplayMuxDevice(winrt.system.Object, windows_foundation.IClosable, metaclass=DisplayMuxDevice_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayMuxDevice::Close()
    def close(self) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayTarget> Windows.Devices.Display.Core.DisplayMuxDevice::GetAvailableMuxTargets()
    def get_available_mux_targets(self) -> typing.Sequence[DisplayTarget]: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.Display.Core.DisplayMuxDevice::SetAutomaticTargetSwitching()
    def set_automatic_target_switching(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.Display.Core.DisplayMuxDevice::SetPreferredTarget(Windows.Devices.Display.Core.DisplayTarget)
    def set_preferred_target(self, target: DisplayTarget, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplayMuxDevice::add_Changed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplayMuxDevice,System.Object>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[DisplayMuxDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplayMuxDevice::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.Display.Core.DisplayTarget Windows.Devices.Display.Core.DisplayMuxDevice::get_CurrentTarget()
    @_property
    def current_target(self) -> DisplayTarget: ...
    # System.String Windows.Devices.Display.Core.DisplayMuxDevice::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayMuxDevice::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayMuxDevice::get_IsAutomaticTargetSwitchingEnabled()
    @_property
    def is_automatic_target_switching_enabled(self) -> bool: ...
    # Windows.Devices.Display.Core.DisplayTarget Windows.Devices.Display.Core.DisplayMuxDevice::get_PreferredTarget()
    @_property
    def preferred_target(self) -> DisplayTarget: ...

@typing.final
class DisplayPath(winrt.system.Object):
    # System.Void Windows.Devices.Display.Core.DisplayPath::ApplyPropertiesFromMode(Windows.Devices.Display.Core.DisplayModeInfo)
    def apply_properties_from_mode(self, mode_result: DisplayModeInfo, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayModeInfo> Windows.Devices.Display.Core.DisplayPath::FindModes(Windows.Devices.Display.Core.DisplayModeQueryOptions)
    def find_modes(self, flags: DisplayModeQueryOptions, /) -> typing.Sequence[DisplayModeInfo]: ...
    # Windows.Devices.Display.Core.DisplayWireFormat Windows.Devices.Display.Core.DisplayPath::get_WireFormat()
    @_property
    def wire_format(self) -> DisplayWireFormat: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_WireFormat(Windows.Devices.Display.Core.DisplayWireFormat)
    @wire_format.setter
    def wire_format(self, value: DisplayWireFormat) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32> Windows.Devices.Display.Core.DisplayPath::get_TargetResolution()
    @_property
    def target_resolution(self) -> typing.Optional[windows_graphics.SizeInt32]: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_TargetResolution(Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32>)
    @target_resolution.setter
    def target_resolution(self, value: typing.Optional[windows_graphics.SizeInt32]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32> Windows.Devices.Display.Core.DisplayPath::get_SourceResolution()
    @_property
    def source_resolution(self) -> typing.Optional[windows_graphics.SizeInt32]: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_SourceResolution(Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32>)
    @source_resolution.setter
    def source_resolution(self, value: typing.Optional[windows_graphics.SizeInt32]) -> None: ...
    # Windows.Graphics.DirectX.DirectXPixelFormat Windows.Devices.Display.Core.DisplayPath::get_SourcePixelFormat()
    @_property
    def source_pixel_format(self) -> windows_graphics_directx.DirectXPixelFormat: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_SourcePixelFormat(Windows.Graphics.DirectX.DirectXPixelFormat)
    @source_pixel_format.setter
    def source_pixel_format(self, value: windows_graphics_directx.DirectXPixelFormat) -> None: ...
    # Windows.Devices.Display.Core.DisplayPathScaling Windows.Devices.Display.Core.DisplayPath::get_Scaling()
    @_property
    def scaling(self) -> DisplayPathScaling: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_Scaling(Windows.Devices.Display.Core.DisplayPathScaling)
    @scaling.setter
    def scaling(self, value: DisplayPathScaling) -> None: ...
    # Windows.Devices.Display.Core.DisplayRotation Windows.Devices.Display.Core.DisplayPath::get_Rotation()
    @_property
    def rotation(self) -> DisplayRotation: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_Rotation(Windows.Devices.Display.Core.DisplayRotation)
    @rotation.setter
    def rotation(self, value: DisplayRotation) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Devices.Display.Core.DisplayPresentationRate> Windows.Devices.Display.Core.DisplayPath::get_PresentationRate()
    @_property
    def presentation_rate(self) -> typing.Optional[DisplayPresentationRate]: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_PresentationRate(Windows.Foundation.IReference`1<Windows.Devices.Display.Core.DisplayPresentationRate>)
    @presentation_rate.setter
    def presentation_rate(self, value: typing.Optional[DisplayPresentationRate]) -> None: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayPath::get_IsStereo()
    @_property
    def is_stereo(self) -> bool: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_IsStereo(System.Boolean)
    @is_stereo.setter
    def is_stereo(self, value: bool) -> None: ...
    # Windows.Foundation.IReference`1<System.Boolean> Windows.Devices.Display.Core.DisplayPath::get_IsInterlaced()
    @_property
    def is_interlaced(self) -> typing.Optional[bool]: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_IsInterlaced(Windows.Foundation.IReference`1<System.Boolean>)
    @is_interlaced.setter
    def is_interlaced(self, value: typing.Optional[bool]) -> None: ...
    # Windows.Foundation.Collections.IMap`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayPath::get_Properties()
    @_property
    def properties(self) -> typing.MutableMapping[_uuid.UUID, winrt.system.Object]: ...
    # Windows.Devices.Display.Core.DisplayPathStatus Windows.Devices.Display.Core.DisplayPath::get_Status()
    @_property
    def status(self) -> DisplayPathStatus: ...
    # Windows.Devices.Display.Core.DisplayTarget Windows.Devices.Display.Core.DisplayPath::get_Target()
    @_property
    def target(self) -> DisplayTarget: ...
    # Windows.Devices.Display.Core.DisplayView Windows.Devices.Display.Core.DisplayPath::get_View()
    @_property
    def view(self) -> DisplayView: ...
    # Windows.Foundation.IReference`1<Windows.Devices.Display.Core.DisplayPresentationRate> Windows.Devices.Display.Core.DisplayPath::get_PhysicalPresentationRate()
    @_property
    def physical_presentation_rate(self) -> typing.Optional[DisplayPresentationRate]: ...
    # System.Void Windows.Devices.Display.Core.DisplayPath::put_PhysicalPresentationRate(Windows.Foundation.IReference`1<Windows.Devices.Display.Core.DisplayPresentationRate>)
    @physical_presentation_rate.setter
    def physical_presentation_rate(self, value: typing.Optional[DisplayPresentationRate]) -> None: ...

@typing.final
class DisplayPrimaryDescription_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Display.Core.DisplayPrimaryDescription Windows.Devices.Display.Core.DisplayPrimaryDescription::CreateWithProperties(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,System.Object>>,System.UInt32,System.UInt32,Windows.Graphics.DirectX.DirectXPixelFormat,Windows.Graphics.DirectX.DirectXColorSpace,System.Boolean,Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription)
    def create_with_properties(cls, extra_properties: typing.Iterable[windows_foundation_collections.IKeyValuePair[_uuid.UUID, winrt.system.Object]], width: winrt.system.UInt32, height: winrt.system.UInt32, pixel_format: windows_graphics_directx.DirectXPixelFormat, color_space: windows_graphics_directx.DirectXColorSpace, is_stereo: bool, multisample_description: windows_graphics_directx_direct3d11.Direct3DMultisampleDescription, /) -> DisplayPrimaryDescription: ...

@typing.final
class DisplayPrimaryDescription(winrt.system.Object, metaclass=DisplayPrimaryDescription_Static):
    def __new__(cls: typing.Type[Self], width: winrt.system.UInt32, height: winrt.system.UInt32, pixel_format: windows_graphics_directx.DirectXPixelFormat, color_space: windows_graphics_directx.DirectXColorSpace, is_stereo: bool, multisample_description: windows_graphics_directx_direct3d11.Direct3DMultisampleDescription) -> Self: ...
    # Windows.Graphics.DirectX.DirectXColorSpace Windows.Devices.Display.Core.DisplayPrimaryDescription::get_ColorSpace()
    @_property
    def color_space(self) -> windows_graphics_directx.DirectXColorSpace: ...
    # Windows.Graphics.DirectX.DirectXPixelFormat Windows.Devices.Display.Core.DisplayPrimaryDescription::get_Format()
    @_property
    def format(self) -> windows_graphics_directx.DirectXPixelFormat: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayPrimaryDescription::get_Height()
    @_property
    def height(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayPrimaryDescription::get_IsStereo()
    @_property
    def is_stereo(self) -> bool: ...
    # Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription Windows.Devices.Display.Core.DisplayPrimaryDescription::get_MultisampleDescription()
    @_property
    def multisample_description(self) -> windows_graphics_directx_direct3d11.Direct3DMultisampleDescription: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayPrimaryDescription::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[_uuid.UUID, winrt.system.Object]: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayPrimaryDescription::get_Width()
    @_property
    def width(self) -> winrt.system.UInt32: ...

@typing.final
class DisplayScanout(winrt.system.Object):
    pass

@typing.final
class DisplaySource(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Devices.Display.Core.DisplaySource::GetMetadata(System.Guid)
    def get_metadata(self, key: _uuid.UUID, /) -> windows_storage_streams.IBuffer: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Display.Core.DisplaySource::add_StatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Display.Core.DisplaySource,System.Object>)
    def add_status_changed(self, handler: windows_foundation.TypedEventHandler[DisplaySource, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Display.Core.DisplaySource::remove_StatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Graphics.DisplayAdapterId Windows.Devices.Display.Core.DisplaySource::get_AdapterId()
    @_property
    def adapter_id(self) -> windows_graphics.DisplayAdapterId: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplaySource::get_SourceId()
    @_property
    def source_id(self) -> winrt.system.UInt32: ...
    # Windows.Devices.Display.Core.DisplaySourceStatus Windows.Devices.Display.Core.DisplaySource::get_Status()
    @_property
    def status(self) -> DisplaySourceStatus: ...

@typing.final
class DisplayState(winrt.system.Object):
    # System.Boolean Windows.Devices.Display.Core.DisplayState::CanConnectTargetToView(Windows.Devices.Display.Core.DisplayTarget,Windows.Devices.Display.Core.DisplayView)
    def can_connect_target_to_view(self, target: DisplayTarget, view: DisplayView, /) -> bool: ...
    # Windows.Devices.Display.Core.DisplayState Windows.Devices.Display.Core.DisplayState::Clone()
    def clone(self) -> DisplayState: ...
    # Windows.Devices.Display.Core.DisplayPath Windows.Devices.Display.Core.DisplayState::ConnectTarget(Windows.Devices.Display.Core.DisplayTarget)
    def connect_target(self, target: DisplayTarget, /) -> DisplayPath: ...
    # Windows.Devices.Display.Core.DisplayPath Windows.Devices.Display.Core.DisplayState::ConnectTarget(Windows.Devices.Display.Core.DisplayTarget,Windows.Devices.Display.Core.DisplayView)
    def connect_target_to_view(self, target: DisplayTarget, view: DisplayView, /) -> DisplayPath: ...
    # System.Void Windows.Devices.Display.Core.DisplayState::DisconnectTarget(Windows.Devices.Display.Core.DisplayTarget)
    def disconnect_target(self, target: DisplayTarget, /) -> None: ...
    # Windows.Devices.Display.Core.DisplayPath Windows.Devices.Display.Core.DisplayState::GetPathForTarget(Windows.Devices.Display.Core.DisplayTarget)
    def get_path_for_target(self, target: DisplayTarget, /) -> DisplayPath: ...
    # Windows.Devices.Display.Core.DisplayView Windows.Devices.Display.Core.DisplayState::GetViewForTarget(Windows.Devices.Display.Core.DisplayTarget)
    def get_view_for_target(self, target: DisplayTarget, /) -> DisplayView: ...
    # Windows.Devices.Display.Core.DisplayStateOperationResult Windows.Devices.Display.Core.DisplayState::TryApply(Windows.Devices.Display.Core.DisplayStateApplyOptions)
    def try_apply(self, options: DisplayStateApplyOptions, /) -> DisplayStateOperationResult: ...
    # Windows.Devices.Display.Core.DisplayStateOperationResult Windows.Devices.Display.Core.DisplayState::TryFunctionalize(Windows.Devices.Display.Core.DisplayStateFunctionalizeOptions)
    def try_functionalize(self, options: DisplayStateFunctionalizeOptions, /) -> DisplayStateOperationResult: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayState::get_IsReadOnly()
    @_property
    def is_read_only(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayState::get_IsStale()
    @_property
    def is_stale(self) -> bool: ...
    # Windows.Foundation.Collections.IMap`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayState::get_Properties()
    @_property
    def properties(self) -> typing.MutableMapping[_uuid.UUID, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayTarget> Windows.Devices.Display.Core.DisplayState::get_Targets()
    @_property
    def targets(self) -> typing.Sequence[DisplayTarget]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayView> Windows.Devices.Display.Core.DisplayState::get_Views()
    @_property
    def views(self) -> typing.Sequence[DisplayView]: ...

@typing.final
class DisplayStateOperationResult(winrt.system.Object):
    # Windows.Foundation.HResult Windows.Devices.Display.Core.DisplayStateOperationResult::get_ExtendedErrorCode()
    @_property
    def extended_error_code(self) -> windows_foundation.HResult: ...
    # Windows.Devices.Display.Core.DisplayStateOperationStatus Windows.Devices.Display.Core.DisplayStateOperationResult::get_Status()
    @_property
    def status(self) -> DisplayStateOperationStatus: ...

@typing.final
class DisplaySurface(winrt.system.Object):
    pass

@typing.final
class DisplayTarget(winrt.system.Object):
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::IsEqual(Windows.Devices.Display.Core.DisplayTarget)
    def is_equal(self, other_target: DisplayTarget, /) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::IsSame(Windows.Devices.Display.Core.DisplayTarget)
    def is_same(self, other_target: DisplayTarget, /) -> bool: ...
    # Windows.Devices.Display.DisplayMonitor Windows.Devices.Display.Core.DisplayTarget::TryGetMonitor()
    def try_get_monitor(self) -> typing.Optional[windows_devices_display.DisplayMonitor]: ...
    # Windows.Devices.Display.Core.DisplayAdapter Windows.Devices.Display.Core.DisplayTarget::get_Adapter()
    @_property
    def adapter(self) -> DisplayAdapter: ...
    # System.UInt32 Windows.Devices.Display.Core.DisplayTarget::get_AdapterRelativeId()
    @_property
    def adapter_relative_id(self) -> winrt.system.UInt32: ...
    # System.String Windows.Devices.Display.Core.DisplayTarget::get_DeviceInterfacePath()
    @_property
    def device_interface_path(self) -> str: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::get_IsConnected()
    @_property
    def is_connected(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::get_IsStale()
    @_property
    def is_stale(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::get_IsVirtualModeEnabled()
    @_property
    def is_virtual_mode_enabled(self) -> bool: ...
    # System.Boolean Windows.Devices.Display.Core.DisplayTarget::get_IsVirtualTopologyEnabled()
    @_property
    def is_virtual_topology_enabled(self) -> bool: ...
    # Windows.Devices.Display.Core.DisplayTargetPersistence Windows.Devices.Display.Core.DisplayTarget::get_MonitorPersistence()
    @_property
    def monitor_persistence(self) -> DisplayTargetPersistence: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayTarget::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[_uuid.UUID, winrt.system.Object]: ...
    # System.String Windows.Devices.Display.Core.DisplayTarget::get_StableMonitorId()
    @_property
    def stable_monitor_id(self) -> str: ...
    # Windows.Devices.Display.DisplayMonitorUsageKind Windows.Devices.Display.Core.DisplayTarget::get_UsageKind()
    @_property
    def usage_kind(self) -> windows_devices_display.DisplayMonitorUsageKind: ...

@typing.final
class DisplayTask(winrt.system.Object):
    # System.Void Windows.Devices.Display.Core.DisplayTask::SetScanout(Windows.Devices.Display.Core.DisplayScanout)
    def set_scanout(self, scanout: DisplayScanout, /) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayTask::SetSignal(Windows.Devices.Display.Core.DisplayTaskSignalKind,Windows.Devices.Display.Core.DisplayFence)
    def set_signal(self, signal_kind: DisplayTaskSignalKind, fence: DisplayFence, /) -> None: ...
    # System.Void Windows.Devices.Display.Core.DisplayTask::SetWait(Windows.Devices.Display.Core.DisplayFence,System.UInt64)
    def set_wait(self, ready_fence: DisplayFence, ready_fence_value: winrt.system.UInt64, /) -> None: ...

@typing.final
class DisplayTaskPool(winrt.system.Object):
    # Windows.Devices.Display.Core.DisplayTask Windows.Devices.Display.Core.DisplayTaskPool::CreateTask()
    def create_task(self) -> DisplayTask: ...
    # System.Void Windows.Devices.Display.Core.DisplayTaskPool::ExecuteTask(Windows.Devices.Display.Core.DisplayTask)
    # @deprecated("Use TryExecuteTask instead of ExecuteTask. For more info see MSDN")
    def execute_task(self, task: DisplayTask, /) -> None: ...
    # Windows.Devices.Display.Core.DisplayTaskResult Windows.Devices.Display.Core.DisplayTaskPool::TryExecuteTask(Windows.Devices.Display.Core.DisplayTask)
    def try_execute_task(self, task: DisplayTask, /) -> DisplayTaskResult: ...

@typing.final
class DisplayTaskResult(winrt.system.Object):
    # System.UInt64 Windows.Devices.Display.Core.DisplayTaskResult::get_PresentId()
    @_property
    def present_id(self) -> winrt.system.UInt64: ...
    # Windows.Devices.Display.Core.DisplayPresentStatus Windows.Devices.Display.Core.DisplayTaskResult::get_PresentStatus()
    @_property
    def present_status(self) -> DisplayPresentStatus: ...
    # Windows.Devices.Display.Core.DisplaySourceStatus Windows.Devices.Display.Core.DisplayTaskResult::get_SourceStatus()
    @_property
    def source_status(self) -> DisplaySourceStatus: ...

@typing.final
class DisplayView(winrt.system.Object):
    # System.Void Windows.Devices.Display.Core.DisplayView::SetPrimaryPath(Windows.Devices.Display.Core.DisplayPath)
    def set_primary_path(self, path: DisplayPath, /) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32> Windows.Devices.Display.Core.DisplayView::get_ContentResolution()
    @_property
    def content_resolution(self) -> typing.Optional[windows_graphics.SizeInt32]: ...
    # System.Void Windows.Devices.Display.Core.DisplayView::put_ContentResolution(Windows.Foundation.IReference`1<Windows.Graphics.SizeInt32>)
    @content_resolution.setter
    def content_resolution(self, value: typing.Optional[windows_graphics.SizeInt32]) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Display.Core.DisplayPath> Windows.Devices.Display.Core.DisplayView::get_Paths()
    @_property
    def paths(self) -> typing.Sequence[DisplayPath]: ...
    # Windows.Foundation.Collections.IMap`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayView::get_Properties()
    @_property
    def properties(self) -> typing.MutableMapping[_uuid.UUID, winrt.system.Object]: ...

@typing.final
class DisplayWireFormat_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Display.Core.DisplayWireFormat Windows.Devices.Display.Core.DisplayWireFormat::CreateWithProperties(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,System.Object>>,Windows.Devices.Display.Core.DisplayWireFormatPixelEncoding,System.Int32,Windows.Devices.Display.Core.DisplayWireFormatColorSpace,Windows.Devices.Display.Core.DisplayWireFormatEotf,Windows.Devices.Display.Core.DisplayWireFormatHdrMetadata)
    def create_with_properties(cls, extra_properties: typing.Iterable[windows_foundation_collections.IKeyValuePair[_uuid.UUID, winrt.system.Object]], pixel_encoding: DisplayWireFormatPixelEncoding, bits_per_channel: winrt.system.Int32, color_space: DisplayWireFormatColorSpace, eotf: DisplayWireFormatEotf, hdr_metadata: DisplayWireFormatHdrMetadata, /) -> DisplayWireFormat: ...

@typing.final
class DisplayWireFormat(winrt.system.Object, metaclass=DisplayWireFormat_Static):
    def __new__(cls: typing.Type[Self], pixel_encoding: DisplayWireFormatPixelEncoding, bits_per_channel: winrt.system.Int32, color_space: DisplayWireFormatColorSpace, eotf: DisplayWireFormatEotf, hdr_metadata: DisplayWireFormatHdrMetadata) -> Self: ...
    # System.Int32 Windows.Devices.Display.Core.DisplayWireFormat::get_BitsPerChannel()
    @_property
    def bits_per_channel(self) -> winrt.system.Int32: ...
    # Windows.Devices.Display.Core.DisplayWireFormatColorSpace Windows.Devices.Display.Core.DisplayWireFormat::get_ColorSpace()
    @_property
    def color_space(self) -> DisplayWireFormatColorSpace: ...
    # Windows.Devices.Display.Core.DisplayWireFormatEotf Windows.Devices.Display.Core.DisplayWireFormat::get_Eotf()
    @_property
    def eotf(self) -> DisplayWireFormatEotf: ...
    # Windows.Devices.Display.Core.DisplayWireFormatHdrMetadata Windows.Devices.Display.Core.DisplayWireFormat::get_HdrMetadata()
    @_property
    def hdr_metadata(self) -> DisplayWireFormatHdrMetadata: ...
    # Windows.Devices.Display.Core.DisplayWireFormatPixelEncoding Windows.Devices.Display.Core.DisplayWireFormat::get_PixelEncoding()
    @_property
    def pixel_encoding(self) -> DisplayWireFormatPixelEncoding: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,System.Object> Windows.Devices.Display.Core.DisplayWireFormat::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[_uuid.UUID, winrt.system.Object]: ...

