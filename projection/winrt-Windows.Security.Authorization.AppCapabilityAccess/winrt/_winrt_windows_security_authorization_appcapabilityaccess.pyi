# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system

from winrt.windows.security.authorization.appcapabilityaccess import AppCapabilityAccessStatus

Self = typing.TypeVar('Self')

@typing.final
class AppCapability_Static(type):
    # Windows.Security.Authorization.AppCapabilityAccess.AppCapability Windows.Security.Authorization.AppCapabilityAccess.AppCapability::Create(System.String)
    def create(cls, capability_name: str, /) -> AppCapability: ...
    # Windows.Security.Authorization.AppCapabilityAccess.AppCapability Windows.Security.Authorization.AppCapabilityAccess.AppCapability::CreateWithProcessIdForUser(Windows.System.User,System.String,System.UInt32)
    def create_with_process_id_for_user(cls, user: windows_system.User, capability_name: str, pid: winrt.system.UInt32, /) -> AppCapability: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IMapView`2<System.String,Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus>> Windows.Security.Authorization.AppCapabilityAccess.AppCapability::RequestAccessForCapabilitiesAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def request_access_for_capabilities_async(cls, capability_names: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[typing.Mapping[str, AppCapabilityAccessStatus]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IMapView`2<System.String,Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus>> Windows.Security.Authorization.AppCapabilityAccess.AppCapability::RequestAccessForCapabilitiesForUserAsync(Windows.System.User,Windows.Foundation.Collections.IIterable`1<System.String>)
    def request_access_for_capabilities_for_user_async(cls, user: windows_system.User, capability_names: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[typing.Mapping[str, AppCapabilityAccessStatus]]: ...

@typing.final
class AppCapability(winrt.system.Object, metaclass=AppCapability_Static):
    # Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus Windows.Security.Authorization.AppCapabilityAccess.AppCapability::CheckAccess()
    def check_access(self) -> AppCapabilityAccessStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus> Windows.Security.Authorization.AppCapabilityAccess.AppCapability::RequestAccessAsync()
    def request_access_async(self) -> windows_foundation.IAsyncOperation[AppCapabilityAccessStatus]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Security.Authorization.AppCapabilityAccess.AppCapability::add_AccessChanged(Windows.Foundation.TypedEventHandler`2<Windows.Security.Authorization.AppCapabilityAccess.AppCapability,Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessChangedEventArgs>)
    def add_access_changed(self, handler: windows_foundation.TypedEventHandler[AppCapability, AppCapabilityAccessChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Security.Authorization.AppCapabilityAccess.AppCapability::remove_AccessChanged(Windows.Foundation.EventRegistrationToken)
    def remove_access_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.Security.Authorization.AppCapabilityAccess.AppCapability::get_CapabilityName()
    @_property
    def capability_name(self) -> str: ...
    # Windows.System.User Windows.Security.Authorization.AppCapabilityAccess.AppCapability::get_User()
    @_property
    def user(self) -> windows_system.User: ...
    # System.String Windows.Security.Authorization.AppCapabilityAccess.AppCapability::get_DisplayMessage()
    @_property
    def display_message(self) -> str: ...
    # System.Void Windows.Security.Authorization.AppCapabilityAccess.AppCapability::put_DisplayMessage(System.String)
    @display_message.setter
    def display_message(self, value: str) -> None: ...

@typing.final
class AppCapabilityAccessChangedEventArgs(winrt.system.Object):
    pass

