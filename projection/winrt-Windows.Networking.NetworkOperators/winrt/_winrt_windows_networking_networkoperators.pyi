# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.data.xml.dom as windows_data_xml_dom
import winrt.windows.devices.sms as windows_devices_sms
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.networking as windows_networking
import winrt.windows.networking.connectivity as windows_networking_connectivity
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.networking.networkoperators import DataClasses, ESimAuthenticationPreference, ESimDiscoverResultKind, ESimOperationStatus, ESimProfileClass, ESimProfileMetadataState, ESimProfileState, ESimState, ESimWatcherStatus, HotspotAuthenticationResponseCode, MobileBroadbandAccountWatcherStatus, MobileBroadbandDeviceType, MobileBroadbandModemStatus, MobileBroadbandPinFormat, MobileBroadbandPinLockState, MobileBroadbandPinType, MobileBroadbandRadioState, MobileBroadbandSlotState, MobileBroadbandUiccAppOperationStatus, NetworkDeviceStatus, NetworkOperatorDataUsageNotificationKind, NetworkOperatorEventMessageType, NetworkRegistrationState, ProfileMediaType, TetheringCapability, TetheringOperationStatus, TetheringOperationalState, TetheringWiFiAuthenticationKind, TetheringWiFiBand, TetheringWiFiPerformancePriority, UiccAccessCondition, UiccAppKind, UiccAppRecordKind, UssdResultCode

Self = typing.TypeVar('Self')

@typing.final
class ESimProfileInstallProgress:
    total_size_in_bytes: winrt.system.Int32
    installed_size_in_bytes: winrt.system.Int32
    def __init__(self, total_size_in_bytes: winrt.system.Int32 = 0, installed_size_in_bytes: winrt.system.Int32 = 0) -> None: ...

@typing.final
class ProfileUsage:
    usage_in_megabytes: winrt.system.UInt32
    last_sync_time: datetime.datetime
    def __init__(self, usage_in_megabytes: winrt.system.UInt32 = 0, last_sync_time: datetime.datetime = datetime.datetime(1601, 1, 1, tzinfo=datetime.timezone.utc)) -> None: ...

@typing.final
class ESim(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESim::DeleteProfileAsync(System.String)
    def delete_profile_async(self, profile_id: str, /) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Networking.NetworkOperators.ESimDiscoverResult Windows.Networking.NetworkOperators.ESim::Discover()
    def discover(self) -> ESimDiscoverResult: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimDiscoverResult> Windows.Networking.NetworkOperators.ESim::DiscoverAsync()
    def discover_async(self) -> windows_foundation.IAsyncOperation[ESimDiscoverResult]: ...
    # Windows.Networking.NetworkOperators.ESimDiscoverResult Windows.Networking.NetworkOperators.ESim::Discover(System.String,System.String)
    def discover_with_server_address_and_matching_id(self, server_address: str, matching_id: str, /) -> ESimDiscoverResult: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimDiscoverResult> Windows.Networking.NetworkOperators.ESim::DiscoverAsync(System.String,System.String)
    def discover_with_server_address_and_matching_id_async(self, server_address: str, matching_id: str, /) -> windows_foundation.IAsyncOperation[ESimDiscoverResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult> Windows.Networking.NetworkOperators.ESim::DownloadProfileMetadataAsync(System.String)
    def download_profile_metadata_async(self, activation_code: str, /) -> windows_foundation.IAsyncOperation[ESimDownloadProfileMetadataResult]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.ESimProfile> Windows.Networking.NetworkOperators.ESim::GetProfiles()
    def get_profiles(self) -> typing.Sequence[ESimProfile]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESim::ResetAsync()
    def reset_async(self) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESim::add_ProfileChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESim,System.Object>)
    def add_profile_changed(self, handler: windows_foundation.TypedEventHandler[ESim, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESim::remove_ProfileChanged(Windows.Foundation.EventRegistrationToken)
    def remove_profile_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.ESim::get_AvailableMemoryInBytes()
    @_property
    def available_memory_in_bytes(self) -> typing.Optional[winrt.system.Int32]: ...
    # System.String Windows.Networking.NetworkOperators.ESim::get_Eid()
    @_property
    def eid(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESim::get_FirmwareVersion()
    @_property
    def firmware_version(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESim::get_MobileBroadbandModemDeviceId()
    @_property
    def mobile_broadband_modem_device_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.ESimPolicy Windows.Networking.NetworkOperators.ESim::get_Policy()
    @_property
    def policy(self) -> ESimPolicy: ...
    # Windows.Networking.NetworkOperators.ESimState Windows.Networking.NetworkOperators.ESim::get_State()
    @_property
    def state(self) -> ESimState: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.ESim::get_SlotIndex()
    @_property
    def slot_index(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class ESimAddedEventArgs(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESim Windows.Networking.NetworkOperators.ESimAddedEventArgs::get_ESim()
    @_property
    def e_sim(self) -> ESim: ...

@typing.final
class ESimDiscoverEvent(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.ESimDiscoverEvent::get_MatchingId()
    @_property
    def matching_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESimDiscoverEvent::get_RspServerAddress()
    @_property
    def rsp_server_address(self) -> str: ...

@typing.final
class ESimDiscoverResult(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.ESimDiscoverEvent> Windows.Networking.NetworkOperators.ESimDiscoverResult::get_Events()
    @_property
    def events(self) -> typing.Sequence[ESimDiscoverEvent]: ...
    # Windows.Networking.NetworkOperators.ESimDiscoverResultKind Windows.Networking.NetworkOperators.ESimDiscoverResult::get_Kind()
    @_property
    def kind(self) -> ESimDiscoverResultKind: ...
    # Windows.Networking.NetworkOperators.ESimProfileMetadata Windows.Networking.NetworkOperators.ESimDiscoverResult::get_ProfileMetadata()
    @_property
    def profile_metadata(self) -> ESimProfileMetadata: ...
    # Windows.Networking.NetworkOperators.ESimOperationResult Windows.Networking.NetworkOperators.ESimDiscoverResult::get_Result()
    @_property
    def result(self) -> ESimOperationResult: ...

@typing.final
class ESimDownloadProfileMetadataResult(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESimProfileMetadata Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult::get_ProfileMetadata()
    @_property
    def profile_metadata(self) -> ESimProfileMetadata: ...
    # Windows.Networking.NetworkOperators.ESimOperationResult Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult::get_Result()
    @_property
    def result(self) -> ESimOperationResult: ...

@typing.final
class ESimManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.ESimWatcher Windows.Networking.NetworkOperators.ESimManager::TryCreateESimWatcher()
    def try_create_e_sim_watcher(cls) -> typing.Optional[ESimWatcher]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimManager::add_ServiceInfoChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_service_info_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimManager::remove_ServiceInfoChanged(Windows.Foundation.EventRegistrationToken)
    def remove_service_info_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Networking.NetworkOperators.ESimServiceInfo Windows.Networking.NetworkOperators.ESimManager::get_ServiceInfo()
    @_property
    def service_info(cls) -> ESimServiceInfo: ...

@typing.final
class ESimManager(winrt.system.Object, metaclass=ESimManager_Static):
    pass

@typing.final
class ESimOperationResult(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESimOperationStatus Windows.Networking.NetworkOperators.ESimOperationResult::get_Status()
    @_property
    def status(self) -> ESimOperationStatus: ...

@typing.final
class ESimPolicy(winrt.system.Object):
    # System.Boolean Windows.Networking.NetworkOperators.ESimPolicy::get_ShouldEnableManagingUi()
    @_property
    def should_enable_managing_ui(self) -> bool: ...

@typing.final
class ESimProfile(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESimProfile::DisableAsync()
    def disable_async(self) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESimProfile::EnableAsync()
    def enable_async(self) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESimProfile::SetNicknameAsync(System.String)
    def set_nickname_async(self, new_nickname: str, /) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Networking.NetworkOperators.ESimProfileClass Windows.Networking.NetworkOperators.ESimProfile::get_Class()
    @_property
    def class_(self) -> ESimProfileClass: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfile::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfile::get_Nickname()
    @_property
    def nickname(self) -> str: ...
    # Windows.Networking.NetworkOperators.ESimProfilePolicy Windows.Networking.NetworkOperators.ESimProfile::get_Policy()
    @_property
    def policy(self) -> ESimProfilePolicy: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.Networking.NetworkOperators.ESimProfile::get_ProviderIcon()
    @_property
    def provider_icon(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfile::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfile::get_ProviderName()
    @_property
    def provider_name(self) -> str: ...
    # Windows.Networking.NetworkOperators.ESimProfileState Windows.Networking.NetworkOperators.ESimProfile::get_State()
    @_property
    def state(self) -> ESimProfileState: ...

@typing.final
class ESimProfileMetadata(winrt.system.Object):
    # Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Networking.NetworkOperators.ESimOperationResult,Windows.Networking.NetworkOperators.ESimProfileInstallProgress> Windows.Networking.NetworkOperators.ESimProfileMetadata::ConfirmInstallAsync()
    def confirm_install_async(self) -> windows_foundation.IAsyncOperationWithProgress[ESimOperationResult, ESimProfileInstallProgress]: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Networking.NetworkOperators.ESimOperationResult,Windows.Networking.NetworkOperators.ESimProfileInstallProgress> Windows.Networking.NetworkOperators.ESimProfileMetadata::ConfirmInstallAsync(System.String)
    def confirm_install_with_confirmation_code_async(self, confirmation_code: str, /) -> windows_foundation.IAsyncOperationWithProgress[ESimOperationResult, ESimProfileInstallProgress]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESimProfileMetadata::DenyInstallAsync()
    def deny_install_async(self) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ESimOperationResult> Windows.Networking.NetworkOperators.ESimProfileMetadata::PostponeInstallAsync()
    def postpone_install_async(self) -> windows_foundation.IAsyncOperation[ESimOperationResult]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimProfileMetadata::add_StateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimProfileMetadata,System.Object>)
    def add_state_changed(self, handler: windows_foundation.TypedEventHandler[ESimProfileMetadata, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimProfileMetadata::remove_StateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfileMetadata::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Windows.Networking.NetworkOperators.ESimProfileMetadata::get_IsConfirmationCodeRequired()
    @_property
    def is_confirmation_code_required(self) -> bool: ...
    # Windows.Networking.NetworkOperators.ESimProfilePolicy Windows.Networking.NetworkOperators.ESimProfileMetadata::get_Policy()
    @_property
    def policy(self) -> ESimProfilePolicy: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.Networking.NetworkOperators.ESimProfileMetadata::get_ProviderIcon()
    @_property
    def provider_icon(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfileMetadata::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.ESimProfileMetadata::get_ProviderName()
    @_property
    def provider_name(self) -> str: ...
    # Windows.Networking.NetworkOperators.ESimProfileMetadataState Windows.Networking.NetworkOperators.ESimProfileMetadata::get_State()
    @_property
    def state(self) -> ESimProfileMetadataState: ...

@typing.final
class ESimProfilePolicy(winrt.system.Object):
    # System.Boolean Windows.Networking.NetworkOperators.ESimProfilePolicy::get_CanDelete()
    @_property
    def can_delete(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.ESimProfilePolicy::get_CanDisable()
    @_property
    def can_disable(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.ESimProfilePolicy::get_IsManagedByEnterprise()
    @_property
    def is_managed_by_enterprise(self) -> bool: ...

@typing.final
class ESimRemovedEventArgs(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESim Windows.Networking.NetworkOperators.ESimRemovedEventArgs::get_ESim()
    @_property
    def e_sim(self) -> ESim: ...

@typing.final
class ESimServiceInfo(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESimAuthenticationPreference Windows.Networking.NetworkOperators.ESimServiceInfo::get_AuthenticationPreference()
    @_property
    def authentication_preference(self) -> ESimAuthenticationPreference: ...
    # System.Boolean Windows.Networking.NetworkOperators.ESimServiceInfo::get_IsESimUiEnabled()
    @_property
    def is_e_sim_ui_enabled(self) -> bool: ...

@typing.final
class ESimUpdatedEventArgs(winrt.system.Object):
    # Windows.Networking.NetworkOperators.ESim Windows.Networking.NetworkOperators.ESimUpdatedEventArgs::get_ESim()
    @_property
    def e_sim(self) -> ESim: ...

@typing.final
class ESimWatcher(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimWatcher::add_Added(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimAddedEventArgs>)
    def add_added(self, handler: windows_foundation.TypedEventHandler[ESimWatcher, ESimAddedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::remove_Added(Windows.Foundation.EventRegistrationToken)
    def remove_added(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[ESimWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimWatcher::add_Removed(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimRemovedEventArgs>)
    def add_removed(self, handler: windows_foundation.TypedEventHandler[ESimWatcher, ESimRemovedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::remove_Removed(Windows.Foundation.EventRegistrationToken)
    def remove_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[ESimWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.ESimWatcher::add_Updated(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimUpdatedEventArgs>)
    def add_updated(self, handler: windows_foundation.TypedEventHandler[ESimWatcher, ESimUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.ESimWatcher::remove_Updated(Windows.Foundation.EventRegistrationToken)
    def remove_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Networking.NetworkOperators.ESimWatcherStatus Windows.Networking.NetworkOperators.ESimWatcher::get_Status()
    @_property
    def status(self) -> ESimWatcherStatus: ...

@typing.final
class FdnAccessManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.FdnAccessManager::RequestUnlockAsync(System.String)
    def request_unlock_async(cls, contact_list_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...

@typing.final
class FdnAccessManager(winrt.system.Object, metaclass=FdnAccessManager_Static):
    pass

@typing.final
class HotspotAuthenticationContext_Static(winrt._winrt.IInspectable_Static):
    # System.Boolean Windows.Networking.NetworkOperators.HotspotAuthenticationContext::TryGetAuthenticationContext(System.String,Windows.Networking.NetworkOperators.HotspotAuthenticationContext&)
    def try_get_authentication_context(cls, even_token: str, /) -> typing.Tuple[bool, HotspotAuthenticationContext]: ...

@typing.final
class HotspotAuthenticationContext(winrt.system.Object, metaclass=HotspotAuthenticationContext_Static):
    # System.Void Windows.Networking.NetworkOperators.HotspotAuthenticationContext::AbortAuthentication(System.Boolean)
    def abort_authentication(self, mark_as_manual: bool, /) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.HotspotAuthenticationContext::IssueCredentials(System.String,System.String,System.String,System.Boolean)
    def issue_credentials(self, user_name: str, password: str, extra_parameters: str, mark_as_manual_connect_on_failure: bool, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult> Windows.Networking.NetworkOperators.HotspotAuthenticationContext::IssueCredentialsAsync(System.String,System.String,System.String,System.Boolean)
    def issue_credentials_async(self, user_name: str, password: str, extra_parameters: str, mark_as_manual_connect_on_failure: bool, /) -> windows_foundation.IAsyncOperation[HotspotCredentialsAuthenticationResult]: ...
    # System.Void Windows.Networking.NetworkOperators.HotspotAuthenticationContext::SkipAuthentication()
    def skip_authentication(self) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.HotspotAuthenticationContext::TriggerAttentionRequired(System.String,System.String)
    def trigger_attention_required(self, package_relative_application_id: str, application_parameters: str, /) -> None: ...
    # Windows.Foundation.Uri Windows.Networking.NetworkOperators.HotspotAuthenticationContext::get_AuthenticationUrl()
    @_property
    def authentication_url(self) -> windows_foundation.Uri: ...
    # Windows.Networking.Connectivity.NetworkAdapter Windows.Networking.NetworkOperators.HotspotAuthenticationContext::get_NetworkAdapter()
    @_property
    def network_adapter(self) -> windows_networking_connectivity.NetworkAdapter: ...
    # Windows.Foundation.Uri Windows.Networking.NetworkOperators.HotspotAuthenticationContext::get_RedirectMessageUrl()
    @_property
    def redirect_message_url(self) -> windows_foundation.Uri: ...
    # Windows.Data.Xml.Dom.XmlDocument Windows.Networking.NetworkOperators.HotspotAuthenticationContext::get_RedirectMessageXml()
    @_property
    def redirect_message_xml(self) -> windows_data_xml_dom.XmlDocument: ...
    # System.Byte[] Windows.Networking.NetworkOperators.HotspotAuthenticationContext::get_WirelessNetworkId()
    @_property
    def wireless_network_id(self) -> winrt.system.UInt8: ...

@typing.final
class HotspotAuthenticationEventDetails(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.HotspotAuthenticationEventDetails::get_EventToken()
    @_property
    def event_token(self) -> str: ...

@typing.final
class HotspotCredentialsAuthenticationResult(winrt.system.Object):
    # Windows.Data.Xml.Dom.XmlDocument Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult::get_AuthenticationReplyXml()
    @_property
    def authentication_reply_xml(self) -> windows_data_xml_dom.XmlDocument: ...
    # System.Boolean Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult::get_HasNetworkErrorOccurred()
    @_property
    def has_network_error_occurred(self) -> bool: ...
    # Windows.Foundation.Uri Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult::get_LogoffUrl()
    @_property
    def logoff_url(self) -> windows_foundation.Uri: ...
    # Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult::get_ResponseCode()
    @_property
    def response_code(self) -> HotspotAuthenticationResponseCode: ...

@typing.final
class KnownCSimFilePaths_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownCSimFilePaths::get_EFSpn()
    @_property
    def e_f_spn(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownCSimFilePaths::get_Gid1()
    @_property
    def gid1(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownCSimFilePaths::get_Gid2()
    @_property
    def gid2(cls) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class KnownCSimFilePaths(winrt.system.Object, metaclass=KnownCSimFilePaths_Static):
    pass

@typing.final
class KnownRuimFilePaths_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownRuimFilePaths::get_EFSpn()
    @_property
    def e_f_spn(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownRuimFilePaths::get_Gid1()
    @_property
    def gid1(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownRuimFilePaths::get_Gid2()
    @_property
    def gid2(cls) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class KnownRuimFilePaths(winrt.system.Object, metaclass=KnownRuimFilePaths_Static):
    pass

@typing.final
class KnownSimFilePaths_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownSimFilePaths::get_EFOns()
    @_property
    def e_f_ons(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownSimFilePaths::get_EFSpn()
    @_property
    def e_f_spn(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownSimFilePaths::get_Gid1()
    @_property
    def gid1(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownSimFilePaths::get_Gid2()
    @_property
    def gid2(cls) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class KnownSimFilePaths(winrt.system.Object, metaclass=KnownSimFilePaths_Static):
    pass

@typing.final
class KnownUSimFilePaths_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownUSimFilePaths::get_EFOpl()
    @_property
    def e_f_opl(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownUSimFilePaths::get_EFPnn()
    @_property
    def e_f_pnn(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownUSimFilePaths::get_EFSpn()
    @_property
    def e_f_spn(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownUSimFilePaths::get_Gid1()
    @_property
    def gid1(cls) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.KnownUSimFilePaths::get_Gid2()
    @_property
    def gid2(cls) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class KnownUSimFilePaths(winrt.system.Object, metaclass=KnownUSimFilePaths_Static):
    pass

@typing.final
class MobileBroadbandAccount_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.MobileBroadbandAccount Windows.Networking.NetworkOperators.MobileBroadbandAccount::CreateFromNetworkAccountId(System.String)
    def create_from_network_account_id(cls, network_account_id: str, /) -> MobileBroadbandAccount: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_AvailableNetworkAccountIds()
    @_property
    def available_network_account_ids(cls) -> typing.Sequence[str]: ...

@typing.final
class MobileBroadbandAccount(winrt.system.Object, metaclass=MobileBroadbandAccount_Static):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.Connectivity.ConnectionProfile> Windows.Networking.NetworkOperators.MobileBroadbandAccount::GetConnectionProfiles()
    def get_connection_profiles(self) -> typing.Sequence[windows_networking_connectivity.ConnectionProfile]: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_CurrentDeviceInformation()
    @_property
    def current_device_information(self) -> MobileBroadbandDeviceInformation: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandNetwork Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_CurrentNetwork()
    @_property
    def current_network(self) -> MobileBroadbandNetwork: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...
    # System.Guid Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_ServiceProviderGuid()
    @_property
    def service_provider_guid(self) -> _uuid.UUID: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_ServiceProviderName()
    @_property
    def service_provider_name(self) -> str: ...
    # Windows.Foundation.Uri Windows.Networking.NetworkOperators.MobileBroadbandAccount::get_AccountExperienceUrl()
    @_property
    def account_experience_url(self) -> windows_foundation.Uri: ...

@typing.final
class MobileBroadbandAccountEventArgs(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...

@typing.final
class MobileBroadbandAccountUpdatedEventArgs(winrt.system.Object):
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs::get_HasDeviceInformationChanged()
    @_property
    def has_device_information_changed(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs::get_HasNetworkChanged()
    @_property
    def has_network_changed(self) -> bool: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...

@typing.final
class MobileBroadbandAccountWatcher(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::add_AccountAdded(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>)
    def add_account_added(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::remove_AccountAdded(Windows.Foundation.EventRegistrationToken)
    def remove_account_added(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::add_AccountRemoved(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>)
    def add_account_removed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::remove_AccountRemoved(Windows.Foundation.EventRegistrationToken)
    def remove_account_removed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::add_AccountUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs>)
    def add_account_updated(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::remove_AccountUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_account_updated(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandAccountWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandAccountWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher::get_Status()
    @_property
    def status(self) -> MobileBroadbandAccountWatcherStatus: ...

@typing.final
class MobileBroadbandAntennaSar(winrt.system.Object):
    def __new__(cls: typing.Type[Self], antenna_index: winrt.system.Int32, sar_backoff_index: winrt.system.Int32) -> Self: ...
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar::get_AntennaIndex()
    @_property
    def antenna_index(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar::get_SarBackoffIndex()
    @_property
    def sar_backoff_index(self) -> winrt.system.Int32: ...

@typing.final
class MobileBroadbandCellCdma(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_BaseStationId()
    @_property
    def base_station_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_BaseStationLastBroadcastGpsTime()
    @_property
    def base_station_last_broadcast_gps_time(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_BaseStationLatitude()
    @_property
    def base_station_latitude(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_BaseStationLongitude()
    @_property
    def base_station_longitude(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_BaseStationPNCode()
    @_property
    def base_station_p_n_code(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_NetworkId()
    @_property
    def network_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_PilotSignalStrengthInDB()
    @_property
    def pilot_signal_strength_in_db(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellCdma::get_SystemId()
    @_property
    def system_id(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class MobileBroadbandCellGsm(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_BaseStationId()
    @_property
    def base_station_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_CellId()
    @_property
    def cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_ChannelNumber()
    @_property
    def channel_number(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_LocationAreaCode()
    @_property
    def location_area_code(self) -> typing.Optional[winrt.system.Int32]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_ReceivedSignalStrengthInDBm()
    @_property
    def received_signal_strength_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellGsm::get_TimingAdvanceInBitPeriods()
    @_property
    def timing_advance_in_bit_periods(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class MobileBroadbandCellLte(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_CellId()
    @_property
    def cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_ChannelNumber()
    @_property
    def channel_number(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_PhysicalCellId()
    @_property
    def physical_cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_ReferenceSignalReceivedPowerInDBm()
    @_property
    def reference_signal_received_power_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_ReferenceSignalReceivedQualityInDBm()
    @_property
    def reference_signal_received_quality_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_TimingAdvanceInBitPeriods()
    @_property
    def timing_advance_in_bit_periods(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellLte::get_TrackingAreaCode()
    @_property
    def tracking_area_code(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class MobileBroadbandCellNR(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int64> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_CellId()
    @_property
    def cell_id(self) -> typing.Optional[winrt.system.Int64]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_ChannelNumber()
    @_property
    def channel_number(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_PhysicalCellId()
    @_property
    def physical_cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_ReferenceSignalReceivedPowerInDBm()
    @_property
    def reference_signal_received_power_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_ReferenceSignalReceivedQualityInDBm()
    @_property
    def reference_signal_received_quality_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_SignalToNoiseRatioInDB()
    @_property
    def signal_to_noise_ratio_in_db(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_TimingAdvanceInNanoseconds()
    @_property
    def timing_advance_in_nanoseconds(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellNR::get_TrackingAreaCode()
    @_property
    def tracking_area_code(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class MobileBroadbandCellTdscdma(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_CellId()
    @_property
    def cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_CellParameterId()
    @_property
    def cell_parameter_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_ChannelNumber()
    @_property
    def channel_number(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_LocationAreaCode()
    @_property
    def location_area_code(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_PathLossInDB()
    @_property
    def path_loss_in_db(self) -> typing.Optional[winrt.system.Double]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_ReceivedSignalCodePowerInDBm()
    @_property
    def received_signal_code_power_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma::get_TimingAdvanceInBitPeriods()
    @_property
    def timing_advance_in_bit_periods(self) -> typing.Optional[winrt.system.Int32]: ...

@typing.final
class MobileBroadbandCellUmts(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_CellId()
    @_property
    def cell_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_ChannelNumber()
    @_property
    def channel_number(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_LocationAreaCode()
    @_property
    def location_area_code(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_PathLossInDB()
    @_property
    def path_loss_in_db(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_PrimaryScramblingCode()
    @_property
    def primary_scrambling_code(self) -> typing.Optional[winrt.system.Int32]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_ProviderId()
    @_property
    def provider_id(self) -> str: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_ReceivedSignalCodePowerInDBm()
    @_property
    def received_signal_code_power_in_dbm(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Networking.NetworkOperators.MobileBroadbandCellUmts::get_SignalToNoiseRatioInDB()
    @_property
    def signal_to_noise_ratio_in_db(self) -> typing.Optional[winrt.system.Double]: ...

@typing.final
class MobileBroadbandCellsInfo(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellCdma> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsCdma()
    @_property
    def neighboring_cells_cdma(self) -> typing.Sequence[MobileBroadbandCellCdma]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellGsm> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsGsm()
    @_property
    def neighboring_cells_gsm(self) -> typing.Sequence[MobileBroadbandCellGsm]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellLte> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsLte()
    @_property
    def neighboring_cells_lte(self) -> typing.Sequence[MobileBroadbandCellLte]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsTdscdma()
    @_property
    def neighboring_cells_tdscdma(self) -> typing.Sequence[MobileBroadbandCellTdscdma]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellUmts> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsUmts()
    @_property
    def neighboring_cells_umts(self) -> typing.Sequence[MobileBroadbandCellUmts]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellCdma> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsCdma()
    @_property
    def serving_cells_cdma(self) -> typing.Sequence[MobileBroadbandCellCdma]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellGsm> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsGsm()
    @_property
    def serving_cells_gsm(self) -> typing.Sequence[MobileBroadbandCellGsm]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellLte> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsLte()
    @_property
    def serving_cells_lte(self) -> typing.Sequence[MobileBroadbandCellLte]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsTdscdma()
    @_property
    def serving_cells_tdscdma(self) -> typing.Sequence[MobileBroadbandCellTdscdma]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellUmts> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsUmts()
    @_property
    def serving_cells_umts(self) -> typing.Sequence[MobileBroadbandCellUmts]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellNR> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_NeighboringCellsNR()
    @_property
    def neighboring_cells_n_r(self) -> typing.Sequence[MobileBroadbandCellNR]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandCellNR> Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo::get_ServingCellsNR()
    @_property
    def serving_cells_n_r(self) -> typing.Sequence[MobileBroadbandCellNR]: ...

@typing.final
class MobileBroadbandCurrentSlotIndexChangedEventArgs(winrt.system.Object):
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandCurrentSlotIndexChangedEventArgs::get_CurrentSlotIndex()
    @_property
    def current_slot_index(self) -> winrt.system.Int32: ...

@typing.final
class MobileBroadbandDeviceInformation(winrt.system.Object):
    # Windows.Devices.Sms.CellularClass Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_CellularClass()
    @_property
    def cellular_class(self) -> windows_devices_sms.CellularClass: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandRadioState Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_CurrentRadioState()
    @_property
    def current_radio_state(self) -> MobileBroadbandRadioState: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_CustomDataClass()
    @_property
    def custom_data_class(self) -> str: ...
    # Windows.Networking.NetworkOperators.DataClasses Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_DataClasses()
    @_property
    def data_classes(self) -> DataClasses: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceType Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_DeviceType()
    @_property
    def device_type(self) -> MobileBroadbandDeviceType: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_FirmwareInformation()
    @_property
    def firmware_information(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_Manufacturer()
    @_property
    def manufacturer(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_MobileEquipmentId()
    @_property
    def mobile_equipment_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_Model()
    @_property
    def model(self) -> str: ...
    # Windows.Networking.NetworkOperators.NetworkDeviceStatus Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_NetworkDeviceStatus()
    @_property
    def network_device_status(self) -> NetworkDeviceStatus: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SimIccId()
    @_property
    def sim_icc_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SubscriberId()
    @_property
    def subscriber_id(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_TelephoneNumbers()
    @_property
    def telephone_numbers(self) -> typing.Sequence[str]: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinManager Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_PinManager()
    @_property
    def pin_manager(self) -> MobileBroadbandPinManager: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_Revision()
    @_property
    def revision(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SerialNumber()
    @_property
    def serial_number(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SimGid1()
    @_property
    def sim_gid1(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SimPnn()
    @_property
    def sim_pnn(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SimSpn()
    @_property
    def sim_spn(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandSlotManager Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation::get_SlotManager()
    @_property
    def slot_manager(self) -> MobileBroadbandSlotManager: ...

@typing.final
class MobileBroadbandDeviceService(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession Windows.Networking.NetworkOperators.MobileBroadbandDeviceService::OpenCommandSession()
    def open_command_session(self) -> MobileBroadbandDeviceServiceCommandSession: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession Windows.Networking.NetworkOperators.MobileBroadbandDeviceService::OpenDataSession()
    def open_data_session(self) -> MobileBroadbandDeviceServiceDataSession: ...
    # System.Guid Windows.Networking.NetworkOperators.MobileBroadbandDeviceService::get_DeviceServiceId()
    @_property
    def device_service_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Networking.NetworkOperators.MobileBroadbandDeviceService::get_SupportedCommands()
    @_property
    def supported_commands(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class MobileBroadbandDeviceServiceCommandEventArgs(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandEventArgs::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Guid Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandEventArgs::get_DeviceServiceId()
    @_property
    def device_service_id(self) -> _uuid.UUID: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandEventArgs::get_EventId()
    @_property
    def event_id(self) -> winrt.system.UInt32: ...
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandEventArgs::get_ReceivedData()
    @_property
    def received_data(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class MobileBroadbandDeviceServiceCommandResult(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult::get_ResponseData()
    @_property
    def response_data(self) -> windows_storage_streams.IBuffer: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult::get_StatusCode()
    @_property
    def status_code(self) -> winrt.system.UInt32: ...

@typing.final
class MobileBroadbandDeviceServiceCommandSession(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession::CloseSession()
    def close_session(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession::SendQueryCommandAsync(System.UInt32,Windows.Storage.Streams.IBuffer)
    def send_query_command_async(self, command_id: winrt.system.UInt32, data: windows_storage_streams.IBuffer, /) -> windows_foundation.IAsyncOperation[MobileBroadbandDeviceServiceCommandResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession::SendSetCommandAsync(System.UInt32,Windows.Storage.Streams.IBuffer)
    def send_set_command_async(self, command_id: winrt.system.UInt32, data: windows_storage_streams.IBuffer, /) -> windows_foundation.IAsyncOperation[MobileBroadbandDeviceServiceCommandResult]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession::add_CommandReceived(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession,Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandEventArgs>)
    def add_command_received(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandDeviceServiceCommandSession, MobileBroadbandDeviceServiceCommandEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession::remove_CommandReceived(Windows.Foundation.EventRegistrationToken)
    def remove_command_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class MobileBroadbandDeviceServiceDataReceivedEventArgs(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs::get_ReceivedData()
    @_property
    def received_data(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class MobileBroadbandDeviceServiceDataSession(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession::CloseSession()
    def close_session(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession::WriteDataAsync(Windows.Storage.Streams.IBuffer)
    def write_data_async(self, value: windows_storage_streams.IBuffer, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession::add_DataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession,Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs>)
    def add_data_received(self, event_handler: windows_foundation.TypedEventHandler[MobileBroadbandDeviceServiceDataSession, MobileBroadbandDeviceServiceDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession::remove_DataReceived(Windows.Foundation.EventRegistrationToken)
    def remove_data_received(self, event_cookie: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class MobileBroadbandDeviceServiceInformation(winrt.system.Object):
    # System.Guid Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation::get_DeviceServiceId()
    @_property
    def device_service_id(self) -> _uuid.UUID: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation::get_IsDataReadSupported()
    @_property
    def is_data_read_supported(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation::get_IsDataWriteSupported()
    @_property
    def is_data_write_supported(self) -> bool: ...

@typing.final
class MobileBroadbandDeviceServiceTriggerDetails(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceTriggerDetails::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Guid Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceTriggerDetails::get_DeviceServiceId()
    @_property
    def device_service_id(self) -> _uuid.UUID: ...
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceTriggerDetails::get_ReceivedData()
    @_property
    def received_data(self) -> windows_storage_streams.IBuffer: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceTriggerDetails::get_EventId()
    @_property
    def event_id(self) -> winrt.system.UInt32: ...

@typing.final
class MobileBroadbandModem_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.MobileBroadbandModem Windows.Networking.NetworkOperators.MobileBroadbandModem::FromId(System.String)
    def from_id(cls, device_id: str, /) -> MobileBroadbandModem: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandModem Windows.Networking.NetworkOperators.MobileBroadbandModem::GetDefault()
    def get_default(cls) -> MobileBroadbandModem: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandModem::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...

@typing.final
class MobileBroadbandModem(winrt.system.Object, metaclass=MobileBroadbandModem_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration> Windows.Networking.NetworkOperators.MobileBroadbandModem::GetCurrentConfigurationAsync()
    def get_current_configuration_async(self) -> windows_foundation.IAsyncOperation[MobileBroadbandModemConfiguration]: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceService Windows.Networking.NetworkOperators.MobileBroadbandModem::GetDeviceService(System.Guid)
    def get_device_service(self, device_service_id: _uuid.UUID, /) -> MobileBroadbandDeviceService: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.MobileBroadbandModem::GetIsPassthroughEnabledAsync()
    def get_is_passthrough_enabled_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandModem::GetIsPassthroughEnabled(System.Int32)
    def get_is_passthrough_enabled_with_slot_index(self, slotindex: winrt.system.Int32, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.MobileBroadbandModem::GetIsPassthroughEnabledAsync(System.Int32)
    def get_is_passthrough_enabled_with_slot_index_async(self, slotindex: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandModem::ResetAsync()
    def reset_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandModemStatus> Windows.Networking.NetworkOperators.MobileBroadbandModem::SetIsPassthroughEnabledAsync(System.Boolean)
    def set_is_passthrough_enabled_async(self, value: bool, /) -> windows_foundation.IAsyncOperation[MobileBroadbandModemStatus]: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandModemStatus Windows.Networking.NetworkOperators.MobileBroadbandModem::SetIsPassthroughEnabled(System.Boolean,System.Int32)
    def set_is_passthrough_enabled_with_slot_index(self, value: bool, slotindex: winrt.system.Int32, /) -> MobileBroadbandModemStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandModemStatus> Windows.Networking.NetworkOperators.MobileBroadbandModem::SetIsPassthroughEnabledAsync(System.Boolean,System.Int32)
    def set_is_passthrough_enabled_with_slot_index_async(self, value: bool, slotindex: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[MobileBroadbandModemStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPco> Windows.Networking.NetworkOperators.MobileBroadbandModem::TryGetPcoAsync()
    def try_get_pco_async(self) -> windows_foundation.IAsyncOperation[typing.Optional[MobileBroadbandPco]]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandModem::add_IsInEmergencyCallModeChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandModem,System.Object>)
    def add_is_in_emergency_call_mode_changed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandModem, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandModem::remove_IsInEmergencyCallModeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_in_emergency_call_mode_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandAccount Windows.Networking.NetworkOperators.MobileBroadbandModem::get_CurrentAccount()
    @_property
    def current_account(self) -> MobileBroadbandAccount: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandNetwork Windows.Networking.NetworkOperators.MobileBroadbandModem::get_CurrentNetwork()
    @_property
    def current_network(self) -> MobileBroadbandNetwork: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation Windows.Networking.NetworkOperators.MobileBroadbandModem::get_DeviceInformation()
    @_property
    def device_information(self) -> MobileBroadbandDeviceInformation: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation> Windows.Networking.NetworkOperators.MobileBroadbandModem::get_DeviceServices()
    @_property
    def device_services(self) -> typing.Sequence[MobileBroadbandDeviceServiceInformation]: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandModem::get_IsResetSupported()
    @_property
    def is_reset_supported(self) -> bool: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandModem::get_MaxDeviceServiceCommandSizeInBytes()
    @_property
    def max_device_service_command_size_in_bytes(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandModem::get_MaxDeviceServiceDataSizeInBytes()
    @_property
    def max_device_service_data_size_in_bytes(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandModem::get_IsInEmergencyCallMode()
    @_property
    def is_in_emergency_call_mode(self) -> bool: ...

@typing.final
class MobileBroadbandModemConfiguration(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration::get_HomeProviderId()
    @_property
    def home_provider_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration::get_HomeProviderName()
    @_property
    def home_provider_name(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandUicc Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration::get_Uicc()
    @_property
    def uicc(self) -> MobileBroadbandUicc: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandSarManager Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration::get_SarManager()
    @_property
    def sar_manager(self) -> MobileBroadbandSarManager: ...

@typing.final
class MobileBroadbandModemIsolation(winrt.system.Object):
    def __new__(cls: typing.Type[Self], modem_device_id: str, rule_group_id: str) -> Self: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation::AddAllowedHost(Windows.Networking.HostName)
    def add_allowed_host(self, host: windows_networking.HostName, /) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation::AddAllowedHostRange(Windows.Networking.HostName,Windows.Networking.HostName)
    def add_allowed_host_range(self, first: windows_networking.HostName, last: windows_networking.HostName, /) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation::ApplyConfigurationAsync()
    def apply_configuration_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation::ClearConfigurationAsync()
    def clear_configuration_async(self) -> windows_foundation.IAsyncAction: ...

@typing.final
class MobileBroadbandNetwork(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo> Windows.Networking.NetworkOperators.MobileBroadbandNetwork::GetCellsInfoAsync()
    def get_cells_info_async(self) -> windows_foundation.IAsyncOperation[MobileBroadbandCellsInfo]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.MobileBroadbandNetwork::GetVoiceCallSupportAsync()
    def get_voice_call_support_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandNetwork::ShowConnectionUI()
    def show_connection_ui(self) -> None: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_AccessPointName()
    @_property
    def access_point_name(self) -> str: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_ActivationNetworkError()
    @_property
    def activation_network_error(self) -> winrt.system.UInt32: ...
    # Windows.Networking.Connectivity.NetworkAdapter Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_NetworkAdapter()
    @_property
    def network_adapter(self) -> windows_networking_connectivity.NetworkAdapter: ...
    # Windows.Networking.NetworkOperators.NetworkRegistrationState Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_NetworkRegistrationState()
    @_property
    def network_registration_state(self) -> NetworkRegistrationState: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_PacketAttachNetworkError()
    @_property
    def packet_attach_network_error(self) -> winrt.system.UInt32: ...
    # Windows.Networking.NetworkOperators.DataClasses Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_RegisteredDataClass()
    @_property
    def registered_data_class(self) -> DataClasses: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_RegisteredProviderId()
    @_property
    def registered_provider_id(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_RegisteredProviderName()
    @_property
    def registered_provider_name(self) -> str: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_RegistrationNetworkError()
    @_property
    def registration_network_error(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandUiccApp> Windows.Networking.NetworkOperators.MobileBroadbandNetwork::get_RegistrationUiccApps()
    @_property
    def registration_uicc_apps(self) -> typing.Sequence[MobileBroadbandUiccApp]: ...

@typing.final
class MobileBroadbandNetworkRegistrationStateChange(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChange::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandNetwork Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChange::get_Network()
    @_property
    def network(self) -> MobileBroadbandNetwork: ...

@typing.final
class MobileBroadbandNetworkRegistrationStateChangeTriggerDetails(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChange> Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChangeTriggerDetails::get_NetworkRegistrationStateChanges()
    @_property
    def network_registration_state_changes(self) -> typing.Sequence[MobileBroadbandNetworkRegistrationStateChange]: ...

@typing.final
class MobileBroadbandPco(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandPco::get_Data()
    @_property
    def data(self) -> windows_storage_streams.IBuffer: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandPco::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandPco::get_IsComplete()
    @_property
    def is_complete(self) -> bool: ...

@typing.final
class MobileBroadbandPcoDataChangeTriggerDetails(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandPco Windows.Networking.NetworkOperators.MobileBroadbandPcoDataChangeTriggerDetails::get_UpdatedData()
    @_property
    def updated_data(self) -> MobileBroadbandPco: ...

@typing.final
class MobileBroadbandPin(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> Windows.Networking.NetworkOperators.MobileBroadbandPin::ChangeAsync(System.String,System.String)
    def change_async(self, current_pin: str, new_pin: str, /) -> windows_foundation.IAsyncOperation[MobileBroadbandPinOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> Windows.Networking.NetworkOperators.MobileBroadbandPin::DisableAsync(System.String)
    def disable_async(self, current_pin: str, /) -> windows_foundation.IAsyncOperation[MobileBroadbandPinOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> Windows.Networking.NetworkOperators.MobileBroadbandPin::EnableAsync(System.String)
    def enable_async(self, current_pin: str, /) -> windows_foundation.IAsyncOperation[MobileBroadbandPinOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> Windows.Networking.NetworkOperators.MobileBroadbandPin::EnterAsync(System.String)
    def enter_async(self, current_pin: str, /) -> windows_foundation.IAsyncOperation[MobileBroadbandPinOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> Windows.Networking.NetworkOperators.MobileBroadbandPin::UnblockAsync(System.String,System.String)
    def unblock_async(self, pin_unblock_key: str, new_pin: str, /) -> windows_foundation.IAsyncOperation[MobileBroadbandPinOperationResult]: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandPin::get_AttemptsRemaining()
    @_property
    def attempts_remaining(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandPin::get_Enabled()
    @_property
    def enabled(self) -> bool: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinFormat Windows.Networking.NetworkOperators.MobileBroadbandPin::get_Format()
    @_property
    def format(self) -> MobileBroadbandPinFormat: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinLockState Windows.Networking.NetworkOperators.MobileBroadbandPin::get_LockState()
    @_property
    def lock_state(self) -> MobileBroadbandPinLockState: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandPin::get_MaxLength()
    @_property
    def max_length(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandPin::get_MinLength()
    @_property
    def min_length(self) -> winrt.system.UInt32: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinType Windows.Networking.NetworkOperators.MobileBroadbandPin::get_Type()
    @_property
    def type(self) -> MobileBroadbandPinType: ...

@typing.final
class MobileBroadbandPinLockStateChange(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinLockState Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange::get_PinLockState()
    @_property
    def pin_lock_state(self) -> MobileBroadbandPinLockState: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandPinType Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange::get_PinType()
    @_property
    def pin_type(self) -> MobileBroadbandPinType: ...

@typing.final
class MobileBroadbandPinLockStateChangeTriggerDetails(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange> Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChangeTriggerDetails::get_PinLockStateChanges()
    @_property
    def pin_lock_state_changes(self) -> typing.Sequence[MobileBroadbandPinLockStateChange]: ...

@typing.final
class MobileBroadbandPinManager(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandPin Windows.Networking.NetworkOperators.MobileBroadbandPinManager::GetPin(Windows.Networking.NetworkOperators.MobileBroadbandPinType)
    def get_pin(self, pin_type: MobileBroadbandPinType, /) -> MobileBroadbandPin: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandPinType> Windows.Networking.NetworkOperators.MobileBroadbandPinManager::get_SupportedPins()
    @_property
    def supported_pins(self) -> typing.Sequence[MobileBroadbandPinType]: ...

@typing.final
class MobileBroadbandPinOperationResult(winrt.system.Object):
    # System.UInt32 Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult::get_AttemptsRemaining()
    @_property
    def attempts_remaining(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult::get_IsSuccessful()
    @_property
    def is_successful(self) -> bool: ...

@typing.final
class MobileBroadbandRadioStateChange(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChange::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandRadioState Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChange::get_RadioState()
    @_property
    def radio_state(self) -> MobileBroadbandRadioState: ...

@typing.final
class MobileBroadbandRadioStateChangeTriggerDetails(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChange> Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChangeTriggerDetails::get_RadioStateChanges()
    @_property
    def radio_state_changes(self) -> typing.Sequence[MobileBroadbandRadioStateChange]: ...

@typing.final
class MobileBroadbandSarManager(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandSarManager::DisableBackoffAsync()
    def disable_backoff_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandSarManager::EnableBackoffAsync()
    def enable_backoff_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.MobileBroadbandSarManager::GetIsTransmittingAsync()
    def get_is_transmitting_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandSarManager::RevertSarToHardwareControlAsync()
    def revert_sar_to_hardware_control_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandSarManager::SetConfigurationAsync(Windows.Foundation.Collections.IIterable`1<Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar>)
    def set_configuration_async(self, antennas: typing.Iterable[MobileBroadbandAntennaSar], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.MobileBroadbandSarManager::SetTransmissionStateChangedHysteresisAsync(Windows.Foundation.TimeSpan)
    def set_transmission_state_changed_hysteresis_async(self, timer_period: datetime.timedelta, /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandSarManager::StartTransmissionStateMonitoring()
    def start_transmission_state_monitoring(self) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandSarManager::StopTransmissionStateMonitoring()
    def stop_transmission_state_monitoring(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandSarManager::add_TransmissionStateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandSarManager,Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs>)
    def add_transmission_state_changed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandSarManager, MobileBroadbandTransmissionStateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandSarManager::remove_TransmissionStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_transmission_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar> Windows.Networking.NetworkOperators.MobileBroadbandSarManager::get_Antennas()
    @_property
    def antennas(self) -> typing.Sequence[MobileBroadbandAntennaSar]: ...
    # Windows.Foundation.TimeSpan Windows.Networking.NetworkOperators.MobileBroadbandSarManager::get_HysteresisTimerPeriod()
    @_property
    def hysteresis_timer_period(self) -> datetime.timedelta: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandSarManager::get_IsBackoffEnabled()
    @_property
    def is_backoff_enabled(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandSarManager::get_IsSarControlledByHardware()
    @_property
    def is_sar_controlled_by_hardware(self) -> bool: ...
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandSarManager::get_IsWiFiHardwareIntegrated()
    @_property
    def is_wi_fi_hardware_integrated(self) -> bool: ...

@typing.final
class MobileBroadbandSlotInfo(winrt.system.Object):
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo::get_Index()
    @_property
    def index(self) -> winrt.system.Int32: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandSlotState Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo::get_State()
    @_property
    def state(self) -> MobileBroadbandSlotState: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo::get_IccId()
    @_property
    def icc_id(self) -> str: ...

@typing.final
class MobileBroadbandSlotInfoChangedEventArgs(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo Windows.Networking.NetworkOperators.MobileBroadbandSlotInfoChangedEventArgs::get_SlotInfo()
    @_property
    def slot_info(self) -> MobileBroadbandSlotInfo: ...

@typing.final
class MobileBroadbandSlotManager(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandModemStatus Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::SetCurrentSlot(System.Int32)
    def set_current_slot(self, slot_index: winrt.system.Int32, /) -> MobileBroadbandModemStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandModemStatus> Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::SetCurrentSlotAsync(System.Int32)
    def set_current_slot_async(self, slot_index: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[MobileBroadbandModemStatus]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::add_CurrentSlotIndexChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager,Windows.Networking.NetworkOperators.MobileBroadbandCurrentSlotIndexChangedEventArgs>)
    def add_current_slot_index_changed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandSlotManager, MobileBroadbandCurrentSlotIndexChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::remove_CurrentSlotIndexChanged(Windows.Foundation.EventRegistrationToken)
    def remove_current_slot_index_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::add_SlotInfoChanged(Windows.Foundation.TypedEventHandler`2<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager,Windows.Networking.NetworkOperators.MobileBroadbandSlotInfoChangedEventArgs>)
    def add_slot_info_changed(self, handler: windows_foundation.TypedEventHandler[MobileBroadbandSlotManager, MobileBroadbandSlotInfoChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::remove_SlotInfoChanged(Windows.Foundation.EventRegistrationToken)
    def remove_slot_info_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::get_CurrentSlotIndex()
    @_property
    def current_slot_index(self) -> winrt.system.Int32: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo> Windows.Networking.NetworkOperators.MobileBroadbandSlotManager::get_SlotInfos()
    @_property
    def slot_infos(self) -> typing.Sequence[MobileBroadbandSlotInfo]: ...

@typing.final
class MobileBroadbandTransmissionStateChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs::get_IsTransmitting()
    @_property
    def is_transmitting(self) -> bool: ...

@typing.final
class MobileBroadbandUicc(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult> Windows.Networking.NetworkOperators.MobileBroadbandUicc::GetUiccAppsAsync()
    def get_uicc_apps_async(self) -> windows_foundation.IAsyncOperation[MobileBroadbandUiccAppsResult]: ...
    # System.String Windows.Networking.NetworkOperators.MobileBroadbandUicc::get_SimIccId()
    @_property
    def sim_icc_id(self) -> str: ...

@typing.final
class MobileBroadbandUiccApp(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult> Windows.Networking.NetworkOperators.MobileBroadbandUiccApp::GetRecordDetailsAsync(Windows.Foundation.Collections.IIterable`1<System.UInt32>)
    def get_record_details_async(self, uicc_file_path: typing.Iterable[winrt.system.UInt32], /) -> windows_foundation.IAsyncOperation[MobileBroadbandUiccAppRecordDetailsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult> Windows.Networking.NetworkOperators.MobileBroadbandUiccApp::ReadRecordAsync(Windows.Foundation.Collections.IIterable`1<System.UInt32>,System.Int32)
    def read_record_async(self, uicc_file_path: typing.Iterable[winrt.system.UInt32], record_index: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[MobileBroadbandUiccAppReadRecordResult]: ...
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandUiccApp::get_Id()
    @_property
    def id(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Networking.NetworkOperators.UiccAppKind Windows.Networking.NetworkOperators.MobileBroadbandUiccApp::get_Kind()
    @_property
    def kind(self) -> UiccAppKind: ...

@typing.final
class MobileBroadbandUiccAppReadRecordResult(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult::get_Data()
    @_property
    def data(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult::get_Status()
    @_property
    def status(self) -> MobileBroadbandUiccAppOperationStatus: ...

@typing.final
class MobileBroadbandUiccAppRecordDetailsResult(winrt.system.Object):
    # Windows.Networking.NetworkOperators.UiccAppRecordKind Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_Kind()
    @_property
    def kind(self) -> UiccAppRecordKind: ...
    # Windows.Networking.NetworkOperators.UiccAccessCondition Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_ReadAccessCondition()
    @_property
    def read_access_condition(self) -> UiccAccessCondition: ...
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_RecordCount()
    @_property
    def record_count(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_RecordSize()
    @_property
    def record_size(self) -> winrt.system.Int32: ...
    # Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_Status()
    @_property
    def status(self) -> MobileBroadbandUiccAppOperationStatus: ...
    # Windows.Networking.NetworkOperators.UiccAccessCondition Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult::get_WriteAccessCondition()
    @_property
    def write_access_condition(self) -> UiccAccessCondition: ...

@typing.final
class MobileBroadbandUiccAppsResult(winrt.system.Object):
    # Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult::get_Status()
    @_property
    def status(self) -> MobileBroadbandUiccAppOperationStatus: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.MobileBroadbandUiccApp> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult::get_UiccApps()
    @_property
    def uicc_apps(self) -> typing.Sequence[MobileBroadbandUiccApp]: ...

@typing.final
class NetworkOperatorDataUsageTriggerDetails(winrt.system.Object):
    # Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind Windows.Networking.NetworkOperators.NetworkOperatorDataUsageTriggerDetails::get_NotificationKind()
    @_property
    def notification_kind(self) -> NetworkOperatorDataUsageNotificationKind: ...

@typing.final
class NetworkOperatorNotificationEventDetails(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::AuthorizeTethering(System.Boolean,System.String)
    def authorize_tethering(self, allow: bool, entitlement_failure_reason: str, /) -> None: ...
    # System.Byte Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_EncodingType()
    @_property
    def encoding_type(self) -> winrt.system.UInt8: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_Message()
    @_property
    def message(self) -> str: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...
    # Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_NotificationType()
    @_property
    def notification_type(self) -> NetworkOperatorEventMessageType: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_RuleId()
    @_property
    def rule_id(self) -> str: ...
    # Windows.Devices.Sms.ISmsMessage Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails::get_SmsMessage()
    @_property
    def sms_message(self) -> windows_devices_sms.ISmsMessage: ...

@typing.final
class NetworkOperatorTetheringAccessPointConfiguration(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::IsAuthenticationKindSupported(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    def is_authentication_kind_supported(self, authentication_kind: TetheringWiFiAuthenticationKind, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::IsAuthenticationKindSupportedAsync(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    def is_authentication_kind_supported_async(self, authentication_kind: TetheringWiFiAuthenticationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::IsBandSupported(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    def is_band_supported(self, band: TetheringWiFiBand, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::IsBandSupportedAsync(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    def is_band_supported_async(self, band: TetheringWiFiBand, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::get_Ssid()
    @_property
    def ssid(self) -> str: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::put_Ssid(System.String)
    @ssid.setter
    def ssid(self, value: str) -> None: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::get_Passphrase()
    @_property
    def passphrase(self) -> str: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::put_Passphrase(System.String)
    @passphrase.setter
    def passphrase(self, value: str) -> None: ...
    # Windows.Networking.NetworkOperators.TetheringWiFiBand Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::get_Band()
    @_property
    def band(self) -> TetheringWiFiBand: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::put_Band(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    @band.setter
    def band(self, value: TetheringWiFiBand) -> None: ...
    # Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::get_AuthenticationKind()
    @_property
    def authentication_kind(self) -> TetheringWiFiAuthenticationKind: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration::put_AuthenticationKind(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    @authentication_kind.setter
    def authentication_kind(self, value: TetheringWiFiAuthenticationKind) -> None: ...

@typing.final
class NetworkOperatorTetheringClient(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.HostName> Windows.Networking.NetworkOperators.NetworkOperatorTetheringClient::get_HostNames()
    @_property
    def host_names(self) -> typing.Sequence[windows_networking.HostName]: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringClient::get_MacAddress()
    @_property
    def mac_address(self) -> str: ...

@typing.final
class NetworkOperatorTetheringManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::CreateFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile)
    def create_from_connection_profile(cls, profile: windows_networking_connectivity.ConnectionProfile, /) -> NetworkOperatorTetheringManager: ...
    # Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::CreateFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile,Windows.Networking.Connectivity.NetworkAdapter)
    def create_from_connection_profile_with_target_adapter(cls, profile: windows_networking_connectivity.ConnectionProfile, adapter: windows_networking_connectivity.NetworkAdapter, /) -> NetworkOperatorTetheringManager: ...
    # Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::CreateFromNetworkAccountId(System.String)
    def create_from_network_account_id(cls, network_account_id: str, /) -> NetworkOperatorTetheringManager: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::DisableNoConnectionsTimeout()
    def disable_no_connections_timeout(cls) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::DisableNoConnectionsTimeoutAsync()
    def disable_no_connections_timeout_async(cls) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::EnableNoConnectionsTimeout()
    def enable_no_connections_timeout(cls) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::EnableNoConnectionsTimeoutAsync()
    def enable_no_connections_timeout_async(cls) -> windows_foundation.IAsyncAction: ...
    # Windows.Networking.NetworkOperators.TetheringCapability Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::GetTetheringCapability(System.String)
    def get_tethering_capability(cls, network_account_id: str, /) -> TetheringCapability: ...
    # Windows.Networking.NetworkOperators.TetheringCapability Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::GetTetheringCapabilityFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile)
    def get_tethering_capability_from_connection_profile(cls, profile: windows_networking_connectivity.ConnectionProfile, /) -> TetheringCapability: ...
    # System.Boolean Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::IsNoConnectionsTimeoutEnabled()
    def is_no_connections_timeout_enabled(cls) -> bool: ...

@typing.final
class NetworkOperatorTetheringManager(winrt.system.Object, metaclass=NetworkOperatorTetheringManager_Static):
    # Windows.Foundation.IAsyncAction Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::ConfigureAccessPointAsync(Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration)
    def configure_access_point_async(self, configuration: NetworkOperatorTetheringAccessPointConfiguration, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::GetCurrentAccessPointConfiguration()
    def get_current_access_point_configuration(self) -> NetworkOperatorTetheringAccessPointConfiguration: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Networking.NetworkOperators.NetworkOperatorTetheringClient> Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::GetTetheringClients()
    def get_tethering_clients(self) -> typing.Sequence[NetworkOperatorTetheringClient]: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::StartTetheringAsync()
    def start_tethering_async(self) -> windows_foundation.IAsyncOperation[NetworkOperatorTetheringOperationResult]: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::StartTetheringAsync(Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration)
    def start_tethering_async(self, configuration: NetworkOperatorTetheringSessionAccessPointConfiguration, /) -> windows_foundation.IAsyncOperation[NetworkOperatorTetheringOperationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::StopTetheringAsync()
    def stop_tethering_async(self) -> windows_foundation.IAsyncOperation[NetworkOperatorTetheringOperationResult]: ...
    # System.UInt32 Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::get_ClientCount()
    @_property
    def client_count(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::get_MaxClientCount()
    @_property
    def max_client_count(self) -> winrt.system.UInt32: ...
    # Windows.Networking.NetworkOperators.TetheringOperationalState Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager::get_TetheringOperationalState()
    @_property
    def tethering_operational_state(self) -> TetheringOperationalState: ...

@typing.final
class NetworkOperatorTetheringOperationResult(winrt.system.Object):
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult::get_AdditionalErrorMessage()
    @_property
    def additional_error_message(self) -> str: ...
    # Windows.Networking.NetworkOperators.TetheringOperationStatus Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult::get_Status()
    @_property
    def status(self) -> TetheringOperationStatus: ...

@typing.final
class NetworkOperatorTetheringSessionAccessPointConfiguration(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::IsAuthenticationKindSupported(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    def is_authentication_kind_supported(self, authentication_kind: TetheringWiFiAuthenticationKind, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::IsAuthenticationKindSupportedAsync(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    def is_authentication_kind_supported_async(self, authentication_kind: TetheringWiFiAuthenticationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::IsBandSupported(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    def is_band_supported(self, band: TetheringWiFiBand, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::IsBandSupportedAsync(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    def is_band_supported_async(self, band: TetheringWiFiBand, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::get_Ssid()
    @_property
    def ssid(self) -> str: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::put_Ssid(System.String)
    @ssid.setter
    def ssid(self, value: str) -> None: ...
    # Windows.Networking.NetworkOperators.TetheringWiFiPerformancePriority Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::get_PerformancePriority()
    @_property
    def performance_priority(self) -> TetheringWiFiPerformancePriority: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::put_PerformancePriority(Windows.Networking.NetworkOperators.TetheringWiFiPerformancePriority)
    @performance_priority.setter
    def performance_priority(self, value: TetheringWiFiPerformancePriority) -> None: ...
    # System.String Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::get_Passphrase()
    @_property
    def passphrase(self) -> str: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::put_Passphrase(System.String)
    @passphrase.setter
    def passphrase(self, value: str) -> None: ...
    # Windows.Networking.NetworkOperators.TetheringWiFiBand Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::get_Band()
    @_property
    def band(self) -> TetheringWiFiBand: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::put_Band(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    @band.setter
    def band(self, value: TetheringWiFiBand) -> None: ...
    # Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::get_AuthenticationKind()
    @_property
    def authentication_kind(self) -> TetheringWiFiAuthenticationKind: ...
    # System.Void Windows.Networking.NetworkOperators.NetworkOperatorTetheringSessionAccessPointConfiguration::put_AuthenticationKind(Windows.Networking.NetworkOperators.TetheringWiFiAuthenticationKind)
    @authentication_kind.setter
    def authentication_kind(self, value: TetheringWiFiAuthenticationKind) -> None: ...

@typing.final
class ProvisionFromXmlDocumentResults(winrt.system.Object):
    # System.Boolean Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults::get_AllElementsProvisioned()
    @_property
    def all_elements_provisioned(self) -> bool: ...
    # System.String Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults::get_ProvisionResultsXml()
    @_property
    def provision_results_xml(self) -> str: ...

@typing.final
class ProvisionedProfile(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.ProvisionedProfile::UpdateCost(Windows.Networking.Connectivity.NetworkCostType)
    def update_cost(self, value: windows_networking_connectivity.NetworkCostType, /) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.ProvisionedProfile::UpdateUsage(Windows.Networking.NetworkOperators.ProfileUsage)
    def update_usage(self, value: ProfileUsage, /) -> None: ...

@typing.final
class ProvisioningAgent_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.ProvisioningAgent Windows.Networking.NetworkOperators.ProvisioningAgent::CreateFromNetworkAccountId(System.String)
    def create_from_network_account_id(cls, network_account_id: str, /) -> ProvisioningAgent: ...

@typing.final
class ProvisioningAgent(winrt.system.Object, metaclass=ProvisioningAgent_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Networking.NetworkOperators.ProvisionedProfile Windows.Networking.NetworkOperators.ProvisioningAgent::GetProvisionedProfile(Windows.Networking.NetworkOperators.ProfileMediaType,System.String)
    def get_provisioned_profile(self, media_type: ProfileMediaType, profile_name: str, /) -> ProvisionedProfile: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults> Windows.Networking.NetworkOperators.ProvisioningAgent::ProvisionFromXmlDocumentAsync(System.String)
    def provision_from_xml_document_async(self, provisioning_xml_document: str, /) -> windows_foundation.IAsyncOperation[ProvisionFromXmlDocumentResults]: ...

@typing.final
class TetheringEntitlementCheckTriggerDetails(winrt.system.Object):
    # System.Void Windows.Networking.NetworkOperators.TetheringEntitlementCheckTriggerDetails::AllowTethering()
    def allow_tethering(self) -> None: ...
    # System.Void Windows.Networking.NetworkOperators.TetheringEntitlementCheckTriggerDetails::DenyTethering(System.String)
    def deny_tethering(self, entitlement_failure_reason: str, /) -> None: ...
    # System.String Windows.Networking.NetworkOperators.TetheringEntitlementCheckTriggerDetails::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...

@typing.final
class UssdMessage(winrt.system.Object):
    def __new__(cls: typing.Type[Self], message_text: str) -> Self: ...
    # System.Byte[] Windows.Networking.NetworkOperators.UssdMessage::GetPayload()
    def get_payload(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    # System.Void Windows.Networking.NetworkOperators.UssdMessage::SetPayload(System.Byte[])
    def set_payload(self, value: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.String Windows.Networking.NetworkOperators.UssdMessage::get_PayloadAsText()
    @_property
    def payload_as_text(self) -> str: ...
    # System.Void Windows.Networking.NetworkOperators.UssdMessage::put_PayloadAsText(System.String)
    @payload_as_text.setter
    def payload_as_text(self, value: str) -> None: ...
    # System.Byte Windows.Networking.NetworkOperators.UssdMessage::get_DataCodingScheme()
    @_property
    def data_coding_scheme(self) -> winrt.system.UInt8: ...
    # System.Void Windows.Networking.NetworkOperators.UssdMessage::put_DataCodingScheme(System.Byte)
    @data_coding_scheme.setter
    def data_coding_scheme(self, value: winrt.system.UInt8) -> None: ...

@typing.final
class UssdReply(winrt.system.Object):
    # Windows.Networking.NetworkOperators.UssdMessage Windows.Networking.NetworkOperators.UssdReply::get_Message()
    @_property
    def message(self) -> UssdMessage: ...
    # Windows.Networking.NetworkOperators.UssdResultCode Windows.Networking.NetworkOperators.UssdReply::get_ResultCode()
    @_property
    def result_code(self) -> UssdResultCode: ...

@typing.final
class UssdSession_Static(winrt._winrt.IInspectable_Static):
    # Windows.Networking.NetworkOperators.UssdSession Windows.Networking.NetworkOperators.UssdSession::CreateFromNetworkAccountId(System.String)
    def create_from_network_account_id(cls, network_account_id: str, /) -> UssdSession: ...
    # Windows.Networking.NetworkOperators.UssdSession Windows.Networking.NetworkOperators.UssdSession::CreateFromNetworkInterfaceId(System.String)
    def create_from_network_interface_id(cls, network_interface_id: str, /) -> UssdSession: ...

@typing.final
class UssdSession(winrt.system.Object, metaclass=UssdSession_Static):
    # System.Void Windows.Networking.NetworkOperators.UssdSession::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.NetworkOperators.UssdReply> Windows.Networking.NetworkOperators.UssdSession::SendMessageAndGetReplyAsync(Windows.Networking.NetworkOperators.UssdMessage)
    def send_message_and_get_reply_async(self, message: UssdMessage, /) -> windows_foundation.IAsyncOperation[UssdReply]: ...

