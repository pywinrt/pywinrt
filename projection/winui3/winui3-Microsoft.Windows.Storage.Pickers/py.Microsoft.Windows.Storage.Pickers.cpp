// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Microsoft.Windows.Storage.Pickers.h"

namespace py::cpp::Microsoft::Windows::Storage::Pickers
{
    // ----- FileOpenPicker class --------------------

    static PyObject* _new_FileOpenPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_GET_SIZE(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);

                winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker instance{param0};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileOpenPicker(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileOpenPicker_PickMultipleFilesAsync(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"PickMultipleFilesAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PickMultipleFilesAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickSingleFileAsync(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"PickSingleFileAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PickSingleFileAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_ViewMode(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"ViewMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ViewMode();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_ViewMode(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"ViewMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode>(arg);

            {
                auto _gil = release_gil();
                self->obj.ViewMode(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SuggestedStartLocation();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId>(arg);

            {
                auto _gil = release_gil();
                self->obj.SuggestedStartLocation(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SettingsIdentifier();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.SettingsIdentifier(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CommitButtonText();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.CommitButtonText(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_FileTypeFilter(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileOpenPicker", L"FileTypeFilter");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.FileTypeFilter();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileOpenPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileOpenPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileOpenPicker[] = {
        { "pick_multiple_files_async", reinterpret_cast<PyCFunction>(FileOpenPicker_PickMultipleFilesAsync), METH_VARARGS, nullptr },
        { "pick_single_file_async", reinterpret_cast<PyCFunction>(FileOpenPicker_PickSingleFileAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FileOpenPicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileOpenPicker), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_FileOpenPicker[] = {
        { "view_mode", reinterpret_cast<getter>(FileOpenPicker_get_ViewMode), reinterpret_cast<setter>(FileOpenPicker_put_ViewMode), nullptr, nullptr },
        { "suggested_start_location", reinterpret_cast<getter>(FileOpenPicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FileOpenPicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileOpenPicker_get_SettingsIdentifier), reinterpret_cast<setter>(FileOpenPicker_put_SettingsIdentifier), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FileOpenPicker_get_CommitButtonText), reinterpret_cast<setter>(FileOpenPicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_filter", reinterpret_cast<getter>(FileOpenPicker_get_FileTypeFilter), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_FileOpenPicker[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileOpenPicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileOpenPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileOpenPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileOpenPicker) },
        { }};

    static PyType_Spec type_spec_FileOpenPicker = {
        "winui3._winui3_microsoft_windows_storage_pickers.FileOpenPicker",
        sizeof(py::wrapper::Microsoft::Windows::Storage::Pickers::FileOpenPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileOpenPicker};

    // ----- FileSavePicker class --------------------

    static PyObject* _new_FileSavePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_GET_SIZE(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);

                winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker instance{param0};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileSavePicker(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileSavePicker_PickSaveFileAsync(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"PickSaveFileAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PickSaveFileAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SuggestedStartLocation();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId>(arg);

            {
                auto _gil = release_gil();
                self->obj.SuggestedStartLocation(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedSaveFile(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedSaveFile");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SuggestedSaveFile();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedSaveFile(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedSaveFile");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(arg);

            {
                auto _gil = release_gil();
                self->obj.SuggestedSaveFile(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedFileName(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedFileName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SuggestedFileName();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedFileName(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SuggestedFileName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.SuggestedFileName(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SettingsIdentifier();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.SettingsIdentifier(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_DefaultFileExtension(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"DefaultFileExtension");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.DefaultFileExtension();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_DefaultFileExtension(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"DefaultFileExtension");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.DefaultFileExtension(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CommitButtonText();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.CommitButtonText(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_FileTypeChoices(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FileSavePicker", L"FileTypeChoices");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.FileTypeChoices();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileSavePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileSavePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileSavePicker[] = {
        { "pick_save_file_async", reinterpret_cast<PyCFunction>(FileSavePicker_PickSaveFileAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FileSavePicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileSavePicker), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_FileSavePicker[] = {
        { "suggested_start_location", reinterpret_cast<getter>(FileSavePicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FileSavePicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "suggested_save_file", reinterpret_cast<getter>(FileSavePicker_get_SuggestedSaveFile), reinterpret_cast<setter>(FileSavePicker_put_SuggestedSaveFile), nullptr, nullptr },
        { "suggested_file_name", reinterpret_cast<getter>(FileSavePicker_get_SuggestedFileName), reinterpret_cast<setter>(FileSavePicker_put_SuggestedFileName), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileSavePicker_get_SettingsIdentifier), reinterpret_cast<setter>(FileSavePicker_put_SettingsIdentifier), nullptr, nullptr },
        { "default_file_extension", reinterpret_cast<getter>(FileSavePicker_get_DefaultFileExtension), reinterpret_cast<setter>(FileSavePicker_put_DefaultFileExtension), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FileSavePicker_get_CommitButtonText), reinterpret_cast<setter>(FileSavePicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_choices", reinterpret_cast<getter>(FileSavePicker_get_FileTypeChoices), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_FileSavePicker[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileSavePicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileSavePicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileSavePicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileSavePicker) },
        { }};

    static PyType_Spec type_spec_FileSavePicker = {
        "winui3._winui3_microsoft_windows_storage_pickers.FileSavePicker",
        sizeof(py::wrapper::Microsoft::Windows::Storage::Pickers::FileSavePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileSavePicker};

    // ----- FolderPicker class --------------------

    static PyObject* _new_FolderPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_GET_SIZE(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);

                winrt::Microsoft::Windows::Storage::Pickers::FolderPicker instance{param0};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FolderPicker(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FolderPicker_PickSingleFolderAsync(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"PickSingleFolderAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PickSingleFolderAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_ViewMode(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"ViewMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ViewMode();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_ViewMode(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"ViewMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode>(arg);

            {
                auto _gil = release_gil();
                self->obj.ViewMode(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SuggestedStartLocation();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SuggestedStartLocation(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"SuggestedStartLocation");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId>(arg);

            {
                auto _gil = release_gil();
                self->obj.SuggestedStartLocation(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SettingsIdentifier();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SettingsIdentifier(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"SettingsIdentifier");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.SettingsIdentifier(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CommitButtonText();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_CommitButtonText(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"CommitButtonText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.CommitButtonText(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_FileTypeFilter(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.FolderPicker", L"FileTypeFilter");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.FileTypeFilter();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FolderPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Storage::Pickers::FolderPicker>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FolderPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Storage::Pickers::FolderPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FolderPicker[] = {
        { "pick_single_folder_async", reinterpret_cast<PyCFunction>(FolderPicker_PickSingleFolderAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FolderPicker, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FolderPicker), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_FolderPicker[] = {
        { "view_mode", reinterpret_cast<getter>(FolderPicker_get_ViewMode), reinterpret_cast<setter>(FolderPicker_put_ViewMode), nullptr, nullptr },
        { "suggested_start_location", reinterpret_cast<getter>(FolderPicker_get_SuggestedStartLocation), reinterpret_cast<setter>(FolderPicker_put_SuggestedStartLocation), nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FolderPicker_get_SettingsIdentifier), reinterpret_cast<setter>(FolderPicker_put_SettingsIdentifier), nullptr, nullptr },
        { "commit_button_text", reinterpret_cast<getter>(FolderPicker_get_CommitButtonText), reinterpret_cast<setter>(FolderPicker_put_CommitButtonText), nullptr, nullptr },
        { "file_type_filter", reinterpret_cast<getter>(FolderPicker_get_FileTypeFilter), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_FolderPicker[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_FolderPicker) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FolderPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FolderPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FolderPicker) },
        { }};

    static PyType_Spec type_spec_FolderPicker = {
        "winui3._winui3_microsoft_windows_storage_pickers.FolderPicker",
        sizeof(py::wrapper::Microsoft::Windows::Storage::Pickers::FolderPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FolderPicker};

    // ----- PickFileResult class --------------------

    static PyObject* _new_PickFileResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>::type_name);
        return nullptr;
    }

    static void _dealloc_PickFileResult(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFileResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PickFileResult_get_Path(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFileResult* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.PickFileResult", L"Path");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Path();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PickFileResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PickFileResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickFileResult[] = {
        { "_assign_array_", _assign_array_PickFileResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PickFileResult), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_PickFileResult[] = {
        { "path", reinterpret_cast<getter>(PickFileResult_get_Path), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_PickFileResult[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PickFileResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PickFileResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PickFileResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PickFileResult) },
        { }};

    static PyType_Spec type_spec_PickFileResult = {
        "winui3._winui3_microsoft_windows_storage_pickers.PickFileResult",
        sizeof(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFileResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickFileResult};

    // ----- PickFolderResult class --------------------

    static PyObject* _new_PickFolderResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>::type_name);
        return nullptr;
    }

    static void _dealloc_PickFolderResult(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFolderResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PickFolderResult_get_Path(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFolderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Storage.Pickers.PickFolderResult", L"Path");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Path();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PickFolderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PickFolderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickFolderResult[] = {
        { "_assign_array_", _assign_array_PickFolderResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PickFolderResult), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_PickFolderResult[] = {
        { "path", reinterpret_cast<getter>(PickFolderResult_get_Path), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_PickFolderResult[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PickFolderResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PickFolderResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PickFolderResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PickFolderResult) },
        { }};

    static PyType_Spec type_spec_PickFolderResult = {
        "winui3._winui3_microsoft_windows_storage_pickers.PickFolderResult",
        sizeof(py::wrapper::Microsoft::Windows::Storage::Pickers::PickFolderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickFolderResult};

    // ----- Microsoft.Windows.Storage.Pickers Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.Storage.Pickers");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_windows_storage_pickers",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::Storage::Pickers

PyMODINIT_FUNC PyInit__winui3_microsoft_windows_storage_pickers(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Storage::Pickers;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle FileOpenPicker_type{py::register_python_type(module.get(), &type_spec_FileOpenPicker, object_bases.get(), inspectable_meta_type)};
    if (!FileOpenPicker_type)
    {
        return nullptr;
    }

    py::pytype_handle FileSavePicker_type{py::register_python_type(module.get(), &type_spec_FileSavePicker, object_bases.get(), inspectable_meta_type)};
    if (!FileSavePicker_type)
    {
        return nullptr;
    }

    py::pytype_handle FolderPicker_type{py::register_python_type(module.get(), &type_spec_FolderPicker, object_bases.get(), inspectable_meta_type)};
    if (!FolderPicker_type)
    {
        return nullptr;
    }

    py::pytype_handle PickFileResult_type{py::register_python_type(module.get(), &type_spec_PickFileResult, object_bases.get(), inspectable_meta_type)};
    if (!PickFileResult_type)
    {
        return nullptr;
    }

    py::pytype_handle PickFolderResult_type{py::register_python_type(module.get(), &type_spec_PickFolderResult, object_bases.get(), inspectable_meta_type)};
    if (!PickFolderResult_type)
    {
        return nullptr;
    }


    return module.detach();
}
