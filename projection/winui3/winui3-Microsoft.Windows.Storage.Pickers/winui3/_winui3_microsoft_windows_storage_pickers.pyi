# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage
import winui3.microsoft.ui as microsoft_ui

from winui3.microsoft.windows.storage.pickers import PickerLocationId, PickerViewMode

Self = typing.TypeVar('Self')

@typing.final
class FileOpenPicker(winrt.system.Object):
    def __new__(cls: typing.Type[Self], window_id: typing.Union[microsoft_ui.WindowId, typing.Tuple[winrt.system.UInt64]]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Microsoft.Windows.Storage.Pickers.PickFileResult>> Microsoft.Windows.Storage.Pickers.FileOpenPicker::PickMultipleFilesAsync()
    def pick_multiple_files_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[PickFileResult]]: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Windows.Storage.Pickers.PickFileResult> Microsoft.Windows.Storage.Pickers.FileOpenPicker::PickSingleFileAsync()
    def pick_single_file_async(self) -> windows_foundation.IAsyncOperation[PickFileResult]: ...
    # Microsoft.Windows.Storage.Pickers.PickerViewMode Microsoft.Windows.Storage.Pickers.FileOpenPicker::get_ViewMode()
    @_property
    def view_mode(self) -> PickerViewMode: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileOpenPicker::put_ViewMode(Microsoft.Windows.Storage.Pickers.PickerViewMode)
    @view_mode.setter
    def view_mode(self, value: PickerViewMode) -> None: ...
    # Microsoft.Windows.Storage.Pickers.PickerLocationId Microsoft.Windows.Storage.Pickers.FileOpenPicker::get_SuggestedStartLocation()
    @_property
    def suggested_start_location(self) -> PickerLocationId: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileOpenPicker::put_SuggestedStartLocation(Microsoft.Windows.Storage.Pickers.PickerLocationId)
    @suggested_start_location.setter
    def suggested_start_location(self, value: PickerLocationId) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileOpenPicker::get_SettingsIdentifier()
    @_property
    def settings_identifier(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileOpenPicker::put_SettingsIdentifier(System.String)
    @settings_identifier.setter
    def settings_identifier(self, value: str) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileOpenPicker::get_CommitButtonText()
    @_property
    def commit_button_text(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileOpenPicker::put_CommitButtonText(System.String)
    @commit_button_text.setter
    def commit_button_text(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Microsoft.Windows.Storage.Pickers.FileOpenPicker::get_FileTypeFilter()
    @_property
    def file_type_filter(self) -> typing.MutableSequence[str]: ...

@typing.final
class FileSavePicker(winrt.system.Object):
    def __new__(cls: typing.Type[Self], window_id: typing.Union[microsoft_ui.WindowId, typing.Tuple[winrt.system.UInt64]]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Windows.Storage.Pickers.PickFileResult> Microsoft.Windows.Storage.Pickers.FileSavePicker::PickSaveFileAsync()
    def pick_save_file_async(self) -> windows_foundation.IAsyncOperation[PickFileResult]: ...
    # Microsoft.Windows.Storage.Pickers.PickerLocationId Microsoft.Windows.Storage.Pickers.FileSavePicker::get_SuggestedStartLocation()
    @_property
    def suggested_start_location(self) -> PickerLocationId: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_SuggestedStartLocation(Microsoft.Windows.Storage.Pickers.PickerLocationId)
    @suggested_start_location.setter
    def suggested_start_location(self, value: PickerLocationId) -> None: ...
    # Windows.Storage.StorageFile Microsoft.Windows.Storage.Pickers.FileSavePicker::get_SuggestedSaveFile()
    @_property
    def suggested_save_file(self) -> windows_storage.StorageFile: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_SuggestedSaveFile(Windows.Storage.StorageFile)
    @suggested_save_file.setter
    def suggested_save_file(self, value: windows_storage.StorageFile) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileSavePicker::get_SuggestedFileName()
    @_property
    def suggested_file_name(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_SuggestedFileName(System.String)
    @suggested_file_name.setter
    def suggested_file_name(self, value: str) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileSavePicker::get_SettingsIdentifier()
    @_property
    def settings_identifier(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_SettingsIdentifier(System.String)
    @settings_identifier.setter
    def settings_identifier(self, value: str) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileSavePicker::get_DefaultFileExtension()
    @_property
    def default_file_extension(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_DefaultFileExtension(System.String)
    @default_file_extension.setter
    def default_file_extension(self, value: str) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FileSavePicker::get_CommitButtonText()
    @_property
    def commit_button_text(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FileSavePicker::put_CommitButtonText(System.String)
    @commit_button_text.setter
    def commit_button_text(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IMap`2<System.String,Windows.Foundation.Collections.IVector`1<System.String>> Microsoft.Windows.Storage.Pickers.FileSavePicker::get_FileTypeChoices()
    @_property
    def file_type_choices(self) -> typing.MutableMapping[str, typing.MutableSequence[str]]: ...

@typing.final
class FolderPicker(winrt.system.Object):
    def __new__(cls: typing.Type[Self], window_id: typing.Union[microsoft_ui.WindowId, typing.Tuple[winrt.system.UInt64]]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Windows.Storage.Pickers.PickFolderResult> Microsoft.Windows.Storage.Pickers.FolderPicker::PickSingleFolderAsync()
    def pick_single_folder_async(self) -> windows_foundation.IAsyncOperation[PickFolderResult]: ...
    # Microsoft.Windows.Storage.Pickers.PickerViewMode Microsoft.Windows.Storage.Pickers.FolderPicker::get_ViewMode()
    @_property
    def view_mode(self) -> PickerViewMode: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FolderPicker::put_ViewMode(Microsoft.Windows.Storage.Pickers.PickerViewMode)
    @view_mode.setter
    def view_mode(self, value: PickerViewMode) -> None: ...
    # Microsoft.Windows.Storage.Pickers.PickerLocationId Microsoft.Windows.Storage.Pickers.FolderPicker::get_SuggestedStartLocation()
    @_property
    def suggested_start_location(self) -> PickerLocationId: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FolderPicker::put_SuggestedStartLocation(Microsoft.Windows.Storage.Pickers.PickerLocationId)
    @suggested_start_location.setter
    def suggested_start_location(self, value: PickerLocationId) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FolderPicker::get_SettingsIdentifier()
    @_property
    def settings_identifier(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FolderPicker::put_SettingsIdentifier(System.String)
    @settings_identifier.setter
    def settings_identifier(self, value: str) -> None: ...
    # System.String Microsoft.Windows.Storage.Pickers.FolderPicker::get_CommitButtonText()
    @_property
    def commit_button_text(self) -> str: ...
    # System.Void Microsoft.Windows.Storage.Pickers.FolderPicker::put_CommitButtonText(System.String)
    @commit_button_text.setter
    def commit_button_text(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Microsoft.Windows.Storage.Pickers.FolderPicker::get_FileTypeFilter()
    @_property
    def file_type_filter(self) -> typing.MutableSequence[str]: ...

@typing.final
class PickFileResult(winrt.system.Object):
    # System.String Microsoft.Windows.Storage.Pickers.PickFileResult::get_Path()
    @_property
    def path(self) -> str: ...

@typing.final
class PickFolderResult(winrt.system.Object):
    # System.String Microsoft.Windows.Storage.Pickers.PickFolderResult::get_Path()
    @_property
    def path(self) -> str: ...

