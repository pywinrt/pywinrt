// WARNING: Please don't edit this file. It was generated by Python/WinRT v3.2.1

#include "py.Microsoft.Windows.AI.Imaging.h"

namespace py::cpp::Microsoft::Windows::AI::Imaging
{
    // ----- ImageDescriptionGenerator class --------------------

    static PyObject* _new_ImageDescriptionGenerator(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator>::type_name);
        return nullptr;
    }

    static void _dealloc_ImageDescriptionGenerator(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ImageDescriptionGenerator_Close(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionGenerator", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageDescriptionGenerator_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionGenerator", L"CreateAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator::CreateAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageDescriptionGenerator_DescribeAsync(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionGenerator", L"DescribeAsync", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Graphics::Imaging::ImageBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionKind>(args, 1);
                auto param2 = py::convert_to<winrt::Microsoft::Windows::AI::ContentSafety::ContentFilterOptions>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.DescribeAsync(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageDescriptionGenerator_EnsureReadyAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionGenerator", L"EnsureReadyAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator::EnsureReadyAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageDescriptionGenerator_GetReadyState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionGenerator", L"GetReadyState", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator::GetReadyState();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ImageDescriptionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ImageDescriptionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ImageDescriptionGenerator(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ImageDescriptionGenerator(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageDescriptionGenerator[] = {
        { "close", reinterpret_cast<PyCFunction>(ImageDescriptionGenerator_Close), METH_VARARGS, nullptr },
        { "describe_async", reinterpret_cast<PyCFunction>(ImageDescriptionGenerator_DescribeAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ImageDescriptionGenerator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ImageDescriptionGenerator), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ImageDescriptionGenerator), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_ImageDescriptionGenerator), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_ImageDescriptionGenerator[] = {
        { }};

    static PyType_Slot _type_slots_ImageDescriptionGenerator[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ImageDescriptionGenerator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ImageDescriptionGenerator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ImageDescriptionGenerator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ImageDescriptionGenerator) },
        { }};

    static PyType_Spec type_spec_ImageDescriptionGenerator = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageDescriptionGenerator",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageDescriptionGenerator};

    static PyGetSetDef getset_ImageDescriptionGenerator_Static[] = {
        { }};

    static PyMethodDef methods_ImageDescriptionGenerator_Static[] = {
        { "create_async", reinterpret_cast<PyCFunction>(ImageDescriptionGenerator_CreateAsync), METH_VARARGS, nullptr },
        { "ensure_ready_async", reinterpret_cast<PyCFunction>(ImageDescriptionGenerator_EnsureReadyAsync), METH_VARARGS, nullptr },
        { "get_ready_state", reinterpret_cast<PyCFunction>(ImageDescriptionGenerator_GetReadyState), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_ImageDescriptionGenerator_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ImageDescriptionGenerator_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImageDescriptionGenerator_Static) },
        { }
    };

    static PyType_Spec type_spec_ImageDescriptionGenerator_Static = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageDescriptionGenerator_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ImageDescriptionGenerator_Static};

    // ----- ImageDescriptionResult class --------------------

    static PyObject* _new_ImageDescriptionResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionResult>::type_name);
        return nullptr;
    }

    static void _dealloc_ImageDescriptionResult(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ImageDescriptionResult_get_Description(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionResult* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionResult", L"Description");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Description();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageDescriptionResult_get_Status(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionResult* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageDescriptionResult", L"Status");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Status();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ImageDescriptionResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ImageDescriptionResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::ImageDescriptionResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageDescriptionResult[] = {
        { "_assign_array_", _assign_array_ImageDescriptionResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ImageDescriptionResult), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ImageDescriptionResult[] = {
        { "description", reinterpret_cast<getter>(ImageDescriptionResult_get_Description), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(ImageDescriptionResult_get_Status), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ImageDescriptionResult[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ImageDescriptionResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ImageDescriptionResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ImageDescriptionResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ImageDescriptionResult) },
        { }};

    static PyType_Spec type_spec_ImageDescriptionResult = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageDescriptionResult",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::ImageDescriptionResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageDescriptionResult};

    // ----- ImageObjectExtractor class --------------------

    static PyObject* _new_ImageObjectExtractor(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor>::type_name);
        return nullptr;
    }

    static void _dealloc_ImageObjectExtractor(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ImageObjectExtractor_Close(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_CreateWithImageBufferAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"CreateWithImageBufferAsync", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Graphics::Imaging::ImageBuffer>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor::CreateWithImageBufferAsync(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_CreateWithSoftwareBitmapAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"CreateWithSoftwareBitmapAsync", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor::CreateWithSoftwareBitmapAsync(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_EnsureReadyAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"EnsureReadyAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor::EnsureReadyAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_GetImageBufferObjectMask(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"GetImageBufferObjectMask", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetImageBufferObjectMask(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_GetReadyState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"GetReadyState", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor::GetReadyState();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractor_GetSoftwareBitmapObjectMask(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractor", L"GetSoftwareBitmapObjectMask", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetSoftwareBitmapObjectMask(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ImageObjectExtractor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ImageObjectExtractor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ImageObjectExtractor(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ImageObjectExtractor(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageObjectExtractor[] = {
        { "close", reinterpret_cast<PyCFunction>(ImageObjectExtractor_Close), METH_VARARGS, nullptr },
        { "get_image_buffer_object_mask", reinterpret_cast<PyCFunction>(ImageObjectExtractor_GetImageBufferObjectMask), METH_VARARGS, nullptr },
        { "get_software_bitmap_object_mask", reinterpret_cast<PyCFunction>(ImageObjectExtractor_GetSoftwareBitmapObjectMask), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ImageObjectExtractor, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ImageObjectExtractor), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ImageObjectExtractor), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_ImageObjectExtractor), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_ImageObjectExtractor[] = {
        { }};

    static PyType_Slot _type_slots_ImageObjectExtractor[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ImageObjectExtractor) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ImageObjectExtractor) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ImageObjectExtractor) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ImageObjectExtractor) },
        { }};

    static PyType_Spec type_spec_ImageObjectExtractor = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageObjectExtractor",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageObjectExtractor};

    static PyGetSetDef getset_ImageObjectExtractor_Static[] = {
        { }};

    static PyMethodDef methods_ImageObjectExtractor_Static[] = {
        { "create_with_image_buffer_async", reinterpret_cast<PyCFunction>(ImageObjectExtractor_CreateWithImageBufferAsync), METH_VARARGS, nullptr },
        { "create_with_software_bitmap_async", reinterpret_cast<PyCFunction>(ImageObjectExtractor_CreateWithSoftwareBitmapAsync), METH_VARARGS, nullptr },
        { "ensure_ready_async", reinterpret_cast<PyCFunction>(ImageObjectExtractor_EnsureReadyAsync), METH_VARARGS, nullptr },
        { "get_ready_state", reinterpret_cast<PyCFunction>(ImageObjectExtractor_GetReadyState), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_ImageObjectExtractor_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ImageObjectExtractor_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImageObjectExtractor_Static) },
        { }
    };

    static PyType_Spec type_spec_ImageObjectExtractor_Static = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageObjectExtractor_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ImageObjectExtractor_Static};

    // ----- ImageObjectExtractorHint class --------------------

    static PyObject* _new_ImageObjectExtractorHint(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_GET_SIZE(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Graphics::RectInt32>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Graphics::PointInt32>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Graphics::PointInt32>>(args, 2);

                winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint instance{param0, param1, param2};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ImageObjectExtractorHint(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ImageObjectExtractorHint_get_ExcludePoints(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractorHint", L"ExcludePoints");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ExcludePoints();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractorHint_get_IncludePoints(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractorHint", L"IncludePoints");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IncludePoints();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageObjectExtractorHint_get_IncludeRects(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageObjectExtractorHint", L"IncludeRects");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IncludeRects();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ImageObjectExtractorHint(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ImageObjectExtractorHint(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageObjectExtractorHint[] = {
        { "_assign_array_", _assign_array_ImageObjectExtractorHint, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ImageObjectExtractorHint), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ImageObjectExtractorHint[] = {
        { "exclude_points", reinterpret_cast<getter>(ImageObjectExtractorHint_get_ExcludePoints), nullptr, nullptr, nullptr },
        { "include_points", reinterpret_cast<getter>(ImageObjectExtractorHint_get_IncludePoints), nullptr, nullptr, nullptr },
        { "include_rects", reinterpret_cast<getter>(ImageObjectExtractorHint_get_IncludeRects), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ImageObjectExtractorHint[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ImageObjectExtractorHint) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ImageObjectExtractorHint) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ImageObjectExtractorHint) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ImageObjectExtractorHint) },
        { }};

    static PyType_Spec type_spec_ImageObjectExtractorHint = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageObjectExtractorHint",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::ImageObjectExtractorHint),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageObjectExtractorHint};

    // ----- ImageScaler class --------------------

    static PyObject* _new_ImageScaler(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageScaler>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::ImageScaler>::type_name);
        return nullptr;
    }

    static void _dealloc_ImageScaler(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ImageScaler_Close(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"CreateAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageScaler::CreateAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_EnsureReadyAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"EnsureReadyAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageScaler::EnsureReadyAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_GetReadyState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"GetReadyState", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::ImageScaler::GetReadyState();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_ScaleImageBuffer(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"ScaleImageBuffer", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Graphics::Imaging::ImageBuffer>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.ScaleImageBuffer(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_ScaleSoftwareBitmap(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"ScaleSoftwareBitmap", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.ScaleSoftwareBitmap(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageScaler_get_MaxSupportedScaleFactor(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.ImageScaler", L"MaxSupportedScaleFactor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MaxSupportedScaleFactor();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ImageScaler(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::ImageScaler>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ImageScaler(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::ImageScaler>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ImageScaler(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ImageScaler(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageScaler[] = {
        { "close", reinterpret_cast<PyCFunction>(ImageScaler_Close), METH_VARARGS, nullptr },
        { "scale_image_buffer", reinterpret_cast<PyCFunction>(ImageScaler_ScaleImageBuffer), METH_VARARGS, nullptr },
        { "scale_software_bitmap", reinterpret_cast<PyCFunction>(ImageScaler_ScaleSoftwareBitmap), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ImageScaler, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ImageScaler), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ImageScaler), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_ImageScaler), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_ImageScaler[] = {
        { "max_supported_scale_factor", reinterpret_cast<getter>(ImageScaler_get_MaxSupportedScaleFactor), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ImageScaler[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ImageScaler) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ImageScaler) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ImageScaler) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ImageScaler) },
        { }};

    static PyType_Spec type_spec_ImageScaler = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageScaler",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::ImageScaler),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageScaler};

    static PyGetSetDef getset_ImageScaler_Static[] = {
        { }};

    static PyMethodDef methods_ImageScaler_Static[] = {
        { "create_async", reinterpret_cast<PyCFunction>(ImageScaler_CreateAsync), METH_VARARGS, nullptr },
        { "ensure_ready_async", reinterpret_cast<PyCFunction>(ImageScaler_EnsureReadyAsync), METH_VARARGS, nullptr },
        { "get_ready_state", reinterpret_cast<PyCFunction>(ImageScaler_GetReadyState), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_ImageScaler_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ImageScaler_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImageScaler_Static) },
        { }
    };

    static PyType_Spec type_spec_ImageScaler_Static = {
        "winui3._winui3_microsoft_windows_ai_imaging.ImageScaler_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ImageScaler_Static};

    // ----- RecognizedLine class --------------------

    static PyObject* _new_RecognizedLine(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedLine>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedLine>::type_name);
        return nullptr;
    }

    static void _dealloc_RecognizedLine(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RecognizedLine_get_BoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedLine", L"BoundingBox");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.BoundingBox();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedLine_get_LineStyleConfidence(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedLine", L"LineStyleConfidence");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.LineStyleConfidence();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedLine_get_Style(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedLine", L"Style");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Style();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedLine_get_Text(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedLine", L"Text");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Text();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedLine_get_Words(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedLine", L"Words");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Words();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RecognizedLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::RecognizedLine>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RecognizedLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::RecognizedLine>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RecognizedLine[] = {
        { "_assign_array_", _assign_array_RecognizedLine, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RecognizedLine), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_RecognizedLine[] = {
        { "bounding_box", reinterpret_cast<getter>(RecognizedLine_get_BoundingBox), nullptr, nullptr, nullptr },
        { "line_style_confidence", reinterpret_cast<getter>(RecognizedLine_get_LineStyleConfidence), nullptr, nullptr, nullptr },
        { "style", reinterpret_cast<getter>(RecognizedLine_get_Style), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(RecognizedLine_get_Text), nullptr, nullptr, nullptr },
        { "words", reinterpret_cast<getter>(RecognizedLine_get_Words), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_RecognizedLine[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_RecognizedLine) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RecognizedLine) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RecognizedLine) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RecognizedLine) },
        { }};

    static PyType_Spec type_spec_RecognizedLine = {
        "winui3._winui3_microsoft_windows_ai_imaging.RecognizedLine",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedLine),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RecognizedLine};

    // ----- RecognizedText class --------------------

    static PyObject* _new_RecognizedText(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedText>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedText>::type_name);
        return nullptr;
    }

    static void _dealloc_RecognizedText(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedText* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RecognizedText_get_Lines(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedText* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedText", L"Lines");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Lines();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedText_get_TextAngle(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedText* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedText", L"TextAngle");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.TextAngle();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RecognizedText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::RecognizedText>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RecognizedText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::RecognizedText>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RecognizedText[] = {
        { "_assign_array_", _assign_array_RecognizedText, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RecognizedText), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_RecognizedText[] = {
        { "lines", reinterpret_cast<getter>(RecognizedText_get_Lines), nullptr, nullptr, nullptr },
        { "text_angle", reinterpret_cast<getter>(RecognizedText_get_TextAngle), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_RecognizedText[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_RecognizedText) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RecognizedText) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RecognizedText) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RecognizedText) },
        { }};

    static PyType_Spec type_spec_RecognizedText = {
        "winui3._winui3_microsoft_windows_ai_imaging.RecognizedText",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedText),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RecognizedText};

    // ----- RecognizedWord class --------------------

    static PyObject* _new_RecognizedWord(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedWord>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::RecognizedWord>::type_name);
        return nullptr;
    }

    static void _dealloc_RecognizedWord(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedWord* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RecognizedWord_get_BoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedWord* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedWord", L"BoundingBox");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.BoundingBox();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedWord_get_MatchConfidence(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedWord* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedWord", L"MatchConfidence");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MatchConfidence();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedWord_get_Text(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedWord* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AI.Imaging.RecognizedWord", L"Text");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Text();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RecognizedWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::RecognizedWord>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RecognizedWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::RecognizedWord>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RecognizedWord[] = {
        { "_assign_array_", _assign_array_RecognizedWord, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RecognizedWord), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_RecognizedWord[] = {
        { "bounding_box", reinterpret_cast<getter>(RecognizedWord_get_BoundingBox), nullptr, nullptr, nullptr },
        { "match_confidence", reinterpret_cast<getter>(RecognizedWord_get_MatchConfidence), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(RecognizedWord_get_Text), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_RecognizedWord[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_RecognizedWord) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RecognizedWord) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RecognizedWord) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RecognizedWord) },
        { }};

    static PyType_Spec type_spec_RecognizedWord = {
        "winui3._winui3_microsoft_windows_ai_imaging.RecognizedWord",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedWord),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RecognizedWord};

    // ----- TextRecognizer class --------------------

    static PyObject* _new_TextRecognizer(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AI::Imaging::TextRecognizer>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AI::Imaging::TextRecognizer>::type_name);
        return nullptr;
    }

    static void _dealloc_TextRecognizer(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TextRecognizer_Close(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextRecognizer_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"CreateAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::TextRecognizer::CreateAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextRecognizer_EnsureReadyAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"EnsureReadyAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::TextRecognizer::EnsureReadyAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextRecognizer_GetReadyState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"GetReadyState", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::AI::Imaging::TextRecognizer::GetReadyState();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextRecognizer_RecognizeTextFromImage(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"RecognizeTextFromImage", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Graphics::Imaging::ImageBuffer>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.RecognizeTextFromImage(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextRecognizer_RecognizeTextFromImageAsync(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AI.Imaging.TextRecognizer", L"RecognizeTextFromImageAsync", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Graphics::Imaging::ImageBuffer>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.RecognizeTextFromImageAsync(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_TextRecognizer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::TextRecognizer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TextRecognizer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AI::Imaging::TextRecognizer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_TextRecognizer(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_TextRecognizer(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextRecognizer[] = {
        { "close", reinterpret_cast<PyCFunction>(TextRecognizer_Close), METH_VARARGS, nullptr },
        { "recognize_text_from_image", reinterpret_cast<PyCFunction>(TextRecognizer_RecognizeTextFromImage), METH_VARARGS, nullptr },
        { "recognize_text_from_image_async", reinterpret_cast<PyCFunction>(TextRecognizer_RecognizeTextFromImageAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TextRecognizer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TextRecognizer), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_TextRecognizer), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_TextRecognizer), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_TextRecognizer[] = {
        { }};

    static PyType_Slot _type_slots_TextRecognizer[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_TextRecognizer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TextRecognizer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TextRecognizer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TextRecognizer) },
        { }};

    static PyType_Spec type_spec_TextRecognizer = {
        "winui3._winui3_microsoft_windows_ai_imaging.TextRecognizer",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::TextRecognizer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextRecognizer};

    static PyGetSetDef getset_TextRecognizer_Static[] = {
        { }};

    static PyMethodDef methods_TextRecognizer_Static[] = {
        { "create_async", reinterpret_cast<PyCFunction>(TextRecognizer_CreateAsync), METH_VARARGS, nullptr },
        { "ensure_ready_async", reinterpret_cast<PyCFunction>(TextRecognizer_EnsureReadyAsync), METH_VARARGS, nullptr },
        { "get_ready_state", reinterpret_cast<PyCFunction>(TextRecognizer_GetReadyState), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_TextRecognizer_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_TextRecognizer_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_TextRecognizer_Static) },
        { }
    };

    static PyType_Spec type_spec_TextRecognizer_Static = {
        "winui3._winui3_microsoft_windows_ai_imaging.TextRecognizer_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_TextRecognizer_Static};

    // ----- RecognizedTextBoundingBox struct --------------------

    winrt::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox RecognizedTextBoundingBox_from_tuple(PyObject* tuple)
    {
        if (PyTuple_GET_SIZE(tuple) != 4)
        {
            PyErr_SetString(PyExc_TypeError, "Incorrect number of fields");
            throw python_exception();
        }

        winrt::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox result{};

        result.BottomLeft = py::convert_to<winrt::Windows::Foundation::Point>(tuple, 0);
        result.BottomRight = py::convert_to<winrt::Windows::Foundation::Point>(tuple, 1);
        result.TopLeft = py::convert_to<winrt::Windows::Foundation::Point>(tuple, 2);
        result.TopRight = py::convert_to<winrt::Windows::Foundation::Point>(tuple, 3);

        return result;
    }

    PyObject* _new_RecognizedTextBoundingBox(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_GET_SIZE(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        PyObject* _BottomLeft{};
        PyObject* _BottomRight{};
        PyObject* _TopLeft{};
        PyObject* _TopRight{};

        static const char* kwlist[] = {"bottom_left", "bottom_right", "top_left", "top_right", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OOOO", const_cast<char**>(kwlist), &_BottomLeft, &_BottomRight, &_TopLeft, &_TopRight))
        {
            return nullptr;
        }

        try
        {
            self->obj.BottomLeft = _BottomLeft ? py::convert_to<winrt::Windows::Foundation::Point>(_BottomLeft) : winrt::Windows::Foundation::Point{};
            self->obj.BottomRight = _BottomRight ? py::convert_to<winrt::Windows::Foundation::Point>(_BottomRight) : winrt::Windows::Foundation::Point{};
            self->obj.TopLeft = _TopLeft ? py::convert_to<winrt::Windows::Foundation::Point>(_TopLeft) : winrt::Windows::Foundation::Point{};
            self->obj.TopRight = _TopRight ? py::convert_to<winrt::Windows::Foundation::Point>(_TopRight) : winrt::Windows::Foundation::Point{};

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_RecognizedTextBoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_RecognizedTextBoundingBox(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    PyObject* _replace_RecognizedTextBoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, PyObject* args, PyObject* kwds) noexcept
    {
        try
        {
            PyObject* _BottomLeft{};
            PyObject* _BottomRight{};
            PyObject* _TopLeft{};
            PyObject* _TopRight{};

            static const char* kwlist[] = {"bottom_left", "bottom_right", "top_left", "top_right", nullptr};
            if (!PyArg_ParseTupleAndKeywords(args, kwds, "|$OOOO", const_cast<char**>(kwlist), &_BottomLeft, &_BottomRight, &_TopLeft, &_TopRight))
            {
                return nullptr;
            }

            auto copy = self->obj;
            copy.BottomLeft = _BottomLeft ? py::convert_to<winrt::Windows::Foundation::Point>(_BottomLeft) : self->obj.BottomLeft;
            copy.BottomRight = _BottomRight ? py::convert_to<winrt::Windows::Foundation::Point>(_BottomRight) : self->obj.BottomRight;
            copy.TopLeft = _TopLeft ? py::convert_to<winrt::Windows::Foundation::Point>(_TopLeft) : self->obj.TopLeft;
            copy.TopRight = _TopRight ? py::convert_to<winrt::Windows::Foundation::Point>(_TopRight) : self->obj.TopRight;

            return convert(copy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    PyObject* unpack_RecognizedTextBoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, PyObject* /*unused*/) noexcept
    {
        py::pyobj_handle unpack_str{PyUnicode_InternFromString("unpack")};
        if (!unpack_str)
        {
            return nullptr;
        }

        py::pyobj_handle BottomLeft{convert(self->obj.BottomLeft)};
        if (!BottomLeft)
        {
            return nullptr;
        }

        BottomLeft.attach(PyObject_CallMethodNoArgs(BottomLeft.get(), unpack_str.get()));
        if (!BottomLeft)
        {
            return nullptr;
        }

        py::pyobj_handle BottomRight{convert(self->obj.BottomRight)};
        if (!BottomRight)
        {
            return nullptr;
        }

        BottomRight.attach(PyObject_CallMethodNoArgs(BottomRight.get(), unpack_str.get()));
        if (!BottomRight)
        {
            return nullptr;
        }

        py::pyobj_handle TopLeft{convert(self->obj.TopLeft)};
        if (!TopLeft)
        {
            return nullptr;
        }

        TopLeft.attach(PyObject_CallMethodNoArgs(TopLeft.get(), unpack_str.get()));
        if (!TopLeft)
        {
            return nullptr;
        }

        py::pyobj_handle TopRight{convert(self->obj.TopRight)};
        if (!TopRight)
        {
            return nullptr;
        }

        TopRight.attach(PyObject_CallMethodNoArgs(TopRight.get(), unpack_str.get()));
        if (!TopRight)
        {
            return nullptr;
        }

        pyobj_handle tuple{PyTuple_New(4)};
        if (!tuple)
        {
            return nullptr;
        }

        PyTuple_SET_ITEM(tuple.get(), 0, BottomLeft.detach());
        PyTuple_SET_ITEM(tuple.get(), 1, BottomRight.detach());
        PyTuple_SET_ITEM(tuple.get(), 2, TopLeft.detach());
        PyTuple_SET_ITEM(tuple.get(), 3, TopRight.detach());

        return tuple.detach();
    }

    static PyMethodDef _methods_RecognizedTextBoundingBox[] = {
        { "_assign_array_", _assign_array_RecognizedTextBoundingBox, METH_O | METH_STATIC, nullptr },
        { "__replace__", reinterpret_cast<PyCFunction>(reinterpret_cast<void*>(_replace_RecognizedTextBoundingBox)), METH_VARARGS | METH_KEYWORDS, nullptr },
        { "unpack", reinterpret_cast<PyCFunction>(unpack_RecognizedTextBoundingBox), METH_NOARGS, nullptr },
        { }};

    static PyObject* RecognizedTextBoundingBox_get_BottomLeft(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BottomLeft);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedTextBoundingBox_get_BottomRight(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BottomRight);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedTextBoundingBox_get_TopLeft(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TopLeft);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RecognizedTextBoundingBox_get_TopRight(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TopRight);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_RecognizedTextBoundingBox[] = {
        { "bottom_left", reinterpret_cast<getter>(RecognizedTextBoundingBox_get_BottomLeft), nullptr, nullptr, nullptr },
        { "bottom_right", reinterpret_cast<getter>(RecognizedTextBoundingBox_get_BottomRight), nullptr, nullptr, nullptr },
        { "top_left", reinterpret_cast<getter>(RecognizedTextBoundingBox_get_TopLeft), nullptr, nullptr, nullptr },
        { "top_right", reinterpret_cast<getter>(RecognizedTextBoundingBox_get_TopRight), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_RecognizedTextBoundingBox(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_RecognizedTextBoundingBox(PyObject* self) noexcept
    {
        py::pyobj_handle BottomLeft{PyObject_GetAttrString(self, "bottom_left")};
        if (!BottomLeft)
        {
            return nullptr;
        }

        py::pyobj_handle BottomRight{PyObject_GetAttrString(self, "bottom_right")};
        if (!BottomRight)
        {
            return nullptr;
        }

        py::pyobj_handle TopLeft{PyObject_GetAttrString(self, "top_left")};
        if (!TopLeft)
        {
            return nullptr;
        }

        py::pyobj_handle TopRight{PyObject_GetAttrString(self, "top_right")};
        if (!TopRight)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("RecognizedTextBoundingBox(bottom_left=%R, bottom_right=%R, top_left=%R, top_right=%R)", BottomLeft.get(), BottomRight.get(), TopLeft.get(), TopRight.get());
    }

    static PyType_Slot _type_slots_RecognizedTextBoundingBox[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_RecognizedTextBoundingBox) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RecognizedTextBoundingBox) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RecognizedTextBoundingBox) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RecognizedTextBoundingBox) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_RecognizedTextBoundingBox) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_RecognizedTextBoundingBox) },
        { }};

    static PyType_Spec type_spec_RecognizedTextBoundingBox = {
        "winui3._winui3_microsoft_windows_ai_imaging.RecognizedTextBoundingBox",
        sizeof(py::wrapper::Microsoft::Windows::AI::Imaging::RecognizedTextBoundingBox),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RecognizedTextBoundingBox};

    // ----- Microsoft.Windows.AI.Imaging Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.AI.Imaging");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_windows_ai_imaging",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::AI::Imaging

PyMODINIT_FUNC PyInit__winui3_microsoft_windows_ai_imaging(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::AI::Imaging;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle ImageDescriptionGenerator_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ImageDescriptionGenerator_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ImageDescriptionGenerator_Static{PyType_FromSpecWithBases(&type_spec_ImageDescriptionGenerator_Static, ImageDescriptionGenerator_Static_bases.get())};
    if (!type_ImageDescriptionGenerator_Static)
    {
        return nullptr;
    }

    py::pytype_handle ImageDescriptionGenerator_type{py::register_python_type(module.get(), &type_spec_ImageDescriptionGenerator, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ImageDescriptionGenerator_Static.get()))};
    if (!ImageDescriptionGenerator_type)
    {
        return nullptr;
    }

    py::pytype_handle ImageDescriptionResult_type{py::register_python_type(module.get(), &type_spec_ImageDescriptionResult, object_bases.get(), inspectable_meta_type)};
    if (!ImageDescriptionResult_type)
    {
        return nullptr;
    }

    py::pyobj_handle ImageObjectExtractor_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ImageObjectExtractor_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ImageObjectExtractor_Static{PyType_FromSpecWithBases(&type_spec_ImageObjectExtractor_Static, ImageObjectExtractor_Static_bases.get())};
    if (!type_ImageObjectExtractor_Static)
    {
        return nullptr;
    }

    py::pytype_handle ImageObjectExtractor_type{py::register_python_type(module.get(), &type_spec_ImageObjectExtractor, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ImageObjectExtractor_Static.get()))};
    if (!ImageObjectExtractor_type)
    {
        return nullptr;
    }

    py::pytype_handle ImageObjectExtractorHint_type{py::register_python_type(module.get(), &type_spec_ImageObjectExtractorHint, object_bases.get(), inspectable_meta_type)};
    if (!ImageObjectExtractorHint_type)
    {
        return nullptr;
    }

    py::pyobj_handle ImageScaler_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ImageScaler_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ImageScaler_Static{PyType_FromSpecWithBases(&type_spec_ImageScaler_Static, ImageScaler_Static_bases.get())};
    if (!type_ImageScaler_Static)
    {
        return nullptr;
    }

    py::pytype_handle ImageScaler_type{py::register_python_type(module.get(), &type_spec_ImageScaler, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ImageScaler_Static.get()))};
    if (!ImageScaler_type)
    {
        return nullptr;
    }

    py::pytype_handle RecognizedLine_type{py::register_python_type(module.get(), &type_spec_RecognizedLine, object_bases.get(), inspectable_meta_type)};
    if (!RecognizedLine_type)
    {
        return nullptr;
    }

    py::pytype_handle RecognizedText_type{py::register_python_type(module.get(), &type_spec_RecognizedText, object_bases.get(), inspectable_meta_type)};
    if (!RecognizedText_type)
    {
        return nullptr;
    }

    py::pytype_handle RecognizedWord_type{py::register_python_type(module.get(), &type_spec_RecognizedWord, object_bases.get(), inspectable_meta_type)};
    if (!RecognizedWord_type)
    {
        return nullptr;
    }

    py::pyobj_handle TextRecognizer_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!TextRecognizer_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_TextRecognizer_Static{PyType_FromSpecWithBases(&type_spec_TextRecognizer_Static, TextRecognizer_Static_bases.get())};
    if (!type_TextRecognizer_Static)
    {
        return nullptr;
    }

    py::pytype_handle TextRecognizer_type{py::register_python_type(module.get(), &type_spec_TextRecognizer, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_TextRecognizer_Static.get()))};
    if (!TextRecognizer_type)
    {
        return nullptr;
    }

    py::pytype_handle RecognizedTextBoundingBox_type{py::register_python_type(module.get(), &type_spec_RecognizedTextBoundingBox, nullptr, nullptr)};
    if (!RecognizedTextBoundingBox_type)
    {
        return nullptr;
    }

    py::pyobj_handle RecognizedTextBoundingBox_from_tuple_capsule{PyCapsule_New(reinterpret_cast<void*>(RecognizedTextBoundingBox_from_tuple),"winui3._winui3_microsoft_windows_ai_imaging.RecognizedTextBoundingBox_from_tuple", nullptr)};
    if (!RecognizedTextBoundingBox_from_tuple_capsule)
    {
        return nullptr;
    }

    if (PyModule_AddObjectRef(module.get(), "RecognizedTextBoundingBox_from_tuple", RecognizedTextBoundingBox_from_tuple_capsule.get()) == -1)
    {
        return nullptr;
    }

    return module.detach();
}
