// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Microsoft.UI.Composition.Experimental.h"

namespace py::cpp::Microsoft::UI::Composition::Experimental
{
    // ----- ExpCompositionVisualSurface class --------------------

    static PyObject* _new_ExpCompositionVisualSurface(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface>::type_name);
        return nullptr;
    }

    static PyObject* ExpCompositionVisualSurface_CreateVisualSurfaceWithRealizationSize(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.ExpCompositionVisualSurface", L"CreateVisualSurface", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::Compositor>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface::CreateVisualSurface(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_ExpCompositionVisualSurface[] = {
        { }};

    static PyGetSetDef _getset_ExpCompositionVisualSurface[] = {
        { }};

    static PyType_Slot _type_slots_ExpCompositionVisualSurface[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ExpCompositionVisualSurface) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ExpCompositionVisualSurface) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ExpCompositionVisualSurface) },
        { }};

    static PyType_Spec type_spec_ExpCompositionVisualSurface = {
        "winui3._winui3_microsoft_ui_composition_experimental.ExpCompositionVisualSurface",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ExpCompositionVisualSurface};

    static PyGetSetDef getset_ExpCompositionVisualSurface_Static[] = {
        { }};

    static PyMethodDef methods_ExpCompositionVisualSurface_Static[] = {
        { "create_visual_surface_with_realization_size", reinterpret_cast<PyCFunction>(ExpCompositionVisualSurface_CreateVisualSurfaceWithRealizationSize), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_ExpCompositionVisualSurface_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ExpCompositionVisualSurface_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ExpCompositionVisualSurface_Static) },
        { }
    };

    static PyType_Spec type_spec_ExpCompositionVisualSurface_Static = {
        "winui3._winui3_microsoft_ui_composition_experimental.ExpCompositionVisualSurface_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ExpCompositionVisualSurface_Static};

    // ----- IExpCompositionPropertyChanged interface --------------------

    #if PY_VERSION_HEX < 0x030A0000
    static PyObject* _new_IExpCompositionPropertyChanged(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>::type_name);
        return nullptr;
    }
    #endif

    static void _dealloc_IExpCompositionPropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IExpCompositionPropertyChanged_SetPropertyChangedListener(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChanged", L"SetPropertyChangedListener", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.SetPropertyChangedListener(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_IExpCompositionPropertyChanged[] = {
        { "set_property_changed_listener", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChanged_SetPropertyChangedListener), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IExpCompositionPropertyChanged[] = {
        { }};

    static PyType_Slot _type_slots_IExpCompositionPropertyChanged[] = {
        #if PY_VERSION_HEX < 0x030A0000
        { Py_tp_new, reinterpret_cast<void*>(_new_IExpCompositionPropertyChanged) },
        #endif
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IExpCompositionPropertyChanged) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IExpCompositionPropertyChanged) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IExpCompositionPropertyChanged) },
        { }};

    static PyType_Spec type_spec_IExpCompositionPropertyChanged = {
        "winui3._winui3_microsoft_ui_composition_experimental._IExpCompositionPropertyChanged",
        sizeof(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged),
        0,
        Py_TPFLAGS_DEFAULT
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        _type_slots_IExpCompositionPropertyChanged};

    struct ImplementsIExpCompositionPropertyChanged : py::ImplementsInterfaceT<ImplementsIExpCompositionPropertyChanged, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        ImplementsIExpCompositionPropertyChanged() = delete;
        ImplementsIExpCompositionPropertyChanged(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIExpCompositionPropertyChanged, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>(py_obj, runtime_class)
        {
        }

        auto SetPropertyChangedListener(winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param0, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const& param1)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "set_property_changed_listener")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IExpCompositionPropertyChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IExpCompositionPropertyChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIExpCompositionPropertyChanged(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIExpCompositionPropertyChanged(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIExpCompositionPropertyChanged>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIExpCompositionPropertyChanged[] = {
        { "_assign_array_", _assign_array_IExpCompositionPropertyChanged, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IExpCompositionPropertyChanged), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIExpCompositionPropertyChanged), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIExpCompositionPropertyChanged), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIExpCompositionPropertyChanged[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIExpCompositionPropertyChanged) },
        { }};

    static PyType_Spec type_spec_ImplementsIExpCompositionPropertyChanged = {
        "winui3._winui3_microsoft_ui_composition_experimental.IExpCompositionPropertyChanged",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        type_slots_ImplementsIExpCompositionPropertyChanged};

    // ----- IExpCompositionPropertyChangedListener interface --------------------

    #if PY_VERSION_HEX < 0x030A0000
    static PyObject* _new_IExpCompositionPropertyChangedListener(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>::type_name);
        return nullptr;
    }
    #endif

    static void _dealloc_IExpCompositionPropertyChangedListener(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyBooleanPropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyBooleanPropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyBooleanPropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyColorPropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyColorPropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Color>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyColorPropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyMatrix3x2PropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyMatrix3x2PropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3x2>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyMatrix3x2PropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyMatrix4x4PropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyMatrix4x4PropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float4x4>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyMatrix4x4PropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyReferencePropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyReferencePropertyChanged", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyReferencePropertyChanged(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifySinglePropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifySinglePropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifySinglePropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyVector2PropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyVector2PropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyVector2PropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyVector3PropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyVector3PropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyVector3PropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IExpCompositionPropertyChangedListener_NotifyVector4PropertyChanged(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener", L"NotifyVector4PropertyChanged", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::CompositionObject>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float4>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.NotifyVector4PropertyChanged(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_IExpCompositionPropertyChangedListener[] = {
        { "notify_boolean_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyBooleanPropertyChanged), METH_VARARGS, nullptr },
        { "notify_color_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyColorPropertyChanged), METH_VARARGS, nullptr },
        { "notify_matrix3x2_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyMatrix3x2PropertyChanged), METH_VARARGS, nullptr },
        { "notify_matrix4x4_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyMatrix4x4PropertyChanged), METH_VARARGS, nullptr },
        { "notify_reference_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyReferencePropertyChanged), METH_VARARGS, nullptr },
        { "notify_single_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifySinglePropertyChanged), METH_VARARGS, nullptr },
        { "notify_vector2_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyVector2PropertyChanged), METH_VARARGS, nullptr },
        { "notify_vector3_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyVector3PropertyChanged), METH_VARARGS, nullptr },
        { "notify_vector4_property_changed", reinterpret_cast<PyCFunction>(IExpCompositionPropertyChangedListener_NotifyVector4PropertyChanged), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IExpCompositionPropertyChangedListener[] = {
        { }};

    static PyType_Slot _type_slots_IExpCompositionPropertyChangedListener[] = {
        #if PY_VERSION_HEX < 0x030A0000
        { Py_tp_new, reinterpret_cast<void*>(_new_IExpCompositionPropertyChangedListener) },
        #endif
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IExpCompositionPropertyChangedListener) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IExpCompositionPropertyChangedListener) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IExpCompositionPropertyChangedListener) },
        { }};

    static PyType_Spec type_spec_IExpCompositionPropertyChangedListener = {
        "winui3._winui3_microsoft_ui_composition_experimental._IExpCompositionPropertyChangedListener",
        sizeof(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener),
        0,
        Py_TPFLAGS_DEFAULT
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        _type_slots_IExpCompositionPropertyChangedListener};

    struct ImplementsIExpCompositionPropertyChangedListener : py::ImplementsInterfaceT<ImplementsIExpCompositionPropertyChangedListener, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        ImplementsIExpCompositionPropertyChangedListener() = delete;
        ImplementsIExpCompositionPropertyChangedListener(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIExpCompositionPropertyChangedListener, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>(py_obj, runtime_class)
        {
        }

        auto NotifyBooleanPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, bool param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_boolean_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyColorPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::UI::Color param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_color_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyMatrix3x2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::Foundation::Numerics::float3x2 param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_matrix3x2_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyMatrix4x4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::Foundation::Numerics::float4x4 param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_matrix4x4_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyReferencePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_reference_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifySinglePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, float param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_single_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyVector2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::Foundation::Numerics::float2 param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_vector2_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyVector3PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::Foundation::Numerics::float3 param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_vector3_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto NotifyVector4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& param0, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty param1, winrt::Windows::Foundation::Numerics::float4 param2)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "notify_vector4_property_changed")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param2{py::convert(param2)};
                if (!py_param2)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IExpCompositionPropertyChangedListener(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IExpCompositionPropertyChangedListener(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIExpCompositionPropertyChangedListener(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIExpCompositionPropertyChangedListener(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIExpCompositionPropertyChangedListener>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIExpCompositionPropertyChangedListener[] = {
        { "_assign_array_", _assign_array_IExpCompositionPropertyChangedListener, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IExpCompositionPropertyChangedListener), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIExpCompositionPropertyChangedListener), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIExpCompositionPropertyChangedListener), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIExpCompositionPropertyChangedListener[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIExpCompositionPropertyChangedListener) },
        { }};

    static PyType_Spec type_spec_ImplementsIExpCompositionPropertyChangedListener = {
        "winui3._winui3_microsoft_ui_composition_experimental.IExpCompositionPropertyChangedListener",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        type_slots_ImplementsIExpCompositionPropertyChangedListener};

    // ----- IExpCompositor interface --------------------

    #if PY_VERSION_HEX < 0x030A0000
    static PyObject* _new_IExpCompositor(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>::type_name);
        return nullptr;
    }
    #endif

    static void _dealloc_IExpCompositor(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositor* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IExpCompositor_OpenSharedManipulationTransformFromHandle(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpCompositor", L"OpenSharedManipulationTransformFromHandle", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.OpenSharedManipulationTransformFromHandle(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_IExpCompositor[] = {
        { "open_shared_manipulation_transform_from_handle", reinterpret_cast<PyCFunction>(IExpCompositor_OpenSharedManipulationTransformFromHandle), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IExpCompositor[] = {
        { }};

    static PyType_Slot _type_slots_IExpCompositor[] = {
        #if PY_VERSION_HEX < 0x030A0000
        { Py_tp_new, reinterpret_cast<void*>(_new_IExpCompositor) },
        #endif
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IExpCompositor) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IExpCompositor) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IExpCompositor) },
        { }};

    static PyType_Spec type_spec_IExpCompositor = {
        "winui3._winui3_microsoft_ui_composition_experimental._IExpCompositor",
        sizeof(py::wrapper::Microsoft::UI::Composition::Experimental::IExpCompositor),
        0,
        Py_TPFLAGS_DEFAULT
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        _type_slots_IExpCompositor};

    struct ImplementsIExpCompositor : py::ImplementsInterfaceT<ImplementsIExpCompositor, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        ImplementsIExpCompositor() = delete;
        ImplementsIExpCompositor(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIExpCompositor, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>(py_obj, runtime_class)
        {
        }

        auto OpenSharedManipulationTransformFromHandle(uint64_t param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "open_shared_manipulation_transform_from_handle")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Foundation::IInspectable>(return_value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IExpCompositor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IExpCompositor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIExpCompositor(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIExpCompositor(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIExpCompositor>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIExpCompositor[] = {
        { "_assign_array_", _assign_array_IExpCompositor, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IExpCompositor), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIExpCompositor), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIExpCompositor), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIExpCompositor[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIExpCompositor) },
        { }};

    static PyType_Spec type_spec_ImplementsIExpCompositor = {
        "winui3._winui3_microsoft_ui_composition_experimental.IExpCompositor",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        type_slots_ImplementsIExpCompositor};

    // ----- IExpVisual interface --------------------

    #if PY_VERSION_HEX < 0x030A0000
    static PyObject* _new_IExpVisual(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>::type_name);
        return nullptr;
    }
    #endif

    static void _dealloc_IExpVisual(py::wrapper::Microsoft::UI::Composition::Experimental::IExpVisual* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IExpVisual_SetInteraction(py::wrapper::Microsoft::UI::Composition::Experimental::IExpVisual* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.Experimental.IExpVisual", L"SetInteraction", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetInteraction(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_IExpVisual[] = {
        { "set_interaction", reinterpret_cast<PyCFunction>(IExpVisual_SetInteraction), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IExpVisual[] = {
        { }};

    static PyType_Slot _type_slots_IExpVisual[] = {
        #if PY_VERSION_HEX < 0x030A0000
        { Py_tp_new, reinterpret_cast<void*>(_new_IExpVisual) },
        #endif
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IExpVisual) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IExpVisual) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IExpVisual) },
        { }};

    static PyType_Spec type_spec_IExpVisual = {
        "winui3._winui3_microsoft_ui_composition_experimental._IExpVisual",
        sizeof(py::wrapper::Microsoft::UI::Composition::Experimental::IExpVisual),
        0,
        Py_TPFLAGS_DEFAULT
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        _type_slots_IExpVisual};

    struct ImplementsIExpVisual : py::ImplementsInterfaceT<ImplementsIExpVisual, winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        ImplementsIExpVisual() = delete;
        ImplementsIExpVisual(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIExpVisual, winrt::Microsoft::UI::Composition::Experimental::IExpVisual>(py_obj, runtime_class)
        {
        }

        auto SetInteraction(winrt::Windows::Foundation::IInspectable const& param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "set_interaction")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IExpVisual(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IExpVisual(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIExpVisual(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIExpVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIExpVisual>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIExpVisual[] = {
        { "_assign_array_", _assign_array_IExpVisual, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IExpVisual), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIExpVisual), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIExpVisual), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIExpVisual[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIExpVisual) },
        { }};

    static PyType_Spec type_spec_ImplementsIExpVisual = {
        "winui3._winui3_microsoft_ui_composition_experimental.IExpVisual",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        type_slots_ImplementsIExpVisual};

    // ----- Microsoft.UI.Composition.Experimental Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.UI.Composition.Experimental");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_ui_composition_experimental",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::UI::Composition::Experimental

PyMODINIT_FUNC PyInit__winui3_microsoft_ui_composition_experimental(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Composition::Experimental;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle ExpCompositionVisualSurface_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ExpCompositionVisualSurface_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ExpCompositionVisualSurface_Static{PyType_FromSpecWithBases(&type_spec_ExpCompositionVisualSurface_Static, ExpCompositionVisualSurface_Static_bases.get())};
    if (!type_ExpCompositionVisualSurface_Static)
    {
        return nullptr;
    }

    py::pytype_handle ExpCompositionVisualSurface_type{py::register_python_type(module.get(), &type_spec_ExpCompositionVisualSurface, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ExpCompositionVisualSurface_Static.get()))};
    if (!ExpCompositionVisualSurface_type)
    {
        return nullptr;
    }

    py::pytype_handle IExpCompositionPropertyChanged_type{py::register_python_type(module.get(), &type_spec_IExpCompositionPropertyChanged, object_bases.get(), nullptr)};
    if (!IExpCompositionPropertyChanged_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIExpCompositionPropertyChanged_type{py::register_python_type(module.get(), &type_spec_ImplementsIExpCompositionPropertyChanged, nullptr, inspectable_meta_type)};
    if (!ImplementsIExpCompositionPropertyChanged_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIExpCompositionPropertyChanged_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle IExpCompositionPropertyChangedListener_type{py::register_python_type(module.get(), &type_spec_IExpCompositionPropertyChangedListener, object_bases.get(), nullptr)};
    if (!IExpCompositionPropertyChangedListener_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIExpCompositionPropertyChangedListener_type{py::register_python_type(module.get(), &type_spec_ImplementsIExpCompositionPropertyChangedListener, nullptr, inspectable_meta_type)};
    if (!ImplementsIExpCompositionPropertyChangedListener_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIExpCompositionPropertyChangedListener_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle IExpCompositor_type{py::register_python_type(module.get(), &type_spec_IExpCompositor, object_bases.get(), nullptr)};
    if (!IExpCompositor_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIExpCompositor_type{py::register_python_type(module.get(), &type_spec_ImplementsIExpCompositor, nullptr, inspectable_meta_type)};
    if (!ImplementsIExpCompositor_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIExpCompositor_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle IExpVisual_type{py::register_python_type(module.get(), &type_spec_IExpVisual, object_bases.get(), nullptr)};
    if (!IExpVisual_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIExpVisual_type{py::register_python_type(module.get(), &type_spec_ImplementsIExpVisual, nullptr, inspectable_meta_type)};
    if (!ImplementsIExpVisual_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIExpVisual_type.get()) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
