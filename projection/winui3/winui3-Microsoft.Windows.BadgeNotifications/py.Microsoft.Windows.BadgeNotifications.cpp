// WARNING: Please don't edit this file. It was generated by Python/WinRT v3.1.0

#include "py.Microsoft.Windows.BadgeNotifications.h"

namespace py::cpp::Microsoft::Windows::BadgeNotifications
{
    // ----- BadgeNotificationManager class --------------------

    static PyObject* _new_BadgeNotificationManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager>::type_name);
        return nullptr;
    }

    static void _dealloc_BadgeNotificationManager(py::wrapper::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* BadgeNotificationManager_ClearBadge(py::wrapper::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.BadgeNotifications.BadgeNotificationManager", L"ClearBadge", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.ClearBadge();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* BadgeNotificationManager_SetBadgeAsCount(py::wrapper::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.BadgeNotifications.BadgeNotificationManager", L"SetBadgeAsCount", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<uint32_t>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetBadgeAsCount(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* BadgeNotificationManager_SetBadgeAsGlyph(py::wrapper::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.BadgeNotifications.BadgeNotificationManager", L"SetBadgeAsGlyph", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationGlyph>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetBadgeAsGlyph(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* BadgeNotificationManager_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.BadgeNotifications.BadgeNotificationManager", L"Current");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager::Current();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_BadgeNotificationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_BadgeNotificationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BadgeNotificationManager[] = {
        { "clear_badge", reinterpret_cast<PyCFunction>(BadgeNotificationManager_ClearBadge), METH_VARARGS, nullptr },
        { "set_badge_as_count", reinterpret_cast<PyCFunction>(BadgeNotificationManager_SetBadgeAsCount), METH_VARARGS, nullptr },
        { "set_badge_as_glyph", reinterpret_cast<PyCFunction>(BadgeNotificationManager_SetBadgeAsGlyph), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_BadgeNotificationManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_BadgeNotificationManager), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_BadgeNotificationManager[] = {
        { }};

    static PyType_Slot _type_slots_BadgeNotificationManager[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_BadgeNotificationManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_BadgeNotificationManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_BadgeNotificationManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_BadgeNotificationManager) },
        { }};

    static PyType_Spec type_spec_BadgeNotificationManager = {
        "winui3._winui3_microsoft_windows_badgenotifications.BadgeNotificationManager",
        sizeof(py::wrapper::Microsoft::Windows::BadgeNotifications::BadgeNotificationManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BadgeNotificationManager};

    static PyGetSetDef getset_BadgeNotificationManager_Static[] = {
        { "current", reinterpret_cast<getter>(BadgeNotificationManager_get_Current), nullptr, nullptr, nullptr },
        { }};

    static PyMethodDef methods_BadgeNotificationManager_Static[] = {
        { }};

    static PyType_Slot type_slots_BadgeNotificationManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_BadgeNotificationManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_BadgeNotificationManager_Static) },
        { }
    };

    static PyType_Spec type_spec_BadgeNotificationManager_Static = {
        "winui3._winui3_microsoft_windows_badgenotifications.BadgeNotificationManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_BadgeNotificationManager_Static};

    // ----- Microsoft.Windows.BadgeNotifications Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.BadgeNotifications");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_windows_badgenotifications",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::BadgeNotifications

PyMODINIT_FUNC PyInit__winui3_microsoft_windows_badgenotifications(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::BadgeNotifications;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle BadgeNotificationManager_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!BadgeNotificationManager_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_BadgeNotificationManager_Static{PyType_FromSpecWithBases(&type_spec_BadgeNotificationManager_Static, BadgeNotificationManager_Static_bases.get())};
    if (!type_BadgeNotificationManager_Static)
    {
        return nullptr;
    }

    py::pytype_handle BadgeNotificationManager_type{py::register_python_type(module.get(), &type_spec_BadgeNotificationManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_BadgeNotificationManager_Static.get()))};
    if (!BadgeNotificationManager_type)
    {
        return nullptr;
    }


    return module.detach();
}
