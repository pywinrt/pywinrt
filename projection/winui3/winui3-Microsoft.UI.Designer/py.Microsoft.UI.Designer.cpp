// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Microsoft.UI.Designer.h"

namespace py::cpp::Microsoft::UI::Designer
{
    // ----- DesignerOutputHost class --------------------

    static PyObject* _new_DesignerOutputHost(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Designer::DesignerOutputHost>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Designer::DesignerOutputHost>::type_name);
        return nullptr;
    }

    static void _dealloc_DesignerOutputHost(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesignerOutputHost_Close(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Designer.DesignerOutputHost", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesignerOutputHost_CreateForWindowId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Designer.DesignerOutputHost", L"CreateForWindowId", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Compositor>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 1);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::UI::Designer::DesignerOutputHost::CreateForWindowId(param0, param1);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesignerOutputHost_get_WindowId(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Designer.DesignerOutputHost", L"WindowId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.WindowId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesignerOutputHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Designer::DesignerOutputHost>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesignerOutputHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Designer::DesignerOutputHost>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_DesignerOutputHost(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_DesignerOutputHost(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesignerOutputHost[] = {
        { "close", reinterpret_cast<PyCFunction>(DesignerOutputHost_Close), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_DesignerOutputHost, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesignerOutputHost), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_DesignerOutputHost), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_DesignerOutputHost), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_DesignerOutputHost[] = {
        { "window_id", reinterpret_cast<getter>(DesignerOutputHost_get_WindowId), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_DesignerOutputHost[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesignerOutputHost) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesignerOutputHost) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesignerOutputHost) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesignerOutputHost) },
        { }};

    static PyType_Spec type_spec_DesignerOutputHost = {
        "winui3._winui3_microsoft_ui_designer.DesignerOutputHost",
        sizeof(py::wrapper::Microsoft::UI::Designer::DesignerOutputHost),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesignerOutputHost};

    static PyGetSetDef getset_DesignerOutputHost_Static[] = {
        { }};

    static PyMethodDef methods_DesignerOutputHost_Static[] = {
        { "create_for_window_id", reinterpret_cast<PyCFunction>(DesignerOutputHost_CreateForWindowId), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_DesignerOutputHost_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DesignerOutputHost_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_DesignerOutputHost_Static) },
        { }
    };

    static PyType_Spec type_spec_DesignerOutputHost_Static = {
        "winui3._winui3_microsoft_ui_designer.DesignerOutputHost_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DesignerOutputHost_Static};

    // ----- Microsoft.UI.Designer Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.UI.Designer");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_ui_designer",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::UI::Designer

PyMODINIT_FUNC PyInit__winui3_microsoft_ui_designer(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Designer;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle DesignerOutputHost_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!DesignerOutputHost_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_DesignerOutputHost_Static{PyType_FromSpecWithBases(&type_spec_DesignerOutputHost_Static, DesignerOutputHost_Static_bases.get())};
    if (!type_DesignerOutputHost_Static)
    {
        return nullptr;
    }

    py::pytype_handle DesignerOutputHost_type{py::register_python_type(module.get(), &type_spec_DesignerOutputHost, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_DesignerOutputHost_Static.get()))};
    if (!DesignerOutputHost_type)
    {
        return nullptr;
    }


    return module.detach();
}
