// WARNING: Please don't edit this file. It was generated by Python/WinRT v3.1.0

#include "py.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.h"

namespace py::cpp::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask
{
    // ----- Task class --------------------

    static PyObject* _new_Task(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_GET_SIZE(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task instance{};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Task(py::wrapper::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* Task_Run(py::wrapper::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Background.IBackgroundTask", L"Run", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance>(args, 0);

                {
                    auto _gil = release_gil();
                    static_cast<winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::ITask>(self->obj).Run(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_Task(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_Task(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Task[] = {
        { "run", reinterpret_cast<PyCFunction>(Task_Run), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_Task, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Task), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_Task[] = {
        { }};

    static PyType_Slot _type_slots_Task[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Task) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Task) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Task) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Task) },
        { }};

    static PyType_Spec type_spec_Task = {
        "winui3._winui3_microsoft_windows_applicationmodel_background_universalbgtask.Task",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Task};

    // ----- Microsoft.Windows.ApplicationModel.Background.UniversalBGTask Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.ApplicationModel.Background.UniversalBGTask");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_windows_applicationmodel_background_universalbgtask",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask

PyMODINIT_FUNC PyInit__winui3_microsoft_windows_applicationmodel_background_universalbgtask(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle Task_type{py::register_python_type(module.get(), &type_spec_Task, object_bases.get(), inspectable_meta_type)};
    if (!Task_type)
    {
        return nullptr;
    }


    return module.detach();
}
