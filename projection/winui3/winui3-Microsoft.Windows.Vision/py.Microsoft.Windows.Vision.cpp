// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Microsoft.Windows.Vision.h"

namespace py::cpp::Microsoft::Windows::Vision
{
    // ----- ScreenRegionBoundingBox struct --------------------

    winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox ScreenRegionBoundingBox_from_tuple(PyObject* tuple)
    {
        if (PyTuple_GET_SIZE(tuple) != 4)
        {
            PyErr_SetString(PyExc_TypeError, "Incorrect number of fields");
            throw python_exception();
        }

        winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox result{};

        result.Left = py::convert_to<uint32_t>(tuple, 0);
        result.Top = py::convert_to<uint32_t>(tuple, 1);
        result.Right = py::convert_to<uint32_t>(tuple, 2);
        result.Bottom = py::convert_to<uint32_t>(tuple, 3);

        return result;
    }

    PyObject* _new_ScreenRegionBoundingBox(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_GET_SIZE(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        uint32_t _Left{};
        uint32_t _Top{};
        uint32_t _Right{};
        uint32_t _Bottom{};

        static const char* kwlist[] = {"left", "top", "right", "bottom", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|IIII", const_cast<char**>(kwlist), &_Left, &_Top, &_Right, &_Bottom))
        {
            return nullptr;
        }

        try
        {
            self->obj.Left = _Left;
            self->obj.Top = _Top;
            self->obj.Right = _Right;
            self->obj.Bottom = _Bottom;

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_ScreenRegionBoundingBox(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_ScreenRegionBoundingBox(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    PyObject* _replace_ScreenRegionBoundingBox(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, PyObject* args, PyObject* kwds) noexcept
    {
        try
        {
            uint32_t _Left{self->obj.Left};
            uint32_t _Top{self->obj.Top};
            uint32_t _Right{self->obj.Right};
            uint32_t _Bottom{self->obj.Bottom};

            static const char* kwlist[] = {"left", "top", "right", "bottom", nullptr};
            if (!PyArg_ParseTupleAndKeywords(args, kwds, "|$IIII", const_cast<char**>(kwlist), &_Left, &_Top, &_Right, &_Bottom))
            {
                return nullptr;
            }

            auto copy = self->obj;
            copy.Left = _Left;
            copy.Top = _Top;
            copy.Right = _Right;
            copy.Bottom = _Bottom;

            return convert(copy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    PyObject* unpack_ScreenRegionBoundingBox(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, PyObject* /*unused*/) noexcept
    {
        py::pyobj_handle Left{convert(self->obj.Left)};
        if (!Left)
        {
            return nullptr;
        }

        py::pyobj_handle Top{convert(self->obj.Top)};
        if (!Top)
        {
            return nullptr;
        }

        py::pyobj_handle Right{convert(self->obj.Right)};
        if (!Right)
        {
            return nullptr;
        }

        py::pyobj_handle Bottom{convert(self->obj.Bottom)};
        if (!Bottom)
        {
            return nullptr;
        }

        pyobj_handle tuple{PyTuple_New(4)};
        if (!tuple)
        {
            return nullptr;
        }

        PyTuple_SET_ITEM(tuple.get(), 0, Left.detach());
        PyTuple_SET_ITEM(tuple.get(), 1, Top.detach());
        PyTuple_SET_ITEM(tuple.get(), 2, Right.detach());
        PyTuple_SET_ITEM(tuple.get(), 3, Bottom.detach());

        return tuple.detach();
    }

    static PyMethodDef _methods_ScreenRegionBoundingBox[] = {
        { "_assign_array_", _assign_array_ScreenRegionBoundingBox, METH_O | METH_STATIC, nullptr },
        { "__replace__", reinterpret_cast<PyCFunction>(reinterpret_cast<void*>(_replace_ScreenRegionBoundingBox)), METH_VARARGS | METH_KEYWORDS, nullptr },
        { "unpack", reinterpret_cast<PyCFunction>(unpack_ScreenRegionBoundingBox), METH_NOARGS, nullptr },
        { }};

    static PyObject* ScreenRegionBoundingBox_get_Left(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Left);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScreenRegionBoundingBox_get_Top(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Top);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScreenRegionBoundingBox_get_Right(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Right);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScreenRegionBoundingBox_get_Bottom(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bottom);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_ScreenRegionBoundingBox[] = {
        { "left", reinterpret_cast<getter>(ScreenRegionBoundingBox_get_Left), nullptr, nullptr, nullptr },
        { "top", reinterpret_cast<getter>(ScreenRegionBoundingBox_get_Top), nullptr, nullptr, nullptr },
        { "right", reinterpret_cast<getter>(ScreenRegionBoundingBox_get_Right), nullptr, nullptr, nullptr },
        { "bottom", reinterpret_cast<getter>(ScreenRegionBoundingBox_get_Bottom), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_ScreenRegionBoundingBox(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_ScreenRegionBoundingBox(PyObject* self) noexcept
    {
        py::pyobj_handle Left{PyObject_GetAttrString(self, "left")};
        if (!Left)
        {
            return nullptr;
        }

        py::pyobj_handle Top{PyObject_GetAttrString(self, "top")};
        if (!Top)
        {
            return nullptr;
        }

        py::pyobj_handle Right{PyObject_GetAttrString(self, "right")};
        if (!Right)
        {
            return nullptr;
        }

        py::pyobj_handle Bottom{PyObject_GetAttrString(self, "bottom")};
        if (!Bottom)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("ScreenRegionBoundingBox(left=%R, top=%R, right=%R, bottom=%R)", Left.get(), Top.get(), Right.get(), Bottom.get());
    }

    static PyType_Slot _type_slots_ScreenRegionBoundingBox[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ScreenRegionBoundingBox) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ScreenRegionBoundingBox) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ScreenRegionBoundingBox) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ScreenRegionBoundingBox) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_ScreenRegionBoundingBox) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_ScreenRegionBoundingBox) },
        { }};

    static PyType_Spec type_spec_ScreenRegionBoundingBox = {
        "winui3._winui3_microsoft_windows_vision.ScreenRegionBoundingBox",
        sizeof(py::wrapper::Microsoft::Windows::Vision::ScreenRegionBoundingBox),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ScreenRegionBoundingBox};

    // ----- Microsoft.Windows.Vision Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.Vision");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winui3_microsoft_windows_vision",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::Vision

PyMODINIT_FUNC PyInit__winui3_microsoft_windows_vision(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Vision;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle ScreenRegionBoundingBox_type{py::register_python_type(module.get(), &type_spec_ScreenRegionBoundingBox, nullptr, nullptr)};
    if (!ScreenRegionBoundingBox_type)
    {
        return nullptr;
    }

    py::pyobj_handle ScreenRegionBoundingBox_from_tuple_capsule{PyCapsule_New(reinterpret_cast<void*>(ScreenRegionBoundingBox_from_tuple),"winui3._winui3_microsoft_windows_vision.ScreenRegionBoundingBox_from_tuple", nullptr)};
    if (!ScreenRegionBoundingBox_from_tuple_capsule)
    {
        return nullptr;
    }

    if (PyModule_AddObjectRef(module.get(), "ScreenRegionBoundingBox_from_tuple", ScreenRegionBoundingBox_from_tuple_capsule.get()) == -1)
    {
        return nullptr;
    }

    return module.detach();
}
