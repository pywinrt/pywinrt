# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.management.deployment as windows_management_deployment
import winrt.windows.system as windows_system

from winrt.windows.applicationmodel.store.preview.installcontrol import AppInstallState, AppInstallType, AppInstallationToastNotificationMode, AutoUpdateSetting, GetEntitlementStatus

Self = typing.TypeVar('Self')

@typing.final
class AppInstallItem(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Cancel()
    def cancel(self) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Cancel(System.String)
    def cancel_with_telemetry(self, correlation_vector: str, /) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::GetCurrentStatus()
    def get_current_status(self) -> AppInstallStatus: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Pause()
    def pause(self) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Pause(System.String)
    def pause_with_telemetry(self, correlation_vector: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Restart()
    def restart(self) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::Restart(System.String)
    def restart_with_telemetry(self, correlation_vector: str, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::add_Completed(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem,System.Object>)
    def add_completed(self, handler: windows_foundation.TypedEventHandler[AppInstallItem, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::remove_Completed(Windows.Foundation.EventRegistrationToken)
    def remove_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::add_StatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem,System.Object>)
    def add_status_changed(self, handler: windows_foundation.TypedEventHandler[AppInstallItem, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::remove_StatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_InstallType()
    @_property
    def install_type(self) -> AppInstallType: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_PackageFamilyName()
    @_property
    def package_family_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_Children()
    @_property
    def children(self) -> typing.Sequence[AppInstallItem]: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_ItemOperationsMightAffectOtherItems()
    @_property
    def item_operations_might_affect_other_items(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_LaunchAfterInstall()
    @_property
    def launch_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_LaunchAfterInstall(System.Boolean)
    @launch_after_install.setter
    def launch_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_PinToTaskbarAfterInstall()
    @_property
    def pin_to_taskbar_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_PinToTaskbarAfterInstall(System.Boolean)
    @pin_to_taskbar_after_install.setter
    def pin_to_taskbar_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_PinToStartAfterInstall()
    @_property
    def pin_to_start_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_PinToStartAfterInstall(System.Boolean)
    @pin_to_start_after_install.setter
    def pin_to_start_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_PinToDesktopAfterInstall()
    @_property
    def pin_to_desktop_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_PinToDesktopAfterInstall(System.Boolean)
    @pin_to_desktop_after_install.setter
    def pin_to_desktop_after_install(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_InstallInProgressToastNotificationMode()
    @_property
    def install_in_progress_toast_notification_mode(self) -> AppInstallationToastNotificationMode: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_InstallInProgressToastNotificationMode(Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode)
    @install_in_progress_toast_notification_mode.setter
    def install_in_progress_toast_notification_mode(self, value: AppInstallationToastNotificationMode) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::get_CompletedInstallToastNotificationMode()
    @_property
    def completed_install_toast_notification_mode(self) -> AppInstallationToastNotificationMode: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem::put_CompletedInstallToastNotificationMode(Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode)
    @completed_install_toast_notification_mode.setter
    def completed_install_toast_notification_mode(self, value: AppInstallationToastNotificationMode) -> None: ...

@typing.final
class AppInstallManager(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Cancel(System.String)
    def cancel(self, product_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Cancel(System.String,System.String)
    def cancel_with_telemetry(self, product_id: str, correlation_vector: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetFreeDeviceEntitlementAsync(System.String,System.String,System.String)
    def get_free_device_entitlement_async(self, store_id: str, campaign_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[GetEntitlementResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetFreeUserEntitlementAsync(System.String,System.String,System.String)
    def get_free_user_entitlement_async(self, store_id: str, campaign_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[GetEntitlementResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetFreeUserEntitlementForUserAsync(Windows.System.User,System.String,System.String,System.String)
    def get_free_user_entitlement_for_user_async(self, user: windows_system.User, store_id: str, campaign_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[GetEntitlementResult]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsAppAllowedToInstallAsync(System.String)
    def get_is_app_allowed_to_install_async(self, product_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsAppAllowedToInstallForUserAsync(Windows.System.User,System.String,System.String,System.String,System.String)
    def get_is_app_allowed_to_install_for_user_async(self, user: windows_system.User, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsAppAllowedToInstallAsync(System.String,System.String,System.String,System.String)
    def get_is_app_allowed_to_install_with_telemetry_async(self, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsApplicableAsync(System.String,System.String)
    def get_is_applicable_async(self, product_id: str, sku_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsApplicableForUserAsync(Windows.System.User,System.String,System.String)
    def get_is_applicable_for_user_async(self, user: windows_system.User, product_id: str, sku_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsPackageIdentityAllowedToInstallAsync(System.String,System.String,System.String)
    def get_is_package_identity_allowed_to_install_async(self, correlation_vector: str, package_identity_name: str, publisher_certificate_name: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::GetIsPackageIdentityAllowedToInstallForUserAsync(Windows.System.User,System.String,System.String,System.String)
    def get_is_package_identity_allowed_to_install_for_user_async(self, user: windows_system.User, correlation_vector: str, package_identity_name: str, publisher_certificate_name: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::IsStoreBlockedByPolicyAsync(System.String,System.String)
    def is_store_blocked_by_policy_async(self, store_client_name: str, store_client_publisher: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::MoveToFrontOfDownloadQueue(System.String,System.String)
    def move_to_front_of_download_queue(self, product_id: str, correlation_vector: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Pause(System.String)
    def pause(self, product_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Pause(System.String,System.String)
    def pause_with_telemetry(self, product_id: str, correlation_vector: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Restart(System.String)
    def restart(self, product_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::Restart(System.String,System.String)
    def restart_with_telemetry(self, product_id: str, correlation_vector: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForAllUpdatesAsync()
    def search_for_all_updates_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForAllUpdatesForUserAsync(Windows.System.User,System.String)
    def search_for_all_updates_for_user_async(self, user: windows_system.User, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForAllUpdatesAsync(System.String)
    def search_for_all_updates_with_telemetry_async(self, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForAllUpdatesAsync(System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions)
    def search_for_all_updates_with_update_options_async(self, correlation_vector: str, client_id: str, update_options: AppUpdateOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForAllUpdatesForUserAsync(Windows.System.User,System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions)
    def search_for_all_updates_with_update_options_for_user_async(self, user: windows_system.User, correlation_vector: str, client_id: str, update_options: AppUpdateOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForUpdatesAsync(System.String,System.String)
    def search_for_updates_async(self, product_id: str, sku_id: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForUpdatesForUserAsync(Windows.System.User,System.String,System.String,System.String,System.String)
    def search_for_updates_for_user_async(self, user: windows_system.User, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForUpdatesAsync(System.String,System.String,System.String,System.String)
    def search_for_updates_with_telemetry_async(self, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForUpdatesAsync(System.String,System.String,System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions)
    def search_for_updates_with_update_options_async(self, product_id: str, sku_id: str, correlation_vector: str, client_id: str, update_options: AppUpdateOptions, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::SearchForUpdatesForUserAsync(Windows.System.User,System.String,System.String,System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions)
    def search_for_updates_with_update_options_for_user_async(self, user: windows_system.User, product_id: str, sku_id: str, correlation_vector: str, client_id: str, update_options: AppUpdateOptions, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartAppInstallAsync(System.String,System.String,System.Boolean,System.Boolean)
    def start_app_install_async(self, product_id: str, sku_id: str, repair: bool, force_use_of_non_removable_storage: bool, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartAppInstallAsync(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)
    def start_app_install_with_telemetry_async(self, product_id: str, sku_id: str, repair: bool, force_use_of_non_removable_storage: bool, catalog_id: str, bundle_id: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartProductInstallAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,Windows.Management.Deployment.PackageVolume)
    def start_product_install_async(self, product_id: str, catalog_id: str, flight_id: str, client_id: str, repair: bool, force_use_of_non_removable_storage: bool, correlation_vector: str, target_volume: windows_management_deployment.PackageVolume, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartProductInstallForUserAsync(Windows.System.User,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,Windows.Management.Deployment.PackageVolume)
    def start_product_install_for_user_async(self, user: windows_system.User, product_id: str, catalog_id: str, flight_id: str, client_id: str, repair: bool, force_use_of_non_removable_storage: bool, correlation_vector: str, target_volume: windows_management_deployment.PackageVolume, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartProductInstallAsync(System.String,System.String,System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions)
    def start_product_install_with_options_async(self, product_id: str, flight_id: str, client_id: str, correlation_vector: str, install_options: AppInstallOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::StartProductInstallForUserAsync(Windows.System.User,System.String,System.String,System.String,System.String,Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions)
    def start_product_install_with_options_for_user_async(self, user: windows_system.User, product_id: str, flight_id: str, client_id: str, correlation_vector: str, install_options: AppInstallOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppInstallItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::UpdateAppByPackageFamilyNameAsync(System.String)
    def update_app_by_package_family_name_async(self, package_family_name: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::UpdateAppByPackageFamilyNameForUserAsync(Windows.System.User,System.String,System.String)
    def update_app_by_package_family_name_for_user_async(self, user: windows_system.User, package_family_name: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::UpdateAppByPackageFamilyNameAsync(System.String,System.String)
    def update_app_by_package_family_name_with_telemetry_async(self, package_family_name: str, correlation_vector: str, /) -> windows_foundation.IAsyncOperation[AppInstallItem]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::add_ItemCompleted(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager,Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>)
    def add_item_completed(self, handler: windows_foundation.TypedEventHandler[AppInstallManager, AppInstallManagerItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::remove_ItemCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_item_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::add_ItemStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager,Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>)
    def add_item_status_changed(self, handler: windows_foundation.TypedEventHandler[AppInstallManager, AppInstallManagerItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::remove_ItemStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_item_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::get_AutoUpdateSetting()
    @_property
    def auto_update_setting(self) -> AutoUpdateSetting: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::put_AutoUpdateSetting(Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting)
    @auto_update_setting.setter
    def auto_update_setting(self, value: AutoUpdateSetting) -> None: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::get_AcquisitionIdentity()
    @_property
    def acquisition_identity(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::put_AcquisitionIdentity(System.String)
    @acquisition_identity.setter
    def acquisition_identity(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::get_AppInstallItems()
    @_property
    def app_install_items(self) -> typing.Sequence[AppInstallItem]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::get_AppInstallItemsWithGroupSupport()
    @_property
    def app_install_items_with_group_support(self) -> typing.Sequence[AppInstallItem]: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager::get_CanInstallForAllUsers()
    @_property
    def can_install_for_all_users(self) -> bool: ...

@typing.final
class AppInstallManagerItemEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs::get_Item()
    @_property
    def item(self) -> AppInstallItem: ...

@typing.final
class AppInstallOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Management.Deployment.PackageVolume Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_TargetVolume()
    @_property
    def target_volume(self) -> windows_management_deployment.PackageVolume: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_TargetVolume(Windows.Management.Deployment.PackageVolume)
    @target_volume.setter
    def target_volume(self, value: windows_management_deployment.PackageVolume) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_Repair()
    @_property
    def repair(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_Repair(System.Boolean)
    @repair.setter
    def repair(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_LaunchAfterInstall()
    @_property
    def launch_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_LaunchAfterInstall(System.Boolean)
    @launch_after_install.setter
    def launch_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_ForceUseOfNonRemovableStorage()
    @_property
    def force_use_of_non_removable_storage(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_ForceUseOfNonRemovableStorage(System.Boolean)
    @force_use_of_non_removable_storage.setter
    def force_use_of_non_removable_storage(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_CatalogId()
    @_property
    def catalog_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_CatalogId(System.String)
    @catalog_id.setter
    def catalog_id(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_AllowForcedAppRestart()
    @_property
    def allow_forced_app_restart(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_AllowForcedAppRestart(System.Boolean)
    @allow_forced_app_restart.setter
    def allow_forced_app_restart(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_StageButDoNotInstall()
    @_property
    def stage_but_do_not_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_StageButDoNotInstall(System.Boolean)
    @stage_but_do_not_install.setter
    def stage_but_do_not_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_PinToTaskbarAfterInstall()
    @_property
    def pin_to_taskbar_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_PinToTaskbarAfterInstall(System.Boolean)
    @pin_to_taskbar_after_install.setter
    def pin_to_taskbar_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_PinToStartAfterInstall()
    @_property
    def pin_to_start_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_PinToStartAfterInstall(System.Boolean)
    @pin_to_start_after_install.setter
    def pin_to_start_after_install(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_PinToDesktopAfterInstall()
    @_property
    def pin_to_desktop_after_install(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_PinToDesktopAfterInstall(System.Boolean)
    @pin_to_desktop_after_install.setter
    def pin_to_desktop_after_install(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_InstallInProgressToastNotificationMode()
    @_property
    def install_in_progress_toast_notification_mode(self) -> AppInstallationToastNotificationMode: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_InstallInProgressToastNotificationMode(Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode)
    @install_in_progress_toast_notification_mode.setter
    def install_in_progress_toast_notification_mode(self, value: AppInstallationToastNotificationMode) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_InstallForAllUsers()
    @_property
    def install_for_all_users(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_InstallForAllUsers(System.Boolean)
    @install_for_all_users.setter
    def install_for_all_users(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_ExtendedCampaignId()
    @_property
    def extended_campaign_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_ExtendedCampaignId(System.String)
    @extended_campaign_id.setter
    def extended_campaign_id(self, value: str) -> None: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_CompletedInstallToastNotificationMode()
    @_property
    def completed_install_toast_notification_mode(self) -> AppInstallationToastNotificationMode: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_CompletedInstallToastNotificationMode(Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode)
    @completed_install_toast_notification_mode.setter
    def completed_install_toast_notification_mode(self, value: AppInstallationToastNotificationMode) -> None: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::get_CampaignId()
    @_property
    def campaign_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions::put_CampaignId(System.String)
    @campaign_id.setter
    def campaign_id(self, value: str) -> None: ...

@typing.final
class AppInstallStatus(winrt.system.Object):
    # System.UInt64 Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_BytesDownloaded()
    @_property
    def bytes_downloaded(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_DownloadSizeInBytes()
    @_property
    def download_size_in_bytes(self) -> winrt.system.UInt64: ...
    # Windows.Foundation.HResult Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_ErrorCode()
    @_property
    def error_code(self) -> windows_foundation.HResult: ...
    # Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_InstallState()
    @_property
    def install_state(self) -> AppInstallState: ...
    # System.Double Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_PercentComplete()
    @_property
    def percent_complete(self) -> winrt.system.Double: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_ReadyForLaunch()
    @_property
    def ready_for_launch(self) -> bool: ...
    # Windows.System.User Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_User()
    @_property
    def user(self) -> windows_system.User: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus::get_IsStaged()
    @_property
    def is_staged(self) -> bool: ...

@typing.final
class AppUpdateOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::get_CatalogId()
    @_property
    def catalog_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::put_CatalogId(System.String)
    @catalog_id.setter
    def catalog_id(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::get_AllowForcedAppRestart()
    @_property
    def allow_forced_app_restart(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::put_AllowForcedAppRestart(System.Boolean)
    @allow_forced_app_restart.setter
    def allow_forced_app_restart(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::get_AutomaticallyDownloadAndInstallUpdateIfFound()
    @_property
    def automatically_download_and_install_update_if_found(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions::put_AutomaticallyDownloadAndInstallUpdateIfFound(System.Boolean)
    @automatically_download_and_install_update_if_found.setter
    def automatically_download_and_install_update_if_found(self, value: bool) -> None: ...

@typing.final
class GetEntitlementResult(winrt.system.Object):
    # Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementStatus Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult::get_Status()
    @_property
    def status(self) -> GetEntitlementStatus: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult::get_AvailabilityId()
    @_property
    def availability_id(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult::get_IsAlreadyOwned()
    @_property
    def is_already_owned(self) -> bool: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult::get_OrderId()
    @_property
    def order_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult::get_SkuId()
    @_property
    def sku_id(self) -> str: ...

