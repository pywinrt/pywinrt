// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.Core.h"


namespace py::cpp::Windows::ApplicationModel::Core
{
    // ----- AppListEntry class --------------------

    static PyObject* _new_AppListEntry(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::AppListEntry>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::AppListEntry>::type_name);
        return nullptr;
    }

    static void _dealloc_AppListEntry(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppListEntry_LaunchAsync(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.AppListEntry", L"LaunchAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.LaunchAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppListEntry_LaunchForUserAsync(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.AppListEntry", L"LaunchForUserAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(self->obj.LaunchForUserAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_DisplayInfo(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.AppListEntry", L"DisplayInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_AppUserModelId(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.AppListEntry", L"AppUserModelId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppUserModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_AppInfo(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.AppListEntry", L"AppInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppListEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::AppListEntry>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppListEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::AppListEntry>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppListEntry[] = {
        { "launch_async", reinterpret_cast<PyCFunction>(AppListEntry_LaunchAsync), METH_VARARGS, nullptr },
        { "launch_for_user_async", reinterpret_cast<PyCFunction>(AppListEntry_LaunchForUserAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppListEntry, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppListEntry), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppListEntry[] = {
        { "display_info", reinterpret_cast<getter>(AppListEntry_get_DisplayInfo), nullptr, nullptr, nullptr },
        { "app_user_model_id", reinterpret_cast<getter>(AppListEntry_get_AppUserModelId), nullptr, nullptr, nullptr },
        { "app_info", reinterpret_cast<getter>(AppListEntry_get_AppInfo), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppListEntry[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppListEntry) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppListEntry) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppListEntry) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppListEntry) },
        { },
    };

    static PyType_Spec type_spec_AppListEntry =
    {
        "winrt._winrt_windows_applicationmodel_core.AppListEntry",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::AppListEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppListEntry
    };

    // ----- CoreApplication class --------------------

    static PyObject* _new_CoreApplication(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplication>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplication>::type_name);
        return nullptr;
    }

    static PyObject* CoreApplication_CreateNewView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"CreateNewView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"CreateNewView", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"CreateNewView", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_DecrementApplicationUseCount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"DecrementApplicationUseCount", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::DecrementApplicationUseCount();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_EnablePrelaunch(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"EnablePrelaunch", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::EnablePrelaunch(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_Exit(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Exit", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::Exit();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_GetCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"GetCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::GetCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_IncrementApplicationUseCount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"IncrementApplicationUseCount", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::IncrementApplicationUseCount();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RequestRestartAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"RequestRestartAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::RequestRestartAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RequestRestartForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"RequestRestartForUserAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::RequestRestartForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_Run(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Run", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::Run(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RunWithActivationFactories(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"RunWithActivationFactories", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::IGetActivationFactory>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::RunWithActivationFactories(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Id(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Properties(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_MainView(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"MainView"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::MainView());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Views(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Views"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Views());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_UnhandledErrorDetected(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"UnhandledErrorDetected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::UnhandledErrorDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_UnhandledErrorDetected(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"UnhandledErrorDetected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::UnhandledErrorDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Exiting(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Exiting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Exiting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Exiting(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Exiting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Exiting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"BackgroundActivated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Activation::BackgroundActivatedEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::BackgroundActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"BackgroundActivated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::BackgroundActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"EnteredBackground"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::EnteredBackgroundEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::EnteredBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"EnteredBackground"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::EnteredBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"LeavingBackground"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::LeavingBackgroundEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::LeavingBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"LeavingBackground"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::LeavingBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Resuming"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Resuming(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Resuming"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Resuming(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Suspending"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::SuspendingEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Suspending(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplication", L"Suspending"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Suspending(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplication[] = {
        { "add_unhandled_error_detected", reinterpret_cast<PyCFunction>(CoreApplication_add_UnhandledErrorDetected), METH_O | METH_STATIC, nullptr },
        { "remove_unhandled_error_detected", reinterpret_cast<PyCFunction>(CoreApplication_remove_UnhandledErrorDetected), METH_O | METH_STATIC, nullptr },
        { "add_exiting", reinterpret_cast<PyCFunction>(CoreApplication_add_Exiting), METH_O | METH_STATIC, nullptr },
        { "remove_exiting", reinterpret_cast<PyCFunction>(CoreApplication_remove_Exiting), METH_O | METH_STATIC, nullptr },
        { "add_background_activated", reinterpret_cast<PyCFunction>(CoreApplication_add_BackgroundActivated), METH_O | METH_STATIC, nullptr },
        { "remove_background_activated", reinterpret_cast<PyCFunction>(CoreApplication_remove_BackgroundActivated), METH_O | METH_STATIC, nullptr },
        { "add_entered_background", reinterpret_cast<PyCFunction>(CoreApplication_add_EnteredBackground), METH_O | METH_STATIC, nullptr },
        { "remove_entered_background", reinterpret_cast<PyCFunction>(CoreApplication_remove_EnteredBackground), METH_O | METH_STATIC, nullptr },
        { "add_leaving_background", reinterpret_cast<PyCFunction>(CoreApplication_add_LeavingBackground), METH_O | METH_STATIC, nullptr },
        { "remove_leaving_background", reinterpret_cast<PyCFunction>(CoreApplication_remove_LeavingBackground), METH_O | METH_STATIC, nullptr },
        { "add_resuming", reinterpret_cast<PyCFunction>(CoreApplication_add_Resuming), METH_O | METH_STATIC, nullptr },
        { "remove_resuming", reinterpret_cast<PyCFunction>(CoreApplication_remove_Resuming), METH_O | METH_STATIC, nullptr },
        { "add_suspending", reinterpret_cast<PyCFunction>(CoreApplication_add_Suspending), METH_O | METH_STATIC, nullptr },
        { "remove_suspending", reinterpret_cast<PyCFunction>(CoreApplication_remove_Suspending), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreApplication[] = {
        { }
    };

    static PyType_Slot _type_slots_CoreApplication[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreApplication) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreApplication) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreApplication) },
        { },
    };

    static PyType_Spec type_spec_CoreApplication =
    {
        "winrt._winrt_windows_applicationmodel_core.CoreApplication",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplication
    };

    static PyGetSetDef getset_CoreApplication_Static[] = {
        { "id", reinterpret_cast<getter>(CoreApplication_get_Id), nullptr, nullptr, nullptr },
        { "properties", reinterpret_cast<getter>(CoreApplication_get_Properties), nullptr, nullptr, nullptr },
        { "main_view", reinterpret_cast<getter>(CoreApplication_get_MainView), nullptr, nullptr, nullptr },
        { "views", reinterpret_cast<getter>(CoreApplication_get_Views), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_CoreApplication_Static[] = {
        { "create_new_view", reinterpret_cast<PyCFunction>(CoreApplication_CreateNewView), METH_VARARGS, nullptr },
        { "decrement_application_use_count", reinterpret_cast<PyCFunction>(CoreApplication_DecrementApplicationUseCount), METH_VARARGS, nullptr },
        { "enable_prelaunch", reinterpret_cast<PyCFunction>(CoreApplication_EnablePrelaunch), METH_VARARGS, nullptr },
        { "exit", reinterpret_cast<PyCFunction>(CoreApplication_Exit), METH_VARARGS, nullptr },
        { "get_current_view", reinterpret_cast<PyCFunction>(CoreApplication_GetCurrentView), METH_VARARGS, nullptr },
        { "increment_application_use_count", reinterpret_cast<PyCFunction>(CoreApplication_IncrementApplicationUseCount), METH_VARARGS, nullptr },
        { "request_restart_async", reinterpret_cast<PyCFunction>(CoreApplication_RequestRestartAsync), METH_VARARGS, nullptr },
        { "request_restart_for_user_async", reinterpret_cast<PyCFunction>(CoreApplication_RequestRestartForUserAsync), METH_VARARGS, nullptr },
        { "run", reinterpret_cast<PyCFunction>(CoreApplication_Run), METH_VARARGS, nullptr },
        { "run_with_activation_factories", reinterpret_cast<PyCFunction>(CoreApplication_RunWithActivationFactories), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CoreApplication_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CoreApplication_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CoreApplication_Static) },
        { }
    };

    static PyType_Spec type_spec_CoreApplication_Static =
    {
        "winrt._winrt_windows_applicationmodel_core.CoreApplication_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CoreApplication_Static
    };

    // ----- CoreApplicationView class --------------------

    static PyObject* _new_CoreApplicationView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplicationView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplicationView>::type_name);
        return nullptr;
    }

    static void _dealloc_CoreApplicationView(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreApplicationView_get_CoreWindow(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"CoreWindow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CoreWindow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsHosted(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"IsHosted"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsHosted());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsMain(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"IsMain"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsMain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_Dispatcher(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"Dispatcher"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsComponent(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"IsComponent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsComponent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_TitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"TitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_Properties(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_DispatcherQueue(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"DispatcherQueue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_add_Activated(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"Activated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationView, winrt::Windows::ApplicationModel::Activation::IActivatedEventArgs>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_remove_Activated(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"Activated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_add_HostedViewClosing(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"HostedViewClosing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationView, winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>>(arg);

            return py::convert(self->obj.HostedViewClosing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_remove_HostedViewClosing(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationView", L"HostedViewClosing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.HostedViewClosing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreApplicationView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::CoreApplicationView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreApplicationView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::CoreApplicationView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplicationView[] = {
        { "add_activated", reinterpret_cast<PyCFunction>(CoreApplicationView_add_Activated), METH_O, nullptr },
        { "remove_activated", reinterpret_cast<PyCFunction>(CoreApplicationView_remove_Activated), METH_O, nullptr },
        { "add_hosted_view_closing", reinterpret_cast<PyCFunction>(CoreApplicationView_add_HostedViewClosing), METH_O, nullptr },
        { "remove_hosted_view_closing", reinterpret_cast<PyCFunction>(CoreApplicationView_remove_HostedViewClosing), METH_O, nullptr },
        { "_assign_array_", _assign_array_CoreApplicationView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreApplicationView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreApplicationView[] = {
        { "core_window", reinterpret_cast<getter>(CoreApplicationView_get_CoreWindow), nullptr, nullptr, nullptr },
        { "is_hosted", reinterpret_cast<getter>(CoreApplicationView_get_IsHosted), nullptr, nullptr, nullptr },
        { "is_main", reinterpret_cast<getter>(CoreApplicationView_get_IsMain), nullptr, nullptr, nullptr },
        { "dispatcher", reinterpret_cast<getter>(CoreApplicationView_get_Dispatcher), nullptr, nullptr, nullptr },
        { "is_component", reinterpret_cast<getter>(CoreApplicationView_get_IsComponent), nullptr, nullptr, nullptr },
        { "title_bar", reinterpret_cast<getter>(CoreApplicationView_get_TitleBar), nullptr, nullptr, nullptr },
        { "properties", reinterpret_cast<getter>(CoreApplicationView_get_Properties), nullptr, nullptr, nullptr },
        { "dispatcher_queue", reinterpret_cast<getter>(CoreApplicationView_get_DispatcherQueue), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreApplicationView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreApplicationView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreApplicationView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreApplicationView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreApplicationView) },
        { },
    };

    static PyType_Spec type_spec_CoreApplicationView =
    {
        "winrt._winrt_windows_applicationmodel_core.CoreApplicationView",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplicationView
    };

    // ----- CoreApplicationViewTitleBar class --------------------

    static PyObject* _new_CoreApplicationViewTitleBar(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>::type_name);
        return nullptr;
    }

    static void _dealloc_CoreApplicationViewTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreApplicationViewTitleBar_get_ExtendViewIntoTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"ExtendViewIntoTitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendViewIntoTitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreApplicationViewTitleBar_put_ExtendViewIntoTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"ExtendViewIntoTitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ExtendViewIntoTitleBar(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_Height(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"Height"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_IsVisible(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"IsVisible"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_SystemOverlayLeftInset(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"SystemOverlayLeftInset"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SystemOverlayLeftInset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_SystemOverlayRightInset(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"SystemOverlayRightInset"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SystemOverlayRightInset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_add_IsVisibleChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"IsVisibleChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.IsVisibleChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_remove_IsVisibleChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"IsVisibleChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.IsVisibleChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_add_LayoutMetricsChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"LayoutMetricsChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.LayoutMetricsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_remove_LayoutMetricsChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar", L"LayoutMetricsChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LayoutMetricsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreApplicationViewTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreApplicationViewTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplicationViewTitleBar[] = {
        { "add_is_visible_changed", reinterpret_cast<PyCFunction>(CoreApplicationViewTitleBar_add_IsVisibleChanged), METH_O, nullptr },
        { "remove_is_visible_changed", reinterpret_cast<PyCFunction>(CoreApplicationViewTitleBar_remove_IsVisibleChanged), METH_O, nullptr },
        { "add_layout_metrics_changed", reinterpret_cast<PyCFunction>(CoreApplicationViewTitleBar_add_LayoutMetricsChanged), METH_O, nullptr },
        { "remove_layout_metrics_changed", reinterpret_cast<PyCFunction>(CoreApplicationViewTitleBar_remove_LayoutMetricsChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_CoreApplicationViewTitleBar, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreApplicationViewTitleBar), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreApplicationViewTitleBar[] = {
        { "extend_view_into_title_bar", reinterpret_cast<getter>(CoreApplicationViewTitleBar_get_ExtendViewIntoTitleBar), reinterpret_cast<setter>(CoreApplicationViewTitleBar_put_ExtendViewIntoTitleBar), nullptr, nullptr },
        { "height", reinterpret_cast<getter>(CoreApplicationViewTitleBar_get_Height), nullptr, nullptr, nullptr },
        { "is_visible", reinterpret_cast<getter>(CoreApplicationViewTitleBar_get_IsVisible), nullptr, nullptr, nullptr },
        { "system_overlay_left_inset", reinterpret_cast<getter>(CoreApplicationViewTitleBar_get_SystemOverlayLeftInset), nullptr, nullptr, nullptr },
        { "system_overlay_right_inset", reinterpret_cast<getter>(CoreApplicationViewTitleBar_get_SystemOverlayRightInset), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreApplicationViewTitleBar[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreApplicationViewTitleBar) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreApplicationViewTitleBar) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreApplicationViewTitleBar) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreApplicationViewTitleBar) },
        { },
    };

    static PyType_Spec type_spec_CoreApplicationViewTitleBar =
    {
        "winrt._winrt_windows_applicationmodel_core.CoreApplicationViewTitleBar",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplicationViewTitleBar
    };

    // ----- HostedViewClosingEventArgs class --------------------

    static PyObject* _new_HostedViewClosingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_HostedViewClosingEventArgs(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HostedViewClosingEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.HostedViewClosingEventArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_HostedViewClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HostedViewClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HostedViewClosingEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(HostedViewClosingEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HostedViewClosingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HostedViewClosingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_HostedViewClosingEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_HostedViewClosingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HostedViewClosingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HostedViewClosingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HostedViewClosingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HostedViewClosingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_HostedViewClosingEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_core.HostedViewClosingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HostedViewClosingEventArgs
    };

    // ----- UnhandledError class --------------------

    static PyObject* _new_UnhandledError(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::UnhandledError>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::UnhandledError>::type_name);
        return nullptr;
    }

    static void _dealloc_UnhandledError(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UnhandledError_Propagate(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.UnhandledError", L"Propagate", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Propagate();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnhandledError_get_Handled(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.UnhandledError", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::UnhandledError>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::UnhandledError>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnhandledError[] = {
        { "propagate", reinterpret_cast<PyCFunction>(UnhandledError_Propagate), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UnhandledError, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UnhandledError), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UnhandledError[] = {
        { "handled", reinterpret_cast<getter>(UnhandledError_get_Handled), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UnhandledError[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UnhandledError) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UnhandledError) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UnhandledError) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UnhandledError) },
        { },
    };

    static PyType_Spec type_spec_UnhandledError =
    {
        "winrt._winrt_windows_applicationmodel_core.UnhandledError",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::UnhandledError),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnhandledError
    };

    // ----- UnhandledErrorDetectedEventArgs class --------------------

    static PyObject* _new_UnhandledErrorDetectedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_UnhandledErrorDetectedEventArgs(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UnhandledErrorDetectedEventArgs_get_UnhandledError(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs", L"UnhandledError"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UnhandledError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UnhandledErrorDetectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UnhandledErrorDetectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnhandledErrorDetectedEventArgs[] = {
        { "_assign_array_", _assign_array_UnhandledErrorDetectedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UnhandledErrorDetectedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UnhandledErrorDetectedEventArgs[] = {
        { "unhandled_error", reinterpret_cast<getter>(UnhandledErrorDetectedEventArgs_get_UnhandledError), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UnhandledErrorDetectedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UnhandledErrorDetectedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UnhandledErrorDetectedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UnhandledErrorDetectedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UnhandledErrorDetectedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_UnhandledErrorDetectedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_core.UnhandledErrorDetectedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnhandledErrorDetectedEventArgs
    };

    // ----- ICoreApplicationUnhandledError interface --------------------

    static PyObject* _new_ICoreApplicationUnhandledError(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>::type_name);
        return nullptr;
    }

    static void _dealloc_ICoreApplicationUnhandledError(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ICoreApplicationUnhandledError_add_UnhandledErrorDetected(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.ICoreApplicationUnhandledError", L"UnhandledErrorDetected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>>(arg);

            return py::convert(self->obj.UnhandledErrorDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreApplicationUnhandledError_remove_UnhandledErrorDetected(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Core.ICoreApplicationUnhandledError", L"UnhandledErrorDetected"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnhandledErrorDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ICoreApplicationUnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ICoreApplicationUnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreApplicationUnhandledError[] = {
        { "add_unhandled_error_detected", reinterpret_cast<PyCFunction>(ICoreApplicationUnhandledError_add_UnhandledErrorDetected), METH_O, nullptr },
        { "remove_unhandled_error_detected", reinterpret_cast<PyCFunction>(ICoreApplicationUnhandledError_remove_UnhandledErrorDetected), METH_O, nullptr },
        { "_assign_array_", _assign_array_ICoreApplicationUnhandledError, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ICoreApplicationUnhandledError), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ICoreApplicationUnhandledError[] = {
        { }
    };

    static PyType_Slot _type_slots_ICoreApplicationUnhandledError[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ICoreApplicationUnhandledError) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ICoreApplicationUnhandledError) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ICoreApplicationUnhandledError) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ICoreApplicationUnhandledError) },
        { },
    };

    static PyType_Spec type_spec_ICoreApplicationUnhandledError =
    {
        "winrt._winrt_windows_applicationmodel_core.ICoreApplicationUnhandledError",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreApplicationUnhandledError
    };

    // ----- IFrameworkView interface --------------------

    static PyObject* _new_IFrameworkView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::IFrameworkView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::IFrameworkView>::type_name);
        return nullptr;
    }

    static void _dealloc_IFrameworkView(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IFrameworkView_Initialize(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkView", L"Initialize", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::CoreApplicationView>(args, 0);

                self->obj.Initialize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Load(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkView", L"Load", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Load(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Run(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkView", L"Run", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Run();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_SetWindow(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkView", L"SetWindow", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindow>(args, 0);

                self->obj.SetWindow(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Uninitialize(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkView", L"Uninitialize", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Uninitialize();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IFrameworkView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::IFrameworkView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IFrameworkView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::IFrameworkView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IFrameworkView[] = {
        { "initialize", reinterpret_cast<PyCFunction>(IFrameworkView_Initialize), METH_VARARGS, nullptr },
        { "load", reinterpret_cast<PyCFunction>(IFrameworkView_Load), METH_VARARGS, nullptr },
        { "run", reinterpret_cast<PyCFunction>(IFrameworkView_Run), METH_VARARGS, nullptr },
        { "set_window", reinterpret_cast<PyCFunction>(IFrameworkView_SetWindow), METH_VARARGS, nullptr },
        { "uninitialize", reinterpret_cast<PyCFunction>(IFrameworkView_Uninitialize), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IFrameworkView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IFrameworkView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IFrameworkView[] = {
        { }
    };

    static PyType_Slot _type_slots_IFrameworkView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IFrameworkView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IFrameworkView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IFrameworkView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IFrameworkView) },
        { },
    };

    static PyType_Spec type_spec_IFrameworkView =
    {
        "winrt._winrt_windows_applicationmodel_core.IFrameworkView",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IFrameworkView
    };

    // ----- IFrameworkViewSource interface --------------------

    static PyObject* _new_IFrameworkViewSource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>::type_name);
        return nullptr;
    }

    static void _dealloc_IFrameworkViewSource(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IFrameworkViewSource_CreateView(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Core.IFrameworkViewSource", L"CreateView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IFrameworkViewSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IFrameworkViewSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IFrameworkViewSource[] = {
        { "create_view", reinterpret_cast<PyCFunction>(IFrameworkViewSource_CreateView), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IFrameworkViewSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IFrameworkViewSource), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IFrameworkViewSource[] = {
        { }
    };

    static PyType_Slot _type_slots_IFrameworkViewSource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IFrameworkViewSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IFrameworkViewSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IFrameworkViewSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IFrameworkViewSource) },
        { },
    };

    static PyType_Spec type_spec_IFrameworkViewSource =
    {
        "winrt._winrt_windows_applicationmodel_core.IFrameworkViewSource",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IFrameworkViewSource
    };

    // ----- Windows.ApplicationModel.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Core

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_core(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppListEntry, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CoreApplication_Static{PyType_FromSpec(&type_spec_CoreApplication_Static)};
    if (!type_CoreApplication_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreApplication, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CoreApplication_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreApplicationView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreApplicationViewTitleBar, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_HostedViewClosingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UnhandledError, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UnhandledErrorDetectedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ICoreApplicationUnhandledError, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IFrameworkView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IFrameworkViewSource, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
