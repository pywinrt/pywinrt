# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel as windows_applicationmodel
import winrt.windows.applicationmodel.activation as windows_applicationmodel_activation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui.core as windows_ui_core

from winrt.windows.applicationmodel.core import AppRestartFailureReason

Self = typing.TypeVar('Self')

@typing.final
class AppListEntry(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Core.AppListEntry::LaunchAsync()
    def launch_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Core.AppListEntry::LaunchForUserAsync(Windows.System.User)
    def launch_for_user_async(self, user: windows_system.User, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.ApplicationModel.AppDisplayInfo Windows.ApplicationModel.Core.AppListEntry::get_DisplayInfo()
    @_property
    def display_info(self) -> windows_applicationmodel.AppDisplayInfo: ...
    # System.String Windows.ApplicationModel.Core.AppListEntry::get_AppUserModelId()
    @_property
    def app_user_model_id(self) -> str: ...
    # Windows.ApplicationModel.AppInfo Windows.ApplicationModel.Core.AppListEntry::get_AppInfo()
    @_property
    def app_info(self) -> windows_applicationmodel.AppInfo: ...

@typing.final
class CoreApplication_Static(type):
    # Windows.ApplicationModel.Core.CoreApplicationView Windows.ApplicationModel.Core.CoreApplication::CreateNewView(System.String,System.String)
    def create_new_view(cls, runtime_type: str, entry_point: str, /) -> CoreApplicationView: ...
    # Windows.ApplicationModel.Core.CoreApplicationView Windows.ApplicationModel.Core.CoreApplication::CreateNewView()
    def create_new_view_from_main_view(cls) -> CoreApplicationView: ...
    # Windows.ApplicationModel.Core.CoreApplicationView Windows.ApplicationModel.Core.CoreApplication::CreateNewView(Windows.ApplicationModel.Core.IFrameworkViewSource)
    def create_new_view_with_view_source(cls, view_source: IFrameworkViewSource, /) -> CoreApplicationView: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::DecrementApplicationUseCount()
    def decrement_application_use_count(cls) -> None: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::EnablePrelaunch(System.Boolean)
    def enable_prelaunch(cls, value: bool, /) -> None: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::Exit()
    def exit(cls) -> None: ...
    # Windows.ApplicationModel.Core.CoreApplicationView Windows.ApplicationModel.Core.CoreApplication::GetCurrentView()
    def get_current_view(cls) -> CoreApplicationView: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::IncrementApplicationUseCount()
    def increment_application_use_count(cls) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Core.AppRestartFailureReason> Windows.ApplicationModel.Core.CoreApplication::RequestRestartAsync(System.String)
    def request_restart_async(cls, launch_arguments: str, /) -> windows_foundation.IAsyncOperation[AppRestartFailureReason]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Core.AppRestartFailureReason> Windows.ApplicationModel.Core.CoreApplication::RequestRestartForUserAsync(Windows.System.User,System.String)
    def request_restart_for_user_async(cls, user: windows_system.User, launch_arguments: str, /) -> windows_foundation.IAsyncOperation[AppRestartFailureReason]: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::Run(Windows.ApplicationModel.Core.IFrameworkViewSource)
    def run(cls, view_source: IFrameworkViewSource, /) -> None: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::RunWithActivationFactories(Windows.Foundation.IGetActivationFactory)
    def run_with_activation_factories(cls, activation_factory_callback: windows_foundation.IGetActivationFactory, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_UnhandledErrorDetected(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>)
    def add_unhandled_error_detected(cls, handler: windows_foundation.EventHandler[UnhandledErrorDetectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_UnhandledErrorDetected(Windows.Foundation.EventRegistrationToken)
    def remove_unhandled_error_detected(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_Exiting(Windows.Foundation.EventHandler`1<System.Object>)
    def add_exiting(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_Exiting(Windows.Foundation.EventRegistrationToken)
    def remove_exiting(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_BackgroundActivated(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>)
    def add_background_activated(cls, handler: windows_foundation.EventHandler[windows_applicationmodel_activation.BackgroundActivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_BackgroundActivated(Windows.Foundation.EventRegistrationToken)
    def remove_background_activated(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_EnteredBackground(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.EnteredBackgroundEventArgs>)
    def add_entered_background(cls, handler: windows_foundation.EventHandler[windows_applicationmodel.EnteredBackgroundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_EnteredBackground(Windows.Foundation.EventRegistrationToken)
    def remove_entered_background(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_LeavingBackground(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.LeavingBackgroundEventArgs>)
    def add_leaving_background(cls, handler: windows_foundation.EventHandler[windows_applicationmodel.LeavingBackgroundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_LeavingBackground(Windows.Foundation.EventRegistrationToken)
    def remove_leaving_background(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_Resuming(Windows.Foundation.EventHandler`1<System.Object>)
    def add_resuming(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_Resuming(Windows.Foundation.EventRegistrationToken)
    def remove_resuming(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplication::add_Suspending(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.SuspendingEventArgs>)
    def add_suspending(cls, handler: windows_foundation.EventHandler[windows_applicationmodel.SuspendingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplication::remove_Suspending(Windows.Foundation.EventRegistrationToken)
    def remove_suspending(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Core.CoreApplication::get_Id()
    @_property
    def id(cls) -> str: ...
    # Windows.Foundation.Collections.IPropertySet Windows.ApplicationModel.Core.CoreApplication::get_Properties()
    @_property
    def properties(cls) -> windows_foundation_collections.IPropertySet: ...
    # Windows.ApplicationModel.Core.CoreApplicationView Windows.ApplicationModel.Core.CoreApplication::get_MainView()
    @_property
    def main_view(cls) -> CoreApplicationView: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Core.CoreApplicationView> Windows.ApplicationModel.Core.CoreApplication::get_Views()
    @_property
    def views(cls) -> typing.Sequence[CoreApplicationView]: ...

@typing.final
class CoreApplication(winrt.system.Object, metaclass=CoreApplication_Static):
    pass

@typing.final
class CoreApplicationView(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplicationView::add_Activated(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Core.CoreApplicationView,Windows.ApplicationModel.Activation.IActivatedEventArgs>)
    def add_activated(self, handler: windows_foundation.TypedEventHandler[CoreApplicationView, windows_applicationmodel_activation.IActivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplicationView::remove_Activated(Windows.Foundation.EventRegistrationToken)
    def remove_activated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplicationView::add_HostedViewClosing(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Core.CoreApplicationView,Windows.ApplicationModel.Core.HostedViewClosingEventArgs>)
    def add_hosted_view_closing(self, handler: windows_foundation.TypedEventHandler[CoreApplicationView, HostedViewClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplicationView::remove_HostedViewClosing(Windows.Foundation.EventRegistrationToken)
    def remove_hosted_view_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.UI.Core.CoreWindow Windows.ApplicationModel.Core.CoreApplicationView::get_CoreWindow()
    @_property
    def core_window(self) -> windows_ui_core.CoreWindow: ...
    # System.Boolean Windows.ApplicationModel.Core.CoreApplicationView::get_IsHosted()
    @_property
    def is_hosted(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Core.CoreApplicationView::get_IsMain()
    @_property
    def is_main(self) -> bool: ...
    # Windows.UI.Core.CoreDispatcher Windows.ApplicationModel.Core.CoreApplicationView::get_Dispatcher()
    @_property
    def dispatcher(self) -> windows_ui_core.CoreDispatcher: ...
    # System.Boolean Windows.ApplicationModel.Core.CoreApplicationView::get_IsComponent()
    @_property
    def is_component(self) -> bool: ...
    # Windows.ApplicationModel.Core.CoreApplicationViewTitleBar Windows.ApplicationModel.Core.CoreApplicationView::get_TitleBar()
    @_property
    def title_bar(self) -> CoreApplicationViewTitleBar: ...
    # Windows.Foundation.Collections.IPropertySet Windows.ApplicationModel.Core.CoreApplicationView::get_Properties()
    @_property
    def properties(self) -> windows_foundation_collections.IPropertySet: ...
    # Windows.System.DispatcherQueue Windows.ApplicationModel.Core.CoreApplicationView::get_DispatcherQueue()
    @_property
    def dispatcher_queue(self) -> windows_system.DispatcherQueue: ...

@typing.final
class CoreApplicationViewTitleBar(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::add_IsVisibleChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Core.CoreApplicationViewTitleBar,System.Object>)
    def add_is_visible_changed(self, handler: windows_foundation.TypedEventHandler[CoreApplicationViewTitleBar, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::remove_IsVisibleChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_visible_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::add_LayoutMetricsChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Core.CoreApplicationViewTitleBar,System.Object>)
    def add_layout_metrics_changed(self, handler: windows_foundation.TypedEventHandler[CoreApplicationViewTitleBar, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::remove_LayoutMetricsChanged(Windows.Foundation.EventRegistrationToken)
    def remove_layout_metrics_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::get_ExtendViewIntoTitleBar()
    @_property
    def extend_view_into_title_bar(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::put_ExtendViewIntoTitleBar(System.Boolean)
    @extend_view_into_title_bar.setter
    def extend_view_into_title_bar(self, value: bool) -> None: ...
    # System.Double Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::get_Height()
    @_property
    def height(self) -> winrt.system.Double: ...
    # System.Boolean Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # System.Double Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::get_SystemOverlayLeftInset()
    @_property
    def system_overlay_left_inset(self) -> winrt.system.Double: ...
    # System.Double Windows.ApplicationModel.Core.CoreApplicationViewTitleBar::get_SystemOverlayRightInset()
    @_property
    def system_overlay_right_inset(self) -> winrt.system.Double: ...

@typing.final
class HostedViewClosingEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.ApplicationModel.Core.HostedViewClosingEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...

@typing.final
class UnhandledError(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Core.UnhandledError::Propagate()
    def propagate(self) -> None: ...
    # System.Boolean Windows.ApplicationModel.Core.UnhandledError::get_Handled()
    @_property
    def handled(self) -> bool: ...

@typing.final
class UnhandledErrorDetectedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Core.UnhandledError Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs::get_UnhandledError()
    @_property
    def unhandled_error(self) -> UnhandledError: ...

@typing.final
class _ICoreApplicationUnhandledError: ...

class ICoreApplicationUnhandledError(winrt._winrt.IInspectable):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Core.ICoreApplicationUnhandledError::add_UnhandledErrorDetected(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>)
    @abstractmethod
    def add_unhandled_error_detected(self, handler: windows_foundation.EventHandler[UnhandledErrorDetectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Core.ICoreApplicationUnhandledError::remove_UnhandledErrorDetected(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_unhandled_error_detected(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class _IFrameworkView: ...

class IFrameworkView(winrt._winrt.IInspectable):
    # System.Void Windows.ApplicationModel.Core.IFrameworkView::Initialize(Windows.ApplicationModel.Core.CoreApplicationView)
    @abstractmethod
    def initialize(self, application_view: CoreApplicationView, /) -> None: ...
    # System.Void Windows.ApplicationModel.Core.IFrameworkView::Load(System.String)
    @abstractmethod
    def load(self, entry_point: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Core.IFrameworkView::Run()
    @abstractmethod
    def run(self) -> None: ...
    # System.Void Windows.ApplicationModel.Core.IFrameworkView::SetWindow(Windows.UI.Core.CoreWindow)
    @abstractmethod
    def set_window(self, window: windows_ui_core.CoreWindow, /) -> None: ...
    # System.Void Windows.ApplicationModel.Core.IFrameworkView::Uninitialize()
    @abstractmethod
    def uninitialize(self) -> None: ...

@typing.final
class _IFrameworkViewSource: ...

class IFrameworkViewSource(winrt._winrt.IInspectable):
    # Windows.ApplicationModel.Core.IFrameworkView Windows.ApplicationModel.Core.IFrameworkViewSource::CreateView()
    @abstractmethod
    def create_view(self) -> IFrameworkView: ...

