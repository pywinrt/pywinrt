# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.enumeration as windows_devices_enumeration
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.windows.devices.enumeration.pnp import PnpObjectType

Self = typing.TypeVar('Self')

@typing.final
class PnpObject_Static(type):
    def create_from_id_async(cls, type: PnpObjectType, id: str, requested_properties: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[PnpObject]: ...
    @typing.overload
    def create_watcher(cls, type: PnpObjectType, requested_properties: typing.Iterable[str], /) -> typing.Optional[PnpObjectWatcher]: ...
    @typing.overload
    def create_watcher(cls, type: PnpObjectType, requested_properties: typing.Iterable[str], aqs_filter: str, /) -> typing.Optional[PnpObjectWatcher]: ...
    @typing.overload
    def find_all_async(cls, type: PnpObjectType, requested_properties: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[PnpObjectCollection]: ...
    @typing.overload
    def find_all_async(cls, type: PnpObjectType, requested_properties: typing.Iterable[str], aqs_filter: str, /) -> windows_foundation.IAsyncOperation[PnpObjectCollection]: ...

@typing.final
class PnpObject(winrt.system.Object, metaclass=PnpObject_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PnpObject: ...
    def update(self, update_info: typing.Optional[PnpObjectUpdate], /) -> None: ...
    @_property
    def id(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...
    @_property
    def type(self) -> PnpObjectType: ...

@typing.final
class PnpObjectCollection(winrt.system.Object, winrt._winrt.Sequence[PnpObject]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[PnpObject]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> PnpObject: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[PnpObject]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PnpObjectCollection: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[PnpObject]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[PnpObject]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[PnpObject], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[PnpObject], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class PnpObjectUpdate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PnpObjectUpdate: ...
    @_property
    def id(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...
    @_property
    def type(self) -> PnpObjectType: ...

@typing.final
class PnpObjectWatcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PnpObjectWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: windows_foundation.TypedEventHandler[PnpObjectWatcher, PnpObject], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_added(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[PnpObjectWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: windows_foundation.TypedEventHandler[PnpObjectWatcher, PnpObjectUpdate], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[PnpObjectWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: windows_foundation.TypedEventHandler[PnpObjectWatcher, PnpObjectUpdate], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> windows_devices_enumeration.DeviceWatcherStatus: ...

