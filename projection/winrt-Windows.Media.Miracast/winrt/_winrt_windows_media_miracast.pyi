# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics
import winrt.windows.media.core
import winrt.windows.storage.streams

from winrt.windows.media.miracast import MiracastReceiverApplySettingsStatus, MiracastReceiverAuthorizationMethod, MiracastReceiverDisconnectReason, MiracastReceiverGameControllerDeviceUsageMode, MiracastReceiverListeningStatus, MiracastReceiverSessionStartStatus, MiracastReceiverWiFiStatus, MiracastTransmitterAuthorizationStatus

Self = typing.TypeVar('Self')

@typing.final
class MiracastReceiver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiver: ...
    def __new__(cls: typing.Type[MiracastReceiver]) -> MiracastReceiver:...
    def clear_known_transmitters(self) -> None: ...
    def create_session(self, view: typing.Optional[winrt.windows.applicationmodel.core.CoreApplicationView], /) -> typing.Optional[MiracastReceiverSession]: ...
    def create_session_async(self, view: typing.Optional[winrt.windows.applicationmodel.core.CoreApplicationView], /) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverSession]: ...
    def disconnect_all_and_apply_settings(self, settings: typing.Optional[MiracastReceiverSettings], /) -> typing.Optional[MiracastReceiverApplySettingsResult]: ...
    def disconnect_all_and_apply_settings_async(self, settings: typing.Optional[MiracastReceiverSettings], /) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverApplySettingsResult]: ...
    def get_current_settings(self) -> typing.Optional[MiracastReceiverSettings]: ...
    def get_current_settings_async(self) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverSettings]: ...
    def get_default_settings(self) -> typing.Optional[MiracastReceiverSettings]: ...
    def get_status(self) -> typing.Optional[MiracastReceiverStatus]: ...
    def get_status_async(self) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverStatus]: ...
    def remove_known_transmitter(self, transmitter: typing.Optional[MiracastTransmitter], /) -> None: ...
    def add_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class MiracastReceiverApplySettingsResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverApplySettingsResult: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def status(self) -> MiracastReceiverApplySettingsStatus: ...

@typing.final
class MiracastReceiverConnection(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverConnection: ...
    def close(self) -> None: ...
    @typing.overload
    def disconnect(self, reason: MiracastReceiverDisconnectReason, /) -> None: ...
    @typing.overload
    def disconnect(self, reason: MiracastReceiverDisconnectReason, message: str, /) -> None: ...
    def pause(self) -> None: ...
    def pause_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def resume(self) -> None: ...
    def resume_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def cursor_image_channel(self) -> typing.Optional[MiracastReceiverCursorImageChannel]: ...
    @_property
    def input_devices(self) -> typing.Optional[MiracastReceiverInputDevices]: ...
    @_property
    def stream_control(self) -> typing.Optional[MiracastReceiverStreamControl]: ...
    @_property
    def transmitter(self) -> typing.Optional[MiracastTransmitter]: ...

@typing.final
class MiracastReceiverConnectionCreatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverConnectionCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def connection(self) -> typing.Optional[MiracastReceiverConnection]: ...
    @_property
    def pin(self) -> str: ...

@typing.final
class MiracastReceiverCursorImageChannel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverCursorImageChannel: ...
    def add_image_stream_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverCursorImageChannel, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_image_stream_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_position_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverCursorImageChannel, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_position_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def image_stream(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def max_image_size(self) -> winrt.windows.graphics.SizeInt32: ...
    @_property
    def position(self) -> winrt.windows.graphics.PointInt32: ...

@typing.final
class MiracastReceiverCursorImageChannelSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverCursorImageChannelSettings: ...
    @_property
    def max_image_size(self) -> winrt.windows.graphics.SizeInt32: ...
    @max_image_size.setter
    def max_image_size(self, value: winrt.windows.graphics.SizeInt32) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...

@typing.final
class MiracastReceiverDisconnectedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverDisconnectedEventArgs: ...
    @_property
    def connection(self) -> typing.Optional[MiracastReceiverConnection]: ...

@typing.final
class MiracastReceiverGameControllerDevice(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverGameControllerDevice: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverGameControllerDevice, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def transmit_input(self) -> bool: ...
    @transmit_input.setter
    def transmit_input(self, value: bool) -> None: ...
    @_property
    def mode(self) -> MiracastReceiverGameControllerDeviceUsageMode: ...
    @mode.setter
    def mode(self, value: MiracastReceiverGameControllerDeviceUsageMode) -> None: ...
    @_property
    def is_requested_by_transmitter(self) -> bool: ...
    @_property
    def is_transmitting_input(self) -> bool: ...

@typing.final
class MiracastReceiverInputDevices(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverInputDevices: ...
    @_property
    def game_controller(self) -> typing.Optional[MiracastReceiverGameControllerDevice]: ...
    @_property
    def keyboard(self) -> typing.Optional[MiracastReceiverKeyboardDevice]: ...

@typing.final
class MiracastReceiverKeyboardDevice(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverKeyboardDevice: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverKeyboardDevice, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def transmit_input(self) -> bool: ...
    @transmit_input.setter
    def transmit_input(self, value: bool) -> None: ...
    @_property
    def is_requested_by_transmitter(self) -> bool: ...
    @_property
    def is_transmitting_input(self) -> bool: ...

@typing.final
class MiracastReceiverMediaSourceCreatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverMediaSourceCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def connection(self) -> typing.Optional[MiracastReceiverConnection]: ...
    @_property
    def cursor_image_channel_settings(self) -> typing.Optional[MiracastReceiverCursorImageChannelSettings]: ...
    @_property
    def media_source(self) -> typing.Optional[winrt.windows.media.core.MediaSource]: ...

@typing.final
class MiracastReceiverSession(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverSession: ...
    def close(self) -> None: ...
    def start(self) -> typing.Optional[MiracastReceiverSessionStartResult]: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverSessionStartResult]: ...
    def add_connection_created(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverSession, MiracastReceiverConnectionCreatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_connection_created(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_disconnected(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverSession, MiracastReceiverDisconnectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_media_source_created(self, handler: winrt.windows.foundation.TypedEventHandler[MiracastReceiverSession, MiracastReceiverMediaSourceCreatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_media_source_created(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def max_simultaneous_connections(self) -> winrt.system.Int32: ...
    @max_simultaneous_connections.setter
    def max_simultaneous_connections(self, value: winrt.system.Int32) -> None: ...
    @_property
    def allow_connection_takeover(self) -> bool: ...
    @allow_connection_takeover.setter
    def allow_connection_takeover(self, value: bool) -> None: ...

@typing.final
class MiracastReceiverSessionStartResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverSessionStartResult: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def status(self) -> MiracastReceiverSessionStartStatus: ...

@typing.final
class MiracastReceiverSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverSettings: ...
    @_property
    def require_authorization_from_known_transmitters(self) -> bool: ...
    @require_authorization_from_known_transmitters.setter
    def require_authorization_from_known_transmitters(self, value: bool) -> None: ...
    @_property
    def model_number(self) -> str: ...
    @model_number.setter
    def model_number(self, value: str) -> None: ...
    @_property
    def model_name(self) -> str: ...
    @model_name.setter
    def model_name(self, value: str) -> None: ...
    @_property
    def friendly_name(self) -> str: ...
    @friendly_name.setter
    def friendly_name(self, value: str) -> None: ...
    @_property
    def authorization_method(self) -> MiracastReceiverAuthorizationMethod: ...
    @authorization_method.setter
    def authorization_method(self, value: MiracastReceiverAuthorizationMethod) -> None: ...

@typing.final
class MiracastReceiverStatus(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverStatus: ...
    @_property
    def is_connection_takeover_supported(self) -> bool: ...
    @_property
    def known_transmitters(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[MiracastTransmitter]]: ...
    @_property
    def listening_status(self) -> MiracastReceiverListeningStatus: ...
    @_property
    def max_simultaneous_connections(self) -> winrt.system.Int32: ...
    @_property
    def wi_fi_status(self) -> MiracastReceiverWiFiStatus: ...

@typing.final
class MiracastReceiverStreamControl(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverStreamControl: ...
    def get_video_stream_settings(self) -> typing.Optional[MiracastReceiverVideoStreamSettings]: ...
    def get_video_stream_settings_async(self) -> winrt.windows.foundation.IAsyncOperation[MiracastReceiverVideoStreamSettings]: ...
    def suggest_video_stream_settings(self, settings: typing.Optional[MiracastReceiverVideoStreamSettings], /) -> None: ...
    def suggest_video_stream_settings_async(self, settings: typing.Optional[MiracastReceiverVideoStreamSettings], /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def mute_audio(self) -> bool: ...
    @mute_audio.setter
    def mute_audio(self, value: bool) -> None: ...

@typing.final
class MiracastReceiverVideoStreamSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastReceiverVideoStreamSettings: ...
    @_property
    def size(self) -> winrt.windows.graphics.SizeInt32: ...
    @size.setter
    def size(self, value: winrt.windows.graphics.SizeInt32) -> None: ...
    @_property
    def bitrate(self) -> winrt.system.Int32: ...
    @bitrate.setter
    def bitrate(self, value: winrt.system.Int32) -> None: ...

@typing.final
class MiracastTransmitter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MiracastTransmitter: ...
    def get_connections(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[MiracastReceiverConnection]]: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def authorization_status(self) -> MiracastTransmitterAuthorizationStatus: ...
    @authorization_status.setter
    def authorization_status(self, value: MiracastTransmitterAuthorizationStatus) -> None: ...
    @_property
    def last_connection_time(self) -> datetime.datetime: ...
    @_property
    def mac_address(self) -> str: ...

