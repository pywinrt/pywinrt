// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Perception.Spatial.Preview.h"


namespace py::cpp::Windows::Perception::Spatial::Preview
{
    // ----- SpatialGraphInteropFrameOfReferencePreview class --------------------

    static PyObject* _new_SpatialGraphInteropFrameOfReferencePreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview>::type_name);
        return nullptr;
    }

    static void _dealloc_SpatialGraphInteropFrameOfReferencePreview(py::wrapper::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialGraphInteropFrameOfReferencePreview_get_CoordinateSystem(py::wrapper::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview", L"CoordinateSystem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialGraphInteropFrameOfReferencePreview_get_CoordinateSystemToNodeTransform(py::wrapper::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview", L"CoordinateSystemToNodeTransform"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CoordinateSystemToNodeTransform());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialGraphInteropFrameOfReferencePreview_get_NodeId(py::wrapper::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview", L"NodeId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NodeId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialGraphInteropFrameOfReferencePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialGraphInteropFrameOfReferencePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialGraphInteropFrameOfReferencePreview[] = {
        { "_assign_array_", _assign_array_SpatialGraphInteropFrameOfReferencePreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialGraphInteropFrameOfReferencePreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialGraphInteropFrameOfReferencePreview[] = {
        { "coordinate_system", reinterpret_cast<getter>(SpatialGraphInteropFrameOfReferencePreview_get_CoordinateSystem), nullptr, nullptr, nullptr },
        { "coordinate_system_to_node_transform", reinterpret_cast<getter>(SpatialGraphInteropFrameOfReferencePreview_get_CoordinateSystemToNodeTransform), nullptr, nullptr, nullptr },
        { "node_id", reinterpret_cast<getter>(SpatialGraphInteropFrameOfReferencePreview_get_NodeId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SpatialGraphInteropFrameOfReferencePreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialGraphInteropFrameOfReferencePreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialGraphInteropFrameOfReferencePreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialGraphInteropFrameOfReferencePreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialGraphInteropFrameOfReferencePreview) },
        { },
    };

    static PyType_Spec type_spec_SpatialGraphInteropFrameOfReferencePreview =
    {
        "winrt._winrt_windows_perception_spatial_preview.SpatialGraphInteropFrameOfReferencePreview",
        sizeof(py::wrapper::Windows::Perception::Spatial::Preview::SpatialGraphInteropFrameOfReferencePreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialGraphInteropFrameOfReferencePreview
    };

    // ----- SpatialGraphInteropPreview class --------------------

    static PyObject* _new_SpatialGraphInteropPreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview>::type_name);
        return nullptr;
    }

    static PyObject* SpatialGraphInteropPreview_CreateCoordinateSystemForNode(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"CreateCoordinateSystemForNode", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::CreateCoordinateSystemForNode(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"CreateCoordinateSystemForNode", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::CreateCoordinateSystemForNode(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"CreateCoordinateSystemForNode", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::CreateCoordinateSystemForNode(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialGraphInteropPreview_CreateLocatorForNode(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"CreateLocatorForNode", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::CreateLocatorForNode(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialGraphInteropPreview_TryCreateFrameOfReference(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"TryCreateFrameOfReference", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::TryCreateFrameOfReference(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"TryCreateFrameOfReference", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::TryCreateFrameOfReference(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview", L"TryCreateFrameOfReference", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                return py::convert(winrt::Windows::Perception::Spatial::Preview::SpatialGraphInteropPreview::TryCreateFrameOfReference(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialGraphInteropPreview[] = {
        { }
    };

    static PyGetSetDef _getset_SpatialGraphInteropPreview[] = {
        { }
    };

    static PyType_Slot _type_slots_SpatialGraphInteropPreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialGraphInteropPreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialGraphInteropPreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialGraphInteropPreview) },
        { },
    };

    static PyType_Spec type_spec_SpatialGraphInteropPreview =
    {
        "winrt._winrt_windows_perception_spatial_preview.SpatialGraphInteropPreview",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialGraphInteropPreview
    };

    static PyGetSetDef getset_SpatialGraphInteropPreview_Static[] = {
        { }
    };

    static PyMethodDef methods_SpatialGraphInteropPreview_Static[] = {
        { "create_coordinate_system_for_node", reinterpret_cast<PyCFunction>(SpatialGraphInteropPreview_CreateCoordinateSystemForNode), METH_VARARGS, nullptr },
        { "create_locator_for_node", reinterpret_cast<PyCFunction>(SpatialGraphInteropPreview_CreateLocatorForNode), METH_VARARGS, nullptr },
        { "try_create_frame_of_reference", reinterpret_cast<PyCFunction>(SpatialGraphInteropPreview_TryCreateFrameOfReference), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_SpatialGraphInteropPreview_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SpatialGraphInteropPreview_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SpatialGraphInteropPreview_Static) },
        { }
    };

    static PyType_Spec type_spec_SpatialGraphInteropPreview_Static =
    {
        "winrt._winrt_windows_perception_spatial_preview.SpatialGraphInteropPreview_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SpatialGraphInteropPreview_Static
    };

    // ----- Windows.Perception.Spatial.Preview Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Perception::Spatial::Preview");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_perception_spatial_preview",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Perception::Spatial::Preview

PyMODINIT_FUNC PyInit__winrt_windows_perception_spatial_preview(void) noexcept
{
    using namespace py::cpp::Windows::Perception::Spatial::Preview;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialGraphInteropFrameOfReferencePreview, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_SpatialGraphInteropPreview_Static{PyType_FromSpec(&type_spec_SpatialGraphInteropPreview_Static)};
    if (!type_SpatialGraphInteropPreview_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialGraphInteropPreview, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SpatialGraphInteropPreview_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
