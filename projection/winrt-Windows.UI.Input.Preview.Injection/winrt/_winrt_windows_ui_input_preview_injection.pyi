# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections
import winrt.windows.gaming.input

from winrt.windows.ui.input.preview.injection import InjectedInputButtonChangeKind, InjectedInputKeyOptions, InjectedInputMouseOptions, InjectedInputPenButtons, InjectedInputPenParameters, InjectedInputPointerOptions, InjectedInputShortcut, InjectedInputTouchParameters, InjectedInputVisualizationMode

Self = typing.TypeVar('Self')

@typing.final
class InjectedInputPoint:
    position_x: winrt.system.Int32
    position_y: winrt.system.Int32
    def __init__(self, position_x: winrt.system.Int32, position_y: winrt.system.Int32) -> None: ...

@typing.final
class InjectedInputPointerInfo:
    pointer_id: winrt.system.UInt32
    pointer_options: InjectedInputPointerOptions
    pixel_location: InjectedInputPoint
    time_offset_in_milliseconds: winrt.system.UInt32
    performance_count: winrt.system.UInt64
    def __init__(self, pointer_id: winrt.system.UInt32, pointer_options: InjectedInputPointerOptions, pixel_location: InjectedInputPoint, time_offset_in_milliseconds: winrt.system.UInt32, performance_count: winrt.system.UInt64) -> None: ...

@typing.final
class InjectedInputRectangle:
    left: winrt.system.Int32
    top: winrt.system.Int32
    bottom: winrt.system.Int32
    right: winrt.system.Int32
    def __init__(self, left: winrt.system.Int32, top: winrt.system.Int32, bottom: winrt.system.Int32, right: winrt.system.Int32) -> None: ...

@typing.final
class InjectedInputGamepadInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InjectedInputGamepadInfo: ...
    @typing.overload
    def __new__(cls: typing.Type[InjectedInputGamepadInfo], reading: winrt.windows.gaming.input.GamepadReading) -> InjectedInputGamepadInfo:...
    @typing.overload
    def __new__(cls: typing.Type[InjectedInputGamepadInfo]) -> InjectedInputGamepadInfo:...
    @_property
    def right_trigger(self) -> winrt.system.Double: ...
    @right_trigger.setter
    def right_trigger(self, value: winrt.system.Double) -> None: ...
    @_property
    def right_thumbstick_y(self) -> winrt.system.Double: ...
    @right_thumbstick_y.setter
    def right_thumbstick_y(self, value: winrt.system.Double) -> None: ...
    @_property
    def right_thumbstick_x(self) -> winrt.system.Double: ...
    @right_thumbstick_x.setter
    def right_thumbstick_x(self, value: winrt.system.Double) -> None: ...
    @_property
    def left_trigger(self) -> winrt.system.Double: ...
    @left_trigger.setter
    def left_trigger(self, value: winrt.system.Double) -> None: ...
    @_property
    def left_thumbstick_y(self) -> winrt.system.Double: ...
    @left_thumbstick_y.setter
    def left_thumbstick_y(self, value: winrt.system.Double) -> None: ...
    @_property
    def left_thumbstick_x(self) -> winrt.system.Double: ...
    @left_thumbstick_x.setter
    def left_thumbstick_x(self, value: winrt.system.Double) -> None: ...
    @_property
    def buttons(self) -> winrt.windows.gaming.input.GamepadButtons: ...
    @buttons.setter
    def buttons(self, value: winrt.windows.gaming.input.GamepadButtons) -> None: ...

@typing.final
class InjectedInputKeyboardInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InjectedInputKeyboardInfo: ...
    def __new__(cls: typing.Type[InjectedInputKeyboardInfo]) -> InjectedInputKeyboardInfo:...
    @_property
    def virtual_key(self) -> winrt.system.UInt16: ...
    @virtual_key.setter
    def virtual_key(self, value: winrt.system.UInt16) -> None: ...
    @_property
    def scan_code(self) -> winrt.system.UInt16: ...
    @scan_code.setter
    def scan_code(self, value: winrt.system.UInt16) -> None: ...
    @_property
    def key_options(self) -> InjectedInputKeyOptions: ...
    @key_options.setter
    def key_options(self, value: InjectedInputKeyOptions) -> None: ...

@typing.final
class InjectedInputMouseInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InjectedInputMouseInfo: ...
    def __new__(cls: typing.Type[InjectedInputMouseInfo]) -> InjectedInputMouseInfo:...
    @_property
    def time_offset_in_milliseconds(self) -> winrt.system.UInt32: ...
    @time_offset_in_milliseconds.setter
    def time_offset_in_milliseconds(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def mouse_options(self) -> InjectedInputMouseOptions: ...
    @mouse_options.setter
    def mouse_options(self, value: InjectedInputMouseOptions) -> None: ...
    @_property
    def mouse_data(self) -> winrt.system.UInt32: ...
    @mouse_data.setter
    def mouse_data(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def delta_y(self) -> winrt.system.Int32: ...
    @delta_y.setter
    def delta_y(self, value: winrt.system.Int32) -> None: ...
    @_property
    def delta_x(self) -> winrt.system.Int32: ...
    @delta_x.setter
    def delta_x(self, value: winrt.system.Int32) -> None: ...

@typing.final
class InjectedInputPenInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InjectedInputPenInfo: ...
    def __new__(cls: typing.Type[InjectedInputPenInfo]) -> InjectedInputPenInfo:...
    @_property
    def tilt_y(self) -> winrt.system.Int32: ...
    @tilt_y.setter
    def tilt_y(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tilt_x(self) -> winrt.system.Int32: ...
    @tilt_x.setter
    def tilt_x(self, value: winrt.system.Int32) -> None: ...
    @_property
    def rotation(self) -> winrt.system.Double: ...
    @rotation.setter
    def rotation(self, value: winrt.system.Double) -> None: ...
    @_property
    def pressure(self) -> winrt.system.Double: ...
    @pressure.setter
    def pressure(self, value: winrt.system.Double) -> None: ...
    @_property
    def pointer_info(self) -> InjectedInputPointerInfo: ...
    @pointer_info.setter
    def pointer_info(self, value: InjectedInputPointerInfo) -> None: ...
    @_property
    def pen_parameters(self) -> InjectedInputPenParameters: ...
    @pen_parameters.setter
    def pen_parameters(self, value: InjectedInputPenParameters) -> None: ...
    @_property
    def pen_buttons(self) -> InjectedInputPenButtons: ...
    @pen_buttons.setter
    def pen_buttons(self, value: InjectedInputPenButtons) -> None: ...

@typing.final
class InjectedInputTouchInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InjectedInputTouchInfo: ...
    def __new__(cls: typing.Type[InjectedInputTouchInfo]) -> InjectedInputTouchInfo:...
    @_property
    def touch_parameters(self) -> InjectedInputTouchParameters: ...
    @touch_parameters.setter
    def touch_parameters(self, value: InjectedInputTouchParameters) -> None: ...
    @_property
    def pressure(self) -> winrt.system.Double: ...
    @pressure.setter
    def pressure(self, value: winrt.system.Double) -> None: ...
    @_property
    def pointer_info(self) -> InjectedInputPointerInfo: ...
    @pointer_info.setter
    def pointer_info(self, value: InjectedInputPointerInfo) -> None: ...
    @_property
    def orientation(self) -> winrt.system.Int32: ...
    @orientation.setter
    def orientation(self, value: winrt.system.Int32) -> None: ...
    @_property
    def contact(self) -> InjectedInputRectangle: ...
    @contact.setter
    def contact(self, value: InjectedInputRectangle) -> None: ...

@typing.final
class InputInjector_Static(type):
    def try_create(cls) -> typing.Optional[InputInjector]: ...
    def try_create_for_app_broadcast_only(cls) -> typing.Optional[InputInjector]: ...

@typing.final
class InputInjector(winrt.system.Object, metaclass=InputInjector_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InputInjector: ...
    def initialize_gamepad_injection(self) -> None: ...
    def initialize_pen_injection(self, visual_mode: InjectedInputVisualizationMode, /) -> None: ...
    def initialize_touch_injection(self, visual_mode: InjectedInputVisualizationMode, /) -> None: ...
    def inject_gamepad_input(self, input: typing.Optional[InjectedInputGamepadInfo], /) -> None: ...
    def inject_keyboard_input(self, input: typing.Iterable[InjectedInputKeyboardInfo], /) -> None: ...
    def inject_mouse_input(self, input: typing.Iterable[InjectedInputMouseInfo], /) -> None: ...
    def inject_pen_input(self, input: typing.Optional[InjectedInputPenInfo], /) -> None: ...
    def inject_shortcut(self, shortcut: InjectedInputShortcut, /) -> None: ...
    def inject_touch_input(self, input: typing.Iterable[InjectedInputTouchInfo], /) -> None: ...
    def uninitialize_gamepad_injection(self) -> None: ...
    def uninitialize_pen_injection(self) -> None: ...
    def uninitialize_touch_injection(self) -> None: ...

