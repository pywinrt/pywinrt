// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.System.Diagnostics.Telemetry.h"


namespace py::cpp::Windows::System::Diagnostics::Telemetry
{
    // ----- PlatformTelemetryClient class --------------------

    static PyObject* _new_PlatformTelemetryClient(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient>::type_name);
        return nullptr;
    }

    static PyObject* PlatformTelemetryClient_Register(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryClient", L"Register", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient::Register(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryClient", L"Register", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>(args, 1);

                return py::convert(winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient::Register(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryClient[] = {
        { }
    };

    static PyGetSetDef _getset_PlatformTelemetryClient[] = {
        { }
    };

    static PyType_Slot _type_slots_PlatformTelemetryClient[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformTelemetryClient) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformTelemetryClient) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformTelemetryClient) },
        { },
    };

    static PyType_Spec type_spec_PlatformTelemetryClient =
    {
        "winrt._winrt_windows_system_diagnostics_telemetry.PlatformTelemetryClient",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryClient
    };

    static PyGetSetDef getset_PlatformTelemetryClient_Static[] = {
        { }
    };

    static PyMethodDef methods_PlatformTelemetryClient_Static[] = {
        { "register", reinterpret_cast<PyCFunction>(PlatformTelemetryClient_Register), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_PlatformTelemetryClient_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PlatformTelemetryClient_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PlatformTelemetryClient_Static) },
        { }
    };

    static PyType_Spec type_spec_PlatformTelemetryClient_Static =
    {
        "winrt._winrt_windows_system_diagnostics_telemetry.PlatformTelemetryClient_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PlatformTelemetryClient_Static
    };

    // ----- PlatformTelemetryRegistrationResult class --------------------

    static PyObject* _new_PlatformTelemetryRegistrationResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>::type_name);
        return nullptr;
    }

    static void _dealloc_PlatformTelemetryRegistrationResult(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlatformTelemetryRegistrationResult_get_Status(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PlatformTelemetryRegistrationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlatformTelemetryRegistrationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryRegistrationResult[] = {
        { "_assign_array_", _assign_array_PlatformTelemetryRegistrationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlatformTelemetryRegistrationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlatformTelemetryRegistrationResult[] = {
        { "status", reinterpret_cast<getter>(PlatformTelemetryRegistrationResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlatformTelemetryRegistrationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformTelemetryRegistrationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlatformTelemetryRegistrationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformTelemetryRegistrationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformTelemetryRegistrationResult) },
        { },
    };

    static PyType_Spec type_spec_PlatformTelemetryRegistrationResult =
    {
        "winrt._winrt_windows_system_diagnostics_telemetry.PlatformTelemetryRegistrationResult",
        sizeof(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryRegistrationResult
    };

    // ----- PlatformTelemetryRegistrationSettings class --------------------

    static PyObject* _new_PlatformTelemetryRegistrationSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PlatformTelemetryRegistrationSettings(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlatformTelemetryRegistrationSettings_get_UploadQuotaSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings", L"UploadQuotaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UploadQuotaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlatformTelemetryRegistrationSettings_put_UploadQuotaSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings", L"UploadQuotaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.UploadQuotaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PlatformTelemetryRegistrationSettings_get_StorageSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings", L"StorageSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StorageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlatformTelemetryRegistrationSettings_put_StorageSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings", L"StorageSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.StorageSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_PlatformTelemetryRegistrationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlatformTelemetryRegistrationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryRegistrationSettings[] = {
        { "_assign_array_", _assign_array_PlatformTelemetryRegistrationSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlatformTelemetryRegistrationSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlatformTelemetryRegistrationSettings[] = {
        { "upload_quota_size", reinterpret_cast<getter>(PlatformTelemetryRegistrationSettings_get_UploadQuotaSize), reinterpret_cast<setter>(PlatformTelemetryRegistrationSettings_put_UploadQuotaSize), nullptr, nullptr },
        { "storage_size", reinterpret_cast<getter>(PlatformTelemetryRegistrationSettings_get_StorageSize), reinterpret_cast<setter>(PlatformTelemetryRegistrationSettings_put_StorageSize), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlatformTelemetryRegistrationSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlatformTelemetryRegistrationSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlatformTelemetryRegistrationSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlatformTelemetryRegistrationSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlatformTelemetryRegistrationSettings) },
        { },
    };

    static PyType_Spec type_spec_PlatformTelemetryRegistrationSettings =
    {
        "winrt._winrt_windows_system_diagnostics_telemetry.PlatformTelemetryRegistrationSettings",
        sizeof(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryRegistrationSettings
    };

    // ----- Windows.System.Diagnostics.Telemetry Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::System::Diagnostics::Telemetry");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_system_diagnostics_telemetry",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::System::Diagnostics::Telemetry

PyMODINIT_FUNC PyInit__winrt_windows_system_diagnostics_telemetry(void) noexcept
{
    using namespace py::cpp::Windows::System::Diagnostics::Telemetry;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_PlatformTelemetryClient_Static{PyType_FromSpec(&type_spec_PlatformTelemetryClient_Static)};
    if (!type_PlatformTelemetryClient_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PlatformTelemetryClient, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PlatformTelemetryClient_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PlatformTelemetryRegistrationResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PlatformTelemetryRegistrationSettings, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
