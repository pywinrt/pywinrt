// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Devices.Geolocation.Geofencing.h"


namespace py::cpp::Windows::Devices::Geolocation::Geofencing
{
    // ----- Geofence class --------------------

    static PyObject* _new_Geofence(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::IGeoshape>(args, 1);

                winrt::Windows::Devices::Geolocation::Geofencing::Geofence instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::IGeoshape>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);

                winrt::Windows::Devices::Geolocation::Geofencing::Geofence instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::IGeoshape>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 4);

                winrt::Windows::Devices::Geolocation::Geofencing::Geofence instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 7)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::IGeoshape>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 5);
                auto param6 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 6);

                winrt::Windows::Devices::Geolocation::Geofencing::Geofence instance{ param0, param1, param2, param3, param4, param5, param6 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Geofence(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* Geofence_get_Duration(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_DwellTime(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"DwellTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DwellTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_Geoshape(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"Geoshape"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Geoshape());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_Id(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_MonitoredStates(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"MonitoredStates"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MonitoredStates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_SingleUse(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"SingleUse"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SingleUse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Geofence_get_StartTime(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.Geofence", L"StartTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Geofence(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Geolocation::Geofencing::Geofence>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_Geofence(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Geolocation::Geofencing::Geofence>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Geofence[] = {
        { "_assign_array_", _assign_array_Geofence, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Geofence), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_Geofence[] = {
        { "duration", reinterpret_cast<getter>(Geofence_get_Duration), nullptr, nullptr, nullptr },
        { "dwell_time", reinterpret_cast<getter>(Geofence_get_DwellTime), nullptr, nullptr, nullptr },
        { "geoshape", reinterpret_cast<getter>(Geofence_get_Geoshape), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(Geofence_get_Id), nullptr, nullptr, nullptr },
        { "monitored_states", reinterpret_cast<getter>(Geofence_get_MonitoredStates), nullptr, nullptr, nullptr },
        { "single_use", reinterpret_cast<getter>(Geofence_get_SingleUse), nullptr, nullptr, nullptr },
        { "start_time", reinterpret_cast<getter>(Geofence_get_StartTime), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_Geofence[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_Geofence) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Geofence) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Geofence) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Geofence) },
        { },
    };

    static PyType_Spec type_spec_Geofence =
    {
        "winrt._winrt_windows_devices_geolocation_geofencing.Geofence",
        sizeof(py::wrapper::Windows::Devices::Geolocation::Geofencing::Geofence),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Geofence
    };

    // ----- GeofenceMonitor class --------------------

    static PyObject* _new_GeofenceMonitor(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>::type_name);
        return nullptr;
    }

    static void _dealloc_GeofenceMonitor(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GeofenceMonitor_ReadReports(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"ReadReports", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.ReadReports());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_get_Geofences(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"Geofences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Geofences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_get_LastKnownGeoposition(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"LastKnownGeoposition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LastKnownGeoposition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_get_Status(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_add_GeofenceStateChanged(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"GeofenceStateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.GeofenceStateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_remove_GeofenceStateChanged(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"GeofenceStateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GeofenceStateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_add_StatusChanged(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"StatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceMonitor_remove_StatusChanged(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor", L"StatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GeofenceMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GeofenceMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GeofenceMonitor[] = {
        { "read_reports", reinterpret_cast<PyCFunction>(GeofenceMonitor_ReadReports), METH_VARARGS, nullptr },
        { "add_geofence_state_changed", reinterpret_cast<PyCFunction>(GeofenceMonitor_add_GeofenceStateChanged), METH_O, nullptr },
        { "remove_geofence_state_changed", reinterpret_cast<PyCFunction>(GeofenceMonitor_remove_GeofenceStateChanged), METH_O, nullptr },
        { "add_status_changed", reinterpret_cast<PyCFunction>(GeofenceMonitor_add_StatusChanged), METH_O, nullptr },
        { "remove_status_changed", reinterpret_cast<PyCFunction>(GeofenceMonitor_remove_StatusChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_GeofenceMonitor, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GeofenceMonitor), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GeofenceMonitor[] = {
        { "geofences", reinterpret_cast<getter>(GeofenceMonitor_get_Geofences), nullptr, nullptr, nullptr },
        { "last_known_geoposition", reinterpret_cast<getter>(GeofenceMonitor_get_LastKnownGeoposition), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(GeofenceMonitor_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GeofenceMonitor[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GeofenceMonitor) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GeofenceMonitor) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GeofenceMonitor) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GeofenceMonitor) },
        { },
    };

    static PyType_Spec type_spec_GeofenceMonitor =
    {
        "winrt._winrt_windows_devices_geolocation_geofencing.GeofenceMonitor",
        sizeof(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GeofenceMonitor
    };

    static PyGetSetDef getset_GeofenceMonitor_Static[] = {
        { "current", reinterpret_cast<getter>(GeofenceMonitor_get_Current), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_GeofenceMonitor_Static[] = {
        { }
    };

    static PyType_Slot type_slots_GeofenceMonitor_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_GeofenceMonitor_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_GeofenceMonitor_Static) },
        { }
    };

    static PyType_Spec type_spec_GeofenceMonitor_Static =
    {
        "winrt._winrt_windows_devices_geolocation_geofencing.GeofenceMonitor_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_GeofenceMonitor_Static
    };

    // ----- GeofenceStateChangeReport class --------------------

    static PyObject* _new_GeofenceStateChangeReport(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>::type_name);
        return nullptr;
    }

    static void _dealloc_GeofenceStateChangeReport(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GeofenceStateChangeReport_get_Geofence(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport", L"Geofence"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Geofence());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceStateChangeReport_get_Geoposition(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport", L"Geoposition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Geoposition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceStateChangeReport_get_NewState(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport", L"NewState"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NewState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeofenceStateChangeReport_get_RemovalReason(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport", L"RemovalReason"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemovalReason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GeofenceStateChangeReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GeofenceStateChangeReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GeofenceStateChangeReport[] = {
        { "_assign_array_", _assign_array_GeofenceStateChangeReport, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GeofenceStateChangeReport), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GeofenceStateChangeReport[] = {
        { "geofence", reinterpret_cast<getter>(GeofenceStateChangeReport_get_Geofence), nullptr, nullptr, nullptr },
        { "geoposition", reinterpret_cast<getter>(GeofenceStateChangeReport_get_Geoposition), nullptr, nullptr, nullptr },
        { "new_state", reinterpret_cast<getter>(GeofenceStateChangeReport_get_NewState), nullptr, nullptr, nullptr },
        { "removal_reason", reinterpret_cast<getter>(GeofenceStateChangeReport_get_RemovalReason), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GeofenceStateChangeReport[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GeofenceStateChangeReport) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GeofenceStateChangeReport) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GeofenceStateChangeReport) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GeofenceStateChangeReport) },
        { },
    };

    static PyType_Spec type_spec_GeofenceStateChangeReport =
    {
        "winrt._winrt_windows_devices_geolocation_geofencing.GeofenceStateChangeReport",
        sizeof(py::wrapper::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GeofenceStateChangeReport
    };

    // ----- Windows.Devices.Geolocation.Geofencing Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices::Geolocation::Geofencing");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_devices_geolocation_geofencing",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Devices::Geolocation::Geofencing

PyMODINIT_FUNC PyInit__winrt_windows_devices_geolocation_geofencing(void) noexcept
{
    using namespace py::cpp::Windows::Devices::Geolocation::Geofencing;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_Geofence, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_GeofenceMonitor_Static{PyType_FromSpec(&type_spec_GeofenceMonitor_Static)};
    if (!type_GeofenceMonitor_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GeofenceMonitor, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_GeofenceMonitor_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GeofenceStateChangeReport, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
