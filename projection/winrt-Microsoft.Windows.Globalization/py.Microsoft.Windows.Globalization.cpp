// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.3.0

#include "py.Microsoft.Windows.Globalization.h"

namespace py::cpp::Microsoft::Windows::Globalization
{
    // ----- ApplicationLanguages class --------------------

    static PyObject* _new_ApplicationLanguages(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Globalization::ApplicationLanguages>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Globalization::ApplicationLanguages>::type_name);
        return nullptr;
    }

    static PyObject* ApplicationLanguages_get_PrimaryLanguageOverride(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Globalization.ApplicationLanguages", L"PrimaryLanguageOverride");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(winrt::Microsoft::Windows::Globalization::ApplicationLanguages::PrimaryLanguageOverride());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationLanguages_put_PrimaryLanguageOverride(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Globalization.ApplicationLanguages", L"PrimaryLanguageOverride");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            winrt::Microsoft::Windows::Globalization::ApplicationLanguages::PrimaryLanguageOverride(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationLanguages_get_Languages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Globalization.ApplicationLanguages", L"Languages");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(winrt::Microsoft::Windows::Globalization::ApplicationLanguages::Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationLanguages_get_ManifestLanguages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Globalization.ApplicationLanguages", L"ManifestLanguages");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(winrt::Microsoft::Windows::Globalization::ApplicationLanguages::ManifestLanguages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationLanguages[] = {
        { }
    };

    static PyGetSetDef _getset_ApplicationLanguages[] = {
        { }
    };

    static PyType_Slot _type_slots_ApplicationLanguages[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ApplicationLanguages) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ApplicationLanguages) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ApplicationLanguages) },
        { }
    };

    static PyType_Spec type_spec_ApplicationLanguages = {
        "winrt._winrt_microsoft_windows_globalization.ApplicationLanguages",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationLanguages};

    static PyGetSetDef getset_ApplicationLanguages_Static[] = {
        { "primary_language_override", reinterpret_cast<getter>(ApplicationLanguages_get_PrimaryLanguageOverride), reinterpret_cast<setter>(ApplicationLanguages_put_PrimaryLanguageOverride), nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(ApplicationLanguages_get_Languages), nullptr, nullptr, nullptr },
        { "manifest_languages", reinterpret_cast<getter>(ApplicationLanguages_get_ManifestLanguages), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_ApplicationLanguages_Static[] = {
        { }
    };

    static PyType_Slot type_slots_ApplicationLanguages_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ApplicationLanguages_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ApplicationLanguages_Static) },
        { }
    };

    static PyType_Spec type_spec_ApplicationLanguages_Static =
    {
        "winrt._winrt_microsoft_windows_globalization.ApplicationLanguages_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ApplicationLanguages_Static
    };

    // ----- Microsoft.Windows.Globalization Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.Globalization");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_microsoft_windows_globalization",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::Globalization

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_globalization(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Globalization;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ApplicationLanguages_Static{PyType_FromSpec(&type_spec_ApplicationLanguages_Static)};
    if (!type_ApplicationLanguages_Static)
    {
        return nullptr;
    }

    py::pytype_handle ApplicationLanguages_type{py::register_python_type(module.get(), &type_spec_ApplicationLanguages, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ApplicationLanguages_Static.get()))};
    if (!ApplicationLanguages_type)
    {
        return nullptr;
    }


    return module.detach();
}
