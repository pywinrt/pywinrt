// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Security.Cryptography.h"


namespace py::cpp::Windows::Security::Cryptography
{
    // ----- CryptographicBuffer class --------------------

    static PyObject* _new_CryptographicBuffer(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::Cryptography::CryptographicBuffer>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::Cryptography::CryptographicBuffer>::type_name);
        return nullptr;
    }

    static PyObject* CryptographicBuffer_Compare(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"Compare", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::Compare(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertBinaryToString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"ConvertBinaryToString", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertBinaryToString(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertStringToBinary(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"ConvertStringToBinary", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertStringToBinary(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CopyToByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"CopyToByteArray", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                winrt::com_array<uint8_t> param1 { };

                winrt::Windows::Security::Cryptography::CryptographicBuffer::CopyToByteArray(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CreateFromByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"CreateFromByteArray", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::CreateFromByteArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"DecodeFromBase64String", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"DecodeFromHexString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"EncodeToBase64String", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"EncodeToHexString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandom(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"GenerateRandom", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandomNumber(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.CryptographicBuffer", L"GenerateRandomNumber", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandomNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CryptographicBuffer[] = {
        { }
    };

    static PyGetSetDef _getset_CryptographicBuffer[] = {
        { }
    };

    static PyType_Slot _type_slots_CryptographicBuffer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CryptographicBuffer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CryptographicBuffer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CryptographicBuffer) },
        { },
    };

    static PyType_Spec type_spec_CryptographicBuffer =
    {
        "winrt._winrt_windows_security_cryptography.CryptographicBuffer",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CryptographicBuffer
    };

    static PyGetSetDef getset_CryptographicBuffer_Static[] = {
        { }
    };

    static PyMethodDef methods_CryptographicBuffer_Static[] = {
        { "compare", reinterpret_cast<PyCFunction>(CryptographicBuffer_Compare), METH_VARARGS, nullptr },
        { "convert_binary_to_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_ConvertBinaryToString), METH_VARARGS, nullptr },
        { "convert_string_to_binary", reinterpret_cast<PyCFunction>(CryptographicBuffer_ConvertStringToBinary), METH_VARARGS, nullptr },
        { "copy_to_byte_array", reinterpret_cast<PyCFunction>(CryptographicBuffer_CopyToByteArray), METH_VARARGS, nullptr },
        { "create_from_byte_array", reinterpret_cast<PyCFunction>(CryptographicBuffer_CreateFromByteArray), METH_VARARGS, nullptr },
        { "decode_from_base64_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_DecodeFromBase64String), METH_VARARGS, nullptr },
        { "decode_from_hex_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_DecodeFromHexString), METH_VARARGS, nullptr },
        { "encode_to_base64_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_EncodeToBase64String), METH_VARARGS, nullptr },
        { "encode_to_hex_string", reinterpret_cast<PyCFunction>(CryptographicBuffer_EncodeToHexString), METH_VARARGS, nullptr },
        { "generate_random", reinterpret_cast<PyCFunction>(CryptographicBuffer_GenerateRandom), METH_VARARGS, nullptr },
        { "generate_random_number", reinterpret_cast<PyCFunction>(CryptographicBuffer_GenerateRandomNumber), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CryptographicBuffer_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CryptographicBuffer_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CryptographicBuffer_Static) },
        { }
    };

    static PyType_Spec type_spec_CryptographicBuffer_Static =
    {
        "winrt._winrt_windows_security_cryptography.CryptographicBuffer_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CryptographicBuffer_Static
    };

    // ----- Windows.Security.Cryptography Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Cryptography");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_security_cryptography",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Security::Cryptography

PyMODINIT_FUNC PyInit__winrt_windows_security_cryptography(void) noexcept
{
    using namespace py::cpp::Windows::Security::Cryptography;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_CryptographicBuffer_Static{PyType_FromSpec(&type_spec_CryptographicBuffer_Static)};
    if (!type_CryptographicBuffer_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CryptographicBuffer, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CryptographicBuffer_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
