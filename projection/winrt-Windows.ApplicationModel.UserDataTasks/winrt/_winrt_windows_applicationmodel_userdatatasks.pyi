# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system

from winrt.windows.applicationmodel.userdatatasks import UserDataTaskDaysOfWeek, UserDataTaskDetailsKind, UserDataTaskKind, UserDataTaskListOtherAppReadAccess, UserDataTaskListOtherAppWriteAccess, UserDataTaskListSyncStatus, UserDataTaskPriority, UserDataTaskQueryKind, UserDataTaskQuerySortProperty, UserDataTaskRecurrenceUnit, UserDataTaskRegenerationUnit, UserDataTaskSensitivity, UserDataTaskStoreAccessType, UserDataTaskWeekOfMonth

Self = typing.TypeVar('Self')

@typing.final
class UserDataTask(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTask: ...
    def __new__(cls: typing.Type[UserDataTask]) -> UserDataTask:...
    @_property
    def regeneration_properties(self) -> typing.Optional[UserDataTaskRegenerationProperties]: ...
    @regeneration_properties.setter
    def regeneration_properties(self, value: typing.Optional[UserDataTaskRegenerationProperties]) -> None: ...
    @_property
    def priority(self) -> UserDataTaskPriority: ...
    @priority.setter
    def priority(self, value: UserDataTaskPriority) -> None: ...
    @_property
    def completed_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @completed_date.setter
    def completed_date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def due_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @due_date.setter
    def due_date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def details_kind(self) -> UserDataTaskDetailsKind: ...
    @details_kind.setter
    def details_kind(self, value: UserDataTaskDetailsKind) -> None: ...
    @_property
    def start_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @start_date.setter
    def start_date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def details(self) -> str: ...
    @details.setter
    def details(self, value: str) -> None: ...
    @_property
    def subject(self) -> str: ...
    @subject.setter
    def subject(self, value: str) -> None: ...
    @_property
    def sensitivity(self) -> UserDataTaskSensitivity: ...
    @sensitivity.setter
    def sensitivity(self, value: UserDataTaskSensitivity) -> None: ...
    @_property
    def remote_id(self) -> str: ...
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    @_property
    def reminder(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @reminder.setter
    def reminder(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def recurrence_properties(self) -> typing.Optional[UserDataTaskRecurrenceProperties]: ...
    @recurrence_properties.setter
    def recurrence_properties(self, value: typing.Optional[UserDataTaskRecurrenceProperties]) -> None: ...
    @_property
    def id(self) -> str: ...
    @_property
    def kind(self) -> UserDataTaskKind: ...
    @_property
    def list_id(self) -> str: ...

@typing.final
class UserDataTaskBatch(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskBatch: ...
    @_property
    def tasks(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[UserDataTask]]: ...

@typing.final
class UserDataTaskList(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskList: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_task_async(self, user_data_task_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def get_task_async(self, user_data_task: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataTask]: ...
    @typing.overload
    def get_task_reader(self) -> typing.Optional[UserDataTaskReader]: ...
    @typing.overload
    def get_task_reader(self, options: typing.Optional[UserDataTaskQueryOptions], /) -> typing.Optional[UserDataTaskReader]: ...
    def register_sync_manager_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_task_async(self, user_data_task: typing.Optional[UserDataTask], /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def other_app_write_access(self) -> UserDataTaskListOtherAppWriteAccess: ...
    @other_app_write_access.setter
    def other_app_write_access(self, value: UserDataTaskListOtherAppWriteAccess) -> None: ...
    @_property
    def other_app_read_access(self) -> UserDataTaskListOtherAppReadAccess: ...
    @other_app_read_access.setter
    def other_app_read_access(self, value: UserDataTaskListOtherAppReadAccess) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def id(self) -> str: ...
    @_property
    def limited_write_operations(self) -> typing.Optional[UserDataTaskListLimitedWriteOperations]: ...
    @_property
    def source_display_name(self) -> str: ...
    @_property
    def sync_manager(self) -> typing.Optional[UserDataTaskListSyncManager]: ...
    @_property
    def user_data_account_id(self) -> str: ...

@typing.final
class UserDataTaskListLimitedWriteOperations(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskListLimitedWriteOperations: ...
    def try_complete_task_async(self, user_data_task_id: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def try_create_or_update_task_async(self, user_data_task: typing.Optional[UserDataTask], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_delete_task_async(self, user_data_task_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_skip_occurrence_async(self, user_data_task_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

@typing.final
class UserDataTaskListSyncManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskListSyncManager: ...
    def sync_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_sync_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UserDataTaskListSyncManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_sync_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> UserDataTaskListSyncStatus: ...
    @status.setter
    def status(self, value: UserDataTaskListSyncStatus) -> None: ...
    @_property
    def last_successful_sync_time(self) -> datetime.datetime: ...
    @last_successful_sync_time.setter
    def last_successful_sync_time(self, value: datetime.datetime) -> None: ...
    @_property
    def last_attempted_sync_time(self) -> datetime.datetime: ...
    @last_attempted_sync_time.setter
    def last_attempted_sync_time(self, value: datetime.datetime) -> None: ...

@typing.final
class UserDataTaskManager_Static(type):
    def get_default(cls) -> typing.Optional[UserDataTaskManager]: ...
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[UserDataTaskManager]: ...

@typing.final
class UserDataTaskManager(winrt.system.Object, metaclass=UserDataTaskManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskManager: ...
    def request_store_async(self, access_type: UserDataTaskStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskStore]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class UserDataTaskQueryOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskQueryOptions: ...
    def __new__(cls: typing.Type[UserDataTaskQueryOptions]) -> UserDataTaskQueryOptions:...
    @_property
    def sort_property(self) -> UserDataTaskQuerySortProperty: ...
    @sort_property.setter
    def sort_property(self, value: UserDataTaskQuerySortProperty) -> None: ...
    @_property
    def kind(self) -> UserDataTaskQueryKind: ...
    @kind.setter
    def kind(self, value: UserDataTaskQueryKind) -> None: ...

@typing.final
class UserDataTaskReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskReader: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskBatch]: ...

@typing.final
class UserDataTaskRecurrenceProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskRecurrenceProperties: ...
    def __new__(cls: typing.Type[UserDataTaskRecurrenceProperties]) -> UserDataTaskRecurrenceProperties:...
    @_property
    def week_of_month(self) -> typing.Optional[typing.Optional[UserDataTaskWeekOfMonth]]: ...
    @week_of_month.setter
    def week_of_month(self, value: typing.Optional[typing.Optional[UserDataTaskWeekOfMonth]]) -> None: ...
    @_property
    def until(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @until.setter
    def until(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def unit(self) -> UserDataTaskRecurrenceUnit: ...
    @unit.setter
    def unit(self, value: UserDataTaskRecurrenceUnit) -> None: ...
    @_property
    def occurrences(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @occurrences.setter
    def occurrences(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def month(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @month.setter
    def month(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def interval(self) -> winrt.system.Int32: ...
    @interval.setter
    def interval(self, value: winrt.system.Int32) -> None: ...
    @_property
    def days_of_week(self) -> typing.Optional[typing.Optional[UserDataTaskDaysOfWeek]]: ...
    @days_of_week.setter
    def days_of_week(self, value: typing.Optional[typing.Optional[UserDataTaskDaysOfWeek]]) -> None: ...
    @_property
    def day(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @day.setter
    def day(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...

@typing.final
class UserDataTaskRegenerationProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskRegenerationProperties: ...
    def __new__(cls: typing.Type[UserDataTaskRegenerationProperties]) -> UserDataTaskRegenerationProperties:...
    @_property
    def until(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @until.setter
    def until(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def unit(self) -> UserDataTaskRegenerationUnit: ...
    @unit.setter
    def unit(self, value: UserDataTaskRegenerationUnit) -> None: ...
    @_property
    def occurrences(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @occurrences.setter
    def occurrences(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def interval(self) -> winrt.system.Int32: ...
    @interval.setter
    def interval(self, value: winrt.system.Int32) -> None: ...

@typing.final
class UserDataTaskStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataTaskStore: ...
    @typing.overload
    def create_list_async(self, name: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]: ...
    @typing.overload
    def create_list_async(self, name: str, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]: ...
    def find_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UserDataTaskList]]: ...
    def get_list_async(self, task_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]: ...

