// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.UserDataTasks.h"


namespace py::cpp::Windows::ApplicationModel::UserDataTasks
{
    // ----- UserDataTask class --------------------

    static PyObject* _new_UserDataTask(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTask(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTask_get_RegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RegenerationProperties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RegenerationProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RegenerationProperties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>(arg);

            self->obj.RegenerationProperties(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Priority(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Priority"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Priority());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Priority(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Priority"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskPriority>(arg);

            self->obj.Priority(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_CompletedDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"CompletedDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CompletedDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_CompletedDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"CompletedDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.CompletedDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_DueDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"DueDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DueDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_DueDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"DueDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.DueDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_DetailsKind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"DetailsKind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DetailsKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_DetailsKind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"DetailsKind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskDetailsKind>(arg);

            self->obj.DetailsKind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_StartDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"StartDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StartDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_StartDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"StartDate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.StartDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Details(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Details"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Details());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Details(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Details"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Details(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Subject(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Subject"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Subject(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Subject"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Subject(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Sensitivity(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Sensitivity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Sensitivity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Sensitivity(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Sensitivity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskSensitivity>(arg);

            self->obj.Sensitivity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_RemoteId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemoteId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RemoteId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.RemoteId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Reminder(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Reminder"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Reminder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Reminder(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Reminder"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Reminder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_RecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RecurrenceProperties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RecurrenceProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"RecurrenceProperties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>(arg);

            self->obj.RecurrenceProperties(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Id(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTask_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTask_get_ListId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTask", L"ListId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ListId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTask[] = {
        { "_assign_array_", _assign_array_UserDataTask, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTask), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTask[] = {
        { "regeneration_properties", reinterpret_cast<getter>(UserDataTask_get_RegenerationProperties), reinterpret_cast<setter>(UserDataTask_put_RegenerationProperties), nullptr, nullptr },
        { "priority", reinterpret_cast<getter>(UserDataTask_get_Priority), reinterpret_cast<setter>(UserDataTask_put_Priority), nullptr, nullptr },
        { "completed_date", reinterpret_cast<getter>(UserDataTask_get_CompletedDate), reinterpret_cast<setter>(UserDataTask_put_CompletedDate), nullptr, nullptr },
        { "due_date", reinterpret_cast<getter>(UserDataTask_get_DueDate), reinterpret_cast<setter>(UserDataTask_put_DueDate), nullptr, nullptr },
        { "details_kind", reinterpret_cast<getter>(UserDataTask_get_DetailsKind), reinterpret_cast<setter>(UserDataTask_put_DetailsKind), nullptr, nullptr },
        { "start_date", reinterpret_cast<getter>(UserDataTask_get_StartDate), reinterpret_cast<setter>(UserDataTask_put_StartDate), nullptr, nullptr },
        { "details", reinterpret_cast<getter>(UserDataTask_get_Details), reinterpret_cast<setter>(UserDataTask_put_Details), nullptr, nullptr },
        { "subject", reinterpret_cast<getter>(UserDataTask_get_Subject), reinterpret_cast<setter>(UserDataTask_put_Subject), nullptr, nullptr },
        { "sensitivity", reinterpret_cast<getter>(UserDataTask_get_Sensitivity), reinterpret_cast<setter>(UserDataTask_put_Sensitivity), nullptr, nullptr },
        { "remote_id", reinterpret_cast<getter>(UserDataTask_get_RemoteId), reinterpret_cast<setter>(UserDataTask_put_RemoteId), nullptr, nullptr },
        { "reminder", reinterpret_cast<getter>(UserDataTask_get_Reminder), reinterpret_cast<setter>(UserDataTask_put_Reminder), nullptr, nullptr },
        { "recurrence_properties", reinterpret_cast<getter>(UserDataTask_get_RecurrenceProperties), reinterpret_cast<setter>(UserDataTask_put_RecurrenceProperties), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(UserDataTask_get_Id), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(UserDataTask_get_Kind), nullptr, nullptr, nullptr },
        { "list_id", reinterpret_cast<getter>(UserDataTask_get_ListId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTask[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTask) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTask) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTask) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTask) },
        { },
    };

    static PyType_Spec type_spec_UserDataTask =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTask",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTask
    };

    // ----- UserDataTaskBatch class --------------------

    static PyObject* _new_UserDataTaskBatch(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskBatch(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskBatch_get_Tasks(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskBatch", L"Tasks"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Tasks());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskBatch(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskBatch(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskBatch[] = {
        { "_assign_array_", _assign_array_UserDataTaskBatch, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskBatch), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskBatch[] = {
        { "tasks", reinterpret_cast<getter>(UserDataTaskBatch_get_Tasks), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskBatch[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskBatch) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskBatch) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskBatch) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskBatch) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskBatch =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskBatch",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskBatch
    };

    // ----- UserDataTaskList class --------------------

    static PyObject* _new_UserDataTaskList(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskList(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskList_DeleteAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"DeleteAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.DeleteAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_DeleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"DeleteTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_GetTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"GetTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_GetTaskReader(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"GetTaskReader", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetTaskReader());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"GetTaskReader", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>(args, 0);

                return py::convert(self->obj.GetTaskReader(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_RegisterSyncManagerAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"RegisterSyncManagerAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.RegisterSyncManagerAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_SaveAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"SaveAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_SaveTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"SaveTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>(args, 0);

                return py::convert(self->obj.SaveTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_OtherAppWriteAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"OtherAppWriteAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OtherAppWriteAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_OtherAppWriteAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"OtherAppWriteAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppWriteAccess>(arg);

            self->obj.OtherAppWriteAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"OtherAppReadAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OtherAppReadAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"OtherAppReadAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppReadAccess>(arg);

            self->obj.OtherAppReadAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_Id(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_LimitedWriteOperations(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"LimitedWriteOperations"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LimitedWriteOperations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_SourceDisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"SourceDisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceDisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_SyncManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"SyncManager"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SyncManager());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_UserDataAccountId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskList", L"UserDataAccountId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UserDataAccountId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskList[] = {
        { "delete_async", reinterpret_cast<PyCFunction>(UserDataTaskList_DeleteAsync), METH_VARARGS, nullptr },
        { "delete_task_async", reinterpret_cast<PyCFunction>(UserDataTaskList_DeleteTaskAsync), METH_VARARGS, nullptr },
        { "get_task_async", reinterpret_cast<PyCFunction>(UserDataTaskList_GetTaskAsync), METH_VARARGS, nullptr },
        { "get_task_reader", reinterpret_cast<PyCFunction>(UserDataTaskList_GetTaskReader), METH_VARARGS, nullptr },
        { "register_sync_manager_async", reinterpret_cast<PyCFunction>(UserDataTaskList_RegisterSyncManagerAsync), METH_VARARGS, nullptr },
        { "save_async", reinterpret_cast<PyCFunction>(UserDataTaskList_SaveAsync), METH_VARARGS, nullptr },
        { "save_task_async", reinterpret_cast<PyCFunction>(UserDataTaskList_SaveTaskAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskList[] = {
        { "other_app_write_access", reinterpret_cast<getter>(UserDataTaskList_get_OtherAppWriteAccess), reinterpret_cast<setter>(UserDataTaskList_put_OtherAppWriteAccess), nullptr, nullptr },
        { "other_app_read_access", reinterpret_cast<getter>(UserDataTaskList_get_OtherAppReadAccess), reinterpret_cast<setter>(UserDataTaskList_put_OtherAppReadAccess), nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(UserDataTaskList_get_DisplayName), reinterpret_cast<setter>(UserDataTaskList_put_DisplayName), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(UserDataTaskList_get_Id), nullptr, nullptr, nullptr },
        { "limited_write_operations", reinterpret_cast<getter>(UserDataTaskList_get_LimitedWriteOperations), nullptr, nullptr, nullptr },
        { "source_display_name", reinterpret_cast<getter>(UserDataTaskList_get_SourceDisplayName), nullptr, nullptr, nullptr },
        { "sync_manager", reinterpret_cast<getter>(UserDataTaskList_get_SyncManager), nullptr, nullptr, nullptr },
        { "user_data_account_id", reinterpret_cast<getter>(UserDataTaskList_get_UserDataAccountId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskList) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskList =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskList",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskList
    };

    // ----- UserDataTaskListLimitedWriteOperations class --------------------

    static PyObject* _new_UserDataTaskListLimitedWriteOperations(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskListLimitedWriteOperations(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryCompleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations", L"TryCompleteTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryCompleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryCreateOrUpdateTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations", L"TryCreateOrUpdateTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>(args, 0);

                return py::convert(self->obj.TryCreateOrUpdateTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryDeleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations", L"TryDeleteTaskAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryDeleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TrySkipOccurrenceAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations", L"TrySkipOccurrenceAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TrySkipOccurrenceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskListLimitedWriteOperations(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskListLimitedWriteOperations(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskListLimitedWriteOperations[] = {
        { "try_complete_task_async", reinterpret_cast<PyCFunction>(UserDataTaskListLimitedWriteOperations_TryCompleteTaskAsync), METH_VARARGS, nullptr },
        { "try_create_or_update_task_async", reinterpret_cast<PyCFunction>(UserDataTaskListLimitedWriteOperations_TryCreateOrUpdateTaskAsync), METH_VARARGS, nullptr },
        { "try_delete_task_async", reinterpret_cast<PyCFunction>(UserDataTaskListLimitedWriteOperations_TryDeleteTaskAsync), METH_VARARGS, nullptr },
        { "try_skip_occurrence_async", reinterpret_cast<PyCFunction>(UserDataTaskListLimitedWriteOperations_TrySkipOccurrenceAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskListLimitedWriteOperations, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskListLimitedWriteOperations), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskListLimitedWriteOperations[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskListLimitedWriteOperations[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskListLimitedWriteOperations) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskListLimitedWriteOperations) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskListLimitedWriteOperations) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskListLimitedWriteOperations) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskListLimitedWriteOperations =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskListLimitedWriteOperations",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskListLimitedWriteOperations
    };

    // ----- UserDataTaskListSyncManager class --------------------

    static PyObject* _new_UserDataTaskListSyncManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskListSyncManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskListSyncManager_SyncAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"SyncAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.SyncAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_Status(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_Status(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncStatus>(arg);

            self->obj.Status(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_LastSuccessfulSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"LastSuccessfulSyncTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LastSuccessfulSyncTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_LastSuccessfulSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"LastSuccessfulSyncTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastSuccessfulSyncTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_LastAttemptedSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"LastAttemptedSyncTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LastAttemptedSyncTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_LastAttemptedSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"LastAttemptedSyncTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastAttemptedSyncTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_add_SyncStatusChanged(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"SyncStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.SyncStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListSyncManager_remove_SyncStatusChanged(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager", L"SyncStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SyncStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskListSyncManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskListSyncManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskListSyncManager[] = {
        { "sync_async", reinterpret_cast<PyCFunction>(UserDataTaskListSyncManager_SyncAsync), METH_VARARGS, nullptr },
        { "add_sync_status_changed", reinterpret_cast<PyCFunction>(UserDataTaskListSyncManager_add_SyncStatusChanged), METH_O, nullptr },
        { "remove_sync_status_changed", reinterpret_cast<PyCFunction>(UserDataTaskListSyncManager_remove_SyncStatusChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskListSyncManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskListSyncManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskListSyncManager[] = {
        { "status", reinterpret_cast<getter>(UserDataTaskListSyncManager_get_Status), reinterpret_cast<setter>(UserDataTaskListSyncManager_put_Status), nullptr, nullptr },
        { "last_successful_sync_time", reinterpret_cast<getter>(UserDataTaskListSyncManager_get_LastSuccessfulSyncTime), reinterpret_cast<setter>(UserDataTaskListSyncManager_put_LastSuccessfulSyncTime), nullptr, nullptr },
        { "last_attempted_sync_time", reinterpret_cast<getter>(UserDataTaskListSyncManager_get_LastAttemptedSyncTime), reinterpret_cast<setter>(UserDataTaskListSyncManager_put_LastAttemptedSyncTime), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskListSyncManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskListSyncManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskListSyncManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskListSyncManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskListSyncManager) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskListSyncManager =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskListSyncManager",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskListSyncManager
    };

    // ----- UserDataTaskManager class --------------------

    static PyObject* _new_UserDataTaskManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskManager", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskManager", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_RequestStoreAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskManager", L"RequestStoreAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStoreAccessType>(args, 0);

                return py::convert(self->obj.RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_get_User(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskManager", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskManager[] = {
        { "request_store_async", reinterpret_cast<PyCFunction>(UserDataTaskManager_RequestStoreAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskManager[] = {
        { "user", reinterpret_cast<getter>(UserDataTaskManager_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskManager) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskManager =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskManager",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskManager
    };

    static PyGetSetDef getset_UserDataTaskManager_Static[] = {
        { }
    };

    static PyMethodDef methods_UserDataTaskManager_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(UserDataTaskManager_GetDefault), METH_VARARGS, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(UserDataTaskManager_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_UserDataTaskManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_UserDataTaskManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_UserDataTaskManager_Static) },
        { }
    };

    static PyType_Spec type_spec_UserDataTaskManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_UserDataTaskManager_Static
    };

    // ----- UserDataTaskQueryOptions class --------------------

    static PyObject* _new_UserDataTaskQueryOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskQueryOptions(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskQueryOptions_get_SortProperty(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions", L"SortProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SortProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskQueryOptions_put_SortProperty(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions", L"SortProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQuerySortProperty>(arg);

            self->obj.SortProperty(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskQueryOptions_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskQueryOptions_put_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryKind>(arg);

            self->obj.Kind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_UserDataTaskQueryOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskQueryOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskQueryOptions[] = {
        { "_assign_array_", _assign_array_UserDataTaskQueryOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskQueryOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskQueryOptions[] = {
        { "sort_property", reinterpret_cast<getter>(UserDataTaskQueryOptions_get_SortProperty), reinterpret_cast<setter>(UserDataTaskQueryOptions_put_SortProperty), nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(UserDataTaskQueryOptions_get_Kind), reinterpret_cast<setter>(UserDataTaskQueryOptions_put_Kind), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskQueryOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskQueryOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskQueryOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskQueryOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskQueryOptions) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskQueryOptions =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskQueryOptions",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskQueryOptions
    };

    // ----- UserDataTaskReader class --------------------

    static PyObject* _new_UserDataTaskReader(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskReader(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskReader_ReadBatchAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskReader", L"ReadBatchAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.ReadBatchAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskReader[] = {
        { "read_batch_async", reinterpret_cast<PyCFunction>(UserDataTaskReader_ReadBatchAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskReader, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskReader), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskReader[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskReader[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskReader) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskReader) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskReader) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskReader) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskReader =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskReader",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskReader
    };

    // ----- UserDataTaskRecurrenceProperties class --------------------

    static PyObject* _new_UserDataTaskRecurrenceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskRecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_WeekOfMonth(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"WeekOfMonth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WeekOfMonth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_WeekOfMonth(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"WeekOfMonth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskWeekOfMonth>>(arg);

            self->obj.WeekOfMonth(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Until"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Until());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Until"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Until(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Unit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Unit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Unit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceUnit>(arg);

            self->obj.Unit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Occurrences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Occurrences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Occurrences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Occurrences(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Month(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Month"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Month());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Month(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Month"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Month(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Interval"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Interval());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Interval"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Interval(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_DaysOfWeek(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"DaysOfWeek"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DaysOfWeek());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_DaysOfWeek(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"DaysOfWeek"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskDaysOfWeek>>(arg);

            self->obj.DaysOfWeek(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Day(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Day"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Day());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Day(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties", L"Day"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Day(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_UserDataTaskRecurrenceProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskRecurrenceProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskRecurrenceProperties[] = {
        { "_assign_array_", _assign_array_UserDataTaskRecurrenceProperties, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskRecurrenceProperties), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskRecurrenceProperties[] = {
        { "week_of_month", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_WeekOfMonth), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_WeekOfMonth), nullptr, nullptr },
        { "until", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Until), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Until), nullptr, nullptr },
        { "unit", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Unit), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Unit), nullptr, nullptr },
        { "occurrences", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Occurrences), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Occurrences), nullptr, nullptr },
        { "month", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Month), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Month), nullptr, nullptr },
        { "interval", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Interval), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Interval), nullptr, nullptr },
        { "days_of_week", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_DaysOfWeek), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_DaysOfWeek), nullptr, nullptr },
        { "day", reinterpret_cast<getter>(UserDataTaskRecurrenceProperties_get_Day), reinterpret_cast<setter>(UserDataTaskRecurrenceProperties_put_Day), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskRecurrenceProperties[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskRecurrenceProperties) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskRecurrenceProperties) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskRecurrenceProperties) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskRecurrenceProperties) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskRecurrenceProperties =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskRecurrenceProperties",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskRecurrenceProperties
    };

    // ----- UserDataTaskRegenerationProperties class --------------------

    static PyObject* _new_UserDataTaskRegenerationProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskRegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Until"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Until());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Until"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Until(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Unit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Unit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Unit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationUnit>(arg);

            self->obj.Unit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Occurrences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Occurrences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Occurrences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Occurrences(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Interval"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Interval());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", L"Interval"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Interval(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_UserDataTaskRegenerationProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskRegenerationProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskRegenerationProperties[] = {
        { "_assign_array_", _assign_array_UserDataTaskRegenerationProperties, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskRegenerationProperties), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskRegenerationProperties[] = {
        { "until", reinterpret_cast<getter>(UserDataTaskRegenerationProperties_get_Until), reinterpret_cast<setter>(UserDataTaskRegenerationProperties_put_Until), nullptr, nullptr },
        { "unit", reinterpret_cast<getter>(UserDataTaskRegenerationProperties_get_Unit), reinterpret_cast<setter>(UserDataTaskRegenerationProperties_put_Unit), nullptr, nullptr },
        { "occurrences", reinterpret_cast<getter>(UserDataTaskRegenerationProperties_get_Occurrences), reinterpret_cast<setter>(UserDataTaskRegenerationProperties_put_Occurrences), nullptr, nullptr },
        { "interval", reinterpret_cast<getter>(UserDataTaskRegenerationProperties_get_Interval), reinterpret_cast<setter>(UserDataTaskRegenerationProperties_put_Interval), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskRegenerationProperties[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskRegenerationProperties) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskRegenerationProperties) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskRegenerationProperties) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskRegenerationProperties) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskRegenerationProperties =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskRegenerationProperties",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskRegenerationProperties
    };

    // ----- UserDataTaskStore class --------------------

    static PyObject* _new_UserDataTaskStore(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataTaskStore(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataTaskStore_CreateListAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskStore", L"CreateListAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateListAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskStore", L"CreateListAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.CreateListAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskStore_FindListsAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskStore", L"FindListsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskStore_GetListAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataTasks.UserDataTaskStore", L"GetListAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetListAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataTaskStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataTaskStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskStore[] = {
        { "create_list_async", reinterpret_cast<PyCFunction>(UserDataTaskStore_CreateListAsync), METH_VARARGS, nullptr },
        { "find_lists_async", reinterpret_cast<PyCFunction>(UserDataTaskStore_FindListsAsync), METH_VARARGS, nullptr },
        { "get_list_async", reinterpret_cast<PyCFunction>(UserDataTaskStore_GetListAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataTaskStore, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataTaskStore), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataTaskStore[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataTaskStore[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataTaskStore) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataTaskStore) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataTaskStore) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataTaskStore) },
        { },
    };

    static PyType_Spec type_spec_UserDataTaskStore =
    {
        "winrt._winrt_windows_applicationmodel_userdatatasks.UserDataTaskStore",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskStore
    };

    // ----- Windows.ApplicationModel.UserDataTasks Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::UserDataTasks");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_userdatatasks",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::UserDataTasks

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_userdatatasks(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::UserDataTasks;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTask, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskBatch, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskList, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskListLimitedWriteOperations, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskListSyncManager, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_UserDataTaskManager_Static{PyType_FromSpec(&type_spec_UserDataTaskManager_Static)};
    if (!type_UserDataTaskManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_UserDataTaskManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskQueryOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskReader, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskRecurrenceProperties, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskRegenerationProperties, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataTaskStore, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
