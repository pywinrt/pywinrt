// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.System.UserProfile.h"


namespace py::cpp::Windows::System::UserProfile
{
    // ----- AdvertisingManager class --------------------

    static PyObject* _new_AdvertisingManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::AdvertisingManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::AdvertisingManager>::type_name);
        return nullptr;
    }

    static PyObject* AdvertisingManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.AdvertisingManager", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::AdvertisingManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdvertisingManager_get_AdvertisingId(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AdvertisingManager", L"AdvertisingId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::AdvertisingManager::AdvertisingId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AdvertisingManager[] = {
        { }
    };

    static PyGetSetDef _getset_AdvertisingManager[] = {
        { }
    };

    static PyType_Slot _type_slots_AdvertisingManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AdvertisingManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AdvertisingManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AdvertisingManager) },
        { },
    };

    static PyType_Spec type_spec_AdvertisingManager =
    {
        "winrt._winrt_windows_system_userprofile.AdvertisingManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AdvertisingManager
    };

    static PyGetSetDef getset_AdvertisingManager_Static[] = {
        { "advertising_id", reinterpret_cast<getter>(AdvertisingManager_get_AdvertisingId), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_AdvertisingManager_Static[] = {
        { "get_for_user", reinterpret_cast<PyCFunction>(AdvertisingManager_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_AdvertisingManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_AdvertisingManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_AdvertisingManager_Static) },
        { }
    };

    static PyType_Spec type_spec_AdvertisingManager_Static =
    {
        "winrt._winrt_windows_system_userprofile.AdvertisingManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_AdvertisingManager_Static
    };

    // ----- AdvertisingManagerForUser class --------------------

    static PyObject* _new_AdvertisingManagerForUser(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::AdvertisingManagerForUser>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::AdvertisingManagerForUser>::type_name);
        return nullptr;
    }

    static void _dealloc_AdvertisingManagerForUser(py::wrapper::Windows::System::UserProfile::AdvertisingManagerForUser* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AdvertisingManagerForUser_get_AdvertisingId(py::wrapper::Windows::System::UserProfile::AdvertisingManagerForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AdvertisingManagerForUser", L"AdvertisingId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AdvertisingId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AdvertisingManagerForUser_get_User(py::wrapper::Windows::System::UserProfile::AdvertisingManagerForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AdvertisingManagerForUser", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AdvertisingManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::AdvertisingManagerForUser>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AdvertisingManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::AdvertisingManagerForUser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AdvertisingManagerForUser[] = {
        { "_assign_array_", _assign_array_AdvertisingManagerForUser, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AdvertisingManagerForUser), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AdvertisingManagerForUser[] = {
        { "advertising_id", reinterpret_cast<getter>(AdvertisingManagerForUser_get_AdvertisingId), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(AdvertisingManagerForUser_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AdvertisingManagerForUser[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AdvertisingManagerForUser) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AdvertisingManagerForUser) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AdvertisingManagerForUser) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AdvertisingManagerForUser) },
        { },
    };

    static PyType_Spec type_spec_AdvertisingManagerForUser =
    {
        "winrt._winrt_windows_system_userprofile.AdvertisingManagerForUser",
        sizeof(py::wrapper::Windows::System::UserProfile::AdvertisingManagerForUser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AdvertisingManagerForUser
    };

    // ----- AssignedAccessSettings class --------------------

    static PyObject* _new_AssignedAccessSettings(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::AssignedAccessSettings>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::AssignedAccessSettings>::type_name);
        return nullptr;
    }

    static void _dealloc_AssignedAccessSettings(py::wrapper::Windows::System::UserProfile::AssignedAccessSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AssignedAccessSettings_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.AssignedAccessSettings", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::AssignedAccessSettings::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AssignedAccessSettings_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.AssignedAccessSettings", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::AssignedAccessSettings::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AssignedAccessSettings_get_IsEnabled(py::wrapper::Windows::System::UserProfile::AssignedAccessSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AssignedAccessSettings", L"IsEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AssignedAccessSettings_get_IsSingleAppKioskMode(py::wrapper::Windows::System::UserProfile::AssignedAccessSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AssignedAccessSettings", L"IsSingleAppKioskMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsSingleAppKioskMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AssignedAccessSettings_get_User(py::wrapper::Windows::System::UserProfile::AssignedAccessSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.AssignedAccessSettings", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AssignedAccessSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::AssignedAccessSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AssignedAccessSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::AssignedAccessSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AssignedAccessSettings[] = {
        { "_assign_array_", _assign_array_AssignedAccessSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AssignedAccessSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AssignedAccessSettings[] = {
        { "is_enabled", reinterpret_cast<getter>(AssignedAccessSettings_get_IsEnabled), nullptr, nullptr, nullptr },
        { "is_single_app_kiosk_mode", reinterpret_cast<getter>(AssignedAccessSettings_get_IsSingleAppKioskMode), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(AssignedAccessSettings_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AssignedAccessSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AssignedAccessSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AssignedAccessSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AssignedAccessSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AssignedAccessSettings) },
        { },
    };

    static PyType_Spec type_spec_AssignedAccessSettings =
    {
        "winrt._winrt_windows_system_userprofile.AssignedAccessSettings",
        sizeof(py::wrapper::Windows::System::UserProfile::AssignedAccessSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AssignedAccessSettings
    };

    static PyGetSetDef getset_AssignedAccessSettings_Static[] = {
        { }
    };

    static PyMethodDef methods_AssignedAccessSettings_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(AssignedAccessSettings_GetDefault), METH_VARARGS, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(AssignedAccessSettings_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_AssignedAccessSettings_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_AssignedAccessSettings_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_AssignedAccessSettings_Static) },
        { }
    };

    static PyType_Spec type_spec_AssignedAccessSettings_Static =
    {
        "winrt._winrt_windows_system_userprofile.AssignedAccessSettings_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_AssignedAccessSettings_Static
    };

    // ----- DiagnosticsSettings class --------------------

    static PyObject* _new_DiagnosticsSettings(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::DiagnosticsSettings>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::DiagnosticsSettings>::type_name);
        return nullptr;
    }

    static void _dealloc_DiagnosticsSettings(py::wrapper::Windows::System::UserProfile::DiagnosticsSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DiagnosticsSettings_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.DiagnosticsSettings", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::DiagnosticsSettings::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DiagnosticsSettings_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.DiagnosticsSettings", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::DiagnosticsSettings::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DiagnosticsSettings_get_CanUseDiagnosticsToTailorExperiences(py::wrapper::Windows::System::UserProfile::DiagnosticsSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.DiagnosticsSettings", L"CanUseDiagnosticsToTailorExperiences"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CanUseDiagnosticsToTailorExperiences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DiagnosticsSettings_get_User(py::wrapper::Windows::System::UserProfile::DiagnosticsSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.DiagnosticsSettings", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DiagnosticsSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::DiagnosticsSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DiagnosticsSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::DiagnosticsSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DiagnosticsSettings[] = {
        { "_assign_array_", _assign_array_DiagnosticsSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DiagnosticsSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DiagnosticsSettings[] = {
        { "can_use_diagnostics_to_tailor_experiences", reinterpret_cast<getter>(DiagnosticsSettings_get_CanUseDiagnosticsToTailorExperiences), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(DiagnosticsSettings_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DiagnosticsSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DiagnosticsSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DiagnosticsSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DiagnosticsSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DiagnosticsSettings) },
        { },
    };

    static PyType_Spec type_spec_DiagnosticsSettings =
    {
        "winrt._winrt_windows_system_userprofile.DiagnosticsSettings",
        sizeof(py::wrapper::Windows::System::UserProfile::DiagnosticsSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DiagnosticsSettings
    };

    static PyGetSetDef getset_DiagnosticsSettings_Static[] = {
        { }
    };

    static PyMethodDef methods_DiagnosticsSettings_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(DiagnosticsSettings_GetDefault), METH_VARARGS, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(DiagnosticsSettings_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_DiagnosticsSettings_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DiagnosticsSettings_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_DiagnosticsSettings_Static) },
        { }
    };

    static PyType_Spec type_spec_DiagnosticsSettings_Static =
    {
        "winrt._winrt_windows_system_userprofile.DiagnosticsSettings_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DiagnosticsSettings_Static
    };

    // ----- FirstSignInSettings class --------------------

    static PyObject* _new_FirstSignInSettings(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::FirstSignInSettings>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::FirstSignInSettings>::type_name);
        return nullptr;
    }

    static void _dealloc_FirstSignInSettings(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FirstSignInSettings_First(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FirstSignInSettings_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::FirstSignInSettings::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FirstSignInSettings_HasKey(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FirstSignInSettings_Lookup(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FirstSignInSettings_Split(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"Split", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Foundation::IInspectable> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Foundation::IInspectable> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FirstSignInSettings_get_Size(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.FirstSignInSettings", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FirstSignInSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::FirstSignInSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FirstSignInSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::FirstSignInSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FirstSignInSettings(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};

            if (!iter)
            {
                return nullptr;
            }

            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_FirstSignInSettings(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_FirstSignInSettings(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_FirstSignInSettings(py::wrapper::Windows::System::UserProfile::FirstSignInSettings* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FirstSignInSettings[] = {
        { "first", reinterpret_cast<PyCFunction>(FirstSignInSettings_First), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(FirstSignInSettings_HasKey), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(FirstSignInSettings_Lookup), METH_VARARGS, nullptr },
        { "split", reinterpret_cast<PyCFunction>(FirstSignInSettings_Split), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_FirstSignInSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FirstSignInSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FirstSignInSettings[] = {
        { "size", reinterpret_cast<getter>(FirstSignInSettings_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FirstSignInSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FirstSignInSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FirstSignInSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FirstSignInSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FirstSignInSettings) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_FirstSignInSettings) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_FirstSignInSettings) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_FirstSignInSettings) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_FirstSignInSettings) },
        { },
    };

    static PyType_Spec type_spec_FirstSignInSettings =
    {
        "winrt._winrt_windows_system_userprofile.FirstSignInSettings",
        sizeof(py::wrapper::Windows::System::UserProfile::FirstSignInSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FirstSignInSettings
    };

    static PyGetSetDef getset_FirstSignInSettings_Static[] = {
        { }
    };

    static PyMethodDef methods_FirstSignInSettings_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(FirstSignInSettings_GetDefault), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_FirstSignInSettings_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_FirstSignInSettings_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_FirstSignInSettings_Static) },
        { }
    };

    static PyType_Spec type_spec_FirstSignInSettings_Static =
    {
        "winrt._winrt_windows_system_userprofile.FirstSignInSettings_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_FirstSignInSettings_Static
    };

    // ----- GlobalizationPreferences class --------------------

    static PyObject* _new_GlobalizationPreferences(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::GlobalizationPreferences>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::GlobalizationPreferences>::type_name);
        return nullptr;
    }

    static PyObject* GlobalizationPreferences_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_TrySetHomeGeographicRegion(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"TrySetHomeGeographicRegion", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::TrySetHomeGeographicRegion(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_TrySetLanguages(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"TrySetLanguages", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::TrySetLanguages(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_Calendars(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"Calendars"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::Calendars());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_Clocks(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"Clocks"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::Clocks());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_Currencies(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"Currencies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::Currencies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_HomeGeographicRegion(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"HomeGeographicRegion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::HomeGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_Languages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"Languages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferences_get_WeekStartsOn(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferences", L"WeekStartsOn"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::GlobalizationPreferences::WeekStartsOn());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalizationPreferences[] = {
        { }
    };

    static PyGetSetDef _getset_GlobalizationPreferences[] = {
        { }
    };

    static PyType_Slot _type_slots_GlobalizationPreferences[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GlobalizationPreferences) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GlobalizationPreferences) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GlobalizationPreferences) },
        { },
    };

    static PyType_Spec type_spec_GlobalizationPreferences =
    {
        "winrt._winrt_windows_system_userprofile.GlobalizationPreferences",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalizationPreferences
    };

    static PyGetSetDef getset_GlobalizationPreferences_Static[] = {
        { "calendars", reinterpret_cast<getter>(GlobalizationPreferences_get_Calendars), nullptr, nullptr, nullptr },
        { "clocks", reinterpret_cast<getter>(GlobalizationPreferences_get_Clocks), nullptr, nullptr, nullptr },
        { "currencies", reinterpret_cast<getter>(GlobalizationPreferences_get_Currencies), nullptr, nullptr, nullptr },
        { "home_geographic_region", reinterpret_cast<getter>(GlobalizationPreferences_get_HomeGeographicRegion), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(GlobalizationPreferences_get_Languages), nullptr, nullptr, nullptr },
        { "week_starts_on", reinterpret_cast<getter>(GlobalizationPreferences_get_WeekStartsOn), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_GlobalizationPreferences_Static[] = {
        { "get_for_user", reinterpret_cast<PyCFunction>(GlobalizationPreferences_GetForUser), METH_VARARGS, nullptr },
        { "try_set_home_geographic_region", reinterpret_cast<PyCFunction>(GlobalizationPreferences_TrySetHomeGeographicRegion), METH_VARARGS, nullptr },
        { "try_set_languages", reinterpret_cast<PyCFunction>(GlobalizationPreferences_TrySetLanguages), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_GlobalizationPreferences_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_GlobalizationPreferences_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_GlobalizationPreferences_Static) },
        { }
    };

    static PyType_Spec type_spec_GlobalizationPreferences_Static =
    {
        "winrt._winrt_windows_system_userprofile.GlobalizationPreferences_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_GlobalizationPreferences_Static
    };

    // ----- GlobalizationPreferencesForUser class --------------------

    static PyObject* _new_GlobalizationPreferencesForUser(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::GlobalizationPreferencesForUser>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::GlobalizationPreferencesForUser>::type_name);
        return nullptr;
    }

    static void _dealloc_GlobalizationPreferencesForUser(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GlobalizationPreferencesForUser_get_Calendars(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"Calendars"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Calendars());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_Clocks(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"Clocks"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Clocks());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_Currencies(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"Currencies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Currencies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_HomeGeographicRegion(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"HomeGeographicRegion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HomeGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_Languages(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"Languages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_User(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalizationPreferencesForUser_get_WeekStartsOn(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.GlobalizationPreferencesForUser", L"WeekStartsOn"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WeekStartsOn());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GlobalizationPreferencesForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::GlobalizationPreferencesForUser>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GlobalizationPreferencesForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::GlobalizationPreferencesForUser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalizationPreferencesForUser[] = {
        { "_assign_array_", _assign_array_GlobalizationPreferencesForUser, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GlobalizationPreferencesForUser), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GlobalizationPreferencesForUser[] = {
        { "calendars", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_Calendars), nullptr, nullptr, nullptr },
        { "clocks", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_Clocks), nullptr, nullptr, nullptr },
        { "currencies", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_Currencies), nullptr, nullptr, nullptr },
        { "home_geographic_region", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_HomeGeographicRegion), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_Languages), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_User), nullptr, nullptr, nullptr },
        { "week_starts_on", reinterpret_cast<getter>(GlobalizationPreferencesForUser_get_WeekStartsOn), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GlobalizationPreferencesForUser[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GlobalizationPreferencesForUser) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GlobalizationPreferencesForUser) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GlobalizationPreferencesForUser) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GlobalizationPreferencesForUser) },
        { },
    };

    static PyType_Spec type_spec_GlobalizationPreferencesForUser =
    {
        "winrt._winrt_windows_system_userprofile.GlobalizationPreferencesForUser",
        sizeof(py::wrapper::Windows::System::UserProfile::GlobalizationPreferencesForUser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalizationPreferencesForUser
    };

    // ----- LockScreen class --------------------

    static PyObject* _new_LockScreen(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::LockScreen>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::LockScreen>::type_name);
        return nullptr;
    }

    static PyObject* LockScreen_GetImageStream(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.LockScreen", L"GetImageStream", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::LockScreen::GetImageStream());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreen_RequestSetImageFeedAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.LockScreen", L"RequestSetImageFeedAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::LockScreen::RequestSetImageFeedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreen_SetImageFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.LockScreen", L"SetImageFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::LockScreen::SetImageFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreen_SetImageStreamAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.LockScreen", L"SetImageStreamAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::LockScreen::SetImageStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreen_TryRemoveImageFeed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.LockScreen", L"TryRemoveImageFeed", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::LockScreen::TryRemoveImageFeed());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreen_get_OriginalImageFile(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.LockScreen", L"OriginalImageFile"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::LockScreen::OriginalImageFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreen[] = {
        { }
    };

    static PyGetSetDef _getset_LockScreen[] = {
        { }
    };

    static PyType_Slot _type_slots_LockScreen[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_LockScreen) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_LockScreen) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_LockScreen) },
        { },
    };

    static PyType_Spec type_spec_LockScreen =
    {
        "winrt._winrt_windows_system_userprofile.LockScreen",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreen
    };

    static PyGetSetDef getset_LockScreen_Static[] = {
        { "original_image_file", reinterpret_cast<getter>(LockScreen_get_OriginalImageFile), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_LockScreen_Static[] = {
        { "get_image_stream", reinterpret_cast<PyCFunction>(LockScreen_GetImageStream), METH_VARARGS, nullptr },
        { "request_set_image_feed_async", reinterpret_cast<PyCFunction>(LockScreen_RequestSetImageFeedAsync), METH_VARARGS, nullptr },
        { "set_image_file_async", reinterpret_cast<PyCFunction>(LockScreen_SetImageFileAsync), METH_VARARGS, nullptr },
        { "set_image_stream_async", reinterpret_cast<PyCFunction>(LockScreen_SetImageStreamAsync), METH_VARARGS, nullptr },
        { "try_remove_image_feed", reinterpret_cast<PyCFunction>(LockScreen_TryRemoveImageFeed), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_LockScreen_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_LockScreen_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_LockScreen_Static) },
        { }
    };

    static PyType_Spec type_spec_LockScreen_Static =
    {
        "winrt._winrt_windows_system_userprofile.LockScreen_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_LockScreen_Static
    };

    // ----- UserInformation class --------------------

    static PyObject* _new_UserInformation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::UserInformation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::UserInformation>::type_name);
        return nullptr;
    }

    static PyObject* UserInformation_GetAccountPicture(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetAccountPicture", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::UserProfile::AccountPictureKind>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetAccountPicture(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetDisplayNameAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetDisplayNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetDisplayNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetDomainNameAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetDomainNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetDomainNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetFirstNameAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetFirstNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetFirstNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetLastNameAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetLastNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetLastNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetPrincipalNameAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetPrincipalNameAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetPrincipalNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_GetSessionInitiationProtocolUriAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"GetSessionInitiationProtocolUriAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserInformation::GetSessionInitiationProtocolUriAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_SetAccountPictureAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"SetAccountPictureAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::UserInformation::SetAccountPictureAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_SetAccountPictureFromStreamAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"SetAccountPictureFromStreamAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(winrt::Windows::System::UserProfile::UserInformation::SetAccountPictureFromStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_SetAccountPicturesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"SetAccountPicturesAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 2);

                return py::convert(winrt::Windows::System::UserProfile::UserInformation::SetAccountPicturesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_SetAccountPicturesFromStreamsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserInformation", L"SetAccountPicturesFromStreamsAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 2);

                return py::convert(winrt::Windows::System::UserProfile::UserInformation::SetAccountPicturesFromStreamsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserInformation_get_AccountPictureChangeEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.UserInformation", L"AccountPictureChangeEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::UserInformation::AccountPictureChangeEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserInformation_get_NameAccessAllowed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.UserInformation", L"NameAccessAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::UserInformation::NameAccessAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserInformation_add_AccountPictureChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.System.UserProfile.UserInformation", L"AccountPictureChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::UserProfile::UserInformation::AccountPictureChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserInformation_remove_AccountPictureChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.System.UserProfile.UserInformation", L"AccountPictureChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::UserProfile::UserInformation::AccountPictureChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserInformation[] = {
        { "add_account_picture_changed", reinterpret_cast<PyCFunction>(UserInformation_add_AccountPictureChanged), METH_O | METH_STATIC, nullptr },
        { "remove_account_picture_changed", reinterpret_cast<PyCFunction>(UserInformation_remove_AccountPictureChanged), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserInformation[] = {
        { }
    };

    static PyType_Slot _type_slots_UserInformation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserInformation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserInformation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserInformation) },
        { },
    };

    static PyType_Spec type_spec_UserInformation =
    {
        "winrt._winrt_windows_system_userprofile.UserInformation",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserInformation
    };

    static PyGetSetDef getset_UserInformation_Static[] = {
        { "account_picture_change_enabled", reinterpret_cast<getter>(UserInformation_get_AccountPictureChangeEnabled), nullptr, nullptr, nullptr },
        { "name_access_allowed", reinterpret_cast<getter>(UserInformation_get_NameAccessAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_UserInformation_Static[] = {
        { "get_account_picture", reinterpret_cast<PyCFunction>(UserInformation_GetAccountPicture), METH_VARARGS, nullptr },
        { "get_display_name_async", reinterpret_cast<PyCFunction>(UserInformation_GetDisplayNameAsync), METH_VARARGS, nullptr },
        { "get_domain_name_async", reinterpret_cast<PyCFunction>(UserInformation_GetDomainNameAsync), METH_VARARGS, nullptr },
        { "get_first_name_async", reinterpret_cast<PyCFunction>(UserInformation_GetFirstNameAsync), METH_VARARGS, nullptr },
        { "get_last_name_async", reinterpret_cast<PyCFunction>(UserInformation_GetLastNameAsync), METH_VARARGS, nullptr },
        { "get_principal_name_async", reinterpret_cast<PyCFunction>(UserInformation_GetPrincipalNameAsync), METH_VARARGS, nullptr },
        { "get_session_initiation_protocol_uri_async", reinterpret_cast<PyCFunction>(UserInformation_GetSessionInitiationProtocolUriAsync), METH_VARARGS, nullptr },
        { "set_account_picture_async", reinterpret_cast<PyCFunction>(UserInformation_SetAccountPictureAsync), METH_VARARGS, nullptr },
        { "set_account_picture_from_stream_async", reinterpret_cast<PyCFunction>(UserInformation_SetAccountPictureFromStreamAsync), METH_VARARGS, nullptr },
        { "set_account_pictures_async", reinterpret_cast<PyCFunction>(UserInformation_SetAccountPicturesAsync), METH_VARARGS, nullptr },
        { "set_account_pictures_from_streams_async", reinterpret_cast<PyCFunction>(UserInformation_SetAccountPicturesFromStreamsAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_UserInformation_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_UserInformation_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_UserInformation_Static) },
        { }
    };

    static PyType_Spec type_spec_UserInformation_Static =
    {
        "winrt._winrt_windows_system_userprofile.UserInformation_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_UserInformation_Static
    };

    // ----- UserProfilePersonalizationSettings class --------------------

    static PyObject* _new_UserProfilePersonalizationSettings(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings>::type_name);
        return nullptr;
    }

    static void _dealloc_UserProfilePersonalizationSettings(py::wrapper::Windows::System::UserProfile::UserProfilePersonalizationSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserProfilePersonalizationSettings_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserProfilePersonalizationSettings", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserProfilePersonalizationSettings_TrySetLockScreenImageAsync(py::wrapper::Windows::System::UserProfile::UserProfilePersonalizationSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserProfilePersonalizationSettings", L"TrySetLockScreenImageAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);

                return py::convert(self->obj.TrySetLockScreenImageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserProfilePersonalizationSettings_TrySetWallpaperImageAsync(py::wrapper::Windows::System::UserProfile::UserProfilePersonalizationSettings* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.UserProfile.UserProfilePersonalizationSettings", L"TrySetWallpaperImageAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);

                return py::convert(self->obj.TrySetWallpaperImageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserProfilePersonalizationSettings_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.UserProfile.UserProfilePersonalizationSettings", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserProfilePersonalizationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserProfilePersonalizationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::UserProfile::UserProfilePersonalizationSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserProfilePersonalizationSettings[] = {
        { "try_set_lock_screen_image_async", reinterpret_cast<PyCFunction>(UserProfilePersonalizationSettings_TrySetLockScreenImageAsync), METH_VARARGS, nullptr },
        { "try_set_wallpaper_image_async", reinterpret_cast<PyCFunction>(UserProfilePersonalizationSettings_TrySetWallpaperImageAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserProfilePersonalizationSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserProfilePersonalizationSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserProfilePersonalizationSettings[] = {
        { }
    };

    static PyType_Slot _type_slots_UserProfilePersonalizationSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserProfilePersonalizationSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserProfilePersonalizationSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserProfilePersonalizationSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserProfilePersonalizationSettings) },
        { },
    };

    static PyType_Spec type_spec_UserProfilePersonalizationSettings =
    {
        "winrt._winrt_windows_system_userprofile.UserProfilePersonalizationSettings",
        sizeof(py::wrapper::Windows::System::UserProfile::UserProfilePersonalizationSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserProfilePersonalizationSettings
    };

    static PyGetSetDef getset_UserProfilePersonalizationSettings_Static[] = {
        { "current", reinterpret_cast<getter>(UserProfilePersonalizationSettings_get_Current), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_UserProfilePersonalizationSettings_Static[] = {
        { "is_supported", reinterpret_cast<PyCFunction>(UserProfilePersonalizationSettings_IsSupported), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_UserProfilePersonalizationSettings_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_UserProfilePersonalizationSettings_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_UserProfilePersonalizationSettings_Static) },
        { }
    };

    static PyType_Spec type_spec_UserProfilePersonalizationSettings_Static =
    {
        "winrt._winrt_windows_system_userprofile.UserProfilePersonalizationSettings_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_UserProfilePersonalizationSettings_Static
    };

    // ----- Windows.System.UserProfile Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::System::UserProfile");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_system_userprofile",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::System::UserProfile

PyMODINIT_FUNC PyInit__winrt_windows_system_userprofile(void) noexcept
{
    using namespace py::cpp::Windows::System::UserProfile;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_AdvertisingManager_Static{PyType_FromSpec(&type_spec_AdvertisingManager_Static)};
    if (!type_AdvertisingManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AdvertisingManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_AdvertisingManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AdvertisingManagerForUser, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_AssignedAccessSettings_Static{PyType_FromSpec(&type_spec_AssignedAccessSettings_Static)};
    if (!type_AssignedAccessSettings_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AssignedAccessSettings, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_AssignedAccessSettings_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_DiagnosticsSettings_Static{PyType_FromSpec(&type_spec_DiagnosticsSettings_Static)};
    if (!type_DiagnosticsSettings_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DiagnosticsSettings, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_DiagnosticsSettings_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_FirstSignInSettings_Static{PyType_FromSpec(&type_spec_FirstSignInSettings_Static)};
    if (!type_FirstSignInSettings_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FirstSignInSettings, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_FirstSignInSettings_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_GlobalizationPreferences_Static{PyType_FromSpec(&type_spec_GlobalizationPreferences_Static)};
    if (!type_GlobalizationPreferences_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GlobalizationPreferences, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_GlobalizationPreferences_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GlobalizationPreferencesForUser, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_LockScreen_Static{PyType_FromSpec(&type_spec_LockScreen_Static)};
    if (!type_LockScreen_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_LockScreen, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_LockScreen_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_UserInformation_Static{PyType_FromSpec(&type_spec_UserInformation_Static)};
    if (!type_UserInformation_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserInformation, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_UserInformation_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_UserProfilePersonalizationSettings_Static{PyType_FromSpec(&type_spec_UserProfilePersonalizationSettings_Static)};
    if (!type_UserProfilePersonalizationSettings_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserProfilePersonalizationSettings, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_UserProfilePersonalizationSettings_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
