# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.globalization as windows_globalization
import winrt.windows.storage as windows_storage
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system

from winrt.windows.system.userprofile import AccountPictureKind, SetAccountPictureResult, SetImageFeedResult

Self = typing.TypeVar('Self')

@typing.final
class AdvertisingManager_Static(type):
    def get_for_user(cls, user: windows_system.User, /) -> AdvertisingManagerForUser: ...
    @_property
    def advertising_id(cls) -> str: ...

@typing.final
class AdvertisingManager(winrt.system.Object, metaclass=AdvertisingManager_Static):
    pass

@typing.final
class AdvertisingManagerForUser(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AdvertisingManagerForUser: ...
    @_property
    def advertising_id(self) -> str: ...
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class AssignedAccessSettings_Static(type):
    def get_default(cls) -> AssignedAccessSettings: ...
    def get_for_user(cls, user: windows_system.User, /) -> AssignedAccessSettings: ...

@typing.final
class AssignedAccessSettings(winrt.system.Object, metaclass=AssignedAccessSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AssignedAccessSettings: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def is_single_app_kiosk_mode(self) -> bool: ...
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class DiagnosticsSettings_Static(type):
    def get_default(cls) -> DiagnosticsSettings: ...
    def get_for_user(cls, user: windows_system.User, /) -> DiagnosticsSettings: ...

@typing.final
class DiagnosticsSettings(winrt.system.Object, metaclass=DiagnosticsSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiagnosticsSettings: ...
    @_property
    def can_use_diagnostics_to_tailor_experiences(self) -> bool: ...
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class FirstSignInSettings_Static(type):
    def get_default(cls) -> FirstSignInSettings: ...

@typing.final
class FirstSignInSettings(winrt.system.Object, winrt._winrt.Mapping[str, winrt.system.Object], metaclass=FirstSignInSettings_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FirstSignInSettings: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, winrt.system.Object]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> winrt.system.Object: ...
    def split(self) -> typing.Tuple[typing.Mapping[str, winrt.system.Object], typing.Mapping[str, winrt.system.Object]]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class GlobalizationPreferences_Static(type):
    def get_for_user(cls, user: windows_system.User, /) -> GlobalizationPreferencesForUser: ...
    def try_set_home_geographic_region(cls, region: str, /) -> bool: ...
    def try_set_languages(cls, language_tags: typing.Iterable[str], /) -> bool: ...
    @_property
    def calendars(cls) -> typing.Sequence[str]: ...
    @_property
    def clocks(cls) -> typing.Sequence[str]: ...
    @_property
    def currencies(cls) -> typing.Sequence[str]: ...
    @_property
    def home_geographic_region(cls) -> str: ...
    @_property
    def languages(cls) -> typing.Sequence[str]: ...
    @_property
    def week_starts_on(cls) -> windows_globalization.DayOfWeek: ...

@typing.final
class GlobalizationPreferences(winrt.system.Object, metaclass=GlobalizationPreferences_Static):
    pass

@typing.final
class GlobalizationPreferencesForUser(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalizationPreferencesForUser: ...
    @_property
    def calendars(self) -> typing.Sequence[str]: ...
    @_property
    def clocks(self) -> typing.Sequence[str]: ...
    @_property
    def currencies(self) -> typing.Sequence[str]: ...
    @_property
    def home_geographic_region(self) -> str: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def user(self) -> windows_system.User: ...
    @_property
    def week_starts_on(self) -> windows_globalization.DayOfWeek: ...

@typing.final
class LockScreen_Static(type):
    def get_image_stream(cls) -> windows_storage_streams.IRandomAccessStream: ...
    def request_set_image_feed_async(cls, syndication_feed_uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[SetImageFeedResult]: ...
    def set_image_file_async(cls, value: windows_storage.IStorageFile, /) -> windows_foundation.IAsyncAction: ...
    def set_image_stream_async(cls, value: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncAction: ...
    def try_remove_image_feed(cls) -> bool: ...
    @_property
    def original_image_file(cls) -> windows_foundation.Uri: ...

@typing.final
class LockScreen(winrt.system.Object, metaclass=LockScreen_Static):
    pass

@typing.final
class UserInformation_Static(type):
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_account_picture(cls, kind: AccountPictureKind, /) -> windows_storage.IStorageFile: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_display_name_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_domain_name_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_first_name_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_last_name_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_principal_name_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def get_session_initiation_protocol_uri_async(cls) -> windows_foundation.IAsyncOperation[windows_foundation.Uri]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def set_account_picture_async(cls, image: windows_storage.IStorageFile, /) -> windows_foundation.IAsyncOperation[SetAccountPictureResult]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def set_account_picture_from_stream_async(cls, image: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncOperation[SetAccountPictureResult]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def set_account_pictures_async(cls, small_image: windows_storage.IStorageFile, large_image: windows_storage.IStorageFile, video: windows_storage.IStorageFile, /) -> windows_foundation.IAsyncOperation[SetAccountPictureResult]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def set_account_pictures_from_streams_async(cls, small_image: windows_storage_streams.IRandomAccessStream, large_image: windows_storage_streams.IRandomAccessStream, video: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncOperation[SetAccountPictureResult]: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def add_account_picture_changed(cls, change_handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("Use User instead of UserInformation. For more info, see MSDN.")
    def remove_account_picture_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def account_picture_change_enabled(cls) -> bool: ...
    @_property
    def name_access_allowed(cls) -> bool: ...

@typing.final
class UserInformation(winrt.system.Object, metaclass=UserInformation_Static):
    pass

@typing.final
class UserProfilePersonalizationSettings_Static(type):
    def is_supported(cls) -> bool: ...
    @_property
    def current(cls) -> UserProfilePersonalizationSettings: ...

@typing.final
class UserProfilePersonalizationSettings(winrt.system.Object, metaclass=UserProfilePersonalizationSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserProfilePersonalizationSettings: ...
    def try_set_lock_screen_image_async(self, image_file: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_set_wallpaper_image_async(self, image_file: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[bool]: ...

