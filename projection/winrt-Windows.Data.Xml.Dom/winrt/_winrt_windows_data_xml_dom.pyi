# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage
import winrt.windows.storage.streams

from winrt.windows.data.xml.dom import NodeType

Self = typing.TypeVar('Self')

@typing.final
class DtdEntity(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DtdEntity: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def notation_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def public_id(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def system_id(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class DtdNotation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DtdNotation: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def public_id(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def system_id(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlAttribute(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlAttribute: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def specified(self) -> bool: ...
    @_property
    def name(self) -> str: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlCDataSection(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlCDataSection: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlComment(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlComment: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlDocument_Static(type):
    @typing.overload
    def load_from_file_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    def load_from_file_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], load_settings: typing.Optional[XmlLoadSettings], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    def load_from_uri_async(cls, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    def load_from_uri_async(cls, uri: typing.Optional[winrt.windows.foundation.Uri], load_settings: typing.Optional[XmlLoadSettings], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...

@typing.final
class XmlDocument(winrt.system.Object, metaclass=XmlDocument_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocument: ...
    def __new__(cls: typing.Type[XmlDocument]) -> XmlDocument:...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def create_attribute(self, name: str, /) -> typing.Optional[XmlAttribute]: ...
    def create_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def create_c_data_section(self, data: str, /) -> typing.Optional[XmlCDataSection]: ...
    def create_comment(self, data: str, /) -> typing.Optional[XmlComment]: ...
    def create_document_fragment(self) -> typing.Optional[XmlDocumentFragment]: ...
    def create_element(self, tag_name: str, /) -> typing.Optional[XmlElement]: ...
    def create_element_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, /) -> typing.Optional[XmlElement]: ...
    def create_entity_reference(self, name: str, /) -> typing.Optional[XmlEntityReference]: ...
    def create_processing_instruction(self, target: str, data: str, /) -> typing.Optional[XmlProcessingInstruction]: ...
    def create_text_node(self, data: str, /) -> typing.Optional[XmlText]: ...
    def get_element_by_id(self, element_id: str, /) -> typing.Optional[XmlElement]: ...
    def get_elements_by_tag_name(self, tag_name: str, /) -> typing.Optional[XmlNodeList]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def import_node(self, node: typing.Optional[IXmlNode], deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    @typing.overload
    def load_xml(self, xml: str, /) -> None: ...
    @typing.overload
    def load_xml(self, xml: str, load_settings: typing.Optional[XmlLoadSettings], /) -> None: ...
    @typing.overload
    def load_xml_from_buffer(self, buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    @typing.overload
    def load_xml_from_buffer(self, buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], load_settings: typing.Optional[XmlLoadSettings], /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def save_to_file_async(self, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncAction: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def doctype(self) -> typing.Optional[XmlDocumentType]: ...
    @_property
    def document_element(self) -> typing.Optional[XmlElement]: ...
    @_property
    def document_uri(self) -> str: ...
    @_property
    def implementation(self) -> typing.Optional[XmlDomImplementation]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlDocumentFragment(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocumentFragment: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlDocumentType(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocumentType: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def entities(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def name(self) -> str: ...
    @_property
    def notations(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlDomImplementation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDomImplementation: ...
    def has_feature(self, feature: str, version: typing.Optional[winrt.system.Object], /) -> bool: ...

@typing.final
class XmlElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlElement: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_attribute(self, attribute_name: str, /) -> str: ...
    def get_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> str: ...
    def get_attribute_node(self, attribute_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def get_attribute_node_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def get_elements_by_tag_name(self, tag_name: str, /) -> typing.Optional[XmlNodeList]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_attribute(self, attribute_name: str, /) -> None: ...
    def remove_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> None: ...
    def remove_attribute_node(self, attribute_node: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def set_attribute(self, attribute_name: str, attribute_value: str, /) -> None: ...
    def set_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, value: str, /) -> None: ...
    def set_attribute_node(self, new_attribute: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...
    def set_attribute_node_n_s(self, new_attribute: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...
    @_property
    def tag_name(self) -> str: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlEntityReference(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlEntityReference: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class XmlLoadSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlLoadSettings: ...
    def __new__(cls: typing.Type[XmlLoadSettings]) -> XmlLoadSettings:...
    @_property
    def validate_on_parse(self) -> bool: ...
    @validate_on_parse.setter
    def validate_on_parse(self, value: bool) -> None: ...
    @_property
    def resolve_externals(self) -> bool: ...
    @resolve_externals.setter
    def resolve_externals(self, value: bool) -> None: ...
    @_property
    def prohibit_dtd(self) -> bool: ...
    @prohibit_dtd.setter
    def prohibit_dtd(self, value: bool) -> None: ...
    @_property
    def max_element_depth(self) -> winrt.system.UInt32: ...
    @max_element_depth.setter
    def max_element_depth(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def element_content_white_space(self) -> bool: ...
    @element_content_white_space.setter
    def element_content_white_space(self, value: bool) -> None: ...

@typing.final
class XmlNamedNodeMap(winrt.system.Object, winrt._winrt.Sequence[IXmlNode]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IXmlNode]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> IXmlNode: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IXmlNode]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlNamedNodeMap: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IXmlNode]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IXmlNode], /) -> winrt.system.UInt32: ...
    def get_named_item(self, name: str, /) -> typing.Optional[IXmlNode]: ...
    def get_named_item_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], name: str, /) -> typing.Optional[IXmlNode]: ...
    def index_of(self, value: typing.Optional[IXmlNode], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def item(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def remove_named_item(self, name: str, /) -> typing.Optional[IXmlNode]: ...
    def remove_named_item_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], name: str, /) -> typing.Optional[IXmlNode]: ...
    def set_named_item(self, node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def set_named_item_n_s(self, node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class XmlNodeList(winrt.system.Object, winrt._winrt.Sequence[IXmlNode]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IXmlNode]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> IXmlNode: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IXmlNode]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlNodeList: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IXmlNode]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IXmlNode], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[IXmlNode], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def item(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class XmlProcessingInstruction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlProcessingInstruction: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def target(self) -> str: ...

@typing.final
class XmlText(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlText: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class IXmlCharacterData(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlCharacterData: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class IXmlNode(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNode: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class IXmlNodeSelector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNodeSelector: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

@typing.final
class IXmlNodeSerializer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNodeSerializer: ...
    def get_xml(self) -> str: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

@typing.final
class IXmlText(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlText: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...
    @_property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def attributes(self) -> typing.Optional[XmlNamedNodeMap]: ...
    @_property
    def child_nodes(self) -> typing.Optional[XmlNodeList]: ...
    @_property
    def first_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def last_child(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def local_name(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def namespace_uri(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def next_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def node_name(self) -> str: ...
    @_property
    def node_type(self) -> NodeType: ...
    @_property
    def node_value(self) -> typing.Optional[winrt.system.Object]: ...
    @node_value.setter
    def node_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def owner_document(self) -> typing.Optional[XmlDocument]: ...
    @_property
    def parent_node(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def prefix(self) -> typing.Optional[winrt.system.Object]: ...
    @prefix.setter
    def prefix(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def previous_sibling(self) -> typing.Optional[IXmlNode]: ...
    @_property
    def inner_text(self) -> str: ...
    @inner_text.setter
    def inner_text(self, value: str) -> None: ...

