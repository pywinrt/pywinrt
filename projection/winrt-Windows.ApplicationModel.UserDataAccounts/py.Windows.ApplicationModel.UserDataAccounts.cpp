// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.UserDataAccounts.h"


namespace py::cpp::Windows::ApplicationModel::UserDataAccounts
{
    // ----- UserDataAccount class --------------------

    static PyObject* _new_UserDataAccount(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataAccount(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataAccount_DeleteAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"DeleteAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.DeleteAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindAppointmentCalendarsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindAppointmentCalendarsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindAppointmentCalendarsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactAnnotationListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindContactAnnotationListsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindContactAnnotationListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactGroupsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindContactGroupsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindContactGroupsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindContactListsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindContactListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindEmailMailboxesAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindEmailMailboxesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindEmailMailboxesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindUserDataTaskListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"FindUserDataTaskListsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindUserDataTaskListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_SaveAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"SaveAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_TryShowCreateContactGroupAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"TryShowCreateContactGroupAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.TryShowCreateContactGroupAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_UserDisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"UserDisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UserDisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_UserDisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"UserDisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.UserDisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"OtherAppReadAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OtherAppReadAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"OtherAppReadAccess"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountOtherAppReadAccess>(arg);

            self->obj.OtherAppReadAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_Icon(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"Icon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Icon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_Icon(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"Icon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Icon(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_DeviceAccountTypeId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"DeviceAccountTypeId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DeviceAccountTypeId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_Id(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_PackageFamilyName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"PackageFamilyName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_IsProtectedUnderLock(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"IsProtectedUnderLock"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsProtectedUnderLock());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_IsProtectedUnderLock(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"IsProtectedUnderLock"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsProtectedUnderLock(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_EnterpriseId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"EnterpriseId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EnterpriseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_ExplictReadAccessPackageFamilyNames(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"ExplictReadAccessPackageFamilyNames"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExplictReadAccessPackageFamilyNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_CanShowCreateContactGroup(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"CanShowCreateContactGroup"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CanShowCreateContactGroup());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_CanShowCreateContactGroup(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"CanShowCreateContactGroup"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.CanShowCreateContactGroup(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_ProviderProperties(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccount", L"ProviderProperties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProviderProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataAccount(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataAccount(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccount[] = {
        { "delete_async", reinterpret_cast<PyCFunction>(UserDataAccount_DeleteAsync), METH_VARARGS, nullptr },
        { "find_appointment_calendars_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindAppointmentCalendarsAsync), METH_VARARGS, nullptr },
        { "find_contact_annotation_lists_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindContactAnnotationListsAsync), METH_VARARGS, nullptr },
        { "find_contact_groups_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindContactGroupsAsync), METH_VARARGS, nullptr },
        { "find_contact_lists_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindContactListsAsync), METH_VARARGS, nullptr },
        { "find_email_mailboxes_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindEmailMailboxesAsync), METH_VARARGS, nullptr },
        { "find_user_data_task_lists_async", reinterpret_cast<PyCFunction>(UserDataAccount_FindUserDataTaskListsAsync), METH_VARARGS, nullptr },
        { "save_async", reinterpret_cast<PyCFunction>(UserDataAccount_SaveAsync), METH_VARARGS, nullptr },
        { "try_show_create_contact_group_async", reinterpret_cast<PyCFunction>(UserDataAccount_TryShowCreateContactGroupAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataAccount, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataAccount), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataAccount[] = {
        { "user_display_name", reinterpret_cast<getter>(UserDataAccount_get_UserDisplayName), reinterpret_cast<setter>(UserDataAccount_put_UserDisplayName), nullptr, nullptr },
        { "other_app_read_access", reinterpret_cast<getter>(UserDataAccount_get_OtherAppReadAccess), reinterpret_cast<setter>(UserDataAccount_put_OtherAppReadAccess), nullptr, nullptr },
        { "icon", reinterpret_cast<getter>(UserDataAccount_get_Icon), reinterpret_cast<setter>(UserDataAccount_put_Icon), nullptr, nullptr },
        { "device_account_type_id", reinterpret_cast<getter>(UserDataAccount_get_DeviceAccountTypeId), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(UserDataAccount_get_Id), nullptr, nullptr, nullptr },
        { "package_family_name", reinterpret_cast<getter>(UserDataAccount_get_PackageFamilyName), nullptr, nullptr, nullptr },
        { "is_protected_under_lock", reinterpret_cast<getter>(UserDataAccount_get_IsProtectedUnderLock), reinterpret_cast<setter>(UserDataAccount_put_IsProtectedUnderLock), nullptr, nullptr },
        { "enterprise_id", reinterpret_cast<getter>(UserDataAccount_get_EnterpriseId), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(UserDataAccount_get_DisplayName), reinterpret_cast<setter>(UserDataAccount_put_DisplayName), nullptr, nullptr },
        { "explict_read_access_package_family_names", reinterpret_cast<getter>(UserDataAccount_get_ExplictReadAccessPackageFamilyNames), nullptr, nullptr, nullptr },
        { "can_show_create_contact_group", reinterpret_cast<getter>(UserDataAccount_get_CanShowCreateContactGroup), reinterpret_cast<setter>(UserDataAccount_put_CanShowCreateContactGroup), nullptr, nullptr },
        { "provider_properties", reinterpret_cast<getter>(UserDataAccount_get_ProviderProperties), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataAccount[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataAccount) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataAccount) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataAccount) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataAccount) },
        { },
    };

    static PyType_Spec type_spec_UserDataAccount =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccount",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccount
    };

    // ----- UserDataAccountManager class --------------------

    static PyObject* _new_UserDataAccountManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager>::type_name);
        return nullptr;
    }

    static PyObject* UserDataAccountManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManager", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_RequestStoreAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManager", L"RequestStoreAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAccountErrorResolverAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManager", L"ShowAccountErrorResolverAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAccountErrorResolverAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAccountSettingsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManager", L"ShowAccountSettingsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAccountSettingsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAddAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManager", L"ShowAddAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountContentKinds>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAddAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountManager[] = {
        { }
    };

    static PyGetSetDef _getset_UserDataAccountManager[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataAccountManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataAccountManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataAccountManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataAccountManager) },
        { },
    };

    static PyType_Spec type_spec_UserDataAccountManager =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccountManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountManager
    };

    static PyGetSetDef getset_UserDataAccountManager_Static[] = {
        { }
    };

    static PyMethodDef methods_UserDataAccountManager_Static[] = {
        { "get_for_user", reinterpret_cast<PyCFunction>(UserDataAccountManager_GetForUser), METH_VARARGS, nullptr },
        { "request_store_async", reinterpret_cast<PyCFunction>(UserDataAccountManager_RequestStoreAsync), METH_VARARGS, nullptr },
        { "show_account_error_resolver_async", reinterpret_cast<PyCFunction>(UserDataAccountManager_ShowAccountErrorResolverAsync), METH_VARARGS, nullptr },
        { "show_account_settings_async", reinterpret_cast<PyCFunction>(UserDataAccountManager_ShowAccountSettingsAsync), METH_VARARGS, nullptr },
        { "show_add_account_async", reinterpret_cast<PyCFunction>(UserDataAccountManager_ShowAddAccountAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_UserDataAccountManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_UserDataAccountManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_UserDataAccountManager_Static) },
        { }
    };

    static PyType_Spec type_spec_UserDataAccountManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccountManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_UserDataAccountManager_Static
    };

    // ----- UserDataAccountManagerForUser class --------------------

    static PyObject* _new_UserDataAccountManagerForUser(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataAccountManagerForUser(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataAccountManagerForUser_RequestStoreAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManagerForUser", L"RequestStoreAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType>(args, 0);

                return py::convert(self->obj.RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManagerForUser_get_User(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountManagerForUser", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataAccountManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataAccountManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountManagerForUser[] = {
        { "request_store_async", reinterpret_cast<PyCFunction>(UserDataAccountManagerForUser_RequestStoreAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataAccountManagerForUser, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataAccountManagerForUser), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataAccountManagerForUser[] = {
        { "user", reinterpret_cast<getter>(UserDataAccountManagerForUser_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UserDataAccountManagerForUser[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataAccountManagerForUser) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataAccountManagerForUser) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataAccountManagerForUser) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataAccountManagerForUser) },
        { },
    };

    static PyType_Spec type_spec_UserDataAccountManagerForUser =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccountManagerForUser",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountManagerForUser
    };

    // ----- UserDataAccountStore class --------------------

    static PyObject* _new_UserDataAccountStore(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataAccountStore(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataAccountStore_CreateAccountAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"CreateAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"CreateAccountAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.CreateAccountAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"CreateAccountAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.CreateAccountAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_FindAccountsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"FindAccountsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_GetAccountAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"GetAccountAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_add_StoreChanged(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"StoreChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore, winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>>(arg);

            return py::convert(self->obj.StoreChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_remove_StoreChanged(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStore", L"StoreChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StoreChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataAccountStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataAccountStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountStore[] = {
        { "create_account_async", reinterpret_cast<PyCFunction>(UserDataAccountStore_CreateAccountAsync), METH_VARARGS, nullptr },
        { "find_accounts_async", reinterpret_cast<PyCFunction>(UserDataAccountStore_FindAccountsAsync), METH_VARARGS, nullptr },
        { "get_account_async", reinterpret_cast<PyCFunction>(UserDataAccountStore_GetAccountAsync), METH_VARARGS, nullptr },
        { "add_store_changed", reinterpret_cast<PyCFunction>(UserDataAccountStore_add_StoreChanged), METH_O, nullptr },
        { "remove_store_changed", reinterpret_cast<PyCFunction>(UserDataAccountStore_remove_StoreChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_UserDataAccountStore, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataAccountStore), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataAccountStore[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataAccountStore[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataAccountStore) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataAccountStore) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataAccountStore) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataAccountStore) },
        { },
    };

    static PyType_Spec type_spec_UserDataAccountStore =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccountStore",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountStore
    };

    // ----- UserDataAccountStoreChangedEventArgs class --------------------

    static PyObject* _new_UserDataAccountStoreChangedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_UserDataAccountStoreChangedEventArgs(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UserDataAccountStoreChangedEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.UserDataAccounts.UserDataAccountStoreChangedEventArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_UserDataAccountStoreChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_UserDataAccountStoreChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountStoreChangedEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(UserDataAccountStoreChangedEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_UserDataAccountStoreChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_UserDataAccountStoreChangedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserDataAccountStoreChangedEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_UserDataAccountStoreChangedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserDataAccountStoreChangedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_UserDataAccountStoreChangedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserDataAccountStoreChangedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserDataAccountStoreChangedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_UserDataAccountStoreChangedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_userdataaccounts.UserDataAccountStoreChangedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountStoreChangedEventArgs
    };

    // ----- Windows.ApplicationModel.UserDataAccounts Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::UserDataAccounts");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_userdataaccounts",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::UserDataAccounts

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_userdataaccounts(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::UserDataAccounts;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataAccount, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_UserDataAccountManager_Static{PyType_FromSpec(&type_spec_UserDataAccountManager_Static)};
    if (!type_UserDataAccountManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataAccountManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_UserDataAccountManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataAccountManagerForUser, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataAccountStore, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserDataAccountStoreChangedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
