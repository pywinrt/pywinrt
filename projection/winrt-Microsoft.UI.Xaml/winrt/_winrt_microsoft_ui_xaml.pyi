# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.composition as microsoft_ui_composition
import winrt.microsoft.ui.content as microsoft_ui_content
import winrt.microsoft.ui.dispatching as microsoft_ui_dispatching
import winrt.microsoft.ui.input as microsoft_ui_input
import winrt.microsoft.ui.windowing as microsoft_ui_windowing
import winrt.microsoft.ui.xaml.automation.peers as microsoft_ui_xaml_automation_peers
import winrt.microsoft.ui.xaml.controls as microsoft_ui_xaml_controls
import winrt.microsoft.ui.xaml.controls.primitives as microsoft_ui_xaml_controls_primitives
import winrt.microsoft.ui.xaml.data as microsoft_ui_xaml_data
import winrt.microsoft.ui.xaml.input as microsoft_ui_xaml_input
import winrt.microsoft.ui.xaml.media as microsoft_ui_xaml_media
import winrt.microsoft.ui.xaml.media.animation as microsoft_ui_xaml_media_animation
import winrt.microsoft.ui.xaml.media.imaging as microsoft_ui_xaml_media_imaging
import winrt.microsoft.ui.xaml.media.media3d as microsoft_ui_xaml_media_media3d
import winrt.microsoft.windows.applicationmodel.resources as microsoft_windows_applicationmodel_resources
import winrt.windows.applicationmodel.activation as windows_applicationmodel_activation
import winrt.windows.applicationmodel.core as windows_applicationmodel_core
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.applicationmodel.datatransfer.dragdrop as windows_applicationmodel_datatransfer_dragdrop
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.ui as windows_ui
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.xaml.interop as windows_ui_xaml_interop

from winrt.microsoft.ui.xaml import ApplicationHighContrastAdjustment, ApplicationRequiresPointerMode, ApplicationTheme, AutomationTextAttributesEnum, DispatcherShutdownMode, DurationType, ElementHighContrastAdjustment, ElementSoundKind, ElementSoundMode, ElementSoundPlayerState, ElementSpatialAudioMode, ElementTheme, FlowDirection, FocusState, FocusVisualKind, FontCapitals, FontEastAsianLanguage, FontEastAsianWidths, FontFraction, FontNumeralAlignment, FontNumeralStyle, FontVariants, GridUnitType, HorizontalAlignment, LayoutCycleDebugBreakLevel, LayoutCycleTracingLevel, LineStackingStrategy, OpticalMarginAlignment, TextAlignment, TextLineBounds, TextReadingOrder, TextTrimming, TextWrapping, Vector3TransitionComponents, VerticalAlignment, Visibility, WindowActivationState
from winrt.microsoft.ui.xaml import ApplicationInitializationCallback, BindingFailedEventHandler, CreateDefaultValueCallback, DependencyPropertyChangedCallback, DependencyPropertyChangedEventHandler, DragEventHandler, EnteredBackgroundEventHandler, ExceptionRoutedEventHandler, LeavingBackgroundEventHandler, PropertyChangedCallback, RoutedEventHandler, SizeChangedEventHandler, SuspendingEventHandler, UnhandledExceptionEventHandler, VisualStateChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class CornerRadius:
    top_left: winrt.system.Double
    top_right: winrt.system.Double
    bottom_right: winrt.system.Double
    bottom_left: winrt.system.Double
    def __init__(self, top_left: winrt.system.Double = 0, top_right: winrt.system.Double = 0, bottom_right: winrt.system.Double = 0, bottom_left: winrt.system.Double = 0) -> None: ...

@typing.final
class Duration:
    time_span: datetime.timedelta
    type: DurationType
    def __init__(self, time_span: datetime.timedelta = datetime.timedelta(0), type: DurationType = DurationType(0)) -> None: ...

@typing.final
class GridLength:
    value: winrt.system.Double
    grid_unit_type: GridUnitType
    def __init__(self, value: winrt.system.Double = 0, grid_unit_type: GridUnitType = GridUnitType(0)) -> None: ...

@typing.final
class Thickness:
    left: winrt.system.Double
    top: winrt.system.Double
    right: winrt.system.Double
    bottom: winrt.system.Double
    def __init__(self, left: winrt.system.Double = 0, top: winrt.system.Double = 0, right: winrt.system.Double = 0, bottom: winrt.system.Double = 0) -> None: ...

class AdaptiveTrigger_Static(StateTriggerBase_Static):
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.AdaptiveTrigger::get_MinWindowHeightProperty()
    @_property
    @typing.final
    def min_window_height_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.AdaptiveTrigger::get_MinWindowWidthProperty()
    @_property
    @typing.final
    def min_window_width_property(cls) -> DependencyProperty: ...

class AdaptiveTrigger(StateTriggerBase, metaclass=AdaptiveTrigger_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Double Microsoft.UI.Xaml.AdaptiveTrigger::get_MinWindowWidth()
    @_property
    def min_window_width(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.AdaptiveTrigger::put_MinWindowWidth(System.Double)
    @min_window_width.setter
    @typing.final
    def min_window_width(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.AdaptiveTrigger::get_MinWindowHeight()
    @_property
    def min_window_height(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.AdaptiveTrigger::put_MinWindowHeight(System.Double)
    @min_window_height.setter
    @typing.final
    def min_window_height(self, value: winrt.system.Double) -> None: ...

class Application_Static(type):
    # System.Void Microsoft.UI.Xaml.Application::LoadComponent(System.Object,Windows.Foundation.Uri)
    def load_component(cls, component: winrt.system.Object, resource_locator: windows_foundation.Uri, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.Application::LoadComponent(System.Object,Windows.Foundation.Uri,Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation)
    def load_component_with_resource_location(cls, component: winrt.system.Object, resource_locator: windows_foundation.Uri, component_resource_location: microsoft_ui_xaml_controls_primitives.ComponentResourceLocation, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.Application::Start(Microsoft.UI.Xaml.ApplicationInitializationCallback)
    def start(cls, callback: ApplicationInitializationCallback, /) -> None: ...
    # Microsoft.UI.Xaml.Application Microsoft.UI.Xaml.Application::get_Current()
    @_property
    @typing.final
    def current(cls) -> Application: ...

class Application(winrt.system.Object, metaclass=Application_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Application::Exit()
    def exit(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.Application::OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs)
    def _on_launched(self, args: LaunchActivatedEventArgs, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Application::add_UnhandledException(Microsoft.UI.Xaml.UnhandledExceptionEventHandler)
    def add_unhandled_exception(self, handler: UnhandledExceptionEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Application::remove_UnhandledException(Windows.Foundation.EventRegistrationToken)
    def remove_unhandled_exception(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Application::add_ResourceManagerRequested(Windows.Foundation.TypedEventHandler`2<System.Object,Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>)
    def add_resource_manager_requested(self, handler: windows_foundation.TypedEventHandler[winrt.system.Object, ResourceManagerRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Application::remove_ResourceManagerRequested(Windows.Foundation.EventRegistrationToken)
    def remove_resource_manager_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Microsoft.UI.Xaml.ResourceDictionary Microsoft.UI.Xaml.Application::get_Resources()
    @_property
    def resources(self) -> ResourceDictionary: ...
    # System.Void Microsoft.UI.Xaml.Application::put_Resources(Microsoft.UI.Xaml.ResourceDictionary)
    @resources.setter
    @typing.final
    def resources(self, value: ResourceDictionary) -> None: ...
    # Microsoft.UI.Xaml.ApplicationTheme Microsoft.UI.Xaml.Application::get_RequestedTheme()
    @_property
    def requested_theme(self) -> ApplicationTheme: ...
    # System.Void Microsoft.UI.Xaml.Application::put_RequestedTheme(Microsoft.UI.Xaml.ApplicationTheme)
    @requested_theme.setter
    @typing.final
    def requested_theme(self, value: ApplicationTheme) -> None: ...
    # Microsoft.UI.Xaml.ApplicationHighContrastAdjustment Microsoft.UI.Xaml.Application::get_HighContrastAdjustment()
    @_property
    def high_contrast_adjustment(self) -> ApplicationHighContrastAdjustment: ...
    # System.Void Microsoft.UI.Xaml.Application::put_HighContrastAdjustment(Microsoft.UI.Xaml.ApplicationHighContrastAdjustment)
    @high_contrast_adjustment.setter
    @typing.final
    def high_contrast_adjustment(self, value: ApplicationHighContrastAdjustment) -> None: ...
    # Microsoft.UI.Xaml.FocusVisualKind Microsoft.UI.Xaml.Application::get_FocusVisualKind()
    @_property
    def focus_visual_kind(self) -> FocusVisualKind: ...
    # System.Void Microsoft.UI.Xaml.Application::put_FocusVisualKind(Microsoft.UI.Xaml.FocusVisualKind)
    @focus_visual_kind.setter
    @typing.final
    def focus_visual_kind(self, value: FocusVisualKind) -> None: ...
    # Microsoft.UI.Xaml.DebugSettings Microsoft.UI.Xaml.Application::get_DebugSettings()
    @_property
    @typing.final
    def debug_settings(self) -> DebugSettings: ...
    # Microsoft.UI.Xaml.DispatcherShutdownMode Microsoft.UI.Xaml.Application::get_DispatcherShutdownMode()
    @_property
    def dispatcher_shutdown_mode(self) -> DispatcherShutdownMode: ...
    # System.Void Microsoft.UI.Xaml.Application::put_DispatcherShutdownMode(Microsoft.UI.Xaml.DispatcherShutdownMode)
    @dispatcher_shutdown_mode.setter
    @typing.final
    def dispatcher_shutdown_mode(self, value: DispatcherShutdownMode) -> None: ...

@typing.final
class ApplicationInitializationCallbackParams(winrt.system.Object):
    pass

@typing.final
class BindingFailedEventArgs(winrt.system.Object):
    # System.String Microsoft.UI.Xaml.BindingFailedEventArgs::get_Message()
    @_property
    def message(self) -> str: ...

@typing.final
class BringIntoViewOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewOptions::get_VerticalOffset()
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_VerticalOffset(System.Double)
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewOptions::get_VerticalAlignmentRatio()
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_VerticalAlignmentRatio(System.Double)
    @vertical_alignment_ratio.setter
    def vertical_alignment_ratio(self, value: winrt.system.Double) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.Rect> Microsoft.UI.Xaml.BringIntoViewOptions::get_TargetRect()
    @_property
    def target_rect(self) -> typing.Optional[windows_foundation.Rect]: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_TargetRect(Windows.Foundation.IReference`1<Windows.Foundation.Rect>)
    @target_rect.setter
    def target_rect(self, value: typing.Optional[windows_foundation.Rect]) -> None: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewOptions::get_HorizontalOffset()
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_HorizontalOffset(System.Double)
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewOptions::get_HorizontalAlignmentRatio()
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_HorizontalAlignmentRatio(System.Double)
    @horizontal_alignment_ratio.setter
    def horizontal_alignment_ratio(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.BringIntoViewOptions::get_AnimationDesired()
    @_property
    def animation_desired(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewOptions::put_AnimationDesired(System.Boolean)
    @animation_desired.setter
    def animation_desired(self, value: bool) -> None: ...

@typing.final
class BringIntoViewRequestedEventArgs(RoutedEventArgs):
    # System.Double Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_VerticalOffset()
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_VerticalOffset(System.Double)
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_TargetRect()
    @_property
    def target_rect(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_TargetRect(Windows.Foundation.Rect)
    @target_rect.setter
    def target_rect(self, value: windows_foundation.Rect) -> None: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_TargetElement()
    @_property
    def target_element(self) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_TargetElement(Microsoft.UI.Xaml.UIElement)
    @target_element.setter
    def target_element(self, value: UIElement) -> None: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_HorizontalOffset()
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_HorizontalOffset(System.Double)
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_AnimationDesired()
    @_property
    def animation_desired(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::put_AnimationDesired(System.Boolean)
    @animation_desired.setter
    def animation_desired(self, value: bool) -> None: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_HorizontalAlignmentRatio()
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Double: ...
    # System.Double Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs::get_VerticalAlignmentRatio()
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Double: ...

class BrushTransition_Static(type):
    pass

class BrushTransition(winrt.system.Object, metaclass=BrushTransition_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.TimeSpan Microsoft.UI.Xaml.BrushTransition::get_Duration()
    @_property
    def duration(self) -> datetime.timedelta: ...
    # System.Void Microsoft.UI.Xaml.BrushTransition::put_Duration(Windows.Foundation.TimeSpan)
    @duration.setter
    @typing.final
    def duration(self, value: datetime.timedelta) -> None: ...

class ColorPaletteResources_Static(ResourceDictionary_Static):
    pass

class ColorPaletteResources(ResourceDictionary, metaclass=ColorPaletteResources_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ListMedium()
    @_property
    def list_medium(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ListMedium(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @list_medium.setter
    @typing.final
    def list_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ListLow()
    @_property
    def list_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ListLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @list_low.setter
    @typing.final
    def list_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ErrorText()
    @_property
    def error_text(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ErrorText(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @error_text.setter
    @typing.final
    def error_text(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeWhite()
    @_property
    def chrome_white(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeWhite(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_white.setter
    @typing.final
    def chrome_white(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeMediumLow()
    @_property
    def chrome_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeMediumLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_medium_low.setter
    @typing.final
    def chrome_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeMedium()
    @_property
    def chrome_medium(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeMedium(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_medium.setter
    @typing.final
    def chrome_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeLow()
    @_property
    def chrome_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_low.setter
    @typing.final
    def chrome_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeHigh()
    @_property
    def chrome_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_high.setter
    @typing.final
    def chrome_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeGray()
    @_property
    def chrome_gray(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeGray(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_gray.setter
    @typing.final
    def chrome_gray(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeDisabledLow()
    @_property
    def chrome_disabled_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeDisabledLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_disabled_low.setter
    @typing.final
    def chrome_disabled_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeDisabledHigh()
    @_property
    def chrome_disabled_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeDisabledHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_disabled_high.setter
    @typing.final
    def chrome_disabled_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeBlackMediumLow()
    @_property
    def chrome_black_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeBlackMediumLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_black_medium_low.setter
    @typing.final
    def chrome_black_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeBlackMedium()
    @_property
    def chrome_black_medium(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeBlackMedium(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_black_medium.setter
    @typing.final
    def chrome_black_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeBlackLow()
    @_property
    def chrome_black_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeBlackLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_black_low.setter
    @typing.final
    def chrome_black_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeBlackHigh()
    @_property
    def chrome_black_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeBlackHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_black_high.setter
    @typing.final
    def chrome_black_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_ChromeAltLow()
    @_property
    def chrome_alt_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_ChromeAltLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @chrome_alt_low.setter
    @typing.final
    def chrome_alt_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_BaseMediumLow()
    @_property
    def base_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_BaseMediumLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @base_medium_low.setter
    @typing.final
    def base_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_BaseMediumHigh()
    @_property
    def base_medium_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_BaseMediumHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @base_medium_high.setter
    @typing.final
    def base_medium_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_BaseMedium()
    @_property
    def base_medium(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_BaseMedium(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @base_medium.setter
    @typing.final
    def base_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_BaseLow()
    @_property
    def base_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_BaseLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @base_low.setter
    @typing.final
    def base_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_BaseHigh()
    @_property
    def base_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_BaseHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @base_high.setter
    @typing.final
    def base_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_AltMediumLow()
    @_property
    def alt_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_AltMediumLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @alt_medium_low.setter
    @typing.final
    def alt_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_AltMediumHigh()
    @_property
    def alt_medium_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_AltMediumHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @alt_medium_high.setter
    @typing.final
    def alt_medium_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_AltMedium()
    @_property
    def alt_medium(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_AltMedium(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @alt_medium.setter
    @typing.final
    def alt_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_AltLow()
    @_property
    def alt_low(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_AltLow(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @alt_low.setter
    @typing.final
    def alt_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_AltHigh()
    @_property
    def alt_high(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_AltHigh(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @alt_high.setter
    @typing.final
    def alt_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Microsoft.UI.Xaml.ColorPaletteResources::get_Accent()
    @_property
    def accent(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Microsoft.UI.Xaml.ColorPaletteResources::put_Accent(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @accent.setter
    @typing.final
    def accent(self, value: typing.Optional[windows_ui.Color]) -> None: ...

@typing.final
class CornerRadiusHelper_Static(type):
    # Microsoft.UI.Xaml.CornerRadius Microsoft.UI.Xaml.CornerRadiusHelper::FromRadii(System.Double,System.Double,System.Double,System.Double)
    def from_radii(cls, top_left: winrt.system.Double, top_right: winrt.system.Double, bottom_right: winrt.system.Double, bottom_left: winrt.system.Double, /) -> CornerRadius: ...
    # Microsoft.UI.Xaml.CornerRadius Microsoft.UI.Xaml.CornerRadiusHelper::FromUniformRadius(System.Double)
    def from_uniform_radius(cls, uniform_radius: winrt.system.Double, /) -> CornerRadius: ...

@typing.final
class CornerRadiusHelper(winrt.system.Object, metaclass=CornerRadiusHelper_Static):
    pass

@typing.final
class DataContextChangedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.DataContextChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DataContextChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Object Microsoft.UI.Xaml.DataContextChangedEventArgs::get_NewValue()
    @_property
    def new_value(self) -> winrt.system.Object: ...

class DataTemplate_Static(FrameworkTemplate_Static):
    # Microsoft.UI.Xaml.IDataTemplateExtension Microsoft.UI.Xaml.DataTemplate::GetExtensionInstance(Microsoft.UI.Xaml.FrameworkElement)
    def get_extension_instance(cls, element: FrameworkElement, /) -> IDataTemplateExtension: ...
    # System.Void Microsoft.UI.Xaml.DataTemplate::SetExtensionInstance(Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.IDataTemplateExtension)
    def set_extension_instance(cls, element: FrameworkElement, value: IDataTemplateExtension, /) -> None: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.DataTemplate::get_ExtensionInstanceProperty()
    @_property
    @typing.final
    def extension_instance_property(cls) -> DependencyProperty: ...

class DataTemplate(FrameworkTemplate, IElementFactory, metaclass=DataTemplate_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.DataTemplate::GetElement(Microsoft.UI.Xaml.ElementFactoryGetArgs)
    def get_element(self, args: ElementFactoryGetArgs, /) -> UIElement: ...
    @typing.final
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.DataTemplate::LoadContent()
    def load_content(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.DataTemplate::RecycleElement(Microsoft.UI.Xaml.ElementFactoryRecycleArgs)
    def recycle_element(self, args: ElementFactoryRecycleArgs, /) -> None: ...

class DataTemplateKey_Static(type):
    pass

class DataTemplateKey(winrt.system.Object, metaclass=DataTemplateKey_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data_type: winrt.system.Object) -> Self: ...
    # System.Object Microsoft.UI.Xaml.DataTemplateKey::get_DataType()
    @_property
    def data_type(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.DataTemplateKey::put_DataType(System.Object)
    @data_type.setter
    @typing.final
    def data_type(self, value: winrt.system.Object) -> None: ...

@typing.final
class DebugSettings(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.DebugSettings::add_BindingFailed(Microsoft.UI.Xaml.BindingFailedEventHandler)
    def add_binding_failed(self, handler: BindingFailedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::remove_BindingFailed(Windows.Foundation.EventRegistrationToken)
    def remove_binding_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.DebugSettings::add_XamlResourceReferenceFailed(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.DebugSettings,Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>)
    def add_xaml_resource_reference_failed(self, handler: windows_foundation.TypedEventHandler[DebugSettings, XamlResourceReferenceFailedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::remove_XamlResourceReferenceFailed(Windows.Foundation.EventRegistrationToken)
    def remove_xaml_resource_reference_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DebugSettings::get_IsTextPerformanceVisualizationEnabled()
    @_property
    def is_text_performance_visualization_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_IsTextPerformanceVisualizationEnabled(System.Boolean)
    @is_text_performance_visualization_enabled.setter
    def is_text_performance_visualization_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DebugSettings::get_IsBindingTracingEnabled()
    @_property
    def is_binding_tracing_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_IsBindingTracingEnabled(System.Boolean)
    @is_binding_tracing_enabled.setter
    def is_binding_tracing_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DebugSettings::get_FailFastOnErrors()
    @_property
    def fail_fast_on_errors(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_FailFastOnErrors(System.Boolean)
    @fail_fast_on_errors.setter
    def fail_fast_on_errors(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DebugSettings::get_EnableFrameRateCounter()
    @_property
    def enable_frame_rate_counter(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_EnableFrameRateCounter(System.Boolean)
    @enable_frame_rate_counter.setter
    def enable_frame_rate_counter(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DebugSettings::get_IsXamlResourceReferenceTracingEnabled()
    @_property
    def is_xaml_resource_reference_tracing_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_IsXamlResourceReferenceTracingEnabled(System.Boolean)
    @is_xaml_resource_reference_tracing_enabled.setter
    def is_xaml_resource_reference_tracing_enabled(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.LayoutCycleTracingLevel Microsoft.UI.Xaml.DebugSettings::get_LayoutCycleTracingLevel()
    @_property
    def layout_cycle_tracing_level(self) -> LayoutCycleTracingLevel: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_LayoutCycleTracingLevel(Microsoft.UI.Xaml.LayoutCycleTracingLevel)
    @layout_cycle_tracing_level.setter
    def layout_cycle_tracing_level(self, value: LayoutCycleTracingLevel) -> None: ...
    # Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel Microsoft.UI.Xaml.DebugSettings::get_LayoutCycleDebugBreakLevel()
    @_property
    def layout_cycle_debug_break_level(self) -> LayoutCycleDebugBreakLevel: ...
    # System.Void Microsoft.UI.Xaml.DebugSettings::put_LayoutCycleDebugBreakLevel(Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel)
    @layout_cycle_debug_break_level.setter
    def layout_cycle_debug_break_level(self, value: LayoutCycleDebugBreakLevel) -> None: ...

class DependencyObject_Static(type):
    pass

class DependencyObject(winrt.system.Object, metaclass=DependencyObject_Static):
    @typing.final
    # System.Void Microsoft.UI.Xaml.DependencyObject::ClearValue(Microsoft.UI.Xaml.DependencyProperty)
    def clear_value(self, dp: DependencyProperty, /) -> None: ...
    @typing.final
    # System.Object Microsoft.UI.Xaml.DependencyObject::GetAnimationBaseValue(Microsoft.UI.Xaml.DependencyProperty)
    def get_animation_base_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    @typing.final
    # System.Object Microsoft.UI.Xaml.DependencyObject::GetValue(Microsoft.UI.Xaml.DependencyProperty)
    def get_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    @typing.final
    # System.Object Microsoft.UI.Xaml.DependencyObject::ReadLocalValue(Microsoft.UI.Xaml.DependencyProperty)
    def read_local_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    @typing.final
    # System.Int64 Microsoft.UI.Xaml.DependencyObject::RegisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty,Microsoft.UI.Xaml.DependencyPropertyChangedCallback)
    def register_property_changed_callback(self, dp: DependencyProperty, callback: DependencyPropertyChangedCallback, /) -> winrt.system.Int64: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DependencyObject::SetValue(Microsoft.UI.Xaml.DependencyProperty,System.Object)
    def set_value(self, dp: DependencyProperty, value: winrt.system.Object, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DependencyObject::UnregisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty,System.Int64)
    def unregister_property_changed_callback(self, dp: DependencyProperty, token: winrt.system.Int64, /) -> None: ...
    # Windows.UI.Core.CoreDispatcher Microsoft.UI.Xaml.DependencyObject::get_Dispatcher()
    @_property
    @typing.final
    def dispatcher(self) -> windows_ui_core.CoreDispatcher: ...
    # Microsoft.UI.Dispatching.DispatcherQueue Microsoft.UI.Xaml.DependencyObject::get_DispatcherQueue()
    @_property
    @typing.final
    def dispatcher_queue(self) -> microsoft_ui_dispatching.DispatcherQueue: ...

class DependencyObjectCollection_Static(DependencyObject_Static):
    pass

class DependencyObjectCollection(DependencyObject, windows_foundation_collections.IObservableVector[DependencyObject], winrt._winrt.MutableSequence[DependencyObject], metaclass=DependencyObjectCollection_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[DependencyObject]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> DependencyObject: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[DependencyObject]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: DependencyObject) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[DependencyObject]) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::Append(Microsoft.UI.Xaml.DependencyObject)
    def append(self, value: DependencyObject, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Microsoft.UI.Xaml.DependencyObject> Microsoft.UI.Xaml.DependencyObjectCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[DependencyObject]: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.DependencyObjectCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> DependencyObject: ...
    # System.UInt32 Microsoft.UI.Xaml.DependencyObjectCollection::GetMany(System.UInt32,Microsoft.UI.Xaml.DependencyObject[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[DependencyObject], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.DependencyObject> Microsoft.UI.Xaml.DependencyObjectCollection::GetView()
    def get_view(self) -> typing.Sequence[DependencyObject]: ...
    # System.Boolean Microsoft.UI.Xaml.DependencyObjectCollection::IndexOf(Microsoft.UI.Xaml.DependencyObject,System.UInt32&)
    def index_of(self, value: DependencyObject, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::InsertAt(System.UInt32,Microsoft.UI.Xaml.DependencyObject)
    def insert_at(self, index: winrt.system.UInt32, value: DependencyObject, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::ReplaceAll(Microsoft.UI.Xaml.DependencyObject[])
    def replace_all(self, items: typing.Union[winrt.system.Array[DependencyObject], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::SetAt(System.UInt32,Microsoft.UI.Xaml.DependencyObject)
    def set_at(self, index: winrt.system.UInt32, value: DependencyObject, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.DependencyObjectCollection::add_VectorChanged(Windows.Foundation.Collections.VectorChangedEventHandler`1<Microsoft.UI.Xaml.DependencyObject>)
    def add_vector_changed(self, vhnd: windows_foundation_collections.VectorChangedEventHandler[DependencyObject], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DependencyObjectCollection::remove_VectorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_vector_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Microsoft.UI.Xaml.DependencyObjectCollection::get_Size()
    @_property
    @typing.final
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DependencyProperty_Static(type):
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.DependencyProperty::Register(System.String,Windows.UI.Xaml.Interop.TypeName,Windows.UI.Xaml.Interop.TypeName,Microsoft.UI.Xaml.PropertyMetadata)
    def register(cls, name: str, property_type: windows_ui_xaml_interop.TypeName, owner_type: windows_ui_xaml_interop.TypeName, type_metadata: PropertyMetadata, /) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.DependencyProperty::RegisterAttached(System.String,Windows.UI.Xaml.Interop.TypeName,Windows.UI.Xaml.Interop.TypeName,Microsoft.UI.Xaml.PropertyMetadata)
    def register_attached(cls, name: str, property_type: windows_ui_xaml_interop.TypeName, owner_type: windows_ui_xaml_interop.TypeName, default_metadata: PropertyMetadata, /) -> DependencyProperty: ...
    # System.Object Microsoft.UI.Xaml.DependencyProperty::get_UnsetValue()
    @_property
    def unset_value(cls) -> winrt.system.Object: ...

@typing.final
class DependencyProperty(winrt.system.Object, metaclass=DependencyProperty_Static):
    # Microsoft.UI.Xaml.PropertyMetadata Microsoft.UI.Xaml.DependencyProperty::GetMetadata(Windows.UI.Xaml.Interop.TypeName)
    def get_metadata(self, for_type: windows_ui_xaml_interop.TypeName, /) -> PropertyMetadata: ...

@typing.final
class DependencyPropertyChangedEventArgs(winrt.system.Object):
    # System.Object Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs::get_NewValue()
    @_property
    def new_value(self) -> winrt.system.Object: ...
    # System.Object Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs::get_OldValue()
    @_property
    def old_value(self) -> winrt.system.Object: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs::get_Property()
    @_property
    def property(self) -> DependencyProperty: ...

class DispatcherTimer_Static(type):
    pass

class DispatcherTimer(winrt.system.Object, metaclass=DispatcherTimer_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DispatcherTimer::Start()
    def start(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DispatcherTimer::Stop()
    def stop(self) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.DispatcherTimer::add_Tick(Windows.Foundation.EventHandler`1<System.Object>)
    def add_tick(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.DispatcherTimer::remove_Tick(Windows.Foundation.EventRegistrationToken)
    def remove_tick(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.TimeSpan Microsoft.UI.Xaml.DispatcherTimer::get_Interval()
    @_property
    def interval(self) -> datetime.timedelta: ...
    # System.Void Microsoft.UI.Xaml.DispatcherTimer::put_Interval(Windows.Foundation.TimeSpan)
    @interval.setter
    @typing.final
    def interval(self, value: datetime.timedelta) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DispatcherTimer::get_IsEnabled()
    @_property
    @typing.final
    def is_enabled(self) -> bool: ...

@typing.final
class DragEventArgs(RoutedEventArgs):
    # Microsoft.UI.Xaml.DragOperationDeferral Microsoft.UI.Xaml.DragEventArgs::GetDeferral()
    def get_deferral(self) -> DragOperationDeferral: ...
    # Windows.Foundation.Point Microsoft.UI.Xaml.DragEventArgs::GetPosition(Microsoft.UI.Xaml.UIElement)
    def get_position(self, relative_to: UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Microsoft.UI.Xaml.DragEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DragEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackage Microsoft.UI.Xaml.DragEventArgs::get_Data()
    @_property
    def data(self) -> windows_applicationmodel_datatransfer.DataPackage: ...
    # System.Void Microsoft.UI.Xaml.DragEventArgs::put_Data(Windows.ApplicationModel.DataTransfer.DataPackage)
    @data.setter
    def data(self, value: windows_applicationmodel_datatransfer.DataPackage) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.UI.Xaml.DragEventArgs::get_AcceptedOperation()
    @_property
    def accepted_operation(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # System.Void Microsoft.UI.Xaml.DragEventArgs::put_AcceptedOperation(Windows.ApplicationModel.DataTransfer.DataPackageOperation)
    @accepted_operation.setter
    def accepted_operation(self, value: windows_applicationmodel_datatransfer.DataPackageOperation) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.UI.Xaml.DragEventArgs::get_AllowedOperations()
    @_property
    def allowed_operations(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageView Microsoft.UI.Xaml.DragEventArgs::get_DataView()
    @_property
    def data_view(self) -> windows_applicationmodel_datatransfer.DataPackageView: ...
    # Microsoft.UI.Xaml.DragUIOverride Microsoft.UI.Xaml.DragEventArgs::get_DragUIOverride()
    @_property
    def drag_ui_override(self) -> DragUIOverride: ...
    # Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers Microsoft.UI.Xaml.DragEventArgs::get_Modifiers()
    @_property
    def modifiers(self) -> windows_applicationmodel_datatransfer_dragdrop.DragDropModifiers: ...

@typing.final
class DragOperationDeferral(winrt.system.Object):
    # System.Void Microsoft.UI.Xaml.DragOperationDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class DragStartingEventArgs(RoutedEventArgs):
    # Microsoft.UI.Xaml.DragOperationDeferral Microsoft.UI.Xaml.DragStartingEventArgs::GetDeferral()
    def get_deferral(self) -> DragOperationDeferral: ...
    # Windows.Foundation.Point Microsoft.UI.Xaml.DragStartingEventArgs::GetPosition(Microsoft.UI.Xaml.UIElement)
    def get_position(self, relative_to: UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Microsoft.UI.Xaml.DragStartingEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DragStartingEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.UI.Xaml.DragStartingEventArgs::get_AllowedOperations()
    @_property
    def allowed_operations(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # System.Void Microsoft.UI.Xaml.DragStartingEventArgs::put_AllowedOperations(Windows.ApplicationModel.DataTransfer.DataPackageOperation)
    @allowed_operations.setter
    def allowed_operations(self, value: windows_applicationmodel_datatransfer.DataPackageOperation) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackage Microsoft.UI.Xaml.DragStartingEventArgs::get_Data()
    @_property
    def data(self) -> windows_applicationmodel_datatransfer.DataPackage: ...
    # Microsoft.UI.Xaml.DragUI Microsoft.UI.Xaml.DragStartingEventArgs::get_DragUI()
    @_property
    def drag_ui(self) -> DragUI: ...

@typing.final
class DragUI(winrt.system.Object):
    # System.Void Microsoft.UI.Xaml.DragUI::SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage)
    def set_content_from_bitmap_image(self, bitmap_image: microsoft_ui_xaml_media_imaging.BitmapImage, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUI::SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage,Windows.Foundation.Point)
    def set_content_from_bitmap_image_with_anchor_point(self, bitmap_image: microsoft_ui_xaml_media_imaging.BitmapImage, anchor_point: windows_foundation.Point, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUI::SetContentFromDataPackage()
    def set_content_from_data_package(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUI::SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap)
    def set_content_from_software_bitmap(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUI::SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap,Windows.Foundation.Point)
    def set_content_from_software_bitmap_with_anchor_point(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, anchor_point: windows_foundation.Point, /) -> None: ...

@typing.final
class DragUIOverride(winrt.system.Object):
    # System.Void Microsoft.UI.Xaml.DragUIOverride::Clear()
    def clear(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage)
    def set_content_from_bitmap_image(self, bitmap_image: microsoft_ui_xaml_media_imaging.BitmapImage, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage,Windows.Foundation.Point)
    def set_content_from_bitmap_image_with_anchor_point(self, bitmap_image: microsoft_ui_xaml_media_imaging.BitmapImage, anchor_point: windows_foundation.Point, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap)
    def set_content_from_software_bitmap(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap,Windows.Foundation.Point)
    def set_content_from_software_bitmap_with_anchor_point(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, anchor_point: windows_foundation.Point, /) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DragUIOverride::get_IsGlyphVisible()
    @_property
    def is_glyph_visible(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::put_IsGlyphVisible(System.Boolean)
    @is_glyph_visible.setter
    def is_glyph_visible(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DragUIOverride::get_IsContentVisible()
    @_property
    def is_content_visible(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::put_IsContentVisible(System.Boolean)
    @is_content_visible.setter
    def is_content_visible(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.DragUIOverride::get_IsCaptionVisible()
    @_property
    def is_caption_visible(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::put_IsCaptionVisible(System.Boolean)
    @is_caption_visible.setter
    def is_caption_visible(self, value: bool) -> None: ...
    # System.String Microsoft.UI.Xaml.DragUIOverride::get_Caption()
    @_property
    def caption(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.DragUIOverride::put_Caption(System.String)
    @caption.setter
    def caption(self, value: str) -> None: ...

@typing.final
class DropCompletedEventArgs(RoutedEventArgs):
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.UI.Xaml.DropCompletedEventArgs::get_DropResult()
    @_property
    def drop_result(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...

@typing.final
class DurationHelper_Static(type):
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.DurationHelper::Add(Microsoft.UI.Xaml.Duration,Microsoft.UI.Xaml.Duration)
    def add(cls, target: Duration, duration: Duration, /) -> Duration: ...
    # System.Int32 Microsoft.UI.Xaml.DurationHelper::Compare(Microsoft.UI.Xaml.Duration,Microsoft.UI.Xaml.Duration)
    def compare(cls, duration1: Duration, duration2: Duration, /) -> winrt.system.Int32: ...
    # System.Boolean Microsoft.UI.Xaml.DurationHelper::Equals(Microsoft.UI.Xaml.Duration,Microsoft.UI.Xaml.Duration)
    def equals(cls, target: Duration, value: Duration, /) -> bool: ...
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.DurationHelper::FromTimeSpan(Windows.Foundation.TimeSpan)
    def from_time_span(cls, time_span: datetime.timedelta, /) -> Duration: ...
    # System.Boolean Microsoft.UI.Xaml.DurationHelper::GetHasTimeSpan(Microsoft.UI.Xaml.Duration)
    def get_has_time_span(cls, target: Duration, /) -> bool: ...
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.DurationHelper::Subtract(Microsoft.UI.Xaml.Duration,Microsoft.UI.Xaml.Duration)
    def subtract(cls, target: Duration, duration: Duration, /) -> Duration: ...
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.DurationHelper::get_Automatic()
    @_property
    def automatic(cls) -> Duration: ...
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.DurationHelper::get_Forever()
    @_property
    def forever(cls) -> Duration: ...

@typing.final
class DurationHelper(winrt.system.Object, metaclass=DurationHelper_Static):
    pass

@typing.final
class EffectiveViewportChangedEventArgs(winrt.system.Object):
    # System.Double Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs::get_BringIntoViewDistanceX()
    @_property
    def bring_into_view_distance_x(self) -> winrt.system.Double: ...
    # System.Double Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs::get_BringIntoViewDistanceY()
    @_property
    def bring_into_view_distance_y(self) -> winrt.system.Double: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs::get_EffectiveViewport()
    @_property
    def effective_viewport(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs::get_MaxViewport()
    @_property
    def max_viewport(self) -> windows_foundation.Rect: ...

class ElementFactoryGetArgs_Static(type):
    pass

class ElementFactoryGetArgs(winrt.system.Object, metaclass=ElementFactoryGetArgs_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.ElementFactoryGetArgs::get_Parent()
    @_property
    def parent(self) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.ElementFactoryGetArgs::put_Parent(Microsoft.UI.Xaml.UIElement)
    @parent.setter
    @typing.final
    def parent(self, value: UIElement) -> None: ...
    # System.Object Microsoft.UI.Xaml.ElementFactoryGetArgs::get_Data()
    @_property
    def data(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.ElementFactoryGetArgs::put_Data(System.Object)
    @data.setter
    @typing.final
    def data(self, value: winrt.system.Object) -> None: ...

class ElementFactoryRecycleArgs_Static(type):
    pass

class ElementFactoryRecycleArgs(winrt.system.Object, metaclass=ElementFactoryRecycleArgs_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.ElementFactoryRecycleArgs::get_Parent()
    @_property
    def parent(self) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.ElementFactoryRecycleArgs::put_Parent(Microsoft.UI.Xaml.UIElement)
    @parent.setter
    @typing.final
    def parent(self, value: UIElement) -> None: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.ElementFactoryRecycleArgs::get_Element()
    @_property
    def element(self) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.ElementFactoryRecycleArgs::put_Element(Microsoft.UI.Xaml.UIElement)
    @element.setter
    @typing.final
    def element(self, value: UIElement) -> None: ...

@typing.final
class ElementSoundPlayer_Static(type):
    # System.Void Microsoft.UI.Xaml.ElementSoundPlayer::Play(Microsoft.UI.Xaml.ElementSoundKind)
    def play(cls, sound: ElementSoundKind, /) -> None: ...
    # System.Double Microsoft.UI.Xaml.ElementSoundPlayer::get_Volume()
    @_property
    def volume(cls) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.ElementSoundPlayer::put_Volume(System.Double)
    @volume.setter
    def volume(cls, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.ElementSoundPlayerState Microsoft.UI.Xaml.ElementSoundPlayer::get_State()
    @_property
    def state(cls) -> ElementSoundPlayerState: ...
    # System.Void Microsoft.UI.Xaml.ElementSoundPlayer::put_State(Microsoft.UI.Xaml.ElementSoundPlayerState)
    @state.setter
    def state(cls, value: ElementSoundPlayerState) -> None: ...
    # Microsoft.UI.Xaml.ElementSpatialAudioMode Microsoft.UI.Xaml.ElementSoundPlayer::get_SpatialAudioMode()
    @_property
    def spatial_audio_mode(cls) -> ElementSpatialAudioMode: ...
    # System.Void Microsoft.UI.Xaml.ElementSoundPlayer::put_SpatialAudioMode(Microsoft.UI.Xaml.ElementSpatialAudioMode)
    @spatial_audio_mode.setter
    def spatial_audio_mode(cls, value: ElementSpatialAudioMode) -> None: ...

@typing.final
class ElementSoundPlayer(winrt.system.Object, metaclass=ElementSoundPlayer_Static):
    pass

@typing.final
class EventTrigger(TriggerBase):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.EventTrigger::get_RoutedEvent()
    @_property
    def routed_event(self) -> RoutedEvent: ...
    # System.Void Microsoft.UI.Xaml.EventTrigger::put_RoutedEvent(Microsoft.UI.Xaml.RoutedEvent)
    @routed_event.setter
    def routed_event(self, value: RoutedEvent) -> None: ...
    # Microsoft.UI.Xaml.TriggerActionCollection Microsoft.UI.Xaml.EventTrigger::get_Actions()
    @_property
    def actions(self) -> TriggerActionCollection: ...

class ExceptionRoutedEventArgs_Static(RoutedEventArgs_Static):
    pass

class ExceptionRoutedEventArgs(RoutedEventArgs, metaclass=ExceptionRoutedEventArgs_Static):
    # System.String Microsoft.UI.Xaml.ExceptionRoutedEventArgs::get_ErrorMessage()
    @_property
    @typing.final
    def error_message(self) -> str: ...

class FrameworkElement_Static(UIElement_Static):
    # System.Void Microsoft.UI.Xaml.FrameworkElement::DeferTree(Microsoft.UI.Xaml.DependencyObject)
    def defer_tree(cls, element: DependencyObject, /) -> None: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_ActualHeightProperty()
    @_property
    @typing.final
    def actual_height_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_ActualThemeProperty()
    @_property
    @typing.final
    def actual_theme_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_ActualWidthProperty()
    @_property
    @typing.final
    def actual_width_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_AllowFocusOnInteractionProperty()
    @_property
    @typing.final
    def allow_focus_on_interaction_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_AllowFocusWhenDisabledProperty()
    @_property
    @typing.final
    def allow_focus_when_disabled_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_DataContextProperty()
    @_property
    @typing.final
    def data_context_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FlowDirectionProperty()
    @_property
    @typing.final
    def flow_direction_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualMarginProperty()
    @_property
    @typing.final
    def focus_visual_margin_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualPrimaryBrushProperty()
    @_property
    @typing.final
    def focus_visual_primary_brush_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualPrimaryThicknessProperty()
    @_property
    @typing.final
    def focus_visual_primary_thickness_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualSecondaryBrushProperty()
    @_property
    @typing.final
    def focus_visual_secondary_brush_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualSecondaryThicknessProperty()
    @_property
    @typing.final
    def focus_visual_secondary_thickness_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_HeightProperty()
    @_property
    @typing.final
    def height_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_HorizontalAlignmentProperty()
    @_property
    @typing.final
    def horizontal_alignment_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_LanguageProperty()
    @_property
    @typing.final
    def language_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_MarginProperty()
    @_property
    @typing.final
    def margin_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_MaxHeightProperty()
    @_property
    @typing.final
    def max_height_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_MaxWidthProperty()
    @_property
    @typing.final
    def max_width_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_MinHeightProperty()
    @_property
    @typing.final
    def min_height_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_MinWidthProperty()
    @_property
    @typing.final
    def min_width_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_NameProperty()
    @_property
    @typing.final
    def name_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_RequestedThemeProperty()
    @_property
    @typing.final
    def requested_theme_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_StyleProperty()
    @_property
    @typing.final
    def style_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_TagProperty()
    @_property
    @typing.final
    def tag_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_VerticalAlignmentProperty()
    @_property
    @typing.final
    def vertical_alignment_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.FrameworkElement::get_WidthProperty()
    @_property
    @typing.final
    def width_property(cls) -> DependencyProperty: ...

class FrameworkElement(UIElement, metaclass=FrameworkElement_Static):
    # Windows.Foundation.Size Microsoft.UI.Xaml.FrameworkElement::ArrangeOverride(Windows.Foundation.Size)
    def _arrange_override(self, final_size: windows_foundation.Size, /) -> windows_foundation.Size: ...
    @typing.final
    # System.Object Microsoft.UI.Xaml.FrameworkElement::FindName(System.String)
    def find_name(self, name: str, /) -> winrt.system.Object: ...
    @typing.final
    # Microsoft.UI.Xaml.Data.BindingExpression Microsoft.UI.Xaml.FrameworkElement::GetBindingExpression(Microsoft.UI.Xaml.DependencyProperty)
    def get_binding_expression(self, dp: DependencyProperty, /) -> microsoft_ui_xaml_data.BindingExpression: ...
    # System.Boolean Microsoft.UI.Xaml.FrameworkElement::GoToElementStateCore(System.String,System.Boolean)
    def _go_to_element_state_core(self, state_name: str, use_transitions: bool, /) -> bool: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::InvalidateViewport()
    def _invalidate_viewport(self) -> None: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.FrameworkElement::MeasureOverride(Windows.Foundation.Size)
    def _measure_override(self, available_size: windows_foundation.Size, /) -> windows_foundation.Size: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::OnApplyTemplate()
    def _on_apply_template(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::SetBinding(Microsoft.UI.Xaml.DependencyProperty,Microsoft.UI.Xaml.Data.BindingBase)
    def set_binding(self, dp: DependencyProperty, binding: microsoft_ui_xaml_data.BindingBase, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_ActualThemeChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.FrameworkElement,System.Object>)
    def add_actual_theme_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_ActualThemeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_actual_theme_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_DataContextChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.DataContextChangedEventArgs>)
    def add_data_context_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, DataContextChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_DataContextChanged(Windows.Foundation.EventRegistrationToken)
    def remove_data_context_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_EffectiveViewportChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>)
    def add_effective_viewport_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, EffectiveViewportChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_EffectiveViewportChanged(Windows.Foundation.EventRegistrationToken)
    def remove_effective_viewport_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_LayoutUpdated(Windows.Foundation.EventHandler`1<System.Object>)
    def add_layout_updated(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_LayoutUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_layout_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_Loaded(Microsoft.UI.Xaml.RoutedEventHandler)
    def add_loaded(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_Loaded(Windows.Foundation.EventRegistrationToken)
    def remove_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_Loading(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.FrameworkElement,System.Object>)
    def add_loading(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_Loading(Windows.Foundation.EventRegistrationToken)
    def remove_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_SizeChanged(Microsoft.UI.Xaml.SizeChangedEventHandler)
    def add_size_changed(self, handler: SizeChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_size_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.FrameworkElement::add_Unloaded(Microsoft.UI.Xaml.RoutedEventHandler)
    def add_unloaded(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.FrameworkElement::remove_Unloaded(Windows.Foundation.EventRegistrationToken)
    def remove_unloaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_Width()
    @_property
    def width(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Width(System.Double)
    @width.setter
    @typing.final
    def width(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.VerticalAlignment Microsoft.UI.Xaml.FrameworkElement::get_VerticalAlignment()
    @_property
    def vertical_alignment(self) -> VerticalAlignment: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_VerticalAlignment(Microsoft.UI.Xaml.VerticalAlignment)
    @vertical_alignment.setter
    @typing.final
    def vertical_alignment(self, value: VerticalAlignment) -> None: ...
    # System.Object Microsoft.UI.Xaml.FrameworkElement::get_Tag()
    @_property
    def tag(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Tag(System.Object)
    @tag.setter
    @typing.final
    def tag(self, value: winrt.system.Object) -> None: ...
    # Microsoft.UI.Xaml.Style Microsoft.UI.Xaml.FrameworkElement::get_Style()
    @_property
    def style(self) -> Style: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Style(Microsoft.UI.Xaml.Style)
    @style.setter
    @typing.final
    def style(self, value: Style) -> None: ...
    # Microsoft.UI.Xaml.ResourceDictionary Microsoft.UI.Xaml.FrameworkElement::get_Resources()
    @_property
    def resources(self) -> ResourceDictionary: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Resources(Microsoft.UI.Xaml.ResourceDictionary)
    @resources.setter
    @typing.final
    def resources(self, value: ResourceDictionary) -> None: ...
    # Microsoft.UI.Xaml.ElementTheme Microsoft.UI.Xaml.FrameworkElement::get_RequestedTheme()
    @_property
    def requested_theme(self) -> ElementTheme: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_RequestedTheme(Microsoft.UI.Xaml.ElementTheme)
    @requested_theme.setter
    @typing.final
    def requested_theme(self, value: ElementTheme) -> None: ...
    # System.String Microsoft.UI.Xaml.FrameworkElement::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Name(System.String)
    @name.setter
    @typing.final
    def name(self, value: str) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_MinWidth()
    @_property
    def min_width(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_MinWidth(System.Double)
    @min_width.setter
    @typing.final
    def min_width(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_MinHeight()
    @_property
    def min_height(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_MinHeight(System.Double)
    @min_height.setter
    @typing.final
    def min_height(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_MaxWidth()
    @_property
    def max_width(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_MaxWidth(System.Double)
    @max_width.setter
    @typing.final
    def max_width(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_MaxHeight()
    @_property
    def max_height(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_MaxHeight(System.Double)
    @max_height.setter
    @typing.final
    def max_height(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.FrameworkElement::get_Margin()
    @_property
    def margin(self) -> Thickness: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Margin(Microsoft.UI.Xaml.Thickness)
    @margin.setter
    @typing.final
    def margin(self, value: Thickness) -> None: ...
    # System.String Microsoft.UI.Xaml.FrameworkElement::get_Language()
    @_property
    def language(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Language(System.String)
    @language.setter
    @typing.final
    def language(self, value: str) -> None: ...
    # Microsoft.UI.Xaml.HorizontalAlignment Microsoft.UI.Xaml.FrameworkElement::get_HorizontalAlignment()
    @_property
    def horizontal_alignment(self) -> HorizontalAlignment: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_HorizontalAlignment(Microsoft.UI.Xaml.HorizontalAlignment)
    @horizontal_alignment.setter
    @typing.final
    def horizontal_alignment(self, value: HorizontalAlignment) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_Height()
    @_property
    def height(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_Height(System.Double)
    @height.setter
    @typing.final
    def height(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualSecondaryThickness()
    @_property
    def focus_visual_secondary_thickness(self) -> Thickness: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FocusVisualSecondaryThickness(Microsoft.UI.Xaml.Thickness)
    @focus_visual_secondary_thickness.setter
    @typing.final
    def focus_visual_secondary_thickness(self, value: Thickness) -> None: ...
    # Microsoft.UI.Xaml.Media.Brush Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualSecondaryBrush()
    @_property
    def focus_visual_secondary_brush(self) -> microsoft_ui_xaml_media.Brush: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FocusVisualSecondaryBrush(Microsoft.UI.Xaml.Media.Brush)
    @focus_visual_secondary_brush.setter
    @typing.final
    def focus_visual_secondary_brush(self, value: microsoft_ui_xaml_media.Brush) -> None: ...
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualPrimaryThickness()
    @_property
    def focus_visual_primary_thickness(self) -> Thickness: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FocusVisualPrimaryThickness(Microsoft.UI.Xaml.Thickness)
    @focus_visual_primary_thickness.setter
    @typing.final
    def focus_visual_primary_thickness(self, value: Thickness) -> None: ...
    # Microsoft.UI.Xaml.Media.Brush Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualPrimaryBrush()
    @_property
    def focus_visual_primary_brush(self) -> microsoft_ui_xaml_media.Brush: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FocusVisualPrimaryBrush(Microsoft.UI.Xaml.Media.Brush)
    @focus_visual_primary_brush.setter
    @typing.final
    def focus_visual_primary_brush(self, value: microsoft_ui_xaml_media.Brush) -> None: ...
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.FrameworkElement::get_FocusVisualMargin()
    @_property
    def focus_visual_margin(self) -> Thickness: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FocusVisualMargin(Microsoft.UI.Xaml.Thickness)
    @focus_visual_margin.setter
    @typing.final
    def focus_visual_margin(self, value: Thickness) -> None: ...
    # Microsoft.UI.Xaml.FlowDirection Microsoft.UI.Xaml.FrameworkElement::get_FlowDirection()
    @_property
    def flow_direction(self) -> FlowDirection: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_FlowDirection(Microsoft.UI.Xaml.FlowDirection)
    @flow_direction.setter
    @typing.final
    def flow_direction(self, value: FlowDirection) -> None: ...
    # System.Object Microsoft.UI.Xaml.FrameworkElement::get_DataContext()
    @_property
    def data_context(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_DataContext(System.Object)
    @data_context.setter
    @typing.final
    def data_context(self, value: winrt.system.Object) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.FrameworkElement::get_AllowFocusWhenDisabled()
    @_property
    def allow_focus_when_disabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_AllowFocusWhenDisabled(System.Boolean)
    @allow_focus_when_disabled.setter
    @typing.final
    def allow_focus_when_disabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.FrameworkElement::get_AllowFocusOnInteraction()
    @_property
    def allow_focus_on_interaction(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.FrameworkElement::put_AllowFocusOnInteraction(System.Boolean)
    @allow_focus_on_interaction.setter
    @typing.final
    def allow_focus_on_interaction(self, value: bool) -> None: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_ActualHeight()
    @_property
    @typing.final
    def actual_height(self) -> winrt.system.Double: ...
    # Microsoft.UI.Xaml.ElementTheme Microsoft.UI.Xaml.FrameworkElement::get_ActualTheme()
    @_property
    @typing.final
    def actual_theme(self) -> ElementTheme: ...
    # System.Double Microsoft.UI.Xaml.FrameworkElement::get_ActualWidth()
    @_property
    @typing.final
    def actual_width(self) -> winrt.system.Double: ...
    # Windows.Foundation.Uri Microsoft.UI.Xaml.FrameworkElement::get_BaseUri()
    @_property
    @typing.final
    def base_uri(self) -> windows_foundation.Uri: ...
    # System.Boolean Microsoft.UI.Xaml.FrameworkElement::get_IsLoaded()
    @_property
    @typing.final
    def is_loaded(self) -> bool: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.FrameworkElement::get_Parent()
    @_property
    @typing.final
    def parent(self) -> DependencyObject: ...
    # Microsoft.UI.Xaml.TriggerCollection Microsoft.UI.Xaml.FrameworkElement::get_Triggers()
    @_property
    @typing.final
    def triggers(self) -> TriggerCollection: ...

class FrameworkTemplate_Static(DependencyObject_Static):
    pass

class FrameworkTemplate(DependencyObject, metaclass=FrameworkTemplate_Static):
    pass

@typing.final
class FrameworkView(winrt.system.Object, windows_applicationmodel_core.IFrameworkView):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.FrameworkView::Initialize(Windows.ApplicationModel.Core.CoreApplicationView)
    def initialize(self, application_view: windows_applicationmodel_core.CoreApplicationView, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.FrameworkView::Load(System.String)
    def load(self, entry_point: str, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.FrameworkView::Run()
    def run(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.FrameworkView::SetWindow(Windows.UI.Core.CoreWindow)
    def set_window(self, window: windows_ui_core.CoreWindow, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.FrameworkView::Uninitialize()
    def uninitialize(self) -> None: ...

@typing.final
class FrameworkViewSource(winrt.system.Object, windows_applicationmodel_core.IFrameworkViewSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Core.IFrameworkView Microsoft.UI.Xaml.FrameworkViewSource::CreateView()
    def create_view(self) -> windows_applicationmodel_core.IFrameworkView: ...

@typing.final
class GridLengthHelper_Static(type):
    # System.Boolean Microsoft.UI.Xaml.GridLengthHelper::Equals(Microsoft.UI.Xaml.GridLength,Microsoft.UI.Xaml.GridLength)
    def equals(cls, target: GridLength, value: GridLength, /) -> bool: ...
    # Microsoft.UI.Xaml.GridLength Microsoft.UI.Xaml.GridLengthHelper::FromPixels(System.Double)
    def from_pixels(cls, pixels: winrt.system.Double, /) -> GridLength: ...
    # Microsoft.UI.Xaml.GridLength Microsoft.UI.Xaml.GridLengthHelper::FromValueAndType(System.Double,Microsoft.UI.Xaml.GridUnitType)
    def from_value_and_type(cls, value: winrt.system.Double, type: GridUnitType, /) -> GridLength: ...
    # System.Boolean Microsoft.UI.Xaml.GridLengthHelper::GetIsAbsolute(Microsoft.UI.Xaml.GridLength)
    def get_is_absolute(cls, target: GridLength, /) -> bool: ...
    # System.Boolean Microsoft.UI.Xaml.GridLengthHelper::GetIsAuto(Microsoft.UI.Xaml.GridLength)
    def get_is_auto(cls, target: GridLength, /) -> bool: ...
    # System.Boolean Microsoft.UI.Xaml.GridLengthHelper::GetIsStar(Microsoft.UI.Xaml.GridLength)
    def get_is_star(cls, target: GridLength, /) -> bool: ...
    # Microsoft.UI.Xaml.GridLength Microsoft.UI.Xaml.GridLengthHelper::get_Auto()
    @_property
    def auto(cls) -> GridLength: ...

@typing.final
class GridLengthHelper(winrt.system.Object, metaclass=GridLengthHelper_Static):
    pass

@typing.final
class LaunchActivatedEventArgs(winrt.system.Object):
    # System.String Microsoft.UI.Xaml.LaunchActivatedEventArgs::get_Arguments()
    @_property
    def arguments(self) -> str: ...
    # Windows.ApplicationModel.Activation.LaunchActivatedEventArgs Microsoft.UI.Xaml.LaunchActivatedEventArgs::get_UWPLaunchActivatedEventArgs()
    @_property
    def uwp_launch_activated_event_args(self) -> windows_applicationmodel_activation.LaunchActivatedEventArgs: ...

@typing.final
class MediaFailedRoutedEventArgs(ExceptionRoutedEventArgs):
    # System.String Microsoft.UI.Xaml.MediaFailedRoutedEventArgs::get_ErrorTrace()
    @_property
    def error_trace(self) -> str: ...

@typing.final
class PointHelper_Static(type):
    # Windows.Foundation.Point Microsoft.UI.Xaml.PointHelper::FromCoordinates(System.Single,System.Single)
    def from_coordinates(cls, x: winrt.system.Single, y: winrt.system.Single, /) -> windows_foundation.Point: ...

@typing.final
class PointHelper(winrt.system.Object, metaclass=PointHelper_Static):
    pass

class PropertyMetadata_Static(type):
    # Microsoft.UI.Xaml.PropertyMetadata Microsoft.UI.Xaml.PropertyMetadata::Create(System.Object)
    def create_with_default_value(cls, default_value: winrt.system.Object, /) -> PropertyMetadata: ...
    # Microsoft.UI.Xaml.PropertyMetadata Microsoft.UI.Xaml.PropertyMetadata::Create(System.Object,Microsoft.UI.Xaml.PropertyChangedCallback)
    def create_with_default_value_and_callback(cls, default_value: winrt.system.Object, property_changed_callback: PropertyChangedCallback, /) -> PropertyMetadata: ...
    # Microsoft.UI.Xaml.PropertyMetadata Microsoft.UI.Xaml.PropertyMetadata::Create(Microsoft.UI.Xaml.CreateDefaultValueCallback)
    def create_with_factory(cls, create_default_value_callback: CreateDefaultValueCallback, /) -> PropertyMetadata: ...
    # Microsoft.UI.Xaml.PropertyMetadata Microsoft.UI.Xaml.PropertyMetadata::Create(Microsoft.UI.Xaml.CreateDefaultValueCallback,Microsoft.UI.Xaml.PropertyChangedCallback)
    def create_with_factory_and_callback(cls, create_default_value_callback: CreateDefaultValueCallback, property_changed_callback: PropertyChangedCallback, /) -> PropertyMetadata: ...

class PropertyMetadata(winrt.system.Object, metaclass=PropertyMetadata_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self], default_value: winrt.system.Object) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], default_value: winrt.system.Object, property_changed_callback: PropertyChangedCallback) -> Self: ...
    # Microsoft.UI.Xaml.CreateDefaultValueCallback Microsoft.UI.Xaml.PropertyMetadata::get_CreateDefaultValueCallback()
    @_property
    @typing.final
    def create_default_value_callback(self) -> CreateDefaultValueCallback: ...
    # System.Object Microsoft.UI.Xaml.PropertyMetadata::get_DefaultValue()
    @_property
    @typing.final
    def default_value(self) -> winrt.system.Object: ...

@typing.final
class PropertyPath(DependencyObject):
    def __new__(cls: typing.Type[Self], path: str) -> Self: ...
    # System.String Microsoft.UI.Xaml.PropertyPath::get_Path()
    @_property
    def path(self) -> str: ...

@typing.final
class RectHelper_Static(type):
    # System.Boolean Microsoft.UI.Xaml.RectHelper::Contains(Windows.Foundation.Rect,Windows.Foundation.Point)
    def contains(cls, target: windows_foundation.Rect, point: windows_foundation.Point, /) -> bool: ...
    # System.Boolean Microsoft.UI.Xaml.RectHelper::Equals(Windows.Foundation.Rect,Windows.Foundation.Rect)
    def equals(cls, target: windows_foundation.Rect, value: windows_foundation.Rect, /) -> bool: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::FromCoordinatesAndDimensions(System.Single,System.Single,System.Single,System.Single)
    def from_coordinates_and_dimensions(cls, x: winrt.system.Single, y: winrt.system.Single, width: winrt.system.Single, height: winrt.system.Single, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::FromLocationAndSize(Windows.Foundation.Point,Windows.Foundation.Size)
    def from_location_and_size(cls, location: windows_foundation.Point, size: windows_foundation.Size, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::FromPoints(Windows.Foundation.Point,Windows.Foundation.Point)
    def from_points(cls, point1: windows_foundation.Point, point2: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # System.Single Microsoft.UI.Xaml.RectHelper::GetBottom(Windows.Foundation.Rect)
    def get_bottom(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    # System.Boolean Microsoft.UI.Xaml.RectHelper::GetIsEmpty(Windows.Foundation.Rect)
    def get_is_empty(cls, target: windows_foundation.Rect, /) -> bool: ...
    # System.Single Microsoft.UI.Xaml.RectHelper::GetLeft(Windows.Foundation.Rect)
    def get_left(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    # System.Single Microsoft.UI.Xaml.RectHelper::GetRight(Windows.Foundation.Rect)
    def get_right(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    # System.Single Microsoft.UI.Xaml.RectHelper::GetTop(Windows.Foundation.Rect)
    def get_top(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::Intersect(Windows.Foundation.Rect,Windows.Foundation.Rect)
    def intersect(cls, target: windows_foundation.Rect, rect: windows_foundation.Rect, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::Union(Windows.Foundation.Rect,Windows.Foundation.Point)
    def union_with_point(cls, target: windows_foundation.Rect, point: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::Union(Windows.Foundation.Rect,Windows.Foundation.Rect)
    def union_with_rect(cls, target: windows_foundation.Rect, rect: windows_foundation.Rect, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.RectHelper::get_Empty()
    @_property
    def empty(cls) -> windows_foundation.Rect: ...

@typing.final
class RectHelper(winrt.system.Object, metaclass=RectHelper_Static):
    pass

class ResourceDictionary_Static(DependencyObject_Static):
    pass

class ResourceDictionary(DependencyObject, winrt._winrt.MutableMapping[winrt.system.Object, winrt.system.Object], metaclass=ResourceDictionary_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[winrt.system.Object]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: winrt.system.Object) -> winrt.system.Object: ...
    def __setitem__(self, key: winrt.system.Object, value: winrt.system.Object) -> None: ...
    def __delitem__(self, key: winrt.system.Object) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.ResourceDictionary::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Object,System.Object>> Microsoft.UI.Xaml.ResourceDictionary::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[winrt.system.Object, winrt.system.Object]]: ...
    # Windows.Foundation.Collections.IMapView`2<System.Object,System.Object> Microsoft.UI.Xaml.ResourceDictionary::GetView()
    def get_view(self) -> typing.Mapping[winrt.system.Object, winrt.system.Object]: ...
    # System.Boolean Microsoft.UI.Xaml.ResourceDictionary::HasKey(System.Object)
    def has_key(self, key: winrt.system.Object, /) -> bool: ...
    # System.Boolean Microsoft.UI.Xaml.ResourceDictionary::Insert(System.Object,System.Object)
    def insert(self, key: winrt.system.Object, value: winrt.system.Object, /) -> bool: ...
    # System.Object Microsoft.UI.Xaml.ResourceDictionary::Lookup(System.Object)
    def lookup(self, key: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.ResourceDictionary::Remove(System.Object)
    def remove(self, key: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.Uri Microsoft.UI.Xaml.ResourceDictionary::get_Source()
    @_property
    def source(self) -> windows_foundation.Uri: ...
    # System.Void Microsoft.UI.Xaml.ResourceDictionary::put_Source(Windows.Foundation.Uri)
    @source.setter
    @typing.final
    def source(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.ResourceDictionary> Microsoft.UI.Xaml.ResourceDictionary::get_MergedDictionaries()
    @_property
    @typing.final
    def merged_dictionaries(self) -> typing.MutableSequence[ResourceDictionary]: ...
    # Windows.Foundation.Collections.IMap`2<System.Object,System.Object> Microsoft.UI.Xaml.ResourceDictionary::get_ThemeDictionaries()
    @_property
    @typing.final
    def theme_dictionaries(self) -> typing.MutableMapping[winrt.system.Object, winrt.system.Object]: ...
    # System.UInt32 Microsoft.UI.Xaml.ResourceDictionary::get_Size()
    @_property
    @typing.final
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceManagerRequestedEventArgs(winrt.system.Object):
    # Microsoft.Windows.ApplicationModel.Resources.IResourceManager Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs::get_CustomResourceManager()
    @_property
    def custom_resource_manager(self) -> microsoft_windows_applicationmodel_resources.IResourceManager: ...
    # System.Void Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs::put_CustomResourceManager(Microsoft.Windows.ApplicationModel.Resources.IResourceManager)
    @custom_resource_manager.setter
    def custom_resource_manager(self, value: microsoft_windows_applicationmodel_resources.IResourceManager) -> None: ...

@typing.final
class RoutedEvent(winrt.system.Object):
    pass

class RoutedEventArgs_Static(type):
    pass

class RoutedEventArgs(winrt.system.Object, metaclass=RoutedEventArgs_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Microsoft.UI.Xaml.RoutedEventArgs::get_OriginalSource()
    @_property
    @typing.final
    def original_source(self) -> winrt.system.Object: ...

class ScalarTransition_Static(type):
    pass

class ScalarTransition(winrt.system.Object, metaclass=ScalarTransition_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.TimeSpan Microsoft.UI.Xaml.ScalarTransition::get_Duration()
    @_property
    def duration(self) -> datetime.timedelta: ...
    # System.Void Microsoft.UI.Xaml.ScalarTransition::put_Duration(Windows.Foundation.TimeSpan)
    @duration.setter
    @typing.final
    def duration(self, value: datetime.timedelta) -> None: ...

@typing.final
class Setter(SetterBase):
    @typing.overload
    def __new__(cls: typing.Type[Self], target_property: DependencyProperty, value: winrt.system.Object) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Microsoft.UI.Xaml.Setter::get_Value()
    @_property
    def value(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.Setter::put_Value(System.Object)
    @value.setter
    def value(self, value: winrt.system.Object) -> None: ...
    # Microsoft.UI.Xaml.TargetPropertyPath Microsoft.UI.Xaml.Setter::get_Target()
    @_property
    def target(self) -> TargetPropertyPath: ...
    # System.Void Microsoft.UI.Xaml.Setter::put_Target(Microsoft.UI.Xaml.TargetPropertyPath)
    @target.setter
    def target(self, value: TargetPropertyPath) -> None: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.Setter::get_Property()
    @_property
    def property(self) -> DependencyProperty: ...
    # System.Void Microsoft.UI.Xaml.Setter::put_Property(Microsoft.UI.Xaml.DependencyProperty)
    @property.setter
    def property(self, value: DependencyProperty) -> None: ...

class SetterBase_Static(DependencyObject_Static):
    pass

class SetterBase(DependencyObject, metaclass=SetterBase_Static):
    # System.Boolean Microsoft.UI.Xaml.SetterBase::get_IsSealed()
    @_property
    @typing.final
    def is_sealed(self) -> bool: ...

@typing.final
class SetterBaseCollection(winrt.system.Object, winrt._winrt.MutableSequence[SetterBase]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[SetterBase]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> SetterBase: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[SetterBase]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: SetterBase) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[SetterBase]) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::Append(Microsoft.UI.Xaml.SetterBase)
    def append(self, value: SetterBase, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Microsoft.UI.Xaml.SetterBase> Microsoft.UI.Xaml.SetterBaseCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[SetterBase]: ...
    # Microsoft.UI.Xaml.SetterBase Microsoft.UI.Xaml.SetterBaseCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> SetterBase: ...
    # System.UInt32 Microsoft.UI.Xaml.SetterBaseCollection::GetMany(System.UInt32,Microsoft.UI.Xaml.SetterBase[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[SetterBase], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.SetterBase> Microsoft.UI.Xaml.SetterBaseCollection::GetView()
    def get_view(self) -> typing.Sequence[SetterBase]: ...
    # System.Boolean Microsoft.UI.Xaml.SetterBaseCollection::IndexOf(Microsoft.UI.Xaml.SetterBase,System.UInt32&)
    def index_of(self, value: SetterBase, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::InsertAt(System.UInt32,Microsoft.UI.Xaml.SetterBase)
    def insert_at(self, index: winrt.system.UInt32, value: SetterBase, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::ReplaceAll(Microsoft.UI.Xaml.SetterBase[])
    def replace_all(self, items: typing.Union[winrt.system.Array[SetterBase], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Microsoft.UI.Xaml.SetterBaseCollection::SetAt(System.UInt32,Microsoft.UI.Xaml.SetterBase)
    def set_at(self, index: winrt.system.UInt32, value: SetterBase, /) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.SetterBaseCollection::get_IsSealed()
    @_property
    def is_sealed(self) -> bool: ...
    # System.UInt32 Microsoft.UI.Xaml.SetterBaseCollection::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class SizeChangedEventArgs(RoutedEventArgs):
    # Windows.Foundation.Size Microsoft.UI.Xaml.SizeChangedEventArgs::get_NewSize()
    @_property
    def new_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.SizeChangedEventArgs::get_PreviousSize()
    @_property
    def previous_size(self) -> windows_foundation.Size: ...

@typing.final
class SizeHelper_Static(type):
    # System.Boolean Microsoft.UI.Xaml.SizeHelper::Equals(Windows.Foundation.Size,Windows.Foundation.Size)
    def equals(cls, target: windows_foundation.Size, value: windows_foundation.Size, /) -> bool: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.SizeHelper::FromDimensions(System.Single,System.Single)
    def from_dimensions(cls, width: winrt.system.Single, height: winrt.system.Single, /) -> windows_foundation.Size: ...
    # System.Boolean Microsoft.UI.Xaml.SizeHelper::GetIsEmpty(Windows.Foundation.Size)
    def get_is_empty(cls, target: windows_foundation.Size, /) -> bool: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.SizeHelper::get_Empty()
    @_property
    def empty(cls) -> windows_foundation.Size: ...

@typing.final
class SizeHelper(winrt.system.Object, metaclass=SizeHelper_Static):
    pass

@typing.final
class StateTrigger_Static(StateTriggerBase_Static):
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.StateTrigger::get_IsActiveProperty()
    @_property
    def is_active_property(cls) -> DependencyProperty: ...

@typing.final
class StateTrigger(StateTriggerBase, metaclass=StateTrigger_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Microsoft.UI.Xaml.StateTrigger::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.StateTrigger::put_IsActive(System.Boolean)
    @is_active.setter
    def is_active(self, value: bool) -> None: ...

class StateTriggerBase_Static(DependencyObject_Static):
    pass

class StateTriggerBase(DependencyObject, metaclass=StateTriggerBase_Static):
    @typing.final
    # System.Void Microsoft.UI.Xaml.StateTriggerBase::SetActive(System.Boolean)
    def _set_active(self, is_active: bool, /) -> None: ...

@typing.final
class Style(DependencyObject):
    @typing.overload
    def __new__(cls: typing.Type[Self], target_type: windows_ui_xaml_interop.TypeName) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Style::Seal()
    def seal(self) -> None: ...
    # Windows.UI.Xaml.Interop.TypeName Microsoft.UI.Xaml.Style::get_TargetType()
    @_property
    def target_type(self) -> windows_ui_xaml_interop.TypeName: ...
    # System.Void Microsoft.UI.Xaml.Style::put_TargetType(Windows.UI.Xaml.Interop.TypeName)
    @target_type.setter
    def target_type(self, value: windows_ui_xaml_interop.TypeName) -> None: ...
    # Microsoft.UI.Xaml.Style Microsoft.UI.Xaml.Style::get_BasedOn()
    @_property
    def based_on(self) -> Style: ...
    # System.Void Microsoft.UI.Xaml.Style::put_BasedOn(Microsoft.UI.Xaml.Style)
    @based_on.setter
    def based_on(self, value: Style) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.Style::get_IsSealed()
    @_property
    def is_sealed(self) -> bool: ...
    # Microsoft.UI.Xaml.SetterBaseCollection Microsoft.UI.Xaml.Style::get_Setters()
    @_property
    def setters(self) -> SetterBaseCollection: ...

@typing.final
class TargetPropertyPath(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], target_property: DependencyProperty) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Microsoft.UI.Xaml.TargetPropertyPath::get_Target()
    @_property
    def target(self) -> winrt.system.Object: ...
    # System.Void Microsoft.UI.Xaml.TargetPropertyPath::put_Target(System.Object)
    @target.setter
    def target(self, value: winrt.system.Object) -> None: ...
    # Microsoft.UI.Xaml.PropertyPath Microsoft.UI.Xaml.TargetPropertyPath::get_Path()
    @_property
    def path(self) -> PropertyPath: ...
    # System.Void Microsoft.UI.Xaml.TargetPropertyPath::put_Path(Microsoft.UI.Xaml.PropertyPath)
    @path.setter
    def path(self, value: PropertyPath) -> None: ...

@typing.final
class ThicknessHelper_Static(type):
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.ThicknessHelper::FromLengths(System.Double,System.Double,System.Double,System.Double)
    def from_lengths(cls, left: winrt.system.Double, top: winrt.system.Double, right: winrt.system.Double, bottom: winrt.system.Double, /) -> Thickness: ...
    # Microsoft.UI.Xaml.Thickness Microsoft.UI.Xaml.ThicknessHelper::FromUniformLength(System.Double)
    def from_uniform_length(cls, uniform_length: winrt.system.Double, /) -> Thickness: ...

@typing.final
class ThicknessHelper(winrt.system.Object, metaclass=ThicknessHelper_Static):
    pass

class TriggerAction_Static(DependencyObject_Static):
    pass

class TriggerAction(DependencyObject, metaclass=TriggerAction_Static):
    pass

@typing.final
class TriggerActionCollection(winrt.system.Object, winrt._winrt.MutableSequence[TriggerAction]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[TriggerAction]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> TriggerAction: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[TriggerAction]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: TriggerAction) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[TriggerAction]) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::Append(Microsoft.UI.Xaml.TriggerAction)
    def append(self, value: TriggerAction, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Microsoft.UI.Xaml.TriggerAction> Microsoft.UI.Xaml.TriggerActionCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[TriggerAction]: ...
    # Microsoft.UI.Xaml.TriggerAction Microsoft.UI.Xaml.TriggerActionCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> TriggerAction: ...
    # System.UInt32 Microsoft.UI.Xaml.TriggerActionCollection::GetMany(System.UInt32,Microsoft.UI.Xaml.TriggerAction[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[TriggerAction], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.TriggerAction> Microsoft.UI.Xaml.TriggerActionCollection::GetView()
    def get_view(self) -> typing.Sequence[TriggerAction]: ...
    # System.Boolean Microsoft.UI.Xaml.TriggerActionCollection::IndexOf(Microsoft.UI.Xaml.TriggerAction,System.UInt32&)
    def index_of(self, value: TriggerAction, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::InsertAt(System.UInt32,Microsoft.UI.Xaml.TriggerAction)
    def insert_at(self, index: winrt.system.UInt32, value: TriggerAction, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::ReplaceAll(Microsoft.UI.Xaml.TriggerAction[])
    def replace_all(self, items: typing.Union[winrt.system.Array[TriggerAction], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerActionCollection::SetAt(System.UInt32,Microsoft.UI.Xaml.TriggerAction)
    def set_at(self, index: winrt.system.UInt32, value: TriggerAction, /) -> None: ...
    # System.UInt32 Microsoft.UI.Xaml.TriggerActionCollection::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class TriggerBase_Static(DependencyObject_Static):
    pass

class TriggerBase(DependencyObject, metaclass=TriggerBase_Static):
    pass

@typing.final
class TriggerCollection(winrt.system.Object, winrt._winrt.MutableSequence[TriggerBase]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[TriggerBase]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> TriggerBase: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[TriggerBase]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: TriggerBase) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[TriggerBase]) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::Append(Microsoft.UI.Xaml.TriggerBase)
    def append(self, value: TriggerBase, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Microsoft.UI.Xaml.TriggerBase> Microsoft.UI.Xaml.TriggerCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[TriggerBase]: ...
    # Microsoft.UI.Xaml.TriggerBase Microsoft.UI.Xaml.TriggerCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> TriggerBase: ...
    # System.UInt32 Microsoft.UI.Xaml.TriggerCollection::GetMany(System.UInt32,Microsoft.UI.Xaml.TriggerBase[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[TriggerBase], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.TriggerBase> Microsoft.UI.Xaml.TriggerCollection::GetView()
    def get_view(self) -> typing.Sequence[TriggerBase]: ...
    # System.Boolean Microsoft.UI.Xaml.TriggerCollection::IndexOf(Microsoft.UI.Xaml.TriggerBase,System.UInt32&)
    def index_of(self, value: TriggerBase, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::InsertAt(System.UInt32,Microsoft.UI.Xaml.TriggerBase)
    def insert_at(self, index: winrt.system.UInt32, value: TriggerBase, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::ReplaceAll(Microsoft.UI.Xaml.TriggerBase[])
    def replace_all(self, items: typing.Union[winrt.system.Array[TriggerBase], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Microsoft.UI.Xaml.TriggerCollection::SetAt(System.UInt32,Microsoft.UI.Xaml.TriggerBase)
    def set_at(self, index: winrt.system.UInt32, value: TriggerBase, /) -> None: ...
    # System.UInt32 Microsoft.UI.Xaml.TriggerCollection::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class UIElement_Static(DependencyObject_Static):
    # System.Void Microsoft.UI.Xaml.UIElement::RegisterAsScrollPort(Microsoft.UI.Xaml.UIElement)
    def register_as_scroll_port(cls, element: UIElement, /) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::TryStartDirectManipulation(Microsoft.UI.Xaml.Input.Pointer)
    def try_start_direct_manipulation(cls, value: microsoft_ui_xaml_input.Pointer, /) -> bool: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_AccessKeyProperty()
    @_property
    @typing.final
    def access_key_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_AccessKeyScopeOwnerProperty()
    @_property
    @typing.final
    def access_key_scope_owner_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_AllowDropProperty()
    @_property
    @typing.final
    def allow_drop_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_BringIntoViewRequestedEvent()
    @_property
    @typing.final
    def bring_into_view_requested_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_CacheModeProperty()
    @_property
    @typing.final
    def cache_mode_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_CanBeScrollAnchorProperty()
    @_property
    @typing.final
    def can_be_scroll_anchor_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_CanDragProperty()
    @_property
    @typing.final
    def can_drag_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_CharacterReceivedEvent()
    @_property
    @typing.final
    def character_received_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ClipProperty()
    @_property
    @typing.final
    def clip_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_CompositeModeProperty()
    @_property
    @typing.final
    def composite_mode_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ContextFlyoutProperty()
    @_property
    @typing.final
    def context_flyout_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ContextRequestedEvent()
    @_property
    @typing.final
    def context_requested_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_DoubleTappedEvent()
    @_property
    @typing.final
    def double_tapped_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_DragEnterEvent()
    @_property
    @typing.final
    def drag_enter_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_DragLeaveEvent()
    @_property
    @typing.final
    def drag_leave_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_DragOverEvent()
    @_property
    @typing.final
    def drag_over_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_DropEvent()
    @_property
    @typing.final
    def drop_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ExitDisplayModeOnAccessKeyInvokedProperty()
    @_property
    @typing.final
    def exit_display_mode_on_access_key_invoked_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_FocusStateProperty()
    @_property
    @typing.final
    def focus_state_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_GettingFocusEvent()
    @_property
    @typing.final
    def getting_focus_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_HighContrastAdjustmentProperty()
    @_property
    @typing.final
    def high_contrast_adjustment_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_HoldingEvent()
    @_property
    @typing.final
    def holding_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsAccessKeyScopeProperty()
    @_property
    @typing.final
    def is_access_key_scope_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsDoubleTapEnabledProperty()
    @_property
    @typing.final
    def is_double_tap_enabled_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsHitTestVisibleProperty()
    @_property
    @typing.final
    def is_hit_test_visible_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsHoldingEnabledProperty()
    @_property
    @typing.final
    def is_holding_enabled_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsRightTapEnabledProperty()
    @_property
    @typing.final
    def is_right_tap_enabled_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsTabStopProperty()
    @_property
    @typing.final
    def is_tab_stop_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_IsTapEnabledProperty()
    @_property
    @typing.final
    def is_tap_enabled_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_KeyDownEvent()
    @_property
    @typing.final
    def key_down_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyTipHorizontalOffsetProperty()
    @_property
    @typing.final
    def key_tip_horizontal_offset_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyTipPlacementModeProperty()
    @_property
    @typing.final
    def key_tip_placement_mode_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyTipTargetProperty()
    @_property
    @typing.final
    def key_tip_target_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyTipVerticalOffsetProperty()
    @_property
    @typing.final
    def key_tip_vertical_offset_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_KeyUpEvent()
    @_property
    @typing.final
    def key_up_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyboardAcceleratorPlacementModeProperty()
    @_property
    @typing.final
    def keyboard_accelerator_placement_mode_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_KeyboardAcceleratorPlacementTargetProperty()
    @_property
    @typing.final
    def keyboard_accelerator_placement_target_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_LightsProperty()
    @_property
    @typing.final
    def lights_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_LosingFocusEvent()
    @_property
    @typing.final
    def losing_focus_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ManipulationCompletedEvent()
    @_property
    @typing.final
    def manipulation_completed_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ManipulationDeltaEvent()
    @_property
    @typing.final
    def manipulation_delta_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ManipulationInertiaStartingEvent()
    @_property
    @typing.final
    def manipulation_inertia_starting_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ManipulationModeProperty()
    @_property
    @typing.final
    def manipulation_mode_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ManipulationStartedEvent()
    @_property
    @typing.final
    def manipulation_started_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_ManipulationStartingEvent()
    @_property
    @typing.final
    def manipulation_starting_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_NoFocusCandidateFoundEvent()
    @_property
    @typing.final
    def no_focus_candidate_found_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_OpacityProperty()
    @_property
    @typing.final
    def opacity_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerCanceledEvent()
    @_property
    @typing.final
    def pointer_canceled_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerCaptureLostEvent()
    @_property
    @typing.final
    def pointer_capture_lost_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_PointerCapturesProperty()
    @_property
    @typing.final
    def pointer_captures_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerEnteredEvent()
    @_property
    @typing.final
    def pointer_entered_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerExitedEvent()
    @_property
    @typing.final
    def pointer_exited_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerMovedEvent()
    @_property
    @typing.final
    def pointer_moved_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerPressedEvent()
    @_property
    @typing.final
    def pointer_pressed_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerReleasedEvent()
    @_property
    @typing.final
    def pointer_released_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PointerWheelChangedEvent()
    @_property
    @typing.final
    def pointer_wheel_changed_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PreviewKeyDownEvent()
    @_property
    @typing.final
    def preview_key_down_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_PreviewKeyUpEvent()
    @_property
    @typing.final
    def preview_key_up_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ProjectionProperty()
    @_property
    @typing.final
    def projection_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_RenderTransformOriginProperty()
    @_property
    @typing.final
    def render_transform_origin_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_RenderTransformProperty()
    @_property
    @typing.final
    def render_transform_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_RightTappedEvent()
    @_property
    @typing.final
    def right_tapped_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_ShadowProperty()
    @_property
    @typing.final
    def shadow_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_TabFocusNavigationProperty()
    @_property
    @typing.final
    def tab_focus_navigation_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_TabIndexProperty()
    @_property
    @typing.final
    def tab_index_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.RoutedEvent Microsoft.UI.Xaml.UIElement::get_TappedEvent()
    @_property
    @typing.final
    def tapped_event(cls) -> RoutedEvent: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_Transform3DProperty()
    @_property
    @typing.final
    def transform_3d_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_TransitionsProperty()
    @_property
    @typing.final
    def transitions_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_UseLayoutRoundingProperty()
    @_property
    @typing.final
    def use_layout_rounding_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_UseSystemFocusVisualsProperty()
    @_property
    @typing.final
    def use_system_focus_visuals_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_VisibilityProperty()
    @_property
    @typing.final
    def visibility_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusDownNavigationStrategyProperty()
    @_property
    @typing.final
    def x_y_focus_down_navigation_strategy_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusDownProperty()
    @_property
    @typing.final
    def x_y_focus_down_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusKeyboardNavigationProperty()
    @_property
    @typing.final
    def x_y_focus_keyboard_navigation_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusLeftNavigationStrategyProperty()
    @_property
    @typing.final
    def x_y_focus_left_navigation_strategy_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusLeftProperty()
    @_property
    @typing.final
    def x_y_focus_left_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusRightNavigationStrategyProperty()
    @_property
    @typing.final
    def x_y_focus_right_navigation_strategy_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusRightProperty()
    @_property
    @typing.final
    def x_y_focus_right_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusUpNavigationStrategyProperty()
    @_property
    @typing.final
    def x_y_focus_up_navigation_strategy_property(cls) -> DependencyProperty: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.UIElement::get_XYFocusUpProperty()
    @_property
    @typing.final
    def x_y_focus_up_property(cls) -> DependencyProperty: ...

class UIElement(DependencyObject, microsoft_ui_composition.IVisualElement2, microsoft_ui_composition.IVisualElement, microsoft_ui_composition.IAnimationObject, metaclass=UIElement_Static):
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::AddHandler(Microsoft.UI.Xaml.RoutedEvent,System.Object,System.Boolean)
    def add_handler(self, routed_event: RoutedEvent, handler: winrt.system.Object, handled_events_too: bool, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::Arrange(Windows.Foundation.Rect)
    def arrange(self, final_rect: windows_foundation.Rect, /) -> None: ...
    @typing.final
    # System.Boolean Microsoft.UI.Xaml.UIElement::CancelDirectManipulations()
    def cancel_direct_manipulations(self) -> bool: ...
    @typing.final
    # System.Boolean Microsoft.UI.Xaml.UIElement::CapturePointer(Microsoft.UI.Xaml.Input.Pointer)
    def capture_pointer(self, value: microsoft_ui_xaml_input.Pointer, /) -> bool: ...
    # Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>> Microsoft.UI.Xaml.UIElement::FindSubElementsForTouchTargeting(Windows.Foundation.Point,Windows.Foundation.Rect)
    def _find_sub_elements_for_touch_targeting(self, point: windows_foundation.Point, bounding_rect: windows_foundation.Rect, /) -> typing.Iterable[typing.Iterable[windows_foundation.Point]]: ...
    @typing.final
    # System.Boolean Microsoft.UI.Xaml.UIElement::Focus(Microsoft.UI.Xaml.FocusState)
    def focus(self, value: FocusState, /) -> bool: ...
    # Windows.Foundation.Collections.IIterable`1<Microsoft.UI.Xaml.DependencyObject> Microsoft.UI.Xaml.UIElement::GetChildrenInTabFocusOrder()
    def _get_children_in_tab_focus_order(self) -> typing.Iterable[DependencyObject]: ...
    # Microsoft.UI.Composition.Visual Microsoft.UI.Xaml.UIElement::GetVisualInternal()
    def get_visual_internal(self) -> microsoft_ui_composition.Visual: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::InvalidateArrange()
    def invalidate_arrange(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::InvalidateMeasure()
    def invalidate_measure(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::Measure(Windows.Foundation.Size)
    def measure(self, available_size: windows_foundation.Size, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElement::OnBringIntoViewRequested(Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs)
    def _on_bring_into_view_requested(self, e: BringIntoViewRequestedEventArgs, /) -> None: ...
    # Microsoft.UI.Xaml.Automation.Peers.AutomationPeer Microsoft.UI.Xaml.UIElement::OnCreateAutomationPeer()
    def _on_create_automation_peer(self) -> microsoft_ui_xaml_automation_peers.AutomationPeer: ...
    # System.Void Microsoft.UI.Xaml.UIElement::OnDisconnectVisualChildren()
    def _on_disconnect_visual_children(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElement::OnKeyboardAcceleratorInvoked(Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)
    def _on_keyboard_accelerator_invoked(self, args: microsoft_ui_xaml_input.KeyboardAcceleratorInvokedEventArgs, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElement::OnProcessKeyboardAccelerators(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)
    def _on_process_keyboard_accelerators(self, args: microsoft_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElement::PopulatePropertyInfo(System.String,Microsoft.UI.Composition.AnimationPropertyInfo)
    def populate_property_info(self, property_name: str, property_info: microsoft_ui_composition.AnimationPropertyInfo, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElement::PopulatePropertyInfoOverride(System.String,Microsoft.UI.Composition.AnimationPropertyInfo)
    def _populate_property_info_override(self, property_name: str, animation_property_info: microsoft_ui_composition.AnimationPropertyInfo, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::ReleasePointerCapture(Microsoft.UI.Xaml.Input.Pointer)
    def release_pointer_capture(self, value: microsoft_ui_xaml_input.Pointer, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::ReleasePointerCaptures()
    def release_pointer_captures(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::RemoveHandler(Microsoft.UI.Xaml.RoutedEvent,System.Object)
    def remove_handler(self, routed_event: RoutedEvent, handler: winrt.system.Object, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::StartAnimation(Microsoft.UI.Composition.ICompositionAnimationBase)
    def start_animation(self, animation: microsoft_ui_composition.ICompositionAnimationBase, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::StartBringIntoView()
    def start_bring_into_view(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::StartBringIntoView(Microsoft.UI.Xaml.BringIntoViewOptions)
    def start_bring_into_view_with_options(self, options: BringIntoViewOptions, /) -> None: ...
    @typing.final
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.DataTransfer.DataPackageOperation> Microsoft.UI.Xaml.UIElement::StartDragAsync(Microsoft.UI.Input.PointerPoint)
    def start_drag_async(self, pointer_point: microsoft_ui_input.PointerPoint, /) -> windows_foundation.IAsyncOperation[windows_applicationmodel_datatransfer.DataPackageOperation]: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::StopAnimation(Microsoft.UI.Composition.ICompositionAnimationBase)
    def stop_animation(self, animation: microsoft_ui_composition.ICompositionAnimationBase, /) -> None: ...
    @typing.final
    # Microsoft.UI.Xaml.Media.GeneralTransform Microsoft.UI.Xaml.UIElement::TransformToVisual(Microsoft.UI.Xaml.UIElement)
    def transform_to_visual(self, visual: UIElement, /) -> microsoft_ui_xaml_media.GeneralTransform: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::TryInvokeKeyboardAccelerator(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)
    def try_invoke_keyboard_accelerator(self, args: microsoft_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::UpdateLayout()
    def update_layout(self) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_AccessKeyDisplayDismissed(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>)
    def add_access_key_display_dismissed(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.AccessKeyDisplayDismissedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_AccessKeyDisplayDismissed(Windows.Foundation.EventRegistrationToken)
    def remove_access_key_display_dismissed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_AccessKeyDisplayRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>)
    def add_access_key_display_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.AccessKeyDisplayRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_AccessKeyDisplayRequested(Windows.Foundation.EventRegistrationToken)
    def remove_access_key_display_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_AccessKeyInvoked(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>)
    def add_access_key_invoked(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.AccessKeyInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_AccessKeyInvoked(Windows.Foundation.EventRegistrationToken)
    def remove_access_key_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_BringIntoViewRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>)
    def add_bring_into_view_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, BringIntoViewRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_BringIntoViewRequested(Windows.Foundation.EventRegistrationToken)
    def remove_bring_into_view_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_CharacterReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>)
    def add_character_received(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.CharacterReceivedRoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_CharacterReceived(Windows.Foundation.EventRegistrationToken)
    def remove_character_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ContextCanceled(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.RoutedEventArgs>)
    def add_context_canceled(self, handler: windows_foundation.TypedEventHandler[UIElement, RoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ContextCanceled(Windows.Foundation.EventRegistrationToken)
    def remove_context_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ContextRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>)
    def add_context_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.ContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ContextRequested(Windows.Foundation.EventRegistrationToken)
    def remove_context_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DoubleTapped(Microsoft.UI.Xaml.Input.DoubleTappedEventHandler)
    def add_double_tapped(self, handler: microsoft_ui_xaml_input.DoubleTappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DoubleTapped(Windows.Foundation.EventRegistrationToken)
    def remove_double_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DragEnter(Microsoft.UI.Xaml.DragEventHandler)
    def add_drag_enter(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DragEnter(Windows.Foundation.EventRegistrationToken)
    def remove_drag_enter(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DragLeave(Microsoft.UI.Xaml.DragEventHandler)
    def add_drag_leave(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DragLeave(Windows.Foundation.EventRegistrationToken)
    def remove_drag_leave(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DragOver(Microsoft.UI.Xaml.DragEventHandler)
    def add_drag_over(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DragOver(Windows.Foundation.EventRegistrationToken)
    def remove_drag_over(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DragStarting(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DragStartingEventArgs>)
    def add_drag_starting(self, handler: windows_foundation.TypedEventHandler[UIElement, DragStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DragStarting(Windows.Foundation.EventRegistrationToken)
    def remove_drag_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_Drop(Microsoft.UI.Xaml.DragEventHandler)
    def add_drop(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_Drop(Windows.Foundation.EventRegistrationToken)
    def remove_drop(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_DropCompleted(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DropCompletedEventArgs>)
    def add_drop_completed(self, handler: windows_foundation.TypedEventHandler[UIElement, DropCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_DropCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_drop_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_GettingFocus(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.GettingFocusEventArgs>)
    def add_getting_focus(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.GettingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_GettingFocus(Windows.Foundation.EventRegistrationToken)
    def remove_getting_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_GotFocus(Microsoft.UI.Xaml.RoutedEventHandler)
    def add_got_focus(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_GotFocus(Windows.Foundation.EventRegistrationToken)
    def remove_got_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_Holding(Microsoft.UI.Xaml.Input.HoldingEventHandler)
    def add_holding(self, handler: microsoft_ui_xaml_input.HoldingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_Holding(Windows.Foundation.EventRegistrationToken)
    def remove_holding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_KeyDown(Microsoft.UI.Xaml.Input.KeyEventHandler)
    def add_key_down(self, handler: microsoft_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_KeyDown(Windows.Foundation.EventRegistrationToken)
    def remove_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_KeyUp(Microsoft.UI.Xaml.Input.KeyEventHandler)
    def add_key_up(self, handler: microsoft_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_KeyUp(Windows.Foundation.EventRegistrationToken)
    def remove_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_LosingFocus(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.LosingFocusEventArgs>)
    def add_losing_focus(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.LosingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_LosingFocus(Windows.Foundation.EventRegistrationToken)
    def remove_losing_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_LostFocus(Microsoft.UI.Xaml.RoutedEventHandler)
    def add_lost_focus(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_LostFocus(Windows.Foundation.EventRegistrationToken)
    def remove_lost_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ManipulationCompleted(Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler)
    def add_manipulation_completed(self, handler: microsoft_ui_xaml_input.ManipulationCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ManipulationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ManipulationDelta(Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler)
    def add_manipulation_delta(self, handler: microsoft_ui_xaml_input.ManipulationDeltaEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ManipulationDelta(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_delta(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ManipulationInertiaStarting(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler)
    def add_manipulation_inertia_starting(self, handler: microsoft_ui_xaml_input.ManipulationInertiaStartingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ManipulationInertiaStarting(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_inertia_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ManipulationStarted(Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler)
    def add_manipulation_started(self, handler: microsoft_ui_xaml_input.ManipulationStartedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ManipulationStarted(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ManipulationStarting(Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler)
    def add_manipulation_starting(self, handler: microsoft_ui_xaml_input.ManipulationStartingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ManipulationStarting(Windows.Foundation.EventRegistrationToken)
    def remove_manipulation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_NoFocusCandidateFound(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>)
    def add_no_focus_candidate_found(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.NoFocusCandidateFoundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_NoFocusCandidateFound(Windows.Foundation.EventRegistrationToken)
    def remove_no_focus_candidate_found(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerCanceled(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_canceled(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerCanceled(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerCaptureLost(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_capture_lost(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerCaptureLost(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_capture_lost(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerEntered(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_entered(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerExited(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_exited(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerMoved(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_moved(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerMoved(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_moved(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerPressed(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_pressed(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerPressed(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerReleased(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_released(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerReleased(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_released(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PointerWheelChanged(Microsoft.UI.Xaml.Input.PointerEventHandler)
    def add_pointer_wheel_changed(self, handler: microsoft_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PointerWheelChanged(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_wheel_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PreviewKeyDown(Microsoft.UI.Xaml.Input.KeyEventHandler)
    def add_preview_key_down(self, handler: microsoft_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PreviewKeyDown(Windows.Foundation.EventRegistrationToken)
    def remove_preview_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_PreviewKeyUp(Microsoft.UI.Xaml.Input.KeyEventHandler)
    def add_preview_key_up(self, handler: microsoft_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_PreviewKeyUp(Windows.Foundation.EventRegistrationToken)
    def remove_preview_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_ProcessKeyboardAccelerators(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>)
    def add_process_keyboard_accelerators(self, handler: windows_foundation.TypedEventHandler[UIElement, microsoft_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_ProcessKeyboardAccelerators(Windows.Foundation.EventRegistrationToken)
    def remove_process_keyboard_accelerators(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_RightTapped(Microsoft.UI.Xaml.Input.RightTappedEventHandler)
    def add_right_tapped(self, handler: microsoft_ui_xaml_input.RightTappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_RightTapped(Windows.Foundation.EventRegistrationToken)
    def remove_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.UIElement::add_Tapped(Microsoft.UI.Xaml.Input.TappedEventHandler)
    def add_tapped(self, handler: microsoft_ui_xaml_input.TappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.UIElement::remove_Tapped(Windows.Foundation.EventRegistrationToken)
    def remove_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode Microsoft.UI.Xaml.UIElement::get_KeyboardAcceleratorPlacementMode()
    @_property
    def keyboard_accelerator_placement_mode(self) -> microsoft_ui_xaml_input.KeyboardAcceleratorPlacementMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyboardAcceleratorPlacementMode(Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode)
    @keyboard_accelerator_placement_mode.setter
    @typing.final
    def keyboard_accelerator_placement_mode(self, value: microsoft_ui_xaml_input.KeyboardAcceleratorPlacementMode) -> None: ...
    # Microsoft.UI.Xaml.ScalarTransition Microsoft.UI.Xaml.UIElement::get_RotationTransition()
    @_property
    def rotation_transition(self) -> ScalarTransition: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_RotationTransition(Microsoft.UI.Xaml.ScalarTransition)
    @rotation_transition.setter
    @typing.final
    def rotation_transition(self, value: ScalarTransition) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_KeyTipTarget()
    @_property
    def key_tip_target(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyTipTarget(Microsoft.UI.Xaml.DependencyObject)
    @key_tip_target.setter
    @typing.final
    def key_tip_target(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.Input.KeyTipPlacementMode Microsoft.UI.Xaml.UIElement::get_KeyTipPlacementMode()
    @_property
    def key_tip_placement_mode(self) -> microsoft_ui_xaml_input.KeyTipPlacementMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyTipPlacementMode(Microsoft.UI.Xaml.Input.KeyTipPlacementMode)
    @key_tip_placement_mode.setter
    @typing.final
    def key_tip_placement_mode(self, value: microsoft_ui_xaml_input.KeyTipPlacementMode) -> None: ...
    # System.Double Microsoft.UI.Xaml.UIElement::get_KeyTipHorizontalOffset()
    @_property
    def key_tip_horizontal_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyTipHorizontalOffset(System.Double)
    @key_tip_horizontal_offset.setter
    @typing.final
    def key_tip_horizontal_offset(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsTapEnabled()
    @_property
    def is_tap_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsTapEnabled(System.Boolean)
    @is_tap_enabled.setter
    @typing.final
    def is_tap_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsTabStop()
    @_property
    def is_tab_stop(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsTabStop(System.Boolean)
    @is_tab_stop.setter
    @typing.final
    def is_tab_stop(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsRightTapEnabled()
    @_property
    def is_right_tap_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsRightTapEnabled(System.Boolean)
    @is_right_tap_enabled.setter
    @typing.final
    def is_right_tap_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsHoldingEnabled()
    @_property
    def is_holding_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsHoldingEnabled(System.Boolean)
    @is_holding_enabled.setter
    @typing.final
    def is_holding_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsHitTestVisible()
    @_property
    def is_hit_test_visible(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsHitTestVisible(System.Boolean)
    @is_hit_test_visible.setter
    @typing.final
    def is_hit_test_visible(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsDoubleTapEnabled()
    @_property
    def is_double_tap_enabled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsDoubleTapEnabled(System.Boolean)
    @is_double_tap_enabled.setter
    @typing.final
    def is_double_tap_enabled(self, value: bool) -> None: ...
    # System.String Microsoft.UI.Xaml.UIElement::get_AccessKey()
    @_property
    def access_key(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_AccessKey(System.String)
    @access_key.setter
    @typing.final
    def access_key(self, value: str) -> None: ...
    # Microsoft.UI.Xaml.ElementHighContrastAdjustment Microsoft.UI.Xaml.UIElement::get_HighContrastAdjustment()
    @_property
    def high_contrast_adjustment(self) -> ElementHighContrastAdjustment: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_HighContrastAdjustment(Microsoft.UI.Xaml.ElementHighContrastAdjustment)
    @high_contrast_adjustment.setter
    @typing.final
    def high_contrast_adjustment(self, value: ElementHighContrastAdjustment) -> None: ...
    # Microsoft.UI.Xaml.Input.ManipulationModes Microsoft.UI.Xaml.UIElement::get_ManipulationMode()
    @_property
    def manipulation_mode(self) -> microsoft_ui_xaml_input.ManipulationModes: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_ManipulationMode(Microsoft.UI.Xaml.Input.ManipulationModes)
    @manipulation_mode.setter
    @typing.final
    def manipulation_mode(self, value: microsoft_ui_xaml_input.ManipulationModes) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_ExitDisplayModeOnAccessKeyInvoked()
    @_property
    def exit_display_mode_on_access_key_invoked(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_ExitDisplayModeOnAccessKeyInvoked(System.Boolean)
    @exit_display_mode_on_access_key_invoked.setter
    @typing.final
    def exit_display_mode_on_access_key_invoked(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.ScalarTransition Microsoft.UI.Xaml.UIElement::get_OpacityTransition()
    @_property
    def opacity_transition(self) -> ScalarTransition: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_OpacityTransition(Microsoft.UI.Xaml.ScalarTransition)
    @opacity_transition.setter
    @typing.final
    def opacity_transition(self, value: ScalarTransition) -> None: ...
    # Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase Microsoft.UI.Xaml.UIElement::get_ContextFlyout()
    @_property
    def context_flyout(self) -> microsoft_ui_xaml_controls_primitives.FlyoutBase: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_ContextFlyout(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)
    @context_flyout.setter
    @typing.final
    def context_flyout(self, value: microsoft_ui_xaml_controls_primitives.FlyoutBase) -> None: ...
    # Microsoft.UI.Xaml.Media.ElementCompositeMode Microsoft.UI.Xaml.UIElement::get_CompositeMode()
    @_property
    def composite_mode(self) -> microsoft_ui_xaml_media.ElementCompositeMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_CompositeMode(Microsoft.UI.Xaml.Media.ElementCompositeMode)
    @composite_mode.setter
    @typing.final
    def composite_mode(self, value: microsoft_ui_xaml_media.ElementCompositeMode) -> None: ...
    # Microsoft.UI.Xaml.Media.RectangleGeometry Microsoft.UI.Xaml.UIElement::get_Clip()
    @_property
    def clip(self) -> microsoft_ui_xaml_media.RectangleGeometry: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Clip(Microsoft.UI.Xaml.Media.RectangleGeometry)
    @clip.setter
    @typing.final
    def clip(self, value: microsoft_ui_xaml_media.RectangleGeometry) -> None: ...
    # Windows.Foundation.Numerics.Vector3 Microsoft.UI.Xaml.UIElement::get_Translation()
    @_property
    def translation(self) -> windows_foundation_numerics.Vector3: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Translation(Windows.Foundation.Numerics.Vector3)
    @translation.setter
    @typing.final
    def translation(self, value: windows_foundation_numerics.Vector3) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_CanDrag()
    @_property
    def can_drag(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_CanDrag(System.Boolean)
    @can_drag.setter
    @typing.final
    def can_drag(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_CanBeScrollAnchor()
    @_property
    def can_be_scroll_anchor(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_CanBeScrollAnchor(System.Boolean)
    @can_be_scroll_anchor.setter
    @typing.final
    def can_be_scroll_anchor(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.Media.CacheMode Microsoft.UI.Xaml.UIElement::get_CacheMode()
    @_property
    def cache_mode(self) -> microsoft_ui_xaml_media.CacheMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_CacheMode(Microsoft.UI.Xaml.Media.CacheMode)
    @cache_mode.setter
    @typing.final
    def cache_mode(self, value: microsoft_ui_xaml_media.CacheMode) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_AllowDrop()
    @_property
    def allow_drop(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_AllowDrop(System.Boolean)
    @allow_drop.setter
    @typing.final
    def allow_drop(self, value: bool) -> None: ...
    # System.Double Microsoft.UI.Xaml.UIElement::get_Opacity()
    @_property
    def opacity(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Opacity(System.Double)
    @opacity.setter
    @typing.final
    def opacity(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_KeyboardAcceleratorPlacementTarget()
    @_property
    def keyboard_accelerator_placement_target(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyboardAcceleratorPlacementTarget(Microsoft.UI.Xaml.DependencyObject)
    @keyboard_accelerator_placement_target.setter
    @typing.final
    def keyboard_accelerator_placement_target(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_AccessKeyScopeOwner()
    @_property
    def access_key_scope_owner(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_AccessKeyScopeOwner(Microsoft.UI.Xaml.DependencyObject)
    @access_key_scope_owner.setter
    @typing.final
    def access_key_scope_owner(self, value: DependencyObject) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_IsAccessKeyScope()
    @_property
    def is_access_key_scope(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_IsAccessKeyScope(System.Boolean)
    @is_access_key_scope.setter
    @typing.final
    def is_access_key_scope(self, value: bool) -> None: ...
    # System.Double Microsoft.UI.Xaml.UIElement::get_KeyTipVerticalOffset()
    @_property
    def key_tip_vertical_offset(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_KeyTipVerticalOffset(System.Double)
    @key_tip_vertical_offset.setter
    @typing.final
    def key_tip_vertical_offset(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.XamlRoot Microsoft.UI.Xaml.UIElement::get_XamlRoot()
    @_property
    def xaml_root(self) -> XamlRoot: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XamlRoot(Microsoft.UI.Xaml.XamlRoot)
    @xaml_root.setter
    @typing.final
    def xaml_root(self, value: XamlRoot) -> None: ...
    # Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy Microsoft.UI.Xaml.UIElement::get_XYFocusUpNavigationStrategy()
    @_property
    def x_y_focus_up_navigation_strategy(self) -> microsoft_ui_xaml_input.XYFocusNavigationStrategy: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusUpNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    @x_y_focus_up_navigation_strategy.setter
    @typing.final
    def x_y_focus_up_navigation_strategy(self, value: microsoft_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_XYFocusUp()
    @_property
    def x_y_focus_up(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusUp(Microsoft.UI.Xaml.DependencyObject)
    @x_y_focus_up.setter
    @typing.final
    def x_y_focus_up(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy Microsoft.UI.Xaml.UIElement::get_XYFocusRightNavigationStrategy()
    @_property
    def x_y_focus_right_navigation_strategy(self) -> microsoft_ui_xaml_input.XYFocusNavigationStrategy: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusRightNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    @x_y_focus_right_navigation_strategy.setter
    @typing.final
    def x_y_focus_right_navigation_strategy(self, value: microsoft_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_XYFocusRight()
    @_property
    def x_y_focus_right(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusRight(Microsoft.UI.Xaml.DependencyObject)
    @x_y_focus_right.setter
    @typing.final
    def x_y_focus_right(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy Microsoft.UI.Xaml.UIElement::get_XYFocusLeftNavigationStrategy()
    @_property
    def x_y_focus_left_navigation_strategy(self) -> microsoft_ui_xaml_input.XYFocusNavigationStrategy: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusLeftNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    @x_y_focus_left_navigation_strategy.setter
    @typing.final
    def x_y_focus_left_navigation_strategy(self, value: microsoft_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    # Windows.Foundation.Numerics.Vector3 Microsoft.UI.Xaml.UIElement::get_CenterPoint()
    @_property
    def center_point(self) -> windows_foundation_numerics.Vector3: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_CenterPoint(Windows.Foundation.Numerics.Vector3)
    @center_point.setter
    @typing.final
    def center_point(self, value: windows_foundation_numerics.Vector3) -> None: ...
    # Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode Microsoft.UI.Xaml.UIElement::get_XYFocusKeyboardNavigation()
    @_property
    def x_y_focus_keyboard_navigation(self) -> microsoft_ui_xaml_input.XYFocusKeyboardNavigationMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusKeyboardNavigation(Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode)
    @x_y_focus_keyboard_navigation.setter
    @typing.final
    def x_y_focus_keyboard_navigation(self, value: microsoft_ui_xaml_input.XYFocusKeyboardNavigationMode) -> None: ...
    # Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy Microsoft.UI.Xaml.UIElement::get_XYFocusDownNavigationStrategy()
    @_property
    def x_y_focus_down_navigation_strategy(self) -> microsoft_ui_xaml_input.XYFocusNavigationStrategy: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusDownNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    @x_y_focus_down_navigation_strategy.setter
    @typing.final
    def x_y_focus_down_navigation_strategy(self, value: microsoft_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_XYFocusDown()
    @_property
    def x_y_focus_down(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusDown(Microsoft.UI.Xaml.DependencyObject)
    @x_y_focus_down.setter
    @typing.final
    def x_y_focus_down(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.Visibility Microsoft.UI.Xaml.UIElement::get_Visibility()
    @_property
    def visibility(self) -> Visibility: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Visibility(Microsoft.UI.Xaml.Visibility)
    @visibility.setter
    @typing.final
    def visibility(self, value: Visibility) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_UseSystemFocusVisuals()
    @_property
    def use_system_focus_visuals(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_UseSystemFocusVisuals(System.Boolean)
    @use_system_focus_visuals.setter
    @typing.final
    def use_system_focus_visuals(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.UIElement::get_UseLayoutRounding()
    @_property
    def use_layout_rounding(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_UseLayoutRounding(System.Boolean)
    @use_layout_rounding.setter
    @typing.final
    def use_layout_rounding(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.Vector3Transition Microsoft.UI.Xaml.UIElement::get_TranslationTransition()
    @_property
    def translation_transition(self) -> Vector3Transition: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_TranslationTransition(Microsoft.UI.Xaml.Vector3Transition)
    @translation_transition.setter
    @typing.final
    def translation_transition(self, value: Vector3Transition) -> None: ...
    # Microsoft.UI.Xaml.DependencyObject Microsoft.UI.Xaml.UIElement::get_XYFocusLeft()
    @_property
    def x_y_focus_left(self) -> DependencyObject: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_XYFocusLeft(Microsoft.UI.Xaml.DependencyObject)
    @x_y_focus_left.setter
    @typing.final
    def x_y_focus_left(self, value: DependencyObject) -> None: ...
    # Microsoft.UI.Xaml.Media.Animation.TransitionCollection Microsoft.UI.Xaml.UIElement::get_Transitions()
    @_property
    def transitions(self) -> microsoft_ui_xaml_media_animation.TransitionCollection: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Transitions(Microsoft.UI.Xaml.Media.Animation.TransitionCollection)
    @transitions.setter
    @typing.final
    def transitions(self, value: microsoft_ui_xaml_media_animation.TransitionCollection) -> None: ...
    # Windows.Foundation.Numerics.Matrix4x4 Microsoft.UI.Xaml.UIElement::get_TransformMatrix()
    @_property
    def transform_matrix(self) -> windows_foundation_numerics.Matrix4x4: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_TransformMatrix(Windows.Foundation.Numerics.Matrix4x4)
    @transform_matrix.setter
    @typing.final
    def transform_matrix(self, value: windows_foundation_numerics.Matrix4x4) -> None: ...
    # System.Single Microsoft.UI.Xaml.UIElement::get_Rotation()
    @_property
    def rotation(self) -> winrt.system.Single: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Rotation(System.Single)
    @rotation.setter
    @typing.final
    def rotation(self, value: winrt.system.Single) -> None: ...
    # Windows.Foundation.Point Microsoft.UI.Xaml.UIElement::get_RenderTransformOrigin()
    @_property
    def render_transform_origin(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_RenderTransformOrigin(Windows.Foundation.Point)
    @render_transform_origin.setter
    @typing.final
    def render_transform_origin(self, value: windows_foundation.Point) -> None: ...
    # Microsoft.UI.Xaml.Media.Transform Microsoft.UI.Xaml.UIElement::get_RenderTransform()
    @_property
    def render_transform(self) -> microsoft_ui_xaml_media.Transform: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_RenderTransform(Microsoft.UI.Xaml.Media.Transform)
    @render_transform.setter
    @typing.final
    def render_transform(self, value: microsoft_ui_xaml_media.Transform) -> None: ...
    # Microsoft.UI.Xaml.Input.KeyboardNavigationMode Microsoft.UI.Xaml.UIElement::get_TabFocusNavigation()
    @_property
    def tab_focus_navigation(self) -> microsoft_ui_xaml_input.KeyboardNavigationMode: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_TabFocusNavigation(Microsoft.UI.Xaml.Input.KeyboardNavigationMode)
    @tab_focus_navigation.setter
    @typing.final
    def tab_focus_navigation(self, value: microsoft_ui_xaml_input.KeyboardNavigationMode) -> None: ...
    # System.Double Microsoft.UI.Xaml.UIElement::get_RasterizationScale()
    @_property
    def rasterization_scale(self) -> winrt.system.Double: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_RasterizationScale(System.Double)
    @rasterization_scale.setter
    @typing.final
    def rasterization_scale(self, value: winrt.system.Double) -> None: ...
    # Microsoft.UI.Xaml.Media.Projection Microsoft.UI.Xaml.UIElement::get_Projection()
    @_property
    def projection(self) -> microsoft_ui_xaml_media.Projection: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Projection(Microsoft.UI.Xaml.Media.Projection)
    @projection.setter
    @typing.final
    def projection(self, value: microsoft_ui_xaml_media.Projection) -> None: ...
    # Microsoft.UI.Xaml.Media.Shadow Microsoft.UI.Xaml.UIElement::get_Shadow()
    @_property
    def shadow(self) -> microsoft_ui_xaml_media.Shadow: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Shadow(Microsoft.UI.Xaml.Media.Shadow)
    @shadow.setter
    @typing.final
    def shadow(self, value: microsoft_ui_xaml_media.Shadow) -> None: ...
    # Microsoft.UI.Xaml.Vector3Transition Microsoft.UI.Xaml.UIElement::get_ScaleTransition()
    @_property
    def scale_transition(self) -> Vector3Transition: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_ScaleTransition(Microsoft.UI.Xaml.Vector3Transition)
    @scale_transition.setter
    @typing.final
    def scale_transition(self, value: Vector3Transition) -> None: ...
    # Windows.Foundation.Numerics.Vector3 Microsoft.UI.Xaml.UIElement::get_Scale()
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Scale(Windows.Foundation.Numerics.Vector3)
    @scale.setter
    @typing.final
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    # System.Int32 Microsoft.UI.Xaml.UIElement::get_TabIndex()
    @_property
    def tab_index(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_TabIndex(System.Int32)
    @tab_index.setter
    @typing.final
    def tab_index(self, value: winrt.system.Int32) -> None: ...
    # Windows.Foundation.Numerics.Vector3 Microsoft.UI.Xaml.UIElement::get_RotationAxis()
    @_property
    def rotation_axis(self) -> windows_foundation_numerics.Vector3: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_RotationAxis(Windows.Foundation.Numerics.Vector3)
    @rotation_axis.setter
    @typing.final
    def rotation_axis(self, value: windows_foundation_numerics.Vector3) -> None: ...
    # Microsoft.UI.Xaml.Media.Media3D.Transform3D Microsoft.UI.Xaml.UIElement::get_Transform3D()
    @_property
    def transform_3d(self) -> microsoft_ui_xaml_media_media3d.Transform3D: ...
    # System.Void Microsoft.UI.Xaml.UIElement::put_Transform3D(Microsoft.UI.Xaml.Media.Media3D.Transform3D)
    @transform_3d.setter
    @typing.final
    def transform_3d(self, value: microsoft_ui_xaml_media_media3d.Transform3D) -> None: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.UIElement::get_DesiredSize()
    @_property
    @typing.final
    def desired_size(self) -> windows_foundation.Size: ...
    # Microsoft.UI.Xaml.FocusState Microsoft.UI.Xaml.UIElement::get_FocusState()
    @_property
    @typing.final
    def focus_state(self) -> FocusState: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Input.KeyboardAccelerator> Microsoft.UI.Xaml.UIElement::get_KeyboardAccelerators()
    @_property
    @typing.final
    def keyboard_accelerators(self) -> typing.MutableSequence[microsoft_ui_xaml_input.KeyboardAccelerator]: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Media.XamlLight> Microsoft.UI.Xaml.UIElement::get_Lights()
    @_property
    @typing.final
    def lights(self) -> typing.MutableSequence[microsoft_ui_xaml_media.XamlLight]: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.UIElement::get_RenderSize()
    @_property
    @typing.final
    def render_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.Input.Pointer> Microsoft.UI.Xaml.UIElement::get_PointerCaptures()
    @_property
    @typing.final
    def pointer_captures(self) -> typing.Sequence[microsoft_ui_xaml_input.Pointer]: ...
    # Windows.Foundation.Numerics.Vector3 Microsoft.UI.Xaml.UIElement::get_ActualOffset()
    @_property
    @typing.final
    def actual_offset(self) -> windows_foundation_numerics.Vector3: ...
    # Windows.Foundation.Numerics.Vector2 Microsoft.UI.Xaml.UIElement::get_ActualSize()
    @_property
    @typing.final
    def actual_size(self) -> windows_foundation_numerics.Vector2: ...

class UIElementWeakCollection_Static(type):
    pass

class UIElementWeakCollection(winrt.system.Object, winrt._winrt.MutableSequence[UIElement], metaclass=UIElementWeakCollection_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[UIElement]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> UIElement: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[UIElement]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: UIElement) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[UIElement]) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::Append(Microsoft.UI.Xaml.UIElement)
    def append(self, value: UIElement, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Microsoft.UI.Xaml.UIElement> Microsoft.UI.Xaml.UIElementWeakCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[UIElement]: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.UIElementWeakCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> UIElement: ...
    # System.UInt32 Microsoft.UI.Xaml.UIElementWeakCollection::GetMany(System.UInt32,Microsoft.UI.Xaml.UIElement[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[UIElement], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.UI.Xaml.UIElement> Microsoft.UI.Xaml.UIElementWeakCollection::GetView()
    def get_view(self) -> typing.Sequence[UIElement]: ...
    # System.Boolean Microsoft.UI.Xaml.UIElementWeakCollection::IndexOf(Microsoft.UI.Xaml.UIElement,System.UInt32&)
    def index_of(self, value: UIElement, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::InsertAt(System.UInt32,Microsoft.UI.Xaml.UIElement)
    def insert_at(self, index: winrt.system.UInt32, value: UIElement, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::ReplaceAll(Microsoft.UI.Xaml.UIElement[])
    def replace_all(self, items: typing.Union[winrt.system.Array[UIElement], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Microsoft.UI.Xaml.UIElementWeakCollection::SetAt(System.UInt32,Microsoft.UI.Xaml.UIElement)
    def set_at(self, index: winrt.system.UInt32, value: UIElement, /) -> None: ...
    # System.UInt32 Microsoft.UI.Xaml.UIElementWeakCollection::get_Size()
    @_property
    @typing.final
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class UnhandledExceptionEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.UnhandledExceptionEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.UnhandledExceptionEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.Foundation.HResult Microsoft.UI.Xaml.UnhandledExceptionEventArgs::get_Exception()
    @_property
    def exception(self) -> windows_foundation.HResult: ...
    # System.String Microsoft.UI.Xaml.UnhandledExceptionEventArgs::get_Message()
    @_property
    def message(self) -> str: ...

class Vector3Transition_Static(type):
    pass

class Vector3Transition(winrt.system.Object, metaclass=Vector3Transition_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.TimeSpan Microsoft.UI.Xaml.Vector3Transition::get_Duration()
    @_property
    def duration(self) -> datetime.timedelta: ...
    # System.Void Microsoft.UI.Xaml.Vector3Transition::put_Duration(Windows.Foundation.TimeSpan)
    @duration.setter
    @typing.final
    def duration(self, value: datetime.timedelta) -> None: ...
    # Microsoft.UI.Xaml.Vector3TransitionComponents Microsoft.UI.Xaml.Vector3Transition::get_Components()
    @_property
    def components(self) -> Vector3TransitionComponents: ...
    # System.Void Microsoft.UI.Xaml.Vector3Transition::put_Components(Microsoft.UI.Xaml.Vector3TransitionComponents)
    @components.setter
    @typing.final
    def components(self, value: Vector3TransitionComponents) -> None: ...

@typing.final
class VisualState(DependencyObject):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.Media.Animation.Storyboard Microsoft.UI.Xaml.VisualState::get_Storyboard()
    @_property
    def storyboard(self) -> microsoft_ui_xaml_media_animation.Storyboard: ...
    # System.Void Microsoft.UI.Xaml.VisualState::put_Storyboard(Microsoft.UI.Xaml.Media.Animation.Storyboard)
    @storyboard.setter
    def storyboard(self, value: microsoft_ui_xaml_media_animation.Storyboard) -> None: ...
    # System.String Microsoft.UI.Xaml.VisualState::get_Name()
    @_property
    def name(self) -> str: ...
    # Microsoft.UI.Xaml.SetterBaseCollection Microsoft.UI.Xaml.VisualState::get_Setters()
    @_property
    def setters(self) -> SetterBaseCollection: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.StateTriggerBase> Microsoft.UI.Xaml.VisualState::get_StateTriggers()
    @_property
    def state_triggers(self) -> typing.MutableSequence[StateTriggerBase]: ...

@typing.final
class VisualStateChangedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Microsoft.UI.Xaml.VisualState Microsoft.UI.Xaml.VisualStateChangedEventArgs::get_OldState()
    @_property
    def old_state(self) -> VisualState: ...
    # System.Void Microsoft.UI.Xaml.VisualStateChangedEventArgs::put_OldState(Microsoft.UI.Xaml.VisualState)
    @old_state.setter
    def old_state(self, value: VisualState) -> None: ...
    # Microsoft.UI.Xaml.VisualState Microsoft.UI.Xaml.VisualStateChangedEventArgs::get_NewState()
    @_property
    def new_state(self) -> VisualState: ...
    # System.Void Microsoft.UI.Xaml.VisualStateChangedEventArgs::put_NewState(Microsoft.UI.Xaml.VisualState)
    @new_state.setter
    def new_state(self, value: VisualState) -> None: ...
    # Microsoft.UI.Xaml.Controls.Control Microsoft.UI.Xaml.VisualStateChangedEventArgs::get_Control()
    @_property
    def control(self) -> microsoft_ui_xaml_controls.Control: ...
    # System.Void Microsoft.UI.Xaml.VisualStateChangedEventArgs::put_Control(Microsoft.UI.Xaml.Controls.Control)
    @control.setter
    def control(self, value: microsoft_ui_xaml_controls.Control) -> None: ...

@typing.final
class VisualStateGroup(DependencyObject):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.VisualStateGroup::add_CurrentStateChanged(Microsoft.UI.Xaml.VisualStateChangedEventHandler)
    def add_current_state_changed(self, handler: VisualStateChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.UI.Xaml.VisualStateGroup::remove_CurrentStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_current_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.VisualStateGroup::add_CurrentStateChanging(Microsoft.UI.Xaml.VisualStateChangedEventHandler)
    def add_current_state_changing(self, handler: VisualStateChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.UI.Xaml.VisualStateGroup::remove_CurrentStateChanging(Windows.Foundation.EventRegistrationToken)
    def remove_current_state_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Microsoft.UI.Xaml.VisualState Microsoft.UI.Xaml.VisualStateGroup::get_CurrentState()
    @_property
    def current_state(self) -> VisualState: ...
    # System.String Microsoft.UI.Xaml.VisualStateGroup::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.VisualState> Microsoft.UI.Xaml.VisualStateGroup::get_States()
    @_property
    def states(self) -> typing.MutableSequence[VisualState]: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.VisualTransition> Microsoft.UI.Xaml.VisualStateGroup::get_Transitions()
    @_property
    def transitions(self) -> typing.MutableSequence[VisualTransition]: ...

class VisualStateManager_Static(DependencyObject_Static):
    # Microsoft.UI.Xaml.VisualStateManager Microsoft.UI.Xaml.VisualStateManager::GetCustomVisualStateManager(Microsoft.UI.Xaml.FrameworkElement)
    def get_custom_visual_state_manager(cls, obj: FrameworkElement, /) -> VisualStateManager: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.VisualStateGroup> Microsoft.UI.Xaml.VisualStateManager::GetVisualStateGroups(Microsoft.UI.Xaml.FrameworkElement)
    def get_visual_state_groups(cls, obj: FrameworkElement, /) -> typing.MutableSequence[VisualStateGroup]: ...
    # System.Boolean Microsoft.UI.Xaml.VisualStateManager::GoToState(Microsoft.UI.Xaml.Controls.Control,System.String,System.Boolean)
    def go_to_state(cls, control: microsoft_ui_xaml_controls.Control, state_name: str, use_transitions: bool, /) -> bool: ...
    # System.Void Microsoft.UI.Xaml.VisualStateManager::SetCustomVisualStateManager(Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.VisualStateManager)
    def set_custom_visual_state_manager(cls, obj: FrameworkElement, value: VisualStateManager, /) -> None: ...
    # Microsoft.UI.Xaml.DependencyProperty Microsoft.UI.Xaml.VisualStateManager::get_CustomVisualStateManagerProperty()
    @_property
    @typing.final
    def custom_visual_state_manager_property(cls) -> DependencyProperty: ...

class VisualStateManager(DependencyObject, metaclass=VisualStateManager_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Microsoft.UI.Xaml.VisualStateManager::GoToStateCore(Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.FrameworkElement,System.String,Microsoft.UI.Xaml.VisualStateGroup,Microsoft.UI.Xaml.VisualState,System.Boolean)
    def _go_to_state_core(self, control: microsoft_ui_xaml_controls.Control, template_root: FrameworkElement, state_name: str, group: VisualStateGroup, state: VisualState, use_transitions: bool, /) -> bool: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.VisualStateManager::RaiseCurrentStateChanged(Microsoft.UI.Xaml.VisualStateGroup,Microsoft.UI.Xaml.VisualState,Microsoft.UI.Xaml.VisualState,Microsoft.UI.Xaml.Controls.Control)
    def _raise_current_state_changed(self, state_group: VisualStateGroup, old_state: VisualState, new_state: VisualState, control: microsoft_ui_xaml_controls.Control, /) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.VisualStateManager::RaiseCurrentStateChanging(Microsoft.UI.Xaml.VisualStateGroup,Microsoft.UI.Xaml.VisualState,Microsoft.UI.Xaml.VisualState,Microsoft.UI.Xaml.Controls.Control)
    def _raise_current_state_changing(self, state_group: VisualStateGroup, old_state: VisualState, new_state: VisualState, control: microsoft_ui_xaml_controls.Control, /) -> None: ...

class VisualTransition_Static(DependencyObject_Static):
    pass

class VisualTransition(DependencyObject, metaclass=VisualTransition_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Microsoft.UI.Xaml.VisualTransition::get_To()
    @_property
    def to(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.VisualTransition::put_To(System.String)
    @to.setter
    @typing.final
    def to(self, value: str) -> None: ...
    # Microsoft.UI.Xaml.Media.Animation.Storyboard Microsoft.UI.Xaml.VisualTransition::get_Storyboard()
    @_property
    def storyboard(self) -> microsoft_ui_xaml_media_animation.Storyboard: ...
    # System.Void Microsoft.UI.Xaml.VisualTransition::put_Storyboard(Microsoft.UI.Xaml.Media.Animation.Storyboard)
    @storyboard.setter
    @typing.final
    def storyboard(self, value: microsoft_ui_xaml_media_animation.Storyboard) -> None: ...
    # Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase Microsoft.UI.Xaml.VisualTransition::get_GeneratedEasingFunction()
    @_property
    def generated_easing_function(self) -> microsoft_ui_xaml_media_animation.EasingFunctionBase: ...
    # System.Void Microsoft.UI.Xaml.VisualTransition::put_GeneratedEasingFunction(Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase)
    @generated_easing_function.setter
    @typing.final
    def generated_easing_function(self, value: microsoft_ui_xaml_media_animation.EasingFunctionBase) -> None: ...
    # Microsoft.UI.Xaml.Duration Microsoft.UI.Xaml.VisualTransition::get_GeneratedDuration()
    @_property
    def generated_duration(self) -> Duration: ...
    # System.Void Microsoft.UI.Xaml.VisualTransition::put_GeneratedDuration(Microsoft.UI.Xaml.Duration)
    @generated_duration.setter
    @typing.final
    def generated_duration(self, value: Duration) -> None: ...
    # System.String Microsoft.UI.Xaml.VisualTransition::get_From()
    @_property
    def from_(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.VisualTransition::put_From(System.String)
    @from_.setter
    @typing.final
    def from_(self, value: str) -> None: ...

class Window_Static(type):
    # Microsoft.UI.Xaml.Window Microsoft.UI.Xaml.Window::get_Current()
    @_property
    @typing.final
    def current(cls) -> Window: ...

class Window(winrt.system.Object, metaclass=Window_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::Activate()
    def activate(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::Close()
    def close(self) -> None: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::SetTitleBar(Microsoft.UI.Xaml.UIElement)
    def set_title_bar(self, title_bar: UIElement, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Window::add_Activated(Windows.Foundation.TypedEventHandler`2<System.Object,Microsoft.UI.Xaml.WindowActivatedEventArgs>)
    def add_activated(self, handler: windows_foundation.TypedEventHandler[winrt.system.Object, WindowActivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::remove_Activated(Windows.Foundation.EventRegistrationToken)
    def remove_activated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Window::add_Closed(Windows.Foundation.TypedEventHandler`2<System.Object,Microsoft.UI.Xaml.WindowEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[winrt.system.Object, WindowEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Window::add_SizeChanged(Windows.Foundation.TypedEventHandler`2<System.Object,Microsoft.UI.Xaml.WindowSizeChangedEventArgs>)
    def add_size_changed(self, handler: windows_foundation.TypedEventHandler[winrt.system.Object, WindowSizeChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_size_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.Window::add_VisibilityChanged(Windows.Foundation.TypedEventHandler`2<System.Object,Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>)
    def add_visibility_changed(self, handler: windows_foundation.TypedEventHandler[winrt.system.Object, WindowVisibilityChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.UI.Xaml.Window::remove_VisibilityChanged(Windows.Foundation.EventRegistrationToken)
    def remove_visibility_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Microsoft.UI.Xaml.Window::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Microsoft.UI.Xaml.Window::put_Title(System.String)
    @title.setter
    @typing.final
    def title(self, value: str) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.Window::get_ExtendsContentIntoTitleBar()
    @_property
    def extends_content_into_title_bar(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.Window::put_ExtendsContentIntoTitleBar(System.Boolean)
    @extends_content_into_title_bar.setter
    @typing.final
    def extends_content_into_title_bar(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.Window::get_Content()
    @_property
    def content(self) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.Window::put_Content(Microsoft.UI.Xaml.UIElement)
    @content.setter
    @typing.final
    def content(self, value: UIElement) -> None: ...
    # Windows.Foundation.Rect Microsoft.UI.Xaml.Window::get_Bounds()
    @_property
    @typing.final
    def bounds(self) -> windows_foundation.Rect: ...
    # Microsoft.UI.Composition.Compositor Microsoft.UI.Xaml.Window::get_Compositor()
    @_property
    @typing.final
    def compositor(self) -> microsoft_ui_composition.Compositor: ...
    # Windows.UI.Core.CoreWindow Microsoft.UI.Xaml.Window::get_CoreWindow()
    @_property
    @typing.final
    def core_window(self) -> windows_ui_core.CoreWindow: ...
    # Windows.UI.Core.CoreDispatcher Microsoft.UI.Xaml.Window::get_Dispatcher()
    @_property
    @typing.final
    def dispatcher(self) -> windows_ui_core.CoreDispatcher: ...
    # Microsoft.UI.Dispatching.DispatcherQueue Microsoft.UI.Xaml.Window::get_DispatcherQueue()
    @_property
    @typing.final
    def dispatcher_queue(self) -> microsoft_ui_dispatching.DispatcherQueue: ...
    # System.Boolean Microsoft.UI.Xaml.Window::get_Visible()
    @_property
    @typing.final
    def visible(self) -> bool: ...
    # Microsoft.UI.Xaml.Media.SystemBackdrop Microsoft.UI.Xaml.Window::get_SystemBackdrop()
    @_property
    def system_backdrop(self) -> microsoft_ui_xaml_media.SystemBackdrop: ...
    # System.Void Microsoft.UI.Xaml.Window::put_SystemBackdrop(Microsoft.UI.Xaml.Media.SystemBackdrop)
    @system_backdrop.setter
    @typing.final
    def system_backdrop(self, value: microsoft_ui_xaml_media.SystemBackdrop) -> None: ...
    # Microsoft.UI.Windowing.AppWindow Microsoft.UI.Xaml.Window::get_AppWindow()
    @_property
    @typing.final
    def app_window(self) -> microsoft_ui_windowing.AppWindow: ...

@typing.final
class WindowActivatedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.WindowActivatedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.WindowActivatedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Microsoft.UI.Xaml.WindowActivationState Microsoft.UI.Xaml.WindowActivatedEventArgs::get_WindowActivationState()
    @_property
    def window_activation_state(self) -> WindowActivationState: ...

@typing.final
class WindowEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.WindowEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.WindowEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class WindowSizeChangedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.WindowSizeChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.WindowSizeChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.WindowSizeChangedEventArgs::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...

@typing.final
class WindowVisibilityChangedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs::get_Visible()
    @_property
    def visible(self) -> bool: ...

@typing.final
class XamlResourceReferenceFailedEventArgs(winrt.system.Object):
    # System.String Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs::get_Message()
    @_property
    def message(self) -> str: ...

@typing.final
class XamlRoot(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Microsoft.UI.Xaml.XamlRoot::add_Changed(Windows.Foundation.TypedEventHandler`2<Microsoft.UI.Xaml.XamlRoot,Microsoft.UI.Xaml.XamlRootChangedEventArgs>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[XamlRoot, XamlRootChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.UI.Xaml.XamlRoot::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.XamlRoot::get_Content()
    @_property
    def content(self) -> UIElement: ...
    # System.Boolean Microsoft.UI.Xaml.XamlRoot::get_IsHostVisible()
    @_property
    def is_host_visible(self) -> bool: ...
    # System.Double Microsoft.UI.Xaml.XamlRoot::get_RasterizationScale()
    @_property
    def rasterization_scale(self) -> winrt.system.Double: ...
    # Windows.Foundation.Size Microsoft.UI.Xaml.XamlRoot::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...
    # Microsoft.UI.Content.ContentIslandEnvironment Microsoft.UI.Xaml.XamlRoot::get_ContentIslandEnvironment()
    @_property
    def content_island_environment(self) -> microsoft_ui_content.ContentIslandEnvironment: ...
    # Microsoft.UI.Content.ContentCoordinateConverter Microsoft.UI.Xaml.XamlRoot::get_CoordinateConverter()
    @_property
    def coordinate_converter(self) -> microsoft_ui_content.ContentCoordinateConverter: ...

@typing.final
class XamlRootChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class _IDataTemplateExtension: ...

class IDataTemplateExtension(winrt._winrt.IInspectable):
    # System.Boolean Microsoft.UI.Xaml.IDataTemplateExtension::ProcessBinding(System.UInt32)
    @abstractmethod
    def process_binding(self, phase: winrt.system.UInt32, /) -> bool: ...
    # System.Int32 Microsoft.UI.Xaml.IDataTemplateExtension::ProcessBindings(Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs)
    @abstractmethod
    def process_bindings(self, arg: microsoft_ui_xaml_controls.ContainerContentChangingEventArgs, /) -> winrt.system.Int32: ...
    # System.Void Microsoft.UI.Xaml.IDataTemplateExtension::ResetTemplate()
    @abstractmethod
    def reset_template(self) -> None: ...

@typing.final
class _IElementFactory: ...

class IElementFactory(winrt._winrt.IInspectable):
    # Microsoft.UI.Xaml.UIElement Microsoft.UI.Xaml.IElementFactory::GetElement(Microsoft.UI.Xaml.ElementFactoryGetArgs)
    @abstractmethod
    def get_element(self, args: ElementFactoryGetArgs, /) -> UIElement: ...
    # System.Void Microsoft.UI.Xaml.IElementFactory::RecycleElement(Microsoft.UI.Xaml.ElementFactoryRecycleArgs)
    @abstractmethod
    def recycle_element(self, args: ElementFactoryRecycleArgs, /) -> None: ...

@typing.final
class _IXamlServiceProvider: ...

class IXamlServiceProvider(winrt._winrt.IInspectable):
    # System.Object Microsoft.UI.Xaml.IXamlServiceProvider::GetService(Windows.UI.Xaml.Interop.TypeName)
    @abstractmethod
    def get_service(self, type: windows_ui_xaml_interop.TypeName, /) -> winrt.system.Object: ...

