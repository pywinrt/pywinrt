// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Perception.Spatial.Surfaces.h"


namespace py::cpp::Windows::Perception::Spatial::Surfaces
{
    // ----- SpatialSurfaceInfo class --------------------

    static PyObject* _new_SpatialSurfaceInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_SpatialSurfaceInfo(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialSurfaceInfo_TryComputeLatestMeshAsync(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo", L"TryComputeLatestMeshAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.TryComputeLatestMeshAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo", L"TryComputeLatestMeshAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<double>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions>(args, 1);

                return py::convert(self->obj.TryComputeLatestMeshAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceInfo_TryGetBounds(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo", L"TryGetBounds", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetBounds(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceInfo_get_Id(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceInfo_get_UpdateTime(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo", L"UpdateTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UpdateTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialSurfaceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialSurfaceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialSurfaceInfo[] = {
        { "try_compute_latest_mesh_async", reinterpret_cast<PyCFunction>(SpatialSurfaceInfo_TryComputeLatestMeshAsync), METH_VARARGS, nullptr },
        { "try_get_bounds", reinterpret_cast<PyCFunction>(SpatialSurfaceInfo_TryGetBounds), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SpatialSurfaceInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialSurfaceInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialSurfaceInfo[] = {
        { "id", reinterpret_cast<getter>(SpatialSurfaceInfo_get_Id), nullptr, nullptr, nullptr },
        { "update_time", reinterpret_cast<getter>(SpatialSurfaceInfo_get_UpdateTime), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SpatialSurfaceInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialSurfaceInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialSurfaceInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialSurfaceInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialSurfaceInfo) },
        { },
    };

    static PyType_Spec type_spec_SpatialSurfaceInfo =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceInfo",
        sizeof(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialSurfaceInfo
    };

    // ----- SpatialSurfaceMesh class --------------------

    static PyObject* _new_SpatialSurfaceMesh(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh>::type_name);
        return nullptr;
    }

    static void _dealloc_SpatialSurfaceMesh(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialSurfaceMesh_get_CoordinateSystem(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"CoordinateSystem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMesh_get_SurfaceInfo(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"SurfaceInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SurfaceInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMesh_get_TriangleIndices(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"TriangleIndices"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TriangleIndices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMesh_get_VertexNormals(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"VertexNormals"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VertexNormals());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMesh_get_VertexPositionScale(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"VertexPositionScale"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VertexPositionScale());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMesh_get_VertexPositions(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh", L"VertexPositions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VertexPositions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialSurfaceMesh(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialSurfaceMesh(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialSurfaceMesh[] = {
        { "_assign_array_", _assign_array_SpatialSurfaceMesh, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialSurfaceMesh), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialSurfaceMesh[] = {
        { "coordinate_system", reinterpret_cast<getter>(SpatialSurfaceMesh_get_CoordinateSystem), nullptr, nullptr, nullptr },
        { "surface_info", reinterpret_cast<getter>(SpatialSurfaceMesh_get_SurfaceInfo), nullptr, nullptr, nullptr },
        { "triangle_indices", reinterpret_cast<getter>(SpatialSurfaceMesh_get_TriangleIndices), nullptr, nullptr, nullptr },
        { "vertex_normals", reinterpret_cast<getter>(SpatialSurfaceMesh_get_VertexNormals), nullptr, nullptr, nullptr },
        { "vertex_position_scale", reinterpret_cast<getter>(SpatialSurfaceMesh_get_VertexPositionScale), nullptr, nullptr, nullptr },
        { "vertex_positions", reinterpret_cast<getter>(SpatialSurfaceMesh_get_VertexPositions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SpatialSurfaceMesh[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialSurfaceMesh) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialSurfaceMesh) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialSurfaceMesh) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialSurfaceMesh) },
        { },
    };

    static PyType_Spec type_spec_SpatialSurfaceMesh =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceMesh",
        sizeof(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialSurfaceMesh
    };

    // ----- SpatialSurfaceMeshBuffer class --------------------

    static PyObject* _new_SpatialSurfaceMeshBuffer(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer>::type_name);
        return nullptr;
    }

    static void _dealloc_SpatialSurfaceMeshBuffer(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialSurfaceMeshBuffer_get_Data(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer", L"Data"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMeshBuffer_get_ElementCount(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer", L"ElementCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ElementCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMeshBuffer_get_Format(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer", L"Format"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Format());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMeshBuffer_get_Stride(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer", L"Stride"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Stride());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialSurfaceMeshBuffer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialSurfaceMeshBuffer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialSurfaceMeshBuffer[] = {
        { "_assign_array_", _assign_array_SpatialSurfaceMeshBuffer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialSurfaceMeshBuffer), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialSurfaceMeshBuffer[] = {
        { "data", reinterpret_cast<getter>(SpatialSurfaceMeshBuffer_get_Data), nullptr, nullptr, nullptr },
        { "element_count", reinterpret_cast<getter>(SpatialSurfaceMeshBuffer_get_ElementCount), nullptr, nullptr, nullptr },
        { "format", reinterpret_cast<getter>(SpatialSurfaceMeshBuffer_get_Format), nullptr, nullptr, nullptr },
        { "stride", reinterpret_cast<getter>(SpatialSurfaceMeshBuffer_get_Stride), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SpatialSurfaceMeshBuffer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialSurfaceMeshBuffer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialSurfaceMeshBuffer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialSurfaceMeshBuffer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialSurfaceMeshBuffer) },
        { },
    };

    static PyType_Spec type_spec_SpatialSurfaceMeshBuffer =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceMeshBuffer",
        sizeof(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialSurfaceMeshBuffer
    };

    // ----- SpatialSurfaceMeshOptions class --------------------

    static PyObject* _new_SpatialSurfaceMeshOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SpatialSurfaceMeshOptions(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialSurfaceMeshOptions_get_VertexPositionFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"VertexPositionFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VertexPositionFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialSurfaceMeshOptions_put_VertexPositionFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"VertexPositionFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(arg);

            self->obj.VertexPositionFormat(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_VertexNormalFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"VertexNormalFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VertexNormalFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialSurfaceMeshOptions_put_VertexNormalFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"VertexNormalFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(arg);

            self->obj.VertexNormalFormat(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_TriangleIndexFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"TriangleIndexFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TriangleIndexFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialSurfaceMeshOptions_put_TriangleIndexFormat(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"TriangleIndexFormat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(arg);

            self->obj.TriangleIndexFormat(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_IncludeVertexNormals(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"IncludeVertexNormals"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IncludeVertexNormals());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialSurfaceMeshOptions_put_IncludeVertexNormals(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"IncludeVertexNormals"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IncludeVertexNormals(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_SupportedTriangleIndexFormats(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"SupportedTriangleIndexFormats"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions::SupportedTriangleIndexFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_SupportedVertexNormalFormats(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"SupportedVertexNormalFormats"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions::SupportedVertexNormalFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceMeshOptions_get_SupportedVertexPositionFormats(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions", L"SupportedVertexPositionFormats"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions::SupportedVertexPositionFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialSurfaceMeshOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialSurfaceMeshOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialSurfaceMeshOptions[] = {
        { "_assign_array_", _assign_array_SpatialSurfaceMeshOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialSurfaceMeshOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialSurfaceMeshOptions[] = {
        { "vertex_position_format", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_VertexPositionFormat), reinterpret_cast<setter>(SpatialSurfaceMeshOptions_put_VertexPositionFormat), nullptr, nullptr },
        { "vertex_normal_format", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_VertexNormalFormat), reinterpret_cast<setter>(SpatialSurfaceMeshOptions_put_VertexNormalFormat), nullptr, nullptr },
        { "triangle_index_format", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_TriangleIndexFormat), reinterpret_cast<setter>(SpatialSurfaceMeshOptions_put_TriangleIndexFormat), nullptr, nullptr },
        { "include_vertex_normals", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_IncludeVertexNormals), reinterpret_cast<setter>(SpatialSurfaceMeshOptions_put_IncludeVertexNormals), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SpatialSurfaceMeshOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialSurfaceMeshOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialSurfaceMeshOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialSurfaceMeshOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialSurfaceMeshOptions) },
        { },
    };

    static PyType_Spec type_spec_SpatialSurfaceMeshOptions =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceMeshOptions",
        sizeof(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialSurfaceMeshOptions
    };

    static PyGetSetDef getset_SpatialSurfaceMeshOptions_Static[] = {
        { "supported_triangle_index_formats", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_SupportedTriangleIndexFormats), nullptr, nullptr, nullptr },
        { "supported_vertex_normal_formats", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_SupportedVertexNormalFormats), nullptr, nullptr, nullptr },
        { "supported_vertex_position_formats", reinterpret_cast<getter>(SpatialSurfaceMeshOptions_get_SupportedVertexPositionFormats), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_SpatialSurfaceMeshOptions_Static[] = {
        { }
    };

    static PyType_Slot type_slots_SpatialSurfaceMeshOptions_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SpatialSurfaceMeshOptions_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SpatialSurfaceMeshOptions_Static) },
        { }
    };

    static PyType_Spec type_spec_SpatialSurfaceMeshOptions_Static =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceMeshOptions_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SpatialSurfaceMeshOptions_Static
    };

    // ----- SpatialSurfaceObserver class --------------------

    static PyObject* _new_SpatialSurfaceObserver(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SpatialSurfaceObserver(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SpatialSurfaceObserver_GetObservedSurfaces(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"GetObservedSurfaces", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetObservedSurfaces());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"RequestAccessAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_SetBoundingVolume(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"SetBoundingVolume", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingVolume>(args, 0);

                self->obj.SetBoundingVolume(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_SetBoundingVolumes(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"SetBoundingVolumes", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Perception::Spatial::SpatialBoundingVolume>>(args, 0);

                self->obj.SetBoundingVolumes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_add_ObservedSurfacesChanged(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"ObservedSurfacesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ObservedSurfacesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialSurfaceObserver_remove_ObservedSurfacesChanged(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver", L"ObservedSurfacesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ObservedSurfacesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SpatialSurfaceObserver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SpatialSurfaceObserver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialSurfaceObserver[] = {
        { "get_observed_surfaces", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_GetObservedSurfaces), METH_VARARGS, nullptr },
        { "set_bounding_volume", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_SetBoundingVolume), METH_VARARGS, nullptr },
        { "set_bounding_volumes", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_SetBoundingVolumes), METH_VARARGS, nullptr },
        { "add_observed_surfaces_changed", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_add_ObservedSurfacesChanged), METH_O, nullptr },
        { "remove_observed_surfaces_changed", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_remove_ObservedSurfacesChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_SpatialSurfaceObserver, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SpatialSurfaceObserver), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SpatialSurfaceObserver[] = {
        { }
    };

    static PyType_Slot _type_slots_SpatialSurfaceObserver[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SpatialSurfaceObserver) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SpatialSurfaceObserver) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SpatialSurfaceObserver) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SpatialSurfaceObserver) },
        { },
    };

    static PyType_Spec type_spec_SpatialSurfaceObserver =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceObserver",
        sizeof(py::wrapper::Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialSurfaceObserver
    };

    static PyGetSetDef getset_SpatialSurfaceObserver_Static[] = {
        { }
    };

    static PyMethodDef methods_SpatialSurfaceObserver_Static[] = {
        { "is_supported", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_IsSupported), METH_VARARGS, nullptr },
        { "request_access_async", reinterpret_cast<PyCFunction>(SpatialSurfaceObserver_RequestAccessAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_SpatialSurfaceObserver_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SpatialSurfaceObserver_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SpatialSurfaceObserver_Static) },
        { }
    };

    static PyType_Spec type_spec_SpatialSurfaceObserver_Static =
    {
        "winrt._winrt_windows_perception_spatial_surfaces.SpatialSurfaceObserver_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SpatialSurfaceObserver_Static
    };

    // ----- Windows.Perception.Spatial.Surfaces Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Perception::Spatial::Surfaces");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_perception_spatial_surfaces",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Perception::Spatial::Surfaces

PyMODINIT_FUNC PyInit__winrt_windows_perception_spatial_surfaces(void) noexcept
{
    using namespace py::cpp::Windows::Perception::Spatial::Surfaces;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialSurfaceInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialSurfaceMesh, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialSurfaceMeshBuffer, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_SpatialSurfaceMeshOptions_Static{PyType_FromSpec(&type_spec_SpatialSurfaceMeshOptions_Static)};
    if (!type_SpatialSurfaceMeshOptions_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialSurfaceMeshOptions, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SpatialSurfaceMeshOptions_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_SpatialSurfaceObserver_Static{PyType_FromSpec(&type_spec_SpatialSurfaceObserver_Static)};
    if (!type_SpatialSurfaceObserver_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SpatialSurfaceObserver, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SpatialSurfaceObserver_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
