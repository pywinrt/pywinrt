// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.VoiceCommands.h"


namespace py::cpp::Windows::ApplicationModel::VoiceCommands
{
    // ----- VoiceCommand class --------------------

    static PyObject* _new_VoiceCommand(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommand(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommand_get_CommandName(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommand", L"CommandName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CommandName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommand_get_Properties(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommand", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommand_get_SpeechRecognitionResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommand", L"SpeechRecognitionResult"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SpeechRecognitionResult());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommand(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommand(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommand[] = {
        { "_assign_array_", _assign_array_VoiceCommand, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommand), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommand[] = {
        { "command_name", reinterpret_cast<getter>(VoiceCommand_get_CommandName), nullptr, nullptr, nullptr },
        { "properties", reinterpret_cast<getter>(VoiceCommand_get_Properties), nullptr, nullptr, nullptr },
        { "speech_recognition_result", reinterpret_cast<getter>(VoiceCommand_get_SpeechRecognitionResult), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommand[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommand) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommand) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommand) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommand) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommand =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommand",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommand
    };

    // ----- VoiceCommandCompletedEventArgs class --------------------

    static PyObject* _new_VoiceCommandCompletedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandCompletedEventArgs(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandCompletedEventArgs_get_Reason(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletedEventArgs", L"Reason"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandCompletedEventArgs[] = {
        { "_assign_array_", _assign_array_VoiceCommandCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandCompletedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandCompletedEventArgs[] = {
        { "reason", reinterpret_cast<getter>(VoiceCommandCompletedEventArgs_get_Reason), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandCompletedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandCompletedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandCompletedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandCompletedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandCompletedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandCompletedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandCompletedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandCompletedEventArgs
    };

    // ----- VoiceCommandConfirmationResult class --------------------

    static PyObject* _new_VoiceCommandConfirmationResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandConfirmationResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandConfirmationResult_get_Confirmed(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandConfirmationResult", L"Confirmed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Confirmed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandConfirmationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandConfirmationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandConfirmationResult[] = {
        { "_assign_array_", _assign_array_VoiceCommandConfirmationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandConfirmationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandConfirmationResult[] = {
        { "confirmed", reinterpret_cast<getter>(VoiceCommandConfirmationResult_get_Confirmed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandConfirmationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandConfirmationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandConfirmationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandConfirmationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandConfirmationResult) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandConfirmationResult =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandConfirmationResult",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandConfirmationResult
    };

    // ----- VoiceCommandContentTile class --------------------

    static PyObject* _new_VoiceCommandContentTile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_VoiceCommandContentTile(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandContentTile_get_Title(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_Title(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine3(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine3"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TextLine3());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine3(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine3"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine3(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine2(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TextLine2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine2(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine2(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine1(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TextLine1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine1(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"TextLine1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine1(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_Image(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"Image"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Image());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_Image(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"Image"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(arg);

            self->obj.Image(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_ContentTileType(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"ContentTileType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContentTileType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_ContentTileType(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"ContentTileType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType>(arg);

            self->obj.ContentTileType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"AppLaunchArgument"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppLaunchArgument());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"AppLaunchArgument"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AppLaunchArgument(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_AppContext(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"AppContext"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_AppContext(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile", L"AppContext"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);

            self->obj.AppContext(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_VoiceCommandContentTile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandContentTile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandContentTile[] = {
        { "_assign_array_", _assign_array_VoiceCommandContentTile, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandContentTile), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandContentTile[] = {
        { "title", reinterpret_cast<getter>(VoiceCommandContentTile_get_Title), reinterpret_cast<setter>(VoiceCommandContentTile_put_Title), nullptr, nullptr },
        { "text_line3", reinterpret_cast<getter>(VoiceCommandContentTile_get_TextLine3), reinterpret_cast<setter>(VoiceCommandContentTile_put_TextLine3), nullptr, nullptr },
        { "text_line2", reinterpret_cast<getter>(VoiceCommandContentTile_get_TextLine2), reinterpret_cast<setter>(VoiceCommandContentTile_put_TextLine2), nullptr, nullptr },
        { "text_line1", reinterpret_cast<getter>(VoiceCommandContentTile_get_TextLine1), reinterpret_cast<setter>(VoiceCommandContentTile_put_TextLine1), nullptr, nullptr },
        { "image", reinterpret_cast<getter>(VoiceCommandContentTile_get_Image), reinterpret_cast<setter>(VoiceCommandContentTile_put_Image), nullptr, nullptr },
        { "content_tile_type", reinterpret_cast<getter>(VoiceCommandContentTile_get_ContentTileType), reinterpret_cast<setter>(VoiceCommandContentTile_put_ContentTileType), nullptr, nullptr },
        { "app_launch_argument", reinterpret_cast<getter>(VoiceCommandContentTile_get_AppLaunchArgument), reinterpret_cast<setter>(VoiceCommandContentTile_put_AppLaunchArgument), nullptr, nullptr },
        { "app_context", reinterpret_cast<getter>(VoiceCommandContentTile_get_AppContext), reinterpret_cast<setter>(VoiceCommandContentTile_put_AppContext), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandContentTile[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandContentTile) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandContentTile) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandContentTile) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandContentTile) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandContentTile =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandContentTile",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandContentTile
    };

    // ----- VoiceCommandDefinition class --------------------

    static PyObject* _new_VoiceCommandDefinition(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandDefinition(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandDefinition_SetPhraseListAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinition", L"SetPhraseListAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.SetPhraseListAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinition_get_Language(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinition", L"Language"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinition_get_Name(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinition", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandDefinition(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandDefinition(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDefinition[] = {
        { "set_phrase_list_async", reinterpret_cast<PyCFunction>(VoiceCommandDefinition_SetPhraseListAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_VoiceCommandDefinition, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandDefinition), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandDefinition[] = {
        { "language", reinterpret_cast<getter>(VoiceCommandDefinition_get_Language), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(VoiceCommandDefinition_get_Name), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandDefinition[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandDefinition) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandDefinition) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandDefinition) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandDefinition) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandDefinition =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandDefinition",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDefinition
    };

    // ----- VoiceCommandDefinitionManager class --------------------

    static PyObject* _new_VoiceCommandDefinitionManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager>::type_name);
        return nullptr;
    }

    static PyObject* VoiceCommandDefinitionManager_InstallCommandDefinitionsFromStorageFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinitionManager", L"InstallCommandDefinitionsFromStorageFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager::InstallCommandDefinitionsFromStorageFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinitionManager_get_InstalledCommandDefinitions(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinitionManager", L"InstalledCommandDefinitions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager::InstalledCommandDefinitions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDefinitionManager[] = {
        { }
    };

    static PyGetSetDef _getset_VoiceCommandDefinitionManager[] = {
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandDefinitionManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandDefinitionManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandDefinitionManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandDefinitionManager) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandDefinitionManager =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandDefinitionManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDefinitionManager
    };

    static PyGetSetDef getset_VoiceCommandDefinitionManager_Static[] = {
        { "installed_command_definitions", reinterpret_cast<getter>(VoiceCommandDefinitionManager_get_InstalledCommandDefinitions), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_VoiceCommandDefinitionManager_Static[] = {
        { "install_command_definitions_from_storage_file_async", reinterpret_cast<PyCFunction>(VoiceCommandDefinitionManager_InstallCommandDefinitionsFromStorageFileAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_VoiceCommandDefinitionManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_VoiceCommandDefinitionManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_VoiceCommandDefinitionManager_Static) },
        { }
    };

    static PyType_Spec type_spec_VoiceCommandDefinitionManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandDefinitionManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_VoiceCommandDefinitionManager_Static
    };

    // ----- VoiceCommandDisambiguationResult class --------------------

    static PyObject* _new_VoiceCommandDisambiguationResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandDisambiguationResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandDisambiguationResult_get_SelectedItem(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandDisambiguationResult", L"SelectedItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SelectedItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandDisambiguationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandDisambiguationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDisambiguationResult[] = {
        { "_assign_array_", _assign_array_VoiceCommandDisambiguationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandDisambiguationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandDisambiguationResult[] = {
        { "selected_item", reinterpret_cast<getter>(VoiceCommandDisambiguationResult_get_SelectedItem), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandDisambiguationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandDisambiguationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandDisambiguationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandDisambiguationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandDisambiguationResult) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandDisambiguationResult =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandDisambiguationResult",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDisambiguationResult
    };

    // ----- VoiceCommandResponse class --------------------

    static PyObject* _new_VoiceCommandResponse(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandResponse(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandResponse_CreateResponse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"CreateResponse", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"CreateResponse", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponse(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_CreateResponseForPrompt(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"CreateResponseForPrompt", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponseForPrompt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"CreateResponseForPrompt", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponseForPrompt(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_get_RepeatMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"RepeatMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RepeatMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_RepeatMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"RepeatMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(arg);

            self->obj.RepeatMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_Message(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_Message(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"AppLaunchArgument"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppLaunchArgument());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"AppLaunchArgument"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AppLaunchArgument(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_VoiceCommandContentTiles(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"VoiceCommandContentTiles"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VoiceCommandContentTiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_get_MaxSupportedVoiceCommandContentTiles(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse", L"MaxSupportedVoiceCommandContentTiles"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::MaxSupportedVoiceCommandContentTiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandResponse[] = {
        { "_assign_array_", _assign_array_VoiceCommandResponse, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandResponse), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandResponse[] = {
        { "repeat_message", reinterpret_cast<getter>(VoiceCommandResponse_get_RepeatMessage), reinterpret_cast<setter>(VoiceCommandResponse_put_RepeatMessage), nullptr, nullptr },
        { "message", reinterpret_cast<getter>(VoiceCommandResponse_get_Message), reinterpret_cast<setter>(VoiceCommandResponse_put_Message), nullptr, nullptr },
        { "app_launch_argument", reinterpret_cast<getter>(VoiceCommandResponse_get_AppLaunchArgument), reinterpret_cast<setter>(VoiceCommandResponse_put_AppLaunchArgument), nullptr, nullptr },
        { "voice_command_content_tiles", reinterpret_cast<getter>(VoiceCommandResponse_get_VoiceCommandContentTiles), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandResponse[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandResponse) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandResponse) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandResponse) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandResponse) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandResponse =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandResponse",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandResponse
    };

    static PyGetSetDef getset_VoiceCommandResponse_Static[] = {
        { "max_supported_voice_command_content_tiles", reinterpret_cast<getter>(VoiceCommandResponse_get_MaxSupportedVoiceCommandContentTiles), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_VoiceCommandResponse_Static[] = {
        { "create_response", reinterpret_cast<PyCFunction>(VoiceCommandResponse_CreateResponse), METH_VARARGS, nullptr },
        { "create_response_for_prompt", reinterpret_cast<PyCFunction>(VoiceCommandResponse_CreateResponseForPrompt), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_VoiceCommandResponse_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_VoiceCommandResponse_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_VoiceCommandResponse_Static) },
        { }
    };

    static PyType_Spec type_spec_VoiceCommandResponse_Static =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandResponse_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_VoiceCommandResponse_Static
    };

    // ----- VoiceCommandServiceConnection class --------------------

    static PyObject* _new_VoiceCommandServiceConnection(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>::type_name);
        return nullptr;
    }

    static void _dealloc_VoiceCommandServiceConnection(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandServiceConnection_FromAppServiceTriggerDetails(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"FromAppServiceTriggerDetails", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::AppService::AppServiceTriggerDetails>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection::FromAppServiceTriggerDetails(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_GetVoiceCommandAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"GetVoiceCommandAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetVoiceCommandAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportFailureAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"ReportFailureAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportFailureAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportProgressAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"ReportProgressAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportProgressAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportSuccessAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"ReportSuccessAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportSuccessAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestAppLaunchAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"RequestAppLaunchAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestAppLaunchAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestConfirmationAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"RequestConfirmationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestConfirmationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestDisambiguationAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"RequestDisambiguationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestDisambiguationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_get_Language(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"Language"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_add_VoiceCommandCompleted(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"VoiceCommandCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection, winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>>(arg);

            return py::convert(self->obj.VoiceCommandCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_remove_VoiceCommandCompleted(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection", L"VoiceCommandCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VoiceCommandCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_VoiceCommandServiceConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandServiceConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandServiceConnection[] = {
        { "get_voice_command_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_GetVoiceCommandAsync), METH_VARARGS, nullptr },
        { "report_failure_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_ReportFailureAsync), METH_VARARGS, nullptr },
        { "report_progress_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_ReportProgressAsync), METH_VARARGS, nullptr },
        { "report_success_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_ReportSuccessAsync), METH_VARARGS, nullptr },
        { "request_app_launch_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_RequestAppLaunchAsync), METH_VARARGS, nullptr },
        { "request_confirmation_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_RequestConfirmationAsync), METH_VARARGS, nullptr },
        { "request_disambiguation_async", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_RequestDisambiguationAsync), METH_VARARGS, nullptr },
        { "add_voice_command_completed", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_add_VoiceCommandCompleted), METH_O, nullptr },
        { "remove_voice_command_completed", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_remove_VoiceCommandCompleted), METH_O, nullptr },
        { "_assign_array_", _assign_array_VoiceCommandServiceConnection, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandServiceConnection), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandServiceConnection[] = {
        { "language", reinterpret_cast<getter>(VoiceCommandServiceConnection_get_Language), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandServiceConnection[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandServiceConnection) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandServiceConnection) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandServiceConnection) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandServiceConnection) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandServiceConnection =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandServiceConnection",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandServiceConnection
    };

    static PyGetSetDef getset_VoiceCommandServiceConnection_Static[] = {
        { }
    };

    static PyMethodDef methods_VoiceCommandServiceConnection_Static[] = {
        { "from_app_service_trigger_details", reinterpret_cast<PyCFunction>(VoiceCommandServiceConnection_FromAppServiceTriggerDetails), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_VoiceCommandServiceConnection_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_VoiceCommandServiceConnection_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_VoiceCommandServiceConnection_Static) },
        { }
    };

    static PyType_Spec type_spec_VoiceCommandServiceConnection_Static =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandServiceConnection_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_VoiceCommandServiceConnection_Static
    };

    // ----- VoiceCommandUserMessage class --------------------

    static PyObject* _new_VoiceCommandUserMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_VoiceCommandUserMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* VoiceCommandUserMessage_get_SpokenMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage", L"SpokenMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SpokenMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandUserMessage_put_SpokenMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage", L"SpokenMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SpokenMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandUserMessage_get_DisplayMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage", L"DisplayMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandUserMessage_put_DisplayMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage", L"DisplayMessage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_VoiceCommandUserMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_VoiceCommandUserMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandUserMessage[] = {
        { "_assign_array_", _assign_array_VoiceCommandUserMessage, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_VoiceCommandUserMessage), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_VoiceCommandUserMessage[] = {
        { "spoken_message", reinterpret_cast<getter>(VoiceCommandUserMessage_get_SpokenMessage), reinterpret_cast<setter>(VoiceCommandUserMessage_put_SpokenMessage), nullptr, nullptr },
        { "display_message", reinterpret_cast<getter>(VoiceCommandUserMessage_get_DisplayMessage), reinterpret_cast<setter>(VoiceCommandUserMessage_put_DisplayMessage), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_VoiceCommandUserMessage[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_VoiceCommandUserMessage) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_VoiceCommandUserMessage) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_VoiceCommandUserMessage) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_VoiceCommandUserMessage) },
        { },
    };

    static PyType_Spec type_spec_VoiceCommandUserMessage =
    {
        "winrt._winrt_windows_applicationmodel_voicecommands.VoiceCommandUserMessage",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandUserMessage
    };

    // ----- Windows.ApplicationModel.VoiceCommands Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::VoiceCommands");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_voicecommands",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::VoiceCommands

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_voicecommands(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::VoiceCommands;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommand, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandCompletedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandConfirmationResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandContentTile, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandDefinition, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_VoiceCommandDefinitionManager_Static{PyType_FromSpec(&type_spec_VoiceCommandDefinitionManager_Static)};
    if (!type_VoiceCommandDefinitionManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandDefinitionManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_VoiceCommandDefinitionManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandDisambiguationResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_VoiceCommandResponse_Static{PyType_FromSpec(&type_spec_VoiceCommandResponse_Static)};
    if (!type_VoiceCommandResponse_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandResponse, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_VoiceCommandResponse_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_VoiceCommandServiceConnection_Static{PyType_FromSpec(&type_spec_VoiceCommandServiceConnection_Static)};
    if (!type_VoiceCommandServiceConnection_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandServiceConnection, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_VoiceCommandServiceConnection_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_VoiceCommandUserMessage, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
