// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.UI.Composition.Core.h"


namespace py::cpp::Windows::UI::Composition::Core
{
    // ----- CompositorController class --------------------

    static PyObject* _new_CompositorController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Composition::Core::CompositorController instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CompositorController(py::wrapper::Windows::UI::Composition::Core::CompositorController* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CompositorController_Close(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Core.CompositorController", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositorController_Commit(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Core.CompositorController", L"Commit", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Commit();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositorController_EnsurePreviousCommitCompletedAsync(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Core.CompositorController", L"EnsurePreviousCommitCompletedAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.EnsurePreviousCommitCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositorController_get_Compositor(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Composition.Core.CompositorController", L"Compositor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Compositor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositorController_add_CommitNeeded(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Composition.Core.CompositorController", L"CommitNeeded"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Composition::Core::CompositorController, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.CommitNeeded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositorController_remove_CommitNeeded(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Composition.Core.CompositorController", L"CommitNeeded"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CommitNeeded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CompositorController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Composition::Core::CompositorController>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CompositorController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Composition::Core::CompositorController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_CompositorController(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_CompositorController(py::wrapper::Windows::UI::Composition::Core::CompositorController* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompositorController[] = {
        { "close", reinterpret_cast<PyCFunction>(CompositorController_Close), METH_VARARGS, nullptr },
        { "commit", reinterpret_cast<PyCFunction>(CompositorController_Commit), METH_VARARGS, nullptr },
        { "ensure_previous_commit_completed_async", reinterpret_cast<PyCFunction>(CompositorController_EnsurePreviousCommitCompletedAsync), METH_VARARGS, nullptr },
        { "add_commit_needed", reinterpret_cast<PyCFunction>(CompositorController_add_CommitNeeded), METH_O, nullptr },
        { "remove_commit_needed", reinterpret_cast<PyCFunction>(CompositorController_remove_CommitNeeded), METH_O, nullptr },
        { "_assign_array_", _assign_array_CompositorController, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CompositorController), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_CompositorController), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_CompositorController), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_CompositorController[] = {
        { "compositor", reinterpret_cast<getter>(CompositorController_get_Compositor), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CompositorController[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CompositorController) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CompositorController) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CompositorController) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CompositorController) },
        { },
    };

    static PyType_Spec type_spec_CompositorController =
    {
        "winrt._winrt_windows_ui_composition_core.CompositorController",
        sizeof(py::wrapper::Windows::UI::Composition::Core::CompositorController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompositorController
    };

    // ----- Windows.UI.Composition.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Composition::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_ui_composition_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::UI::Composition::Core

PyMODINIT_FUNC PyInit__winrt_windows_ui_composition_core(void) noexcept
{
    using namespace py::cpp::Windows::UI::Composition::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CompositorController, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
