// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.ApplicationModel.WindowsAppRuntime.h"


namespace py::cpp::Microsoft::Windows::ApplicationModel::WindowsAppRuntime
{
    // ----- DeploymentInitializeOptions class --------------------

    static PyObject* _new_DeploymentInitializeOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DeploymentInitializeOptions(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DeploymentInitializeOptions_get_ForceDeployment(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentInitializeOptions", L"ForceDeployment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ForceDeployment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DeploymentInitializeOptions_put_ForceDeployment(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentInitializeOptions", L"ForceDeployment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ForceDeployment(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DeploymentInitializeOptions_get_OnErrorShowUI(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentInitializeOptions", L"OnErrorShowUI"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OnErrorShowUI());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DeploymentInitializeOptions_put_OnErrorShowUI(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentInitializeOptions", L"OnErrorShowUI"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.OnErrorShowUI(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_DeploymentInitializeOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DeploymentInitializeOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeploymentInitializeOptions[] = {
        { "_assign_array_", _assign_array_DeploymentInitializeOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DeploymentInitializeOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DeploymentInitializeOptions[] = {
        { "force_deployment", reinterpret_cast<getter>(DeploymentInitializeOptions_get_ForceDeployment), reinterpret_cast<setter>(DeploymentInitializeOptions_put_ForceDeployment), nullptr, nullptr },
        { "on_error_show_u_i", reinterpret_cast<getter>(DeploymentInitializeOptions_get_OnErrorShowUI), reinterpret_cast<setter>(DeploymentInitializeOptions_put_OnErrorShowUI), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DeploymentInitializeOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeploymentInitializeOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DeploymentInitializeOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeploymentInitializeOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeploymentInitializeOptions) },
        { },
    };

    static PyType_Spec type_spec_DeploymentInitializeOptions =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_windowsappruntime.DeploymentInitializeOptions",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeploymentInitializeOptions
    };

    // ----- DeploymentManager class --------------------

    static PyObject* _new_DeploymentManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager>::type_name);
        return nullptr;
    }

    static PyObject* DeploymentManager_GetStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentManager", L"GetStatus", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager::GetStatus());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DeploymentManager_Initialize(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentManager", L"Initialize", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager::Initialize());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentManager", L"Initialize", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions>(args, 0);

                return py::convert(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager::Initialize(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeploymentManager[] = {
        { }
    };

    static PyGetSetDef _getset_DeploymentManager[] = {
        { }
    };

    static PyType_Slot _type_slots_DeploymentManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeploymentManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeploymentManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeploymentManager) },
        { },
    };

    static PyType_Spec type_spec_DeploymentManager =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_windowsappruntime.DeploymentManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeploymentManager
    };

    static PyGetSetDef getset_DeploymentManager_Static[] = {
        { }
    };

    static PyMethodDef methods_DeploymentManager_Static[] = {
        { "get_status", reinterpret_cast<PyCFunction>(DeploymentManager_GetStatus), METH_VARARGS, nullptr },
        { "initialize", reinterpret_cast<PyCFunction>(DeploymentManager_Initialize), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_DeploymentManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DeploymentManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_DeploymentManager_Static) },
        { }
    };

    static PyType_Spec type_spec_DeploymentManager_Static =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_windowsappruntime.DeploymentManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DeploymentManager_Static
    };

    // ----- DeploymentResult class --------------------

    static PyObject* _new_DeploymentResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus>(args, 0);
                auto param1 = py::convert_to<winrt::hresult>(args, 1);

                winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DeploymentResult(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DeploymentResult_get_ExtendedError(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentResult", L"ExtendedError"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendedError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeploymentResult_get_Status(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.ApplicationModel.WindowsAppRuntime.DeploymentResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DeploymentResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DeploymentResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeploymentResult[] = {
        { "_assign_array_", _assign_array_DeploymentResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DeploymentResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DeploymentResult[] = {
        { "extended_error", reinterpret_cast<getter>(DeploymentResult_get_ExtendedError), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(DeploymentResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DeploymentResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DeploymentResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DeploymentResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DeploymentResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DeploymentResult) },
        { },
    };

    static PyType_Spec type_spec_DeploymentResult =
    {
        "winrt._winrt_microsoft_windows_applicationmodel_windowsappruntime.DeploymentResult",
        sizeof(py::wrapper::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeploymentResult
    };

    // ----- Microsoft.Windows.ApplicationModel.WindowsAppRuntime Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::ApplicationModel::WindowsAppRuntime");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_applicationmodel_windowsappruntime",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::ApplicationModel::WindowsAppRuntime

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_applicationmodel_windowsappruntime(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::ApplicationModel::WindowsAppRuntime;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DeploymentInitializeOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_DeploymentManager_Static{PyType_FromSpec(&type_spec_DeploymentManager_Static)};
    if (!type_DeploymentManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DeploymentManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_DeploymentManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DeploymentResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
