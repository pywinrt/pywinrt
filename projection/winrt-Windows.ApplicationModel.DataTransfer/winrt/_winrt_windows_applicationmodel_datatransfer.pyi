# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.enterprisedata as windows_security_enterprisedata
import winrt.windows.storage as windows_storage
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui

from winrt.windows.applicationmodel.datatransfer import ClipboardHistoryItemsResultStatus, DataPackageOperation, SetHistoryItemAsContentStatus, ShareUITheme
from winrt.windows.applicationmodel.datatransfer import DataProviderHandler, ShareProviderHandler

Self = typing.TypeVar('Self')

@typing.final
class Clipboard_Static(winrt._winrt.IInspectable_Static):
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::Clear()
    def clear(cls) -> None: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.Clipboard::ClearHistory()
    def clear_history(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.Clipboard::DeleteItemFromHistory(Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem)
    def delete_item_from_history(cls, item: ClipboardHistoryItem, /) -> bool: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::Flush()
    def flush(cls) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageView Windows.ApplicationModel.DataTransfer.Clipboard::GetContent()
    def get_content(cls) -> DataPackageView: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult> Windows.ApplicationModel.DataTransfer.Clipboard::GetHistoryItemsAsync()
    def get_history_items_async(cls) -> windows_foundation.IAsyncOperation[ClipboardHistoryItemsResult]: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.Clipboard::IsHistoryEnabled()
    def is_history_enabled(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.Clipboard::IsRoamingEnabled()
    def is_roaming_enabled(cls) -> bool: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::SetContent(Windows.ApplicationModel.DataTransfer.DataPackage)
    def set_content(cls, content: DataPackage, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.Clipboard::SetContentWithOptions(Windows.ApplicationModel.DataTransfer.DataPackage,Windows.ApplicationModel.DataTransfer.ClipboardContentOptions)
    def set_content_with_options(cls, content: DataPackage, options: ClipboardContentOptions, /) -> bool: ...
    # Windows.ApplicationModel.DataTransfer.SetHistoryItemAsContentStatus Windows.ApplicationModel.DataTransfer.Clipboard::SetHistoryItemAsContent(Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem)
    def set_history_item_as_content(cls, item: ClipboardHistoryItem, /) -> SetHistoryItemAsContentStatus: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.Clipboard::add_HistoryChanged(Windows.Foundation.EventHandler`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryChangedEventArgs>)
    def add_history_changed(cls, handler: windows_foundation.EventHandler[ClipboardHistoryChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::remove_HistoryChanged(Windows.Foundation.EventRegistrationToken)
    def remove_history_changed(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.Clipboard::add_HistoryEnabledChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_history_enabled_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::remove_HistoryEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_history_enabled_changed(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.Clipboard::add_RoamingEnabledChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_roaming_enabled_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::remove_RoamingEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_roaming_enabled_changed(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.Clipboard::add_ContentChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_content_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.Clipboard::remove_ContentChanged(Windows.Foundation.EventRegistrationToken)
    def remove_content_changed(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class Clipboard(winrt.system.Object, metaclass=Clipboard_Static):
    pass

@typing.final
class ClipboardContentOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::get_IsRoamable()
    @_property
    def is_roamable(self) -> bool: ...
    # System.Void Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::put_IsRoamable(System.Boolean)
    @is_roamable.setter
    def is_roamable(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::get_IsAllowedInHistory()
    @_property
    def is_allowed_in_history(self) -> bool: ...
    # System.Void Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::put_IsAllowedInHistory(System.Boolean)
    @is_allowed_in_history.setter
    def is_allowed_in_history(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::get_HistoryFormats()
    @_property
    def history_formats(self) -> typing.MutableSequence[str]: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.DataTransfer.ClipboardContentOptions::get_RoamingFormats()
    @_property
    def roaming_formats(self) -> typing.MutableSequence[str]: ...

@typing.final
class ClipboardHistoryChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClipboardHistoryItem(winrt.system.Object):
    # Windows.ApplicationModel.DataTransfer.DataPackageView Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem::get_Content()
    @_property
    def content(self) -> DataPackageView: ...
    # System.String Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem::get_Id()
    @_property
    def id(self) -> str: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem::get_Timestamp()
    @_property
    def timestamp(self) -> datetime.datetime: ...

@typing.final
class ClipboardHistoryItemsResult(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem> Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult::get_Items()
    @_property
    def items(self) -> typing.Sequence[ClipboardHistoryItem]: ...
    # Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResultStatus Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult::get_Status()
    @_property
    def status(self) -> ClipboardHistoryItemsResultStatus: ...

@typing.final
class DataPackage(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageView Windows.ApplicationModel.DataTransfer.DataPackage::GetView()
    def get_view(self) -> DataPackageView: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetApplicationLink(Windows.Foundation.Uri)
    def set_application_link(self, value: windows_foundation.Uri, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetBitmap(Windows.Storage.Streams.RandomAccessStreamReference)
    def set_bitmap(self, value: windows_storage_streams.RandomAccessStreamReference, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetData(System.String,System.Object)
    def set_data(self, format_id: str, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetDataProvider(System.String,Windows.ApplicationModel.DataTransfer.DataProviderHandler)
    def set_data_provider(self, format_id: str, delay_renderer: DataProviderHandler, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetHtmlFormat(System.String)
    def set_html_format(self, value: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetRtf(System.String)
    def set_rtf(self, value: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetStorageItems(Windows.Foundation.Collections.IIterable`1<Windows.Storage.IStorageItem>,System.Boolean)
    def set_storage_items(self, value: typing.Iterable[windows_storage.IStorageItem], read_only: bool, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetStorageItems(Windows.Foundation.Collections.IIterable`1<Windows.Storage.IStorageItem>)
    def set_storage_items_read_only(self, value: typing.Iterable[windows_storage.IStorageItem], /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetText(System.String)
    def set_text(self, value: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetUri(Windows.Foundation.Uri)
    # @deprecated("SetUri may be altered or unavailable for releases after Windows Phone 'OSVersion' (TBD).Instead, use SetWebLink or SetApplicationLink.")
    def set_uri(self, value: windows_foundation.Uri, /) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::SetWebLink(Windows.Foundation.Uri)
    def set_web_link(self, value: windows_foundation.Uri, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataPackage::add_Destroyed(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataPackage,System.Object>)
    def add_destroyed(self, handler: windows_foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::remove_Destroyed(Windows.Foundation.EventRegistrationToken)
    def remove_destroyed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataPackage::add_OperationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataPackage,Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs>)
    def add_operation_completed(self, handler: windows_foundation.TypedEventHandler[DataPackage, OperationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::remove_OperationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_operation_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataPackage::add_ShareCompleted(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataPackage,Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs>)
    def add_share_completed(self, handler: windows_foundation.TypedEventHandler[DataPackage, ShareCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::remove_ShareCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_share_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataPackage::add_ShareCanceled(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataPackage,System.Object>)
    def add_share_canceled(self, handler: windows_foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::remove_ShareCanceled(Windows.Foundation.EventRegistrationToken)
    def remove_share_canceled(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Windows.ApplicationModel.DataTransfer.DataPackage::get_RequestedOperation()
    @_property
    def requested_operation(self) -> DataPackageOperation: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackage::put_RequestedOperation(Windows.ApplicationModel.DataTransfer.DataPackageOperation)
    @requested_operation.setter
    def requested_operation(self, value: DataPackageOperation) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackagePropertySet Windows.ApplicationModel.DataTransfer.DataPackage::get_Properties()
    @_property
    def properties(self) -> DataPackagePropertySet: ...
    # Windows.Foundation.Collections.IMap`2<System.String,Windows.Storage.Streams.RandomAccessStreamReference> Windows.ApplicationModel.DataTransfer.DataPackage::get_ResourceMap()
    @_property
    def resource_map(self) -> typing.MutableMapping[str, windows_storage_streams.RandomAccessStreamReference]: ...

@typing.final
class DataPackagePropertySet(winrt.system.Object, winrt._winrt.MutableMapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    def __setitem__(self, key: str, value: winrt.system.Object) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.Object>> Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, winrt.system.Object]]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::GetView()
    def get_view(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::Insert(System.String,System.Object)
    def insert(self, key: str, value: winrt.system.Object, /) -> bool: ...
    # System.Object Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::Lookup(System.String)
    def lookup(self, key: str, /) -> winrt.system.Object: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::Remove(System.String)
    def remove(self, key: str, /) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_Thumbnail()
    @_property
    def thumbnail(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_Thumbnail(Windows.Storage.Streams.IRandomAccessStreamReference)
    @thumbnail.setter
    def thumbnail(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_Description()
    @_property
    def description(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_Description(System.String)
    @description.setter
    def description(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_ApplicationName()
    @_property
    def application_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_ApplicationName(System.String)
    @application_name.setter
    def application_name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_ApplicationListingUri()
    @_property
    def application_listing_uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_ApplicationListingUri(Windows.Foundation.Uri)
    @application_listing_uri.setter
    def application_listing_uri(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_FileTypes()
    @_property
    def file_types(self) -> typing.MutableSequence[str]: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_Square30x30Logo()
    @_property
    def square30x30_logo(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_Square30x30Logo(Windows.Storage.Streams.IRandomAccessStreamReference)
    @square30x30_logo.setter
    def square30x30_logo(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_PackageFamilyName()
    @_property
    def package_family_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_PackageFamilyName(System.String)
    @package_family_name.setter
    def package_family_name(self, value: str) -> None: ...
    # Windows.UI.Color Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_LogoBackgroundColor()
    @_property
    def logo_background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_LogoBackgroundColor(Windows.UI.Color)
    @logo_background_color.setter
    def logo_background_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_ContentSourceWebLink()
    @_property
    def content_source_web_link(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_ContentSourceWebLink(Windows.Foundation.Uri)
    @content_source_web_link.setter
    def content_source_web_link(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_ContentSourceApplicationLink()
    @_property
    def content_source_application_link(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_ContentSourceApplicationLink(Windows.Foundation.Uri)
    @content_source_application_link.setter
    def content_source_application_link(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_EnterpriseId()
    @_property
    def enterprise_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_EnterpriseId(System.String)
    @enterprise_id.setter
    def enterprise_id(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_ContentSourceUserActivityJson()
    @_property
    def content_source_user_activity_json(self) -> str: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::put_ContentSourceUserActivityJson(System.String)
    @content_source_user_activity_json.setter
    def content_source_user_activity_json(self, value: str) -> None: ...
    # System.UInt32 Windows.ApplicationModel.DataTransfer.DataPackagePropertySet::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DataPackagePropertySetView(winrt.system.Object, winrt._winrt.Mapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.Object>> Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, winrt.system.Object]]: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # System.Object Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::Lookup(System.String)
    def lookup(self, key: str, /) -> winrt.system.Object: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::Split(Windows.Foundation.Collections.IMapView`2<System.String,System.Object>&,Windows.Foundation.Collections.IMapView`2<System.String,System.Object>&)
    def split(self) -> typing.Tuple[typing.Mapping[str, winrt.system.Object], typing.Mapping[str, winrt.system.Object]]: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_ApplicationListingUri()
    @_property
    def application_listing_uri(self) -> windows_foundation.Uri: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_ApplicationName()
    @_property
    def application_name(self) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_Description()
    @_property
    def description(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_FileTypes()
    @_property
    def file_types(self) -> typing.Sequence[str]: ...
    # Windows.Storage.Streams.RandomAccessStreamReference Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_Thumbnail()
    @_property
    def thumbnail(self) -> windows_storage_streams.RandomAccessStreamReference: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_Title()
    @_property
    def title(self) -> str: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_ContentSourceApplicationLink()
    @_property
    def content_source_application_link(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_ContentSourceWebLink()
    @_property
    def content_source_web_link(self) -> windows_foundation.Uri: ...
    # Windows.UI.Color Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_LogoBackgroundColor()
    @_property
    def logo_background_color(self) -> windows_ui.Color: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_PackageFamilyName()
    @_property
    def package_family_name(self) -> str: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_Square30x30Logo()
    @_property
    def square30x30_logo(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_EnterpriseId()
    @_property
    def enterprise_id(self) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_ContentSourceUserActivityJson()
    @_property
    def content_source_user_activity_json(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_IsFromRoamingClipboard()
    @_property
    def is_from_roaming_clipboard(self) -> bool: ...
    # System.UInt32 Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DataPackageView(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataPackageView::Contains(System.String)
    def contains(self, format_id: str, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Uri> Windows.ApplicationModel.DataTransfer.DataPackageView::GetApplicationLinkAsync()
    def get_application_link_async(self) -> windows_foundation.IAsyncOperation[windows_foundation.Uri]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.RandomAccessStreamReference> Windows.ApplicationModel.DataTransfer.DataPackageView::GetBitmapAsync()
    def get_bitmap_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.RandomAccessStreamReference]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackageView::GetTextAsync(System.String)
    def get_custom_text_async(self, format_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Object> Windows.ApplicationModel.DataTransfer.DataPackageView::GetDataAsync(System.String)
    def get_data_async(self, format_id: str, /) -> windows_foundation.IAsyncOperation[winrt.system.Object]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackageView::GetHtmlFormatAsync()
    def get_html_format_async(self) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IMapView`2<System.String,Windows.Storage.Streams.RandomAccessStreamReference>> Windows.ApplicationModel.DataTransfer.DataPackageView::GetResourceMapAsync()
    def get_resource_map_async(self) -> windows_foundation.IAsyncOperation[typing.Mapping[str, windows_storage_streams.RandomAccessStreamReference]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackageView::GetRtfAsync()
    def get_rtf_async(self) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IStorageItem>> Windows.ApplicationModel.DataTransfer.DataPackageView::GetStorageItemsAsync()
    def get_storage_items_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[windows_storage.IStorageItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackageView::GetTextAsync()
    def get_text_async(self) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Uri> Windows.ApplicationModel.DataTransfer.DataPackageView::GetUriAsync()
    # @deprecated("GetUriAsync may be altered or unavailable for releases after Windows 8.1. Instead, use GetWebLinkAsync or GetApplicationLinkAsync.")
    def get_uri_async(self) -> windows_foundation.IAsyncOperation[windows_foundation.Uri]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Uri> Windows.ApplicationModel.DataTransfer.DataPackageView::GetWebLinkAsync()
    def get_web_link_async(self) -> windows_foundation.IAsyncOperation[windows_foundation.Uri]: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackageView::ReportOperationCompleted(Windows.ApplicationModel.DataTransfer.DataPackageOperation)
    def report_operation_completed(self, value: DataPackageOperation, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult> Windows.ApplicationModel.DataTransfer.DataPackageView::RequestAccessAsync()
    def request_access_async(self) -> windows_foundation.IAsyncOperation[windows_security_enterprisedata.ProtectionPolicyEvaluationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult> Windows.ApplicationModel.DataTransfer.DataPackageView::RequestAccessAsync(System.String)
    def request_access_with_enterprise_id_async(self, enterprise_id: str, /) -> windows_foundation.IAsyncOperation[windows_security_enterprisedata.ProtectionPolicyEvaluationResult]: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataPackageView::SetAcceptedFormatId(System.String)
    def set_accepted_format_id(self, format_id: str, /) -> None: ...
    # Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult Windows.ApplicationModel.DataTransfer.DataPackageView::UnlockAndAssumeEnterpriseIdentity()
    def unlock_and_assume_enterprise_identity(self) -> windows_security_enterprisedata.ProtectionPolicyEvaluationResult: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.ApplicationModel.DataTransfer.DataPackageView::get_AvailableFormats()
    @_property
    def available_formats(self) -> typing.Sequence[str]: ...
    # Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView Windows.ApplicationModel.DataTransfer.DataPackageView::get_Properties()
    @_property
    def properties(self) -> DataPackagePropertySetView: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Windows.ApplicationModel.DataTransfer.DataPackageView::get_RequestedOperation()
    @_property
    def requested_operation(self) -> DataPackageOperation: ...

@typing.final
class DataProviderDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.DataTransfer.DataProviderDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class DataProviderRequest(winrt.system.Object):
    # Windows.ApplicationModel.DataTransfer.DataProviderDeferral Windows.ApplicationModel.DataTransfer.DataProviderRequest::GetDeferral()
    def get_deferral(self) -> DataProviderDeferral: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataProviderRequest::SetData(System.Object)
    def set_data(self, value: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.DataTransfer.DataProviderRequest::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...
    # System.String Windows.ApplicationModel.DataTransfer.DataProviderRequest::get_FormatId()
    @_property
    def format_id(self) -> str: ...

@typing.final
class DataRequest(winrt.system.Object):
    # System.Void Windows.ApplicationModel.DataTransfer.DataRequest::FailWithDisplayText(System.String)
    def fail_with_display_text(self, value: str, /) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataRequestDeferral Windows.ApplicationModel.DataTransfer.DataRequest::GetDeferral()
    def get_deferral(self) -> DataRequestDeferral: ...
    # Windows.ApplicationModel.DataTransfer.DataPackage Windows.ApplicationModel.DataTransfer.DataRequest::get_Data()
    @_property
    def data(self) -> DataPackage: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataRequest::put_Data(Windows.ApplicationModel.DataTransfer.DataPackage)
    @data.setter
    def data(self, value: DataPackage) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.DataTransfer.DataRequest::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class DataRequestDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.DataTransfer.DataRequestDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class DataRequestedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.DataTransfer.DataRequest Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs::get_Request()
    @_property
    def request(self) -> DataRequest: ...

@typing.final
class DataTransferManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.DataTransfer.DataTransferManager Windows.ApplicationModel.DataTransfer.DataTransferManager::GetForCurrentView()
    def get_for_current_view(cls) -> DataTransferManager: ...
    # System.Boolean Windows.ApplicationModel.DataTransfer.DataTransferManager::IsSupported()
    def is_supported(cls) -> bool: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataTransferManager::ShowShareUI()
    def show_share_ui(cls) -> None: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataTransferManager::ShowShareUI(Windows.ApplicationModel.DataTransfer.ShareUIOptions)
    def show_share_ui_with_options(cls, options: ShareUIOptions, /) -> None: ...

@typing.final
class DataTransferManager(winrt.system.Object, metaclass=DataTransferManager_Static):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataTransferManager::add_DataRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataTransferManager,Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs>)
    def add_data_requested(self, handler: windows_foundation.TypedEventHandler[DataTransferManager, DataRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataTransferManager::remove_DataRequested(Windows.Foundation.EventRegistrationToken)
    def remove_data_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataTransferManager::add_TargetApplicationChosen(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataTransferManager,Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs>)
    def add_target_application_chosen(self, handler: windows_foundation.TypedEventHandler[DataTransferManager, TargetApplicationChosenEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataTransferManager::remove_TargetApplicationChosen(Windows.Foundation.EventRegistrationToken)
    def remove_target_application_chosen(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.DataTransfer.DataTransferManager::add_ShareProvidersRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.DataTransfer.DataTransferManager,Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs>)
    def add_share_providers_requested(self, handler: windows_foundation.TypedEventHandler[DataTransferManager, ShareProvidersRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.DataTransfer.DataTransferManager::remove_ShareProvidersRequested(Windows.Foundation.EventRegistrationToken)
    def remove_share_providers_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class HtmlFormatHelper_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.ApplicationModel.DataTransfer.HtmlFormatHelper::CreateHtmlFormat(System.String)
    def create_html_format(cls, html_fragment: str, /) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.HtmlFormatHelper::GetStaticFragment(System.String)
    def get_static_fragment(cls, html_format: str, /) -> str: ...

@typing.final
class HtmlFormatHelper(winrt.system.Object, metaclass=HtmlFormatHelper_Static):
    pass

@typing.final
class OperationCompletedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs::get_Operation()
    @_property
    def operation(self) -> DataPackageOperation: ...
    # System.String Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs::get_AcceptedFormatId()
    @_property
    def accepted_format_id(self) -> str: ...

@typing.final
class ShareCompletedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.DataTransfer.ShareTargetInfo Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs::get_ShareTarget()
    @_property
    def share_target(self) -> ShareTargetInfo: ...

@typing.final
class ShareProvider(winrt.system.Object):
    def __new__(cls: typing.Type[Self], title: str, display_icon: windows_storage_streams.RandomAccessStreamReference, background_color: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], handler: ShareProviderHandler) -> Self: ...
    # System.Object Windows.ApplicationModel.DataTransfer.ShareProvider::get_Tag()
    @_property
    def tag(self) -> winrt.system.Object: ...
    # System.Void Windows.ApplicationModel.DataTransfer.ShareProvider::put_Tag(System.Object)
    @tag.setter
    def tag(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Color Windows.ApplicationModel.DataTransfer.ShareProvider::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # Windows.Storage.Streams.RandomAccessStreamReference Windows.ApplicationModel.DataTransfer.ShareProvider::get_DisplayIcon()
    @_property
    def display_icon(self) -> windows_storage_streams.RandomAccessStreamReference: ...
    # System.String Windows.ApplicationModel.DataTransfer.ShareProvider::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class ShareProviderOperation(winrt.system.Object):
    # System.Void Windows.ApplicationModel.DataTransfer.ShareProviderOperation::ReportCompleted()
    def report_completed(self) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageView Windows.ApplicationModel.DataTransfer.ShareProviderOperation::get_Data()
    @_property
    def data(self) -> DataPackageView: ...
    # Windows.ApplicationModel.DataTransfer.ShareProvider Windows.ApplicationModel.DataTransfer.ShareProviderOperation::get_Provider()
    @_property
    def provider(self) -> ShareProvider: ...

@typing.final
class ShareProvidersRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageView Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs::get_Data()
    @_property
    def data(self) -> DataPackageView: ...
    # Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.DataTransfer.ShareProvider> Windows.ApplicationModel.DataTransfer.ShareProvidersRequestedEventArgs::get_Providers()
    @_property
    def providers(self) -> typing.MutableSequence[ShareProvider]: ...

@typing.final
class ShareTargetInfo(winrt.system.Object):
    # System.String Windows.ApplicationModel.DataTransfer.ShareTargetInfo::get_AppUserModelId()
    @_property
    def app_user_model_id(self) -> str: ...
    # Windows.ApplicationModel.DataTransfer.ShareProvider Windows.ApplicationModel.DataTransfer.ShareTargetInfo::get_ShareProvider()
    @_property
    def share_provider(self) -> ShareProvider: ...

@typing.final
class ShareUIOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.DataTransfer.ShareUITheme Windows.ApplicationModel.DataTransfer.ShareUIOptions::get_Theme()
    @_property
    def theme(self) -> ShareUITheme: ...
    # System.Void Windows.ApplicationModel.DataTransfer.ShareUIOptions::put_Theme(Windows.ApplicationModel.DataTransfer.ShareUITheme)
    @theme.setter
    def theme(self, value: ShareUITheme) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.Rect> Windows.ApplicationModel.DataTransfer.ShareUIOptions::get_SelectionRect()
    @_property
    def selection_rect(self) -> typing.Optional[windows_foundation.Rect]: ...
    # System.Void Windows.ApplicationModel.DataTransfer.ShareUIOptions::put_SelectionRect(Windows.Foundation.IReference`1<Windows.Foundation.Rect>)
    @selection_rect.setter
    def selection_rect(self, value: typing.Optional[windows_foundation.Rect]) -> None: ...

@typing.final
class SharedStorageAccessManager_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager::AddFile(Windows.Storage.IStorageFile)
    def add_file(cls, file: windows_storage.IStorageFile, /) -> str: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageFile> Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager::RedeemTokenForFileAsync(System.String)
    def redeem_token_for_file_async(cls, token: str, /) -> windows_foundation.IAsyncOperation[windows_storage.StorageFile]: ...
    # System.Void Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager::RemoveFile(System.String)
    def remove_file(cls, token: str, /) -> None: ...

@typing.final
class SharedStorageAccessManager(winrt.system.Object, metaclass=SharedStorageAccessManager_Static):
    pass

@typing.final
class StandardDataFormats_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_Bitmap()
    @_property
    def bitmap(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_Html()
    @_property
    def html(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_Rtf()
    @_property
    def rtf(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_StorageItems()
    @_property
    def storage_items(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_Text()
    @_property
    def text(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_Uri()
    @_property
    def uri(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_ApplicationLink()
    @_property
    def application_link(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_WebLink()
    @_property
    def web_link(cls) -> str: ...
    # System.String Windows.ApplicationModel.DataTransfer.StandardDataFormats::get_UserActivityJsonArray()
    @_property
    def user_activity_json_array(cls) -> str: ...

@typing.final
class StandardDataFormats(winrt.system.Object, metaclass=StandardDataFormats_Static):
    pass

@typing.final
class TargetApplicationChosenEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs::get_ApplicationName()
    @_property
    def application_name(self) -> str: ...

