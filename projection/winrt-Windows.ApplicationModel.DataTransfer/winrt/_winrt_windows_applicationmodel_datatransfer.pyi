# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.enterprisedata
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui

from winrt.windows.applicationmodel.datatransfer import ClipboardHistoryItemsResultStatus, DataPackageOperation, SetHistoryItemAsContentStatus, ShareUITheme
from winrt.windows.applicationmodel.datatransfer import DataProviderHandler, ShareProviderHandler

Self = typing.TypeVar('Self')

@typing.final
class Clipboard_Static(type):
    def clear(cls) -> None: ...
    def clear_history(cls) -> bool: ...
    def delete_item_from_history(cls, item: typing.Optional[ClipboardHistoryItem], /) -> bool: ...
    def flush(cls) -> None: ...
    def get_content(cls) -> typing.Optional[DataPackageView]: ...
    def get_history_items_async(cls) -> winrt.windows.foundation.IAsyncOperation[ClipboardHistoryItemsResult]: ...
    def is_history_enabled(cls) -> bool: ...
    def is_roaming_enabled(cls) -> bool: ...
    def set_content(cls, content: typing.Optional[DataPackage], /) -> None: ...
    def set_content_with_options(cls, content: typing.Optional[DataPackage], options: typing.Optional[ClipboardContentOptions], /) -> bool: ...
    def set_history_item_as_content(cls, item: typing.Optional[ClipboardHistoryItem], /) -> SetHistoryItemAsContentStatus: ...
    def add_history_changed(cls, handler: winrt.windows.foundation.EventHandler[ClipboardHistoryChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_history_changed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_history_enabled_changed(cls, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_history_enabled_changed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_roaming_enabled_changed(cls, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_roaming_enabled_changed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_changed(cls, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_changed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class Clipboard(winrt.system.Object, metaclass=Clipboard_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Clipboard: ...

@typing.final
class ClipboardContentOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardContentOptions: ...
    def __new__(cls: typing.Type[ClipboardContentOptions]) -> ClipboardContentOptions:...
    @_property
    def is_roamable(self) -> bool: ...
    @is_roamable.setter
    def is_roamable(self, value: bool) -> None: ...
    @_property
    def is_allowed_in_history(self) -> bool: ...
    @is_allowed_in_history.setter
    def is_allowed_in_history(self, value: bool) -> None: ...
    @_property
    def history_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def roaming_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class ClipboardHistoryChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryChangedEventArgs: ...

@typing.final
class ClipboardHistoryItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryItem: ...
    @_property
    def content(self) -> typing.Optional[DataPackageView]: ...
    @_property
    def id(self) -> str: ...
    @_property
    def timestamp(self) -> datetime.datetime: ...

@typing.final
class ClipboardHistoryItemsResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryItemsResult: ...
    @_property
    def items(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ClipboardHistoryItem]]: ...
    @_property
    def status(self) -> ClipboardHistoryItemsResultStatus: ...

@typing.final
class DataPackage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackage: ...
    def __new__(cls: typing.Type[DataPackage]) -> DataPackage:...
    def get_view(self) -> typing.Optional[DataPackageView]: ...
    def set_application_link(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def set_bitmap(self, value: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference], /) -> None: ...
    def set_data(self, format_id: str, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_data_provider(self, format_id: str, delay_renderer: typing.Optional[DataProviderHandler], /) -> None: ...
    def set_html_format(self, value: str, /) -> None: ...
    def set_rtf(self, value: str, /) -> None: ...
    @typing.overload
    def set_storage_items(self, value: typing.Iterable[winrt.windows.storage.IStorageItem], /) -> None: ...
    @typing.overload
    def set_storage_items(self, value: typing.Iterable[winrt.windows.storage.IStorageItem], read_only: bool, /) -> None: ...
    def set_text(self, value: str, /) -> None: ...
    def set_uri(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def set_web_link(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def add_destroyed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_destroyed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_operation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, OperationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_operation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_completed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, ShareCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_canceled(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_canceled(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def requested_operation(self) -> DataPackageOperation: ...
    @requested_operation.setter
    def requested_operation(self, value: DataPackageOperation) -> None: ...
    @_property
    def properties(self) -> typing.Optional[DataPackagePropertySet]: ...
    @_property
    def resource_map(self) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, winrt.windows.storage.streams.RandomAccessStreamReference]]: ...

@typing.final
class DataPackagePropertySet(winrt.system.Object, winrt._winrt.MutableMapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: winrt.system.Object) -> None: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackagePropertySet: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.system.Object]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: typing.Optional[winrt.system.Object], /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[winrt.system.Object]: ...
    def remove(self, key: str, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def thumbnail(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @thumbnail.setter
    def thumbnail(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def application_name(self) -> str: ...
    @application_name.setter
    def application_name(self, value: str) -> None: ...
    @_property
    def application_listing_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @application_listing_uri.setter
    def application_listing_uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def file_types(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def square30x30_logo(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @square30x30_logo.setter
    def square30x30_logo(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def package_family_name(self) -> str: ...
    @package_family_name.setter
    def package_family_name(self, value: str) -> None: ...
    @_property
    def logo_background_color(self) -> winrt.windows.ui.Color: ...
    @logo_background_color.setter
    def logo_background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def content_source_web_link(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @content_source_web_link.setter
    def content_source_web_link(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def content_source_application_link(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @content_source_application_link.setter
    def content_source_application_link(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def enterprise_id(self) -> str: ...
    @enterprise_id.setter
    def enterprise_id(self, value: str) -> None: ...
    @_property
    def content_source_user_activity_json(self) -> str: ...
    @content_source_user_activity_json.setter
    def content_source_user_activity_json(self, value: str) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DataPackagePropertySetView(winrt.system.Object, winrt._winrt.Mapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackagePropertySetView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.system.Object]]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[winrt.system.Object]: ...
    def split(self) -> typing.Tuple[typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]], typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]]: ...
    @_property
    def application_listing_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def application_name(self) -> str: ...
    @_property
    def description(self) -> str: ...
    @_property
    def file_types(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def thumbnail(self) -> typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @_property
    def title(self) -> str: ...
    @_property
    def content_source_application_link(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def content_source_web_link(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def logo_background_color(self) -> winrt.windows.ui.Color: ...
    @_property
    def package_family_name(self) -> str: ...
    @_property
    def square30x30_logo(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @_property
    def enterprise_id(self) -> str: ...
    @_property
    def content_source_user_activity_json(self) -> str: ...
    @_property
    def is_from_roaming_clipboard(self) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DataPackageView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackageView: ...
    def contains(self, format_id: str, /) -> bool: ...
    def get_application_link_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def get_bitmap_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    def get_data_async(self, format_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Object]: ...
    def get_html_format_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_resource_map_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.RandomAccessStreamReference]]: ...
    def get_rtf_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_storage_items_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]: ...
    @typing.overload
    def get_text_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def get_text_async(self, format_id: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_uri_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def get_web_link_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def report_operation_completed(self, value: DataPackageOperation, /) -> None: ...
    @typing.overload
    def request_access_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]: ...
    @typing.overload
    def request_access_async(self, enterprise_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]: ...
    def set_accepted_format_id(self, format_id: str, /) -> None: ...
    def unlock_and_assume_enterprise_identity(self) -> winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult: ...
    @_property
    def available_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def properties(self) -> typing.Optional[DataPackagePropertySetView]: ...
    @_property
    def requested_operation(self) -> DataPackageOperation: ...

@typing.final
class DataProviderDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataProviderDeferral: ...
    def complete(self) -> None: ...

@typing.final
class DataProviderRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataProviderRequest: ...
    def get_deferral(self) -> typing.Optional[DataProviderDeferral]: ...
    def set_data(self, value: typing.Optional[winrt.system.Object], /) -> None: ...
    @_property
    def deadline(self) -> datetime.datetime: ...
    @_property
    def format_id(self) -> str: ...

@typing.final
class DataRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequest: ...
    def fail_with_display_text(self, value: str, /) -> None: ...
    def get_deferral(self) -> typing.Optional[DataRequestDeferral]: ...
    @_property
    def data(self) -> typing.Optional[DataPackage]: ...
    @data.setter
    def data(self, value: typing.Optional[DataPackage]) -> None: ...
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class DataRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequestDeferral: ...
    def complete(self) -> None: ...

@typing.final
class DataRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[DataRequest]: ...

@typing.final
class DataTransferManager_Static(type):
    def get_for_current_view(cls) -> typing.Optional[DataTransferManager]: ...
    def is_supported(cls) -> bool: ...
    @typing.overload
    def show_share_u_i(cls) -> None: ...
    @typing.overload
    def show_share_u_i(cls, options: typing.Optional[ShareUIOptions], /) -> None: ...

@typing.final
class DataTransferManager(winrt.system.Object, metaclass=DataTransferManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataTransferManager: ...
    def add_data_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, DataRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_data_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_target_application_chosen(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, TargetApplicationChosenEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_application_chosen(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_providers_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, ShareProvidersRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_providers_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class HtmlFormatHelper_Static(type):
    def create_html_format(cls, html_fragment: str, /) -> str: ...
    def get_static_fragment(cls, html_format: str, /) -> str: ...

@typing.final
class HtmlFormatHelper(winrt.system.Object, metaclass=HtmlFormatHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HtmlFormatHelper: ...

@typing.final
class OperationCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OperationCompletedEventArgs: ...
    @_property
    def operation(self) -> DataPackageOperation: ...
    @_property
    def accepted_format_id(self) -> str: ...

@typing.final
class ShareCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareCompletedEventArgs: ...
    @_property
    def share_target(self) -> typing.Optional[ShareTargetInfo]: ...

@typing.final
class ShareProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProvider: ...
    def __new__(cls: typing.Type[ShareProvider], title: str, display_icon: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference], background_color: winrt.windows.ui.Color, handler: typing.Optional[ShareProviderHandler]) -> ShareProvider:...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def background_color(self) -> winrt.windows.ui.Color: ...
    @_property
    def display_icon(self) -> typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @_property
    def title(self) -> str: ...

@typing.final
class ShareProviderOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProviderOperation: ...
    def report_completed(self) -> None: ...
    @_property
    def data(self) -> typing.Optional[DataPackageView]: ...
    @_property
    def provider(self) -> typing.Optional[ShareProvider]: ...

@typing.final
class ShareProvidersRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProvidersRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def data(self) -> typing.Optional[DataPackageView]: ...
    @_property
    def providers(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ShareProvider]]: ...

@typing.final
class ShareTargetInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareTargetInfo: ...
    @_property
    def app_user_model_id(self) -> str: ...
    @_property
    def share_provider(self) -> typing.Optional[ShareProvider]: ...

@typing.final
class ShareUIOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareUIOptions: ...
    def __new__(cls: typing.Type[ShareUIOptions]) -> ShareUIOptions:...
    @_property
    def theme(self) -> ShareUITheme: ...
    @theme.setter
    def theme(self, value: ShareUITheme) -> None: ...
    @_property
    def selection_rect(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]: ...
    @selection_rect.setter
    def selection_rect(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]) -> None: ...

@typing.final
class SharedStorageAccessManager_Static(type):
    def add_file(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> str: ...
    def redeem_token_for_file_async(cls, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def remove_file(cls, token: str, /) -> None: ...

@typing.final
class SharedStorageAccessManager(winrt.system.Object, metaclass=SharedStorageAccessManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SharedStorageAccessManager: ...

@typing.final
class StandardDataFormats_Static(type):
    @_property
    def bitmap(cls) -> str: ...
    @_property
    def html(cls) -> str: ...
    @_property
    def rtf(cls) -> str: ...
    @_property
    def storage_items(cls) -> str: ...
    @_property
    def text(cls) -> str: ...
    @_property
    def uri(cls) -> str: ...
    @_property
    def application_link(cls) -> str: ...
    @_property
    def web_link(cls) -> str: ...
    @_property
    def user_activity_json_array(cls) -> str: ...

@typing.final
class StandardDataFormats(winrt.system.Object, metaclass=StandardDataFormats_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StandardDataFormats: ...

@typing.final
class TargetApplicationChosenEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetApplicationChosenEventArgs: ...
    @_property
    def application_name(self) -> str: ...

