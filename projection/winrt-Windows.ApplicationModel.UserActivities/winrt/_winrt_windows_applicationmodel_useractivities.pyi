# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.credentials as windows_security_credentials
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.shell as windows_ui_shell

from winrt.windows.applicationmodel.useractivities import UserActivityState

Self = typing.TypeVar('Self')

@typing.final
class UserActivity_Static(type):
    def to_json_array(cls, activities: typing.Iterable[UserActivity], /) -> str: ...
    def try_parse_from_json(cls, json: str, /) -> typing.Optional[UserActivity]: ...
    def try_parse_from_json_array(cls, json: str, /) -> typing.Optional[windows_foundation_collections.IVector[UserActivity]]: ...

@typing.final
class UserActivity(winrt.system.Object, metaclass=UserActivity_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivity: ...
    def __new__(cls: typing.Type[UserActivity], activity_id: str) -> UserActivity: ...
    def create_session(self) -> typing.Optional[UserActivitySession]: ...
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    def to_json(self) -> str: ...
    @_property
    def fallback_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @fallback_uri.setter
    def fallback_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def content_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @content_uri.setter
    def content_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def content_type(self) -> str: ...
    @content_type.setter
    def content_type(self, value: str) -> None: ...
    @_property
    def content_info(self) -> typing.Optional[IUserActivityContentInfo]: ...
    @content_info.setter
    def content_info(self, value: typing.Optional[IUserActivityContentInfo]) -> None: ...
    @_property
    def activation_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @activation_uri.setter
    def activation_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def activity_id(self) -> str: ...
    @_property
    def state(self) -> UserActivityState: ...
    @_property
    def visual_elements(self) -> typing.Optional[UserActivityVisualElements]: ...
    @_property
    def is_roamable(self) -> bool: ...
    @is_roamable.setter
    def is_roamable(self, value: bool) -> None: ...

@typing.final
class UserActivityAttribution(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityAttribution: ...
    @typing.overload
    def __new__(cls: typing.Type[UserActivityAttribution], icon_uri: typing.Optional[windows_foundation.Uri]) -> UserActivityAttribution: ...
    @typing.overload
    def __new__(cls: typing.Type[UserActivityAttribution]) -> UserActivityAttribution: ...
    @_property
    def icon_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @icon_uri.setter
    def icon_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def alternate_text(self) -> str: ...
    @alternate_text.setter
    def alternate_text(self, value: str) -> None: ...
    @_property
    def add_image_query(self) -> bool: ...
    @add_image_query.setter
    def add_image_query(self, value: bool) -> None: ...

@typing.final
class UserActivityChannel_Static(type):
    def disable_auto_session_creation(cls) -> None: ...
    def get_default(cls) -> typing.Optional[UserActivityChannel]: ...
    def get_for_user(cls, user: typing.Optional[windows_system.User], /) -> typing.Optional[UserActivityChannel]: ...
    def try_get_for_web_account(cls, account: typing.Optional[windows_security_credentials.WebAccount], /) -> typing.Optional[UserActivityChannel]: ...

@typing.final
class UserActivityChannel(winrt.system.Object, metaclass=UserActivityChannel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityChannel: ...
    def delete_activity_async(self, activity_id: str, /) -> windows_foundation.IAsyncAction: ...
    def delete_all_activities_async(self) -> windows_foundation.IAsyncAction: ...
    def get_or_create_user_activity_async(self, activity_id: str, /) -> windows_foundation.IAsyncOperation[UserActivity]: ...
    def get_recent_user_activities_async(self, max_unique_activities: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVector[UserActivitySessionHistoryItem]]: ...
    def get_session_history_items_for_user_activity_async(self, activity_id: str, start_time: datetime.datetime, /) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVector[UserActivitySessionHistoryItem]]: ...

@typing.final
class UserActivityContentInfo_Static(type):
    def from_json(cls, value: str, /) -> typing.Optional[UserActivityContentInfo]: ...

@typing.final
class UserActivityContentInfo(winrt.system.Object, metaclass=UserActivityContentInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityContentInfo: ...
    def to_json(self) -> str: ...

@typing.final
class UserActivityRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityRequest: ...
    def set_user_activity(self, activity: typing.Optional[UserActivity], /) -> None: ...

@typing.final
class UserActivityRequestManager_Static(type):
    def get_for_current_view(cls) -> typing.Optional[UserActivityRequestManager]: ...

@typing.final
class UserActivityRequestManager(winrt.system.Object, metaclass=UserActivityRequestManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityRequestManager: ...
    def add_user_activity_requested(self, handler: windows_foundation.TypedEventHandler[UserActivityRequestManager, UserActivityRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_user_activity_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class UserActivityRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_foundation.Deferral]: ...
    @_property
    def request(self) -> typing.Optional[UserActivityRequest]: ...

@typing.final
class UserActivitySession(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivitySession: ...
    def close(self) -> None: ...
    @_property
    def activity_id(self) -> str: ...

@typing.final
class UserActivitySessionHistoryItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivitySessionHistoryItem: ...
    @_property
    def end_time(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def start_time(self) -> datetime.datetime: ...
    @_property
    def user_activity(self) -> typing.Optional[UserActivity]: ...

@typing.final
class UserActivityVisualElements(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserActivityVisualElements: ...
    @_property
    def display_text(self) -> str: ...
    @display_text.setter
    def display_text(self, value: str) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def content(self) -> typing.Optional[windows_ui_shell.IAdaptiveCard]: ...
    @content.setter
    def content(self, value: typing.Optional[windows_ui_shell.IAdaptiveCard]) -> None: ...
    @_property
    def background_color(self) -> windows_ui.Color: ...
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def attribution(self) -> typing.Optional[UserActivityAttribution]: ...
    @attribution.setter
    def attribution(self, value: typing.Optional[UserActivityAttribution]) -> None: ...
    @_property
    def attribution_display_text(self) -> str: ...
    @attribution_display_text.setter
    def attribution_display_text(self, value: str) -> None: ...

@typing.final
class IUserActivityContentInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IUserActivityContentInfo: ...
    def to_json(self) -> str: ...

