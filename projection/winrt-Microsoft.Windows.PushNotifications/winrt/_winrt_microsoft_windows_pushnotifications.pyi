# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.background as windows_applicationmodel_background
import winrt.windows.foundation as windows_foundation

from winrt.microsoft.windows.pushnotifications import PushNotificationChannelStatus

Self = typing.TypeVar('Self')

@typing.final
class PushNotificationCreateChannelStatus:
    status: PushNotificationChannelStatus
    extended_error: windows_foundation.HResult
    retry_count: winrt.system.UInt32
    def __init__(self, status: PushNotificationChannelStatus, extended_error: windows_foundation.HResult, retry_count: winrt.system.UInt32) -> None: ...
    def __eq__(self, other: object, /) -> bool: ...
    def __ne__(self, other: object, /) -> bool: ...

@typing.final
class PushNotificationChannel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationChannel: ...
    def close(self) -> None: ...
    @_property
    def expiration_time(self) -> datetime.datetime: ...
    @_property
    def uri(self) -> typing.Optional[windows_foundation.Uri]: ...

@typing.final
class PushNotificationCreateChannelResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationCreateChannelResult: ...
    @_property
    def channel(self) -> typing.Optional[PushNotificationChannel]: ...
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...
    @_property
    def status(self) -> PushNotificationChannelStatus: ...

@typing.final
class PushNotificationManager_Static(type):
    def is_supported(cls) -> bool: ...
    @_property
    def default(cls) -> typing.Optional[PushNotificationManager]: ...

@typing.final
class PushNotificationManager(winrt.system.Object, metaclass=PushNotificationManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationManager: ...
    def create_channel_async(self, remote_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperationWithProgress[PushNotificationCreateChannelResult, PushNotificationCreateChannelStatus]: ...
    def register(self) -> None: ...
    def unregister(self) -> None: ...
    def unregister_all(self) -> None: ...
    def add_push_received(self, handler: windows_foundation.TypedEventHandler[PushNotificationManager, PushNotificationReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_push_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class PushNotificationReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationReceivedEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_applicationmodel_background.BackgroundTaskDeferral]: ...
    def add_canceled(self, handler: typing.Optional[windows_applicationmodel_background.BackgroundTaskCanceledEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def payload(self) -> winrt.system.UInt8: ...

