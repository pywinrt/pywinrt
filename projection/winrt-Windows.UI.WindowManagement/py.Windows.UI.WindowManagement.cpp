// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.UI.WindowManagement.h"


namespace py::cpp::Windows::UI::WindowManagement
{
    // ----- AppWindow class --------------------

    static PyObject* _new_AppWindow(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindow>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindow>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindow(py::wrapper::Windows::UI::WindowManagement::AppWindow* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindow_ClearAllPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"ClearAllPersistedState", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::UI::WindowManagement::AppWindow::ClearAllPersistedState();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_ClearPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"ClearPersistedState", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::UI::WindowManagement::AppWindow::ClearPersistedState(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_CloseAsync(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"CloseAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CloseAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_GetDisplayRegions(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"GetDisplayRegions", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDisplayRegions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_GetPlacement(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"GetPlacement", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetPlacement());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveAdjacentToCurrentView(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveAdjacentToCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RequestMoveAdjacentToCurrentView();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveAdjacentToWindow(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveAdjacentToWindow", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindow>(args, 0);

                self->obj.RequestMoveAdjacentToWindow(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToCurrentViewContent(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveRelativeToCurrentViewContent", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);

                self->obj.RequestMoveRelativeToCurrentViewContent(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToDisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveRelativeToDisplayRegion", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::DisplayRegion>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.RequestMoveRelativeToDisplayRegion(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToWindowContent(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveRelativeToWindowContent", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindow>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.RequestMoveRelativeToWindowContent(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveToDisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestMoveToDisplayRegion", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::DisplayRegion>(args, 0);

                self->obj.RequestMoveToDisplayRegion(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestSize(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"RequestSize", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                self->obj.RequestSize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_TryCreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"TryCreateAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::AppWindow::TryCreateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_TryShowAsync(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindow", L"TryShowAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.TryShowAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Title(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindow_put_Title(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindow_get_PersistedStateId(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"PersistedStateId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PersistedStateId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindow_put_PersistedStateId(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"PersistedStateId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PersistedStateId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindow_get_Content(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_DispatcherQueue(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"DispatcherQueue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Frame(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"Frame"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Frame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"IsVisible"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Presenter(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"Presenter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Presenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_TitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"TitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_UIContext(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"UIContext"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UIContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindow", L"WindowingEnvironment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_Changed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_Changed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_CloseRequested(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"CloseRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>>(arg);

            return py::convert(self->obj.CloseRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_CloseRequested(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"CloseRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CloseRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_Closed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_Closed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.AppWindow", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindow>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindow>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindow[] = {
        { "close_async", reinterpret_cast<PyCFunction>(AppWindow_CloseAsync), METH_VARARGS, nullptr },
        { "get_display_regions", reinterpret_cast<PyCFunction>(AppWindow_GetDisplayRegions), METH_VARARGS, nullptr },
        { "get_placement", reinterpret_cast<PyCFunction>(AppWindow_GetPlacement), METH_VARARGS, nullptr },
        { "request_move_adjacent_to_current_view", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveAdjacentToCurrentView), METH_VARARGS, nullptr },
        { "request_move_adjacent_to_window", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveAdjacentToWindow), METH_VARARGS, nullptr },
        { "request_move_relative_to_current_view_content", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveRelativeToCurrentViewContent), METH_VARARGS, nullptr },
        { "request_move_relative_to_display_region", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveRelativeToDisplayRegion), METH_VARARGS, nullptr },
        { "request_move_relative_to_window_content", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveRelativeToWindowContent), METH_VARARGS, nullptr },
        { "request_move_to_display_region", reinterpret_cast<PyCFunction>(AppWindow_RequestMoveToDisplayRegion), METH_VARARGS, nullptr },
        { "request_size", reinterpret_cast<PyCFunction>(AppWindow_RequestSize), METH_VARARGS, nullptr },
        { "try_show_async", reinterpret_cast<PyCFunction>(AppWindow_TryShowAsync), METH_VARARGS, nullptr },
        { "add_changed", reinterpret_cast<PyCFunction>(AppWindow_add_Changed), METH_O, nullptr },
        { "remove_changed", reinterpret_cast<PyCFunction>(AppWindow_remove_Changed), METH_O, nullptr },
        { "add_close_requested", reinterpret_cast<PyCFunction>(AppWindow_add_CloseRequested), METH_O, nullptr },
        { "remove_close_requested", reinterpret_cast<PyCFunction>(AppWindow_remove_CloseRequested), METH_O, nullptr },
        { "add_closed", reinterpret_cast<PyCFunction>(AppWindow_add_Closed), METH_O, nullptr },
        { "remove_closed", reinterpret_cast<PyCFunction>(AppWindow_remove_Closed), METH_O, nullptr },
        { "_assign_array_", _assign_array_AppWindow, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindow), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindow[] = {
        { "title", reinterpret_cast<getter>(AppWindow_get_Title), reinterpret_cast<setter>(AppWindow_put_Title), nullptr, nullptr },
        { "persisted_state_id", reinterpret_cast<getter>(AppWindow_get_PersistedStateId), reinterpret_cast<setter>(AppWindow_put_PersistedStateId), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(AppWindow_get_Content), nullptr, nullptr, nullptr },
        { "dispatcher_queue", reinterpret_cast<getter>(AppWindow_get_DispatcherQueue), nullptr, nullptr, nullptr },
        { "frame", reinterpret_cast<getter>(AppWindow_get_Frame), nullptr, nullptr, nullptr },
        { "is_visible", reinterpret_cast<getter>(AppWindow_get_IsVisible), nullptr, nullptr, nullptr },
        { "presenter", reinterpret_cast<getter>(AppWindow_get_Presenter), nullptr, nullptr, nullptr },
        { "title_bar", reinterpret_cast<getter>(AppWindow_get_TitleBar), nullptr, nullptr, nullptr },
        { "u_i_context", reinterpret_cast<getter>(AppWindow_get_UIContext), nullptr, nullptr, nullptr },
        { "windowing_environment", reinterpret_cast<getter>(AppWindow_get_WindowingEnvironment), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindow[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindow) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindow) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindow) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindow) },
        { },
    };

    static PyType_Spec type_spec_AppWindow =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindow",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindow),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindow
    };

    static PyGetSetDef getset_AppWindow_Static[] = {
        { }
    };

    static PyMethodDef methods_AppWindow_Static[] = {
        { "clear_all_persisted_state", reinterpret_cast<PyCFunction>(AppWindow_ClearAllPersistedState), METH_VARARGS, nullptr },
        { "clear_persisted_state", reinterpret_cast<PyCFunction>(AppWindow_ClearPersistedState), METH_VARARGS, nullptr },
        { "try_create_async", reinterpret_cast<PyCFunction>(AppWindow_TryCreateAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_AppWindow_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_AppWindow_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_AppWindow_Static) },
        { }
    };

    static PyType_Spec type_spec_AppWindow_Static =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindow_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_AppWindow_Static
    };

    // ----- AppWindowChangedEventArgs class --------------------

    static PyObject* _new_AppWindowChangedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowChangedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowChangedEventArgs_get_DidAvailableWindowPresentationsChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidAvailableWindowPresentationsChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidAvailableWindowPresentationsChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidDisplayRegionsChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidDisplayRegionsChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidDisplayRegionsChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidFrameChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidFrameChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidFrameChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidSizeChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidSizeChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidSizeChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidTitleBarChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidTitleBarChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidTitleBarChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidVisibilityChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidVisibilityChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidVisibilityChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidWindowPresentationChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidWindowPresentationChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidWindowPresentationChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidWindowingEnvironmentChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowChangedEventArgs", L"DidWindowingEnvironmentChange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DidWindowingEnvironmentChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowChangedEventArgs[] = {
        { "_assign_array_", _assign_array_AppWindowChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowChangedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowChangedEventArgs[] = {
        { "did_available_window_presentations_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidAvailableWindowPresentationsChange), nullptr, nullptr, nullptr },
        { "did_display_regions_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidDisplayRegionsChange), nullptr, nullptr, nullptr },
        { "did_frame_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidFrameChange), nullptr, nullptr, nullptr },
        { "did_size_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidSizeChange), nullptr, nullptr, nullptr },
        { "did_title_bar_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidTitleBarChange), nullptr, nullptr, nullptr },
        { "did_visibility_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidVisibilityChange), nullptr, nullptr, nullptr },
        { "did_window_presentation_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidWindowPresentationChange), nullptr, nullptr, nullptr },
        { "did_windowing_environment_change", reinterpret_cast<getter>(AppWindowChangedEventArgs_get_DidWindowingEnvironmentChange), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowChangedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowChangedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowChangedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowChangedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowChangedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppWindowChangedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowChangedEventArgs
    };

    // ----- AppWindowCloseRequestedEventArgs class --------------------

    static PyObject* _new_AppWindowCloseRequestedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowCloseRequestedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowCloseRequestedEventArgs_GetDeferral(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowCloseRequestedEventArgs_get_Cancel(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Cancel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowCloseRequestedEventArgs_put_Cancel(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Cancel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_AppWindowCloseRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowCloseRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowCloseRequestedEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(AppWindowCloseRequestedEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppWindowCloseRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowCloseRequestedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowCloseRequestedEventArgs[] = {
        { "cancel", reinterpret_cast<getter>(AppWindowCloseRequestedEventArgs_get_Cancel), reinterpret_cast<setter>(AppWindowCloseRequestedEventArgs_put_Cancel), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowCloseRequestedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowCloseRequestedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowCloseRequestedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowCloseRequestedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowCloseRequestedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppWindowCloseRequestedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowCloseRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowCloseRequestedEventArgs
    };

    // ----- AppWindowClosedEventArgs class --------------------

    static PyObject* _new_AppWindowClosedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowClosedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowClosedEventArgs_get_Reason(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowClosedEventArgs", L"Reason"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowClosedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowClosedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowClosedEventArgs[] = {
        { "_assign_array_", _assign_array_AppWindowClosedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowClosedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowClosedEventArgs[] = {
        { "reason", reinterpret_cast<getter>(AppWindowClosedEventArgs_get_Reason), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowClosedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowClosedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowClosedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowClosedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowClosedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppWindowClosedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowClosedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowClosedEventArgs
    };

    // ----- AppWindowFrame class --------------------

    static PyObject* _new_AppWindowFrame(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowFrame>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowFrame>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowFrame(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowFrame_GetFrameStyle(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowFrame", L"GetFrameStyle", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetFrameStyle());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowFrame_SetFrameStyle(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowFrame", L"SetFrameStyle", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowFrameStyle>(args, 0);

                self->obj.SetFrameStyle(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowFrame_get_DragRegionVisuals(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowFrame", L"DragRegionVisuals"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DragRegionVisuals());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowFrame>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowFrame[] = {
        { "get_frame_style", reinterpret_cast<PyCFunction>(AppWindowFrame_GetFrameStyle), METH_VARARGS, nullptr },
        { "set_frame_style", reinterpret_cast<PyCFunction>(AppWindowFrame_SetFrameStyle), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppWindowFrame, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowFrame), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowFrame[] = {
        { "drag_region_visuals", reinterpret_cast<getter>(AppWindowFrame_get_DragRegionVisuals), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowFrame[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowFrame) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowFrame) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowFrame) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowFrame) },
        { },
    };

    static PyType_Spec type_spec_AppWindowFrame =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowFrame",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowFrame
    };

    // ----- AppWindowPlacement class --------------------

    static PyObject* _new_AppWindowPlacement(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPlacement>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPlacement>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowPlacement(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowPlacement_get_DisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowPlacement", L"DisplayRegion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowPlacement_get_Offset(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowPlacement", L"Offset"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Offset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowPlacement_get_Size(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowPlacement", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowPlacement(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowPlacement>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowPlacement(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPlacement>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPlacement[] = {
        { "_assign_array_", _assign_array_AppWindowPlacement, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowPlacement), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowPlacement[] = {
        { "display_region", reinterpret_cast<getter>(AppWindowPlacement_get_DisplayRegion), nullptr, nullptr, nullptr },
        { "offset", reinterpret_cast<getter>(AppWindowPlacement_get_Offset), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(AppWindowPlacement_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowPlacement[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowPlacement) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowPlacement) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowPlacement) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowPlacement) },
        { },
    };

    static PyType_Spec type_spec_AppWindowPlacement =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowPlacement",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPlacement
    };

    // ----- AppWindowPresentationConfiguration class --------------------

    static PyObject* _new_AppWindowPresentationConfiguration(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowPresentationConfiguration_get_Kind(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowPresentationConfiguration", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPresentationConfiguration[] = {
        { "_assign_array_", _assign_array_AppWindowPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowPresentationConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowPresentationConfiguration[] = {
        { "kind", reinterpret_cast<getter>(AppWindowPresentationConfiguration_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowPresentationConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowPresentationConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowPresentationConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowPresentationConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowPresentationConfiguration) },
        { },
    };

    static PyType_Spec type_spec_AppWindowPresentationConfiguration =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPresentationConfiguration
    };

    // ----- AppWindowPresenter class --------------------

    static PyObject* _new_AppWindowPresenter(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPresenter>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowPresenter>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowPresenter(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowPresenter_GetConfiguration(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowPresenter", L"GetConfiguration", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetConfiguration());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowPresenter_IsPresentationSupported(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowPresenter", L"IsPresentationSupported", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowPresentationKind>(args, 0);

                return py::convert(self->obj.IsPresentationSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowPresenter_RequestPresentation(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowPresenter", L"RequestPresentation", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowPresentationKind>(args, 0);

                return py::convert(self->obj.RequestPresentation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowPresenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowPresenter>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowPresenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPresenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPresenter[] = {
        { "get_configuration", reinterpret_cast<PyCFunction>(AppWindowPresenter_GetConfiguration), METH_VARARGS, nullptr },
        { "is_presentation_supported", reinterpret_cast<PyCFunction>(AppWindowPresenter_IsPresentationSupported), METH_VARARGS, nullptr },
        { "request_presentation", reinterpret_cast<PyCFunction>(AppWindowPresenter_RequestPresentation), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppWindowPresenter, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowPresenter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowPresenter[] = {
        { }
    };

    static PyType_Slot _type_slots_AppWindowPresenter[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowPresenter) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowPresenter) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowPresenter) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowPresenter) },
        { },
    };

    static PyType_Spec type_spec_AppWindowPresenter =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowPresenter",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPresenter
    };

    // ----- AppWindowTitleBar class --------------------

    static PyObject* _new_AppWindowTitleBar(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowTitleBar_GetPreferredVisibility(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"GetPreferredVisibility", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetPreferredVisibility());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_GetTitleBarOcclusions(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"GetTitleBarOcclusions", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetTitleBarOcclusions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_SetPreferredVisibility(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"SetPreferredVisibility", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowTitleBarVisibility>(args, 0);

                self->obj.SetPreferredVisibility(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_get_InactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"InactiveForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_InactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"InactiveForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_InactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"InactiveBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_InactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"InactiveBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ExtendsContentIntoTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ExtendsContentIntoTitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendsContentIntoTitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ExtendsContentIntoTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ExtendsContentIntoTitleBar"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ExtendsContentIntoTitleBar(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonPressedForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonPressedForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonPressedForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonPressedForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonPressedForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonPressedBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonPressedBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonPressedBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonInactiveForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonInactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonInactiveForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonInactiveBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonInactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonInactiveBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonHoverForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonHoverForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonHoverForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonHoverForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonHoverForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonHoverBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonHoverBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonHoverBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonForegroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ButtonBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"ButtonBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_BackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"BackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_BackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"BackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBar", L"IsVisible"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowTitleBar[] = {
        { "get_preferred_visibility", reinterpret_cast<PyCFunction>(AppWindowTitleBar_GetPreferredVisibility), METH_VARARGS, nullptr },
        { "get_title_bar_occlusions", reinterpret_cast<PyCFunction>(AppWindowTitleBar_GetTitleBarOcclusions), METH_VARARGS, nullptr },
        { "set_preferred_visibility", reinterpret_cast<PyCFunction>(AppWindowTitleBar_SetPreferredVisibility), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppWindowTitleBar, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowTitleBar), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowTitleBar[] = {
        { "inactive_foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_InactiveForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_InactiveForegroundColor), nullptr, nullptr },
        { "inactive_background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_InactiveBackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_InactiveBackgroundColor), nullptr, nullptr },
        { "foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ForegroundColor), nullptr, nullptr },
        { "extends_content_into_title_bar", reinterpret_cast<getter>(AppWindowTitleBar_get_ExtendsContentIntoTitleBar), reinterpret_cast<setter>(AppWindowTitleBar_put_ExtendsContentIntoTitleBar), nullptr, nullptr },
        { "button_pressed_foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonPressedForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonPressedForegroundColor), nullptr, nullptr },
        { "button_pressed_background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonPressedBackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonPressedBackgroundColor), nullptr, nullptr },
        { "button_inactive_foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonInactiveForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonInactiveForegroundColor), nullptr, nullptr },
        { "button_inactive_background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonInactiveBackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonInactiveBackgroundColor), nullptr, nullptr },
        { "button_hover_foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonHoverForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonHoverForegroundColor), nullptr, nullptr },
        { "button_hover_background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonHoverBackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonHoverBackgroundColor), nullptr, nullptr },
        { "button_foreground_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonForegroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonForegroundColor), nullptr, nullptr },
        { "button_background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_ButtonBackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_ButtonBackgroundColor), nullptr, nullptr },
        { "background_color", reinterpret_cast<getter>(AppWindowTitleBar_get_BackgroundColor), reinterpret_cast<setter>(AppWindowTitleBar_put_BackgroundColor), nullptr, nullptr },
        { "is_visible", reinterpret_cast<getter>(AppWindowTitleBar_get_IsVisible), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowTitleBar[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowTitleBar) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowTitleBar) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowTitleBar) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowTitleBar) },
        { },
    };

    static PyType_Spec type_spec_AppWindowTitleBar =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowTitleBar",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowTitleBar
    };

    // ----- AppWindowTitleBarOcclusion class --------------------

    static PyObject* _new_AppWindowTitleBarOcclusion(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>::type_name);
        return nullptr;
    }

    static void _dealloc_AppWindowTitleBarOcclusion(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppWindowTitleBarOcclusion_get_OccludingRect(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.AppWindowTitleBarOcclusion", L"OccludingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OccludingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppWindowTitleBarOcclusion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppWindowTitleBarOcclusion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowTitleBarOcclusion[] = {
        { "_assign_array_", _assign_array_AppWindowTitleBarOcclusion, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppWindowTitleBarOcclusion), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppWindowTitleBarOcclusion[] = {
        { "occluding_rect", reinterpret_cast<getter>(AppWindowTitleBarOcclusion_get_OccludingRect), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppWindowTitleBarOcclusion[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppWindowTitleBarOcclusion) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppWindowTitleBarOcclusion) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppWindowTitleBarOcclusion) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppWindowTitleBarOcclusion) },
        { },
    };

    static PyType_Spec type_spec_AppWindowTitleBarOcclusion =
    {
        "winrt._winrt_windows_ui_windowmanagement.AppWindowTitleBarOcclusion",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowTitleBarOcclusion
    };

    // ----- CompactOverlayPresentationConfiguration class --------------------

    static PyObject* _new_CompactOverlayPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CompactOverlayPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_CompactOverlayPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CompactOverlayPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompactOverlayPresentationConfiguration[] = {
        { "_assign_array_", _assign_array_CompactOverlayPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CompactOverlayPresentationConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CompactOverlayPresentationConfiguration[] = {
        { }
    };

    static PyType_Slot _type_slots_CompactOverlayPresentationConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CompactOverlayPresentationConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CompactOverlayPresentationConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CompactOverlayPresentationConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CompactOverlayPresentationConfiguration) },
        { },
    };

    static PyType_Spec type_spec_CompactOverlayPresentationConfiguration =
    {
        "winrt._winrt_windows_ui_windowmanagement.CompactOverlayPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompactOverlayPresentationConfiguration
    };

    // ----- DefaultPresentationConfiguration class --------------------

    static PyObject* _new_DefaultPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DefaultPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::DefaultPresentationConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_DefaultPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DefaultPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DefaultPresentationConfiguration[] = {
        { "_assign_array_", _assign_array_DefaultPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DefaultPresentationConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DefaultPresentationConfiguration[] = {
        { }
    };

    static PyType_Slot _type_slots_DefaultPresentationConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DefaultPresentationConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DefaultPresentationConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DefaultPresentationConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DefaultPresentationConfiguration) },
        { },
    };

    static PyType_Spec type_spec_DefaultPresentationConfiguration =
    {
        "winrt._winrt_windows_ui_windowmanagement.DefaultPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::DefaultPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DefaultPresentationConfiguration
    };

    // ----- DisplayRegion class --------------------

    static PyObject* _new_DisplayRegion(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::DisplayRegion>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::DisplayRegion>::type_name);
        return nullptr;
    }

    static void _dealloc_DisplayRegion(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DisplayRegion_get_DisplayMonitorDeviceId(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"DisplayMonitorDeviceId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayMonitorDeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"IsVisible"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"WindowingEnvironment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WorkAreaOffset(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"WorkAreaOffset"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WorkAreaOffset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WorkAreaSize(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"WorkAreaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WorkAreaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_add_Changed(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::DisplayRegion, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_remove_Changed(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.DisplayRegion", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DisplayRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::DisplayRegion>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DisplayRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::DisplayRegion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DisplayRegion[] = {
        { "add_changed", reinterpret_cast<PyCFunction>(DisplayRegion_add_Changed), METH_O, nullptr },
        { "remove_changed", reinterpret_cast<PyCFunction>(DisplayRegion_remove_Changed), METH_O, nullptr },
        { "_assign_array_", _assign_array_DisplayRegion, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DisplayRegion), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DisplayRegion[] = {
        { "display_monitor_device_id", reinterpret_cast<getter>(DisplayRegion_get_DisplayMonitorDeviceId), nullptr, nullptr, nullptr },
        { "is_visible", reinterpret_cast<getter>(DisplayRegion_get_IsVisible), nullptr, nullptr, nullptr },
        { "windowing_environment", reinterpret_cast<getter>(DisplayRegion_get_WindowingEnvironment), nullptr, nullptr, nullptr },
        { "work_area_offset", reinterpret_cast<getter>(DisplayRegion_get_WorkAreaOffset), nullptr, nullptr, nullptr },
        { "work_area_size", reinterpret_cast<getter>(DisplayRegion_get_WorkAreaSize), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DisplayRegion[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DisplayRegion) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DisplayRegion) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DisplayRegion) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DisplayRegion) },
        { },
    };

    static PyType_Spec type_spec_DisplayRegion =
    {
        "winrt._winrt_windows_ui_windowmanagement.DisplayRegion",
        sizeof(py::wrapper::Windows::UI::WindowManagement::DisplayRegion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DisplayRegion
    };

    // ----- FullScreenPresentationConfiguration class --------------------

    static PyObject* _new_FullScreenPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FullScreenPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FullScreenPresentationConfiguration_get_IsExclusive(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.FullScreenPresentationConfiguration", L"IsExclusive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsExclusive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FullScreenPresentationConfiguration_put_IsExclusive(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.FullScreenPresentationConfiguration", L"IsExclusive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsExclusive(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_FullScreenPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FullScreenPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FullScreenPresentationConfiguration[] = {
        { "_assign_array_", _assign_array_FullScreenPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FullScreenPresentationConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FullScreenPresentationConfiguration[] = {
        { "is_exclusive", reinterpret_cast<getter>(FullScreenPresentationConfiguration_get_IsExclusive), reinterpret_cast<setter>(FullScreenPresentationConfiguration_put_IsExclusive), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FullScreenPresentationConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FullScreenPresentationConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FullScreenPresentationConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FullScreenPresentationConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FullScreenPresentationConfiguration) },
        { },
    };

    static PyType_Spec type_spec_FullScreenPresentationConfiguration =
    {
        "winrt._winrt_windows_ui_windowmanagement.FullScreenPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FullScreenPresentationConfiguration
    };

    // ----- WindowServices class --------------------

    static PyObject* _new_WindowServices(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::WindowServices>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::WindowServices>::type_name);
        return nullptr;
    }

    static PyObject* WindowServices_FindAllTopLevelWindowIds(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.WindowServices", L"FindAllTopLevelWindowIds", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::WindowServices::FindAllTopLevelWindowIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowServices[] = {
        { }
    };

    static PyGetSetDef _getset_WindowServices[] = {
        { }
    };

    static PyType_Slot _type_slots_WindowServices[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowServices) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowServices) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowServices) },
        { },
    };

    static PyType_Spec type_spec_WindowServices =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowServices",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowServices
    };

    static PyGetSetDef getset_WindowServices_Static[] = {
        { }
    };

    static PyMethodDef methods_WindowServices_Static[] = {
        { "find_all_top_level_window_ids", reinterpret_cast<PyCFunction>(WindowServices_FindAllTopLevelWindowIds), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_WindowServices_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_WindowServices_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_WindowServices_Static) },
        { }
    };

    static PyType_Spec type_spec_WindowServices_Static =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowServices_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_WindowServices_Static
    };

    // ----- WindowingEnvironment class --------------------

    static PyObject* _new_WindowingEnvironment(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironment>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironment>::type_name);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WindowingEnvironment_FindAll(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"FindAll", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::WindowingEnvironment::FindAll());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"FindAll", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::WindowingEnvironmentKind>(args, 0);

                return py::convert(winrt::Windows::UI::WindowManagement::WindowingEnvironment::FindAll(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_GetDisplayRegions(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"GetDisplayRegions", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDisplayRegions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_get_IsEnabled(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"IsEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_get_Kind(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_add_Changed(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::WindowingEnvironment, winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_remove_Changed(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.WindowManagement.WindowingEnvironment", L"Changed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WindowingEnvironment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::WindowingEnvironment>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WindowingEnvironment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironment[] = {
        { "get_display_regions", reinterpret_cast<PyCFunction>(WindowingEnvironment_GetDisplayRegions), METH_VARARGS, nullptr },
        { "add_changed", reinterpret_cast<PyCFunction>(WindowingEnvironment_add_Changed), METH_O, nullptr },
        { "remove_changed", reinterpret_cast<PyCFunction>(WindowingEnvironment_remove_Changed), METH_O, nullptr },
        { "_assign_array_", _assign_array_WindowingEnvironment, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WindowingEnvironment), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WindowingEnvironment[] = {
        { "is_enabled", reinterpret_cast<getter>(WindowingEnvironment_get_IsEnabled), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(WindowingEnvironment_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WindowingEnvironment[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowingEnvironment) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WindowingEnvironment) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowingEnvironment) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowingEnvironment) },
        { },
    };

    static PyType_Spec type_spec_WindowingEnvironment =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowingEnvironment",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironment
    };

    static PyGetSetDef getset_WindowingEnvironment_Static[] = {
        { }
    };

    static PyMethodDef methods_WindowingEnvironment_Static[] = {
        { "find_all", reinterpret_cast<PyCFunction>(WindowingEnvironment_FindAll), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_WindowingEnvironment_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_WindowingEnvironment_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_WindowingEnvironment_Static) },
        { }
    };

    static PyType_Spec type_spec_WindowingEnvironment_Static =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowingEnvironment_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_WindowingEnvironment_Static
    };

    // ----- WindowingEnvironmentAddedEventArgs class --------------------

    static PyObject* _new_WindowingEnvironmentAddedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentAddedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WindowingEnvironmentAddedEventArgs_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.WindowingEnvironmentAddedEventArgs", L"WindowingEnvironment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WindowingEnvironmentAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WindowingEnvironmentAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentAddedEventArgs[] = {
        { "_assign_array_", _assign_array_WindowingEnvironmentAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WindowingEnvironmentAddedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WindowingEnvironmentAddedEventArgs[] = {
        { "windowing_environment", reinterpret_cast<getter>(WindowingEnvironmentAddedEventArgs_get_WindowingEnvironment), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentAddedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowingEnvironmentAddedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WindowingEnvironmentAddedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowingEnvironmentAddedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowingEnvironmentAddedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_WindowingEnvironmentAddedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowingEnvironmentAddedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentAddedEventArgs
    };

    // ----- WindowingEnvironmentChangedEventArgs class --------------------

    static PyObject* _new_WindowingEnvironmentChangedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentChangedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_WindowingEnvironmentChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WindowingEnvironmentChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentChangedEventArgs[] = {
        { "_assign_array_", _assign_array_WindowingEnvironmentChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WindowingEnvironmentChangedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WindowingEnvironmentChangedEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentChangedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowingEnvironmentChangedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WindowingEnvironmentChangedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowingEnvironmentChangedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowingEnvironmentChangedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_WindowingEnvironmentChangedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowingEnvironmentChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentChangedEventArgs
    };

    // ----- WindowingEnvironmentRemovedEventArgs class --------------------

    static PyObject* _new_WindowingEnvironmentRemovedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentRemovedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WindowingEnvironmentRemovedEventArgs_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.WindowManagement.WindowingEnvironmentRemovedEventArgs", L"WindowingEnvironment"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WindowingEnvironmentRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WindowingEnvironmentRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_WindowingEnvironmentRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WindowingEnvironmentRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WindowingEnvironmentRemovedEventArgs[] = {
        { "windowing_environment", reinterpret_cast<getter>(WindowingEnvironmentRemovedEventArgs_get_WindowingEnvironment), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentRemovedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowingEnvironmentRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WindowingEnvironmentRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowingEnvironmentRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowingEnvironmentRemovedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_WindowingEnvironmentRemovedEventArgs =
    {
        "winrt._winrt_windows_ui_windowmanagement.WindowingEnvironmentRemovedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentRemovedEventArgs
    };

    // ----- Windows.UI.WindowManagement Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::WindowManagement");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_ui_windowmanagement",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::UI::WindowManagement

PyMODINIT_FUNC PyInit__winrt_windows_ui_windowmanagement(void) noexcept
{
    using namespace py::cpp::Windows::UI::WindowManagement;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_AppWindow_Static{PyType_FromSpec(&type_spec_AppWindow_Static)};
    if (!type_AppWindow_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindow, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_AppWindow_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowChangedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowCloseRequestedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowClosedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowFrame, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowPlacement, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowPresentationConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowPresenter, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowTitleBar, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppWindowTitleBarOcclusion, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CompactOverlayPresentationConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DefaultPresentationConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DisplayRegion, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FullScreenPresentationConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_WindowServices_Static{PyType_FromSpec(&type_spec_WindowServices_Static)};
    if (!type_WindowServices_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowServices, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_WindowServices_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_WindowingEnvironment_Static{PyType_FromSpec(&type_spec_WindowingEnvironment_Static)};
    if (!type_WindowingEnvironment_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowingEnvironment, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_WindowingEnvironment_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowingEnvironmentAddedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowingEnvironmentChangedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowingEnvironmentRemovedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
