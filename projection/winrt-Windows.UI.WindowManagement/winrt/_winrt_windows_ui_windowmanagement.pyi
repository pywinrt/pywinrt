# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.composition as windows_ui_composition

from winrt.windows.ui.windowmanagement import AppWindowClosedReason, AppWindowFrameStyle, AppWindowPresentationKind, AppWindowTitleBarVisibility, WindowingEnvironmentKind

Self = typing.TypeVar('Self')

@typing.final
class AppWindow_Static(type):
    # System.Void Windows.UI.WindowManagement.AppWindow::ClearAllPersistedState()
    def clear_all_persisted_state(cls) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::ClearPersistedState(System.String)
    def clear_persisted_state(cls, key: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.WindowManagement.AppWindow> Windows.UI.WindowManagement.AppWindow::TryCreateAsync()
    def try_create_async(cls) -> windows_foundation.IAsyncOperation[typing.Optional[AppWindow]]: ...

@typing.final
class AppWindow(winrt.system.Object, metaclass=AppWindow_Static):
    # Windows.Foundation.IAsyncAction Windows.UI.WindowManagement.AppWindow::CloseAsync()
    def close_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.DisplayRegion> Windows.UI.WindowManagement.AppWindow::GetDisplayRegions()
    def get_display_regions(self) -> typing.Sequence[DisplayRegion]: ...
    # Windows.UI.WindowManagement.AppWindowPlacement Windows.UI.WindowManagement.AppWindow::GetPlacement()
    def get_placement(self) -> AppWindowPlacement: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveAdjacentToCurrentView()
    def request_move_adjacent_to_current_view(self) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveAdjacentToWindow(Windows.UI.WindowManagement.AppWindow)
    def request_move_adjacent_to_window(self, anchor_window: AppWindow, /) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveRelativeToCurrentViewContent(Windows.Foundation.Point)
    def request_move_relative_to_current_view_content(self, content_offset: windows_foundation.Point, /) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveRelativeToDisplayRegion(Windows.UI.WindowManagement.DisplayRegion,Windows.Foundation.Point)
    def request_move_relative_to_display_region(self, display_region: DisplayRegion, display_region_offset: windows_foundation.Point, /) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveRelativeToWindowContent(Windows.UI.WindowManagement.AppWindow,Windows.Foundation.Point)
    def request_move_relative_to_window_content(self, anchor_window: AppWindow, content_offset: windows_foundation.Point, /) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestMoveToDisplayRegion(Windows.UI.WindowManagement.DisplayRegion)
    def request_move_to_display_region(self, display_region: DisplayRegion, /) -> None: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::RequestSize(Windows.Foundation.Size)
    def request_size(self, frame_size: windows_foundation.Size, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.WindowManagement.AppWindow::TryShowAsync()
    def try_show_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WindowManagement.AppWindow::add_Changed(Windows.Foundation.TypedEventHandler`2<Windows.UI.WindowManagement.AppWindow,Windows.UI.WindowManagement.AppWindowChangedEventArgs>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WindowManagement.AppWindow::add_CloseRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.WindowManagement.AppWindow,Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs>)
    def add_close_requested(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowCloseRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::remove_CloseRequested(Windows.Foundation.EventRegistrationToken)
    def remove_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WindowManagement.AppWindow::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.UI.WindowManagement.AppWindow,Windows.UI.WindowManagement.AppWindowClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.WindowManagement.AppWindow::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # System.String Windows.UI.WindowManagement.AppWindow::get_PersistedStateId()
    @_property
    def persisted_state_id(self) -> str: ...
    # System.Void Windows.UI.WindowManagement.AppWindow::put_PersistedStateId(System.String)
    @persisted_state_id.setter
    def persisted_state_id(self, value: str) -> None: ...
    # Windows.UI.UIContentRoot Windows.UI.WindowManagement.AppWindow::get_Content()
    @_property
    def content(self) -> windows_ui.UIContentRoot: ...
    # Windows.System.DispatcherQueue Windows.UI.WindowManagement.AppWindow::get_DispatcherQueue()
    @_property
    def dispatcher_queue(self) -> windows_system.DispatcherQueue: ...
    # Windows.UI.WindowManagement.AppWindowFrame Windows.UI.WindowManagement.AppWindow::get_Frame()
    @_property
    def frame(self) -> AppWindowFrame: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindow::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # Windows.UI.WindowManagement.AppWindowPresenter Windows.UI.WindowManagement.AppWindow::get_Presenter()
    @_property
    def presenter(self) -> AppWindowPresenter: ...
    # Windows.UI.WindowManagement.AppWindowTitleBar Windows.UI.WindowManagement.AppWindow::get_TitleBar()
    @_property
    def title_bar(self) -> AppWindowTitleBar: ...
    # Windows.UI.UIContext Windows.UI.WindowManagement.AppWindow::get_UIContext()
    @_property
    def ui_context(self) -> windows_ui.UIContext: ...
    # Windows.UI.WindowManagement.WindowingEnvironment Windows.UI.WindowManagement.AppWindow::get_WindowingEnvironment()
    @_property
    def windowing_environment(self) -> WindowingEnvironment: ...

@typing.final
class AppWindowChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidAvailableWindowPresentationsChange()
    @_property
    def did_available_window_presentations_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidDisplayRegionsChange()
    @_property
    def did_display_regions_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidFrameChange()
    @_property
    def did_frame_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidSizeChange()
    @_property
    def did_size_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidTitleBarChange()
    @_property
    def did_title_bar_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidVisibilityChange()
    @_property
    def did_visibility_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidWindowPresentationChange()
    @_property
    def did_window_presentation_change(self) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowChangedEventArgs::get_DidWindowingEnvironmentChange()
    @_property
    def did_windowing_environment_change(self) -> bool: ...

@typing.final
class AppWindowCloseRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class AppWindowClosedEventArgs(winrt.system.Object):
    # Windows.UI.WindowManagement.AppWindowClosedReason Windows.UI.WindowManagement.AppWindowClosedEventArgs::get_Reason()
    @_property
    def reason(self) -> AppWindowClosedReason: ...

@typing.final
class AppWindowFrame(winrt.system.Object):
    # Windows.UI.WindowManagement.AppWindowFrameStyle Windows.UI.WindowManagement.AppWindowFrame::GetFrameStyle()
    def get_frame_style(self) -> AppWindowFrameStyle: ...
    # System.Void Windows.UI.WindowManagement.AppWindowFrame::SetFrameStyle(Windows.UI.WindowManagement.AppWindowFrameStyle)
    def set_frame_style(self, frame_style: AppWindowFrameStyle, /) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Composition.IVisualElement> Windows.UI.WindowManagement.AppWindowFrame::get_DragRegionVisuals()
    @_property
    def drag_region_visuals(self) -> typing.MutableSequence[windows_ui_composition.IVisualElement]: ...

@typing.final
class AppWindowPlacement(winrt.system.Object):
    # Windows.UI.WindowManagement.DisplayRegion Windows.UI.WindowManagement.AppWindowPlacement::get_DisplayRegion()
    @_property
    def display_region(self) -> DisplayRegion: ...
    # Windows.Foundation.Point Windows.UI.WindowManagement.AppWindowPlacement::get_Offset()
    @_property
    def offset(self) -> windows_foundation.Point: ...
    # Windows.Foundation.Size Windows.UI.WindowManagement.AppWindowPlacement::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...

class AppWindowPresentationConfiguration_Static(type):
    pass

class AppWindowPresentationConfiguration(winrt.system.Object, metaclass=AppWindowPresentationConfiguration_Static):
    # Windows.UI.WindowManagement.AppWindowPresentationKind Windows.UI.WindowManagement.AppWindowPresentationConfiguration::get_Kind()
    @_property
    @typing.final
    def kind(self) -> AppWindowPresentationKind: ...

@typing.final
class AppWindowPresenter(winrt.system.Object):
    # Windows.UI.WindowManagement.AppWindowPresentationConfiguration Windows.UI.WindowManagement.AppWindowPresenter::GetConfiguration()
    def get_configuration(self) -> AppWindowPresentationConfiguration: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowPresenter::IsPresentationSupported(Windows.UI.WindowManagement.AppWindowPresentationKind)
    def is_presentation_supported(self, presentation_kind: AppWindowPresentationKind, /) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowPresenter::RequestPresentation(Windows.UI.WindowManagement.AppWindowPresentationConfiguration)
    def request_presentation(self, configuration: AppWindowPresentationConfiguration, /) -> bool: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowPresenter::RequestPresentation(Windows.UI.WindowManagement.AppWindowPresentationKind)
    def request_presentation_by_kind(self, presentation_kind: AppWindowPresentationKind, /) -> bool: ...

@typing.final
class AppWindowTitleBar(winrt.system.Object):
    # Windows.UI.WindowManagement.AppWindowTitleBarVisibility Windows.UI.WindowManagement.AppWindowTitleBar::GetPreferredVisibility()
    def get_preferred_visibility(self) -> AppWindowTitleBarVisibility: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.AppWindowTitleBarOcclusion> Windows.UI.WindowManagement.AppWindowTitleBar::GetTitleBarOcclusions()
    def get_title_bar_occlusions(self) -> typing.Sequence[AppWindowTitleBarOcclusion]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::SetPreferredVisibility(Windows.UI.WindowManagement.AppWindowTitleBarVisibility)
    def set_preferred_visibility(self, visibility_mode: AppWindowTitleBarVisibility, /) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_InactiveForegroundColor()
    @_property
    def inactive_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_InactiveForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @inactive_foreground_color.setter
    def inactive_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_InactiveBackgroundColor()
    @_property
    def inactive_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_InactiveBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @inactive_background_color.setter
    def inactive_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ForegroundColor()
    @_property
    def foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @foreground_color.setter
    def foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowTitleBar::get_ExtendsContentIntoTitleBar()
    @_property
    def extends_content_into_title_bar(self) -> bool: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ExtendsContentIntoTitleBar(System.Boolean)
    @extends_content_into_title_bar.setter
    def extends_content_into_title_bar(self, value: bool) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonPressedForegroundColor()
    @_property
    def button_pressed_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonPressedForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_pressed_foreground_color.setter
    def button_pressed_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonPressedBackgroundColor()
    @_property
    def button_pressed_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonPressedBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_pressed_background_color.setter
    def button_pressed_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonInactiveForegroundColor()
    @_property
    def button_inactive_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonInactiveForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_inactive_foreground_color.setter
    def button_inactive_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonInactiveBackgroundColor()
    @_property
    def button_inactive_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonInactiveBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_inactive_background_color.setter
    def button_inactive_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonHoverForegroundColor()
    @_property
    def button_hover_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonHoverForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_hover_foreground_color.setter
    def button_hover_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonHoverBackgroundColor()
    @_property
    def button_hover_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonHoverBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_hover_background_color.setter
    def button_hover_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonForegroundColor()
    @_property
    def button_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_foreground_color.setter
    def button_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_ButtonBackgroundColor()
    @_property
    def button_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_ButtonBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_background_color.setter
    def button_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.WindowManagement.AppWindowTitleBar::get_BackgroundColor()
    @_property
    def background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.WindowManagement.AppWindowTitleBar::put_BackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @background_color.setter
    def background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # System.Boolean Windows.UI.WindowManagement.AppWindowTitleBar::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...

@typing.final
class AppWindowTitleBarOcclusion(winrt.system.Object):
    # Windows.Foundation.Rect Windows.UI.WindowManagement.AppWindowTitleBarOcclusion::get_OccludingRect()
    @_property
    def occluding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class CompactOverlayPresentationConfiguration(AppWindowPresentationConfiguration):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class DefaultPresentationConfiguration(AppWindowPresentationConfiguration):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class DisplayRegion(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.UI.WindowManagement.DisplayRegion::add_Changed(Windows.Foundation.TypedEventHandler`2<Windows.UI.WindowManagement.DisplayRegion,System.Object>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[DisplayRegion, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WindowManagement.DisplayRegion::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.WindowManagement.DisplayRegion::get_DisplayMonitorDeviceId()
    @_property
    def display_monitor_device_id(self) -> str: ...
    # System.Boolean Windows.UI.WindowManagement.DisplayRegion::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # Windows.UI.WindowManagement.WindowingEnvironment Windows.UI.WindowManagement.DisplayRegion::get_WindowingEnvironment()
    @_property
    def windowing_environment(self) -> WindowingEnvironment: ...
    # Windows.Foundation.Point Windows.UI.WindowManagement.DisplayRegion::get_WorkAreaOffset()
    @_property
    def work_area_offset(self) -> windows_foundation.Point: ...
    # Windows.Foundation.Size Windows.UI.WindowManagement.DisplayRegion::get_WorkAreaSize()
    @_property
    def work_area_size(self) -> windows_foundation.Size: ...

@typing.final
class FullScreenPresentationConfiguration(AppWindowPresentationConfiguration):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.WindowManagement.FullScreenPresentationConfiguration::get_IsExclusive()
    @_property
    def is_exclusive(self) -> bool: ...
    # System.Void Windows.UI.WindowManagement.FullScreenPresentationConfiguration::put_IsExclusive(System.Boolean)
    @is_exclusive.setter
    def is_exclusive(self, value: bool) -> None: ...

@typing.final
class WindowServices_Static(type):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowId> Windows.UI.WindowManagement.WindowServices::FindAllTopLevelWindowIds()
    def find_all_top_level_window_ids(cls) -> typing.Sequence[windows_ui.WindowId]: ...

@typing.final
class WindowServices(winrt.system.Object, metaclass=WindowServices_Static):
    pass

@typing.final
class WindowingEnvironment_Static(type):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.WindowingEnvironment> Windows.UI.WindowManagement.WindowingEnvironment::FindAll()
    def find_all(cls) -> typing.Sequence[WindowingEnvironment]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.WindowingEnvironment> Windows.UI.WindowManagement.WindowingEnvironment::FindAll(Windows.UI.WindowManagement.WindowingEnvironmentKind)
    def find_all_with_kind(cls, kind: WindowingEnvironmentKind, /) -> typing.Sequence[WindowingEnvironment]: ...

@typing.final
class WindowingEnvironment(winrt.system.Object, metaclass=WindowingEnvironment_Static):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.DisplayRegion> Windows.UI.WindowManagement.WindowingEnvironment::GetDisplayRegions()
    def get_display_regions(self) -> typing.Sequence[DisplayRegion]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WindowManagement.WindowingEnvironment::add_Changed(Windows.Foundation.TypedEventHandler`2<Windows.UI.WindowManagement.WindowingEnvironment,Windows.UI.WindowManagement.WindowingEnvironmentChangedEventArgs>)
    def add_changed(self, handler: windows_foundation.TypedEventHandler[WindowingEnvironment, WindowingEnvironmentChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WindowManagement.WindowingEnvironment::remove_Changed(Windows.Foundation.EventRegistrationToken)
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.WindowManagement.WindowingEnvironment::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # Windows.UI.WindowManagement.WindowingEnvironmentKind Windows.UI.WindowManagement.WindowingEnvironment::get_Kind()
    @_property
    def kind(self) -> WindowingEnvironmentKind: ...

@typing.final
class WindowingEnvironmentAddedEventArgs(winrt.system.Object):
    # Windows.UI.WindowManagement.WindowingEnvironment Windows.UI.WindowManagement.WindowingEnvironmentAddedEventArgs::get_WindowingEnvironment()
    @_property
    def windowing_environment(self) -> WindowingEnvironment: ...

@typing.final
class WindowingEnvironmentChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class WindowingEnvironmentRemovedEventArgs(winrt.system.Object):
    # Windows.UI.WindowManagement.WindowingEnvironment Windows.UI.WindowManagement.WindowingEnvironmentRemovedEventArgs::get_WindowingEnvironment()
    @_property
    def windowing_environment(self) -> WindowingEnvironment: ...

