# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.composition as windows_ui_composition

from winrt.windows.ui.windowmanagement import AppWindowClosedReason, AppWindowFrameStyle, AppWindowPresentationKind, AppWindowTitleBarVisibility, WindowingEnvironmentKind

Self = typing.TypeVar('Self')

@typing.final
class AppWindow_Static(type):
    def clear_all_persisted_state(cls) -> None: ...
    def clear_persisted_state(cls, key: str, /) -> None: ...
    def try_create_async(cls) -> windows_foundation.IAsyncOperation[AppWindow]: ...

@typing.final
class AppWindow(winrt.system.Object, metaclass=AppWindow_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindow: ...
    def close_async(self) -> windows_foundation.IAsyncAction: ...
    def get_display_regions(self) -> typing.Optional[windows_foundation_collections.IVectorView[DisplayRegion]]: ...
    def get_placement(self) -> typing.Optional[AppWindowPlacement]: ...
    def request_move_adjacent_to_current_view(self) -> None: ...
    def request_move_adjacent_to_window(self, anchor_window: typing.Optional[AppWindow], /) -> None: ...
    def request_move_relative_to_current_view_content(self, content_offset: windows_foundation.Point, /) -> None: ...
    def request_move_relative_to_display_region(self, display_region: typing.Optional[DisplayRegion], display_region_offset: windows_foundation.Point, /) -> None: ...
    def request_move_relative_to_window_content(self, anchor_window: typing.Optional[AppWindow], content_offset: windows_foundation.Point, /) -> None: ...
    def request_move_to_display_region(self, display_region: typing.Optional[DisplayRegion], /) -> None: ...
    def request_size(self, frame_size: windows_foundation.Size, /) -> None: ...
    def try_show_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_changed(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_close_requested(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowCloseRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[AppWindow, AppWindowClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def persisted_state_id(self) -> str: ...
    @persisted_state_id.setter
    def persisted_state_id(self, value: str) -> None: ...
    @_property
    def content(self) -> typing.Optional[windows_ui.UIContentRoot]: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[windows_system.DispatcherQueue]: ...
    @_property
    def frame(self) -> typing.Optional[AppWindowFrame]: ...
    @_property
    def is_visible(self) -> bool: ...
    @_property
    def presenter(self) -> typing.Optional[AppWindowPresenter]: ...
    @_property
    def title_bar(self) -> typing.Optional[AppWindowTitleBar]: ...
    @_property
    def u_i_context(self) -> typing.Optional[windows_ui.UIContext]: ...
    @_property
    def windowing_environment(self) -> typing.Optional[WindowingEnvironment]: ...

@typing.final
class AppWindowChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowChangedEventArgs: ...
    @_property
    def did_available_window_presentations_change(self) -> bool: ...
    @_property
    def did_display_regions_change(self) -> bool: ...
    @_property
    def did_frame_change(self) -> bool: ...
    @_property
    def did_size_change(self) -> bool: ...
    @_property
    def did_title_bar_change(self) -> bool: ...
    @_property
    def did_visibility_change(self) -> bool: ...
    @_property
    def did_window_presentation_change(self) -> bool: ...
    @_property
    def did_windowing_environment_change(self) -> bool: ...

@typing.final
class AppWindowCloseRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowCloseRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_foundation.Deferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class AppWindowClosedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowClosedEventArgs: ...
    @_property
    def reason(self) -> AppWindowClosedReason: ...

@typing.final
class AppWindowFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowFrame: ...
    def get_frame_style(self) -> AppWindowFrameStyle: ...
    def set_frame_style(self, frame_style: AppWindowFrameStyle, /) -> None: ...
    @_property
    def drag_region_visuals(self) -> typing.Optional[windows_foundation_collections.IVector[windows_ui_composition.IVisualElement]]: ...

@typing.final
class AppWindowPlacement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPlacement: ...
    @_property
    def display_region(self) -> typing.Optional[DisplayRegion]: ...
    @_property
    def offset(self) -> windows_foundation.Point: ...
    @_property
    def size(self) -> windows_foundation.Size: ...

@typing.final
class AppWindowPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPresentationConfiguration: ...
    @_property
    def kind(self) -> AppWindowPresentationKind: ...

@typing.final
class AppWindowPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPresenter: ...
    def get_configuration(self) -> typing.Optional[AppWindowPresentationConfiguration]: ...
    def is_presentation_supported(self, presentation_kind: AppWindowPresentationKind, /) -> bool: ...
    def request_presentation(self, presentation_kind: AppWindowPresentationKind, /) -> bool: ...

@typing.final
class AppWindowTitleBar(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowTitleBar: ...
    def get_preferred_visibility(self) -> AppWindowTitleBarVisibility: ...
    def get_title_bar_occlusions(self) -> typing.Optional[windows_foundation_collections.IVectorView[AppWindowTitleBarOcclusion]]: ...
    def set_preferred_visibility(self, visibility_mode: AppWindowTitleBarVisibility, /) -> None: ...
    @_property
    def inactive_foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @inactive_foreground_color.setter
    def inactive_foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def inactive_background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @inactive_background_color.setter
    def inactive_background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @foreground_color.setter
    def foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def extends_content_into_title_bar(self) -> bool: ...
    @extends_content_into_title_bar.setter
    def extends_content_into_title_bar(self, value: bool) -> None: ...
    @_property
    def button_pressed_foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_pressed_foreground_color.setter
    def button_pressed_foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_pressed_background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_pressed_background_color.setter
    def button_pressed_background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_inactive_foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_inactive_foreground_color.setter
    def button_inactive_foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_inactive_background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_inactive_background_color.setter
    def button_inactive_background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_hover_foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_hover_foreground_color.setter
    def button_hover_foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_hover_background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_hover_background_color.setter
    def button_hover_background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_foreground_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_foreground_color.setter
    def button_foreground_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def button_background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @button_background_color.setter
    def button_background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def background_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @background_color.setter
    def background_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def is_visible(self) -> bool: ...

@typing.final
class AppWindowTitleBarOcclusion(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowTitleBarOcclusion: ...
    @_property
    def occluding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class CompactOverlayPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompactOverlayPresentationConfiguration: ...
    def __new__(cls: typing.Type[CompactOverlayPresentationConfiguration]) -> CompactOverlayPresentationConfiguration: ...
    @_property
    def kind(self) -> AppWindowPresentationKind: ...

@typing.final
class DefaultPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DefaultPresentationConfiguration: ...
    def __new__(cls: typing.Type[DefaultPresentationConfiguration]) -> DefaultPresentationConfiguration: ...
    @_property
    def kind(self) -> AppWindowPresentationKind: ...

@typing.final
class DisplayRegion(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayRegion: ...
    def add_changed(self, handler: windows_foundation.TypedEventHandler[DisplayRegion, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def display_monitor_device_id(self) -> str: ...
    @_property
    def is_visible(self) -> bool: ...
    @_property
    def windowing_environment(self) -> typing.Optional[WindowingEnvironment]: ...
    @_property
    def work_area_offset(self) -> windows_foundation.Point: ...
    @_property
    def work_area_size(self) -> windows_foundation.Size: ...

@typing.final
class FullScreenPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FullScreenPresentationConfiguration: ...
    def __new__(cls: typing.Type[FullScreenPresentationConfiguration]) -> FullScreenPresentationConfiguration: ...
    @_property
    def is_exclusive(self) -> bool: ...
    @is_exclusive.setter
    def is_exclusive(self, value: bool) -> None: ...
    @_property
    def kind(self) -> AppWindowPresentationKind: ...

@typing.final
class WindowServices_Static(type):
    def find_all_top_level_window_ids(cls) -> typing.Optional[windows_foundation_collections.IVectorView[windows_ui.WindowId]]: ...

@typing.final
class WindowServices(winrt.system.Object, metaclass=WindowServices_Static):
    pass

@typing.final
class WindowingEnvironment_Static(type):
    @typing.overload
    def find_all(cls) -> typing.Optional[windows_foundation_collections.IVectorView[WindowingEnvironment]]: ...
    @typing.overload
    def find_all(cls, kind: WindowingEnvironmentKind, /) -> typing.Optional[windows_foundation_collections.IVectorView[WindowingEnvironment]]: ...

@typing.final
class WindowingEnvironment(winrt.system.Object, metaclass=WindowingEnvironment_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironment: ...
    def get_display_regions(self) -> typing.Optional[windows_foundation_collections.IVectorView[DisplayRegion]]: ...
    def add_changed(self, handler: windows_foundation.TypedEventHandler[WindowingEnvironment, WindowingEnvironmentChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def kind(self) -> WindowingEnvironmentKind: ...

@typing.final
class WindowingEnvironmentAddedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentAddedEventArgs: ...
    @_property
    def windowing_environment(self) -> typing.Optional[WindowingEnvironment]: ...

@typing.final
class WindowingEnvironmentChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentChangedEventArgs: ...

@typing.final
class WindowingEnvironmentRemovedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentRemovedEventArgs: ...
    @_property
    def windowing_environment(self) -> typing.Optional[WindowingEnvironment]: ...

