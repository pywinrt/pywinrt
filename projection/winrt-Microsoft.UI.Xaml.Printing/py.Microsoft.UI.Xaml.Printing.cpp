// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.UI.Xaml.Printing.h"


namespace py::cpp::Microsoft::UI::Xaml::Printing
{
    // ----- AddPagesEventArgs class --------------------

    static PyObject* _new_AddPagesEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Printing::AddPagesEventArgs instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AddPagesEventArgs(py::wrapper::Microsoft::UI::Xaml::Printing::AddPagesEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AddPagesEventArgs_get_PrintTaskOptions(py::wrapper::Microsoft::UI::Xaml::Printing::AddPagesEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.AddPagesEventArgs", L"PrintTaskOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrintTaskOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AddPagesEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Printing::AddPagesEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AddPagesEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Printing::AddPagesEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AddPagesEventArgs[] = {
        { "_assign_array_", _assign_array_AddPagesEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AddPagesEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AddPagesEventArgs[] = {
        { "print_task_options", reinterpret_cast<getter>(AddPagesEventArgs_get_PrintTaskOptions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AddPagesEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AddPagesEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AddPagesEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AddPagesEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AddPagesEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AddPagesEventArgs =
    {
        "winrt._winrt_microsoft_ui_xaml_printing.AddPagesEventArgs",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Printing::AddPagesEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AddPagesEventArgs
    };

    // ----- GetPreviewPageEventArgs class --------------------

    static PyObject* _new_GetPreviewPageEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_GetPreviewPageEventArgs(py::wrapper::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GetPreviewPageEventArgs_get_PageNumber(py::wrapper::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.GetPreviewPageEventArgs", L"PageNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GetPreviewPageEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GetPreviewPageEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GetPreviewPageEventArgs[] = {
        { "_assign_array_", _assign_array_GetPreviewPageEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GetPreviewPageEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GetPreviewPageEventArgs[] = {
        { "page_number", reinterpret_cast<getter>(GetPreviewPageEventArgs_get_PageNumber), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GetPreviewPageEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GetPreviewPageEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GetPreviewPageEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GetPreviewPageEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GetPreviewPageEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GetPreviewPageEventArgs =
    {
        "winrt._winrt_microsoft_ui_xaml_printing.GetPreviewPageEventArgs",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Printing::GetPreviewPageEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GetPreviewPageEventArgs
    };

    // ----- PaginateEventArgs class --------------------

    static PyObject* _new_PaginateEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Printing::PaginateEventArgs instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaginateEventArgs(py::wrapper::Microsoft::UI::Xaml::Printing::PaginateEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PaginateEventArgs_get_CurrentPreviewPageNumber(py::wrapper::Microsoft::UI::Xaml::Printing::PaginateEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.PaginateEventArgs", L"CurrentPreviewPageNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrentPreviewPageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaginateEventArgs_get_PrintTaskOptions(py::wrapper::Microsoft::UI::Xaml::Printing::PaginateEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.PaginateEventArgs", L"PrintTaskOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrintTaskOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PaginateEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Printing::PaginateEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PaginateEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Printing::PaginateEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaginateEventArgs[] = {
        { "_assign_array_", _assign_array_PaginateEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PaginateEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PaginateEventArgs[] = {
        { "current_preview_page_number", reinterpret_cast<getter>(PaginateEventArgs_get_CurrentPreviewPageNumber), nullptr, nullptr, nullptr },
        { "print_task_options", reinterpret_cast<getter>(PaginateEventArgs_get_PrintTaskOptions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PaginateEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PaginateEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PaginateEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PaginateEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PaginateEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PaginateEventArgs =
    {
        "winrt._winrt_microsoft_ui_xaml_printing.PaginateEventArgs",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Printing::PaginateEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaginateEventArgs
    };

    // ----- PrintDocument class --------------------

    static PyObject* _new_PrintDocument(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Printing::PrintDocument instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PrintDocument(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintDocument_AddPage(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"AddPage", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);

                self->obj.AddPage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintDocument_AddPagesComplete(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"AddPagesComplete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.AddPagesComplete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintDocument_InvalidatePreview(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"InvalidatePreview", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.InvalidatePreview();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintDocument_SetPreviewPage(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"SetPreviewPage", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 1);

                self->obj.SetPreviewPage(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintDocument_SetPreviewPageCount(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"SetPreviewPageCount", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Xaml::Printing::PreviewPageCountType>(args, 1);

                self->obj.SetPreviewPageCount(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintDocument_get_DocumentSource(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"DocumentSource"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_get_DocumentSourceProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"DocumentSourceProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Printing::PrintDocument::DocumentSourceProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_add_AddPages(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"AddPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Printing::AddPagesEventHandler>(arg);

            return py::convert(self->obj.AddPages(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_remove_AddPages(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"AddPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AddPages(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_add_GetPreviewPage(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"GetPreviewPage"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Printing::GetPreviewPageEventHandler>(arg);

            return py::convert(self->obj.GetPreviewPage(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_remove_GetPreviewPage(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"GetPreviewPage"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GetPreviewPage(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_add_Paginate(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"Paginate"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Printing::PaginateEventHandler>(arg);

            return py::convert(self->obj.Paginate(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintDocument_remove_Paginate(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Printing.PrintDocument", L"Paginate"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Paginate(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintDocument(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Printing::PrintDocument>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintDocument(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Printing::PrintDocument>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintDocument[] = {
        { "add_page", reinterpret_cast<PyCFunction>(PrintDocument_AddPage), METH_VARARGS, nullptr },
        { "add_pages_complete", reinterpret_cast<PyCFunction>(PrintDocument_AddPagesComplete), METH_VARARGS, nullptr },
        { "invalidate_preview", reinterpret_cast<PyCFunction>(PrintDocument_InvalidatePreview), METH_VARARGS, nullptr },
        { "set_preview_page", reinterpret_cast<PyCFunction>(PrintDocument_SetPreviewPage), METH_VARARGS, nullptr },
        { "set_preview_page_count", reinterpret_cast<PyCFunction>(PrintDocument_SetPreviewPageCount), METH_VARARGS, nullptr },
        { "add_add_pages", reinterpret_cast<PyCFunction>(PrintDocument_add_AddPages), METH_O, nullptr },
        { "remove_add_pages", reinterpret_cast<PyCFunction>(PrintDocument_remove_AddPages), METH_O, nullptr },
        { "add_get_preview_page", reinterpret_cast<PyCFunction>(PrintDocument_add_GetPreviewPage), METH_O, nullptr },
        { "remove_get_preview_page", reinterpret_cast<PyCFunction>(PrintDocument_remove_GetPreviewPage), METH_O, nullptr },
        { "add_paginate", reinterpret_cast<PyCFunction>(PrintDocument_add_Paginate), METH_O, nullptr },
        { "remove_paginate", reinterpret_cast<PyCFunction>(PrintDocument_remove_Paginate), METH_O, nullptr },
        { "_assign_array_", _assign_array_PrintDocument, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintDocument), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintDocument[] = {
        { "document_source", reinterpret_cast<getter>(PrintDocument_get_DocumentSource), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintDocument[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintDocument) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintDocument) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintDocument) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintDocument) },
        { },
    };

    static PyType_Spec type_spec_PrintDocument =
    {
        "winrt._winrt_microsoft_ui_xaml_printing.PrintDocument",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Printing::PrintDocument),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintDocument
    };

    static PyGetSetDef getset_PrintDocument_Static[] = {
        { "document_source_property", reinterpret_cast<getter>(PrintDocument_get_DocumentSourceProperty), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_PrintDocument_Static[] = {
        { }
    };

    static PyType_Slot type_slots_PrintDocument_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PrintDocument_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PrintDocument_Static) },
        { }
    };

    static PyType_Spec type_spec_PrintDocument_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_printing.PrintDocument_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PrintDocument_Static
    };

    // ----- Microsoft.UI.Xaml.Printing Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::UI::Xaml::Printing");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_ui_xaml_printing",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::UI::Xaml::Printing

PyMODINIT_FUNC PyInit__winrt_microsoft_ui_xaml_printing(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Xaml::Printing;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AddPagesEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GetPreviewPageEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PaginateEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_PrintDocument_Static{PyType_FromSpec(&type_spec_PrintDocument_Static)};
    if (!type_PrintDocument_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintDocument, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PrintDocument_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
