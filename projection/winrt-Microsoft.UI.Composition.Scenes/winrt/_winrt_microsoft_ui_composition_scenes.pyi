# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.graphics.directx as microsoft_graphics_directx
import winrt.microsoft.ui.composition as microsoft_ui_composition
import winrt.microsoft.ui.dispatching as microsoft_ui_dispatching
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics

from winrt.microsoft.ui.composition.scenes import SceneAlphaMode, SceneAttributeSemantic, SceneComponentType, SceneWrappingMode

Self = typing.TypeVar('Self')

@typing.final
class SceneBoundingBox(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneBoundingBox: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def center(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def extents(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def max(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def min(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def size(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneComponent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneComponent: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def component_type(self) -> SceneComponentType: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneComponentCollection(winrt.system.Object, winrt._winrt.MutableSequence[SceneComponent]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[SceneComponent]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> SceneComponent: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[SceneComponent]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: SceneComponent) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[SceneComponent]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneComponentCollection: ...
    def append(self, value: typing.Optional[SceneComponent], /) -> None: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[SceneComponent]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[SceneComponent]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[SceneComponent], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[SceneComponent]]: ...
    def index_of(self, value: typing.Optional[SceneComponent], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[SceneComponent], /) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[SceneComponent], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[SceneComponent], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMaterial(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMaterial: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMaterialInput(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMaterialInput: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMesh_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneMesh]: ...

@typing.final
class SceneMesh(winrt.system.Object, metaclass=SceneMesh_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMesh: ...
    def close(self) -> None: ...
    def fill_mesh_attribute(self, semantic: SceneAttributeSemantic, format: microsoft_graphics_directx.DirectXPixelFormat, memory: typing.Optional[windows_foundation.MemoryBuffer], /) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def primitive_topology(self) -> microsoft_graphics_directx.DirectXPrimitiveTopology: ...
    @primitive_topology.setter
    def primitive_topology(self, value: microsoft_graphics_directx.DirectXPrimitiveTopology) -> None: ...
    @_property
    def bounds(self) -> typing.Optional[SceneBoundingBox]: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMeshMaterialAttributeMap(winrt.system.Object, winrt._winrt.MutableMapping[str, SceneAttributeSemantic]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> SceneAttributeSemantic: ...
    def __setitem__(self, key: str, value: SceneAttributeSemantic) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMeshMaterialAttributeMap: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, SceneAttributeSemantic]]]: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IMapView[str, SceneAttributeSemantic]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: SceneAttributeSemantic, /) -> bool: ...
    def lookup(self, key: str, /) -> SceneAttributeSemantic: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    def remove(self, key: str, /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMeshRendererComponent_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneMeshRendererComponent]: ...

@typing.final
class SceneMeshRendererComponent(winrt.system.Object, metaclass=SceneMeshRendererComponent_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMeshRendererComponent: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def mesh(self) -> typing.Optional[SceneMesh]: ...
    @mesh.setter
    def mesh(self, value: typing.Optional[SceneMesh]) -> None: ...
    @_property
    def material(self) -> typing.Optional[SceneMaterial]: ...
    @material.setter
    def material(self, value: typing.Optional[SceneMaterial]) -> None: ...
    @_property
    def u_v_mappings(self) -> typing.Optional[SceneMeshMaterialAttributeMap]: ...
    @_property
    def component_type(self) -> SceneComponentType: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneMetallicRoughnessMaterial_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneMetallicRoughnessMaterial]: ...

@typing.final
class SceneMetallicRoughnessMaterial(winrt.system.Object, metaclass=SceneMetallicRoughnessMaterial_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneMetallicRoughnessMaterial: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def roughness_factor(self) -> winrt.system.Single: ...
    @roughness_factor.setter
    def roughness_factor(self, value: winrt.system.Single) -> None: ...
    @_property
    def metallic_roughness_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @metallic_roughness_input.setter
    def metallic_roughness_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def metallic_factor(self) -> winrt.system.Single: ...
    @metallic_factor.setter
    def metallic_factor(self, value: winrt.system.Single) -> None: ...
    @_property
    def base_color_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @base_color_input.setter
    def base_color_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def base_color_factor(self) -> windows_foundation_numerics.Vector4: ...
    @base_color_factor.setter
    def base_color_factor(self, value: windows_foundation_numerics.Vector4) -> None: ...
    @_property
    def occlusion_strength(self) -> winrt.system.Single: ...
    @occlusion_strength.setter
    def occlusion_strength(self, value: winrt.system.Single) -> None: ...
    @_property
    def occlusion_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @occlusion_input.setter
    def occlusion_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def normal_scale(self) -> winrt.system.Single: ...
    @normal_scale.setter
    def normal_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def normal_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @normal_input.setter
    def normal_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def is_double_sided(self) -> bool: ...
    @is_double_sided.setter
    def is_double_sided(self, value: bool) -> None: ...
    @_property
    def emissive_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @emissive_input.setter
    def emissive_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def emissive_factor(self) -> windows_foundation_numerics.Vector3: ...
    @emissive_factor.setter
    def emissive_factor(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def alpha_mode(self) -> SceneAlphaMode: ...
    @alpha_mode.setter
    def alpha_mode(self, value: SceneAlphaMode) -> None: ...
    @_property
    def alpha_cutoff(self) -> winrt.system.Single: ...
    @alpha_cutoff.setter
    def alpha_cutoff(self, value: winrt.system.Single) -> None: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneModelTransform(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneModelTransform: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def translation(self) -> windows_foundation_numerics.Vector3: ...
    @translation.setter
    def translation(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    @scale.setter
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_axis(self) -> windows_foundation_numerics.Vector3: ...
    @rotation_axis.setter
    def rotation_axis(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def orientation(self) -> windows_foundation_numerics.Quaternion: ...
    @orientation.setter
    def orientation(self, value: windows_foundation_numerics.Quaternion) -> None: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneNode_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneNode]: ...

@typing.final
class SceneNode(winrt.system.Object, metaclass=SceneNode_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneNode: ...
    def close(self) -> None: ...
    def find_first_component_of_type(self, value: SceneComponentType, /) -> typing.Optional[SceneComponent]: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def children(self) -> typing.Optional[SceneNodeCollection]: ...
    @_property
    def components(self) -> typing.Optional[SceneComponentCollection]: ...
    @_property
    def parent(self) -> typing.Optional[SceneNode]: ...
    @_property
    def transform(self) -> typing.Optional[SceneModelTransform]: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneNodeCollection(winrt.system.Object, winrt._winrt.MutableSequence[SceneNode]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[SceneNode]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> SceneNode: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[SceneNode]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: SceneNode) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[SceneNode]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneNodeCollection: ...
    def append(self, value: typing.Optional[SceneNode], /) -> None: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[SceneNode]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[SceneNode]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[SceneNode], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[SceneNode]]: ...
    def index_of(self, value: typing.Optional[SceneNode], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[SceneNode], /) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[SceneNode], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[SceneNode], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneObject(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneObject: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class ScenePbrMaterial(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScenePbrMaterial: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def occlusion_strength(self) -> winrt.system.Single: ...
    @occlusion_strength.setter
    def occlusion_strength(self, value: winrt.system.Single) -> None: ...
    @_property
    def occlusion_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @occlusion_input.setter
    def occlusion_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def normal_scale(self) -> winrt.system.Single: ...
    @normal_scale.setter
    def normal_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def normal_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @normal_input.setter
    def normal_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def is_double_sided(self) -> bool: ...
    @is_double_sided.setter
    def is_double_sided(self, value: bool) -> None: ...
    @_property
    def emissive_input(self) -> typing.Optional[SceneMaterialInput]: ...
    @emissive_input.setter
    def emissive_input(self, value: typing.Optional[SceneMaterialInput]) -> None: ...
    @_property
    def emissive_factor(self) -> windows_foundation_numerics.Vector3: ...
    @emissive_factor.setter
    def emissive_factor(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def alpha_mode(self) -> SceneAlphaMode: ...
    @alpha_mode.setter
    def alpha_mode(self, value: SceneAlphaMode) -> None: ...
    @_property
    def alpha_cutoff(self) -> winrt.system.Single: ...
    @alpha_cutoff.setter
    def alpha_cutoff(self, value: winrt.system.Single) -> None: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneRendererComponent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneRendererComponent: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def component_type(self) -> SceneComponentType: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneSurfaceMaterialInput_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneSurfaceMaterialInput]: ...

@typing.final
class SceneSurfaceMaterialInput(winrt.system.Object, metaclass=SceneSurfaceMaterialInput_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneSurfaceMaterialInput: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def wrapping_v_mode(self) -> SceneWrappingMode: ...
    @wrapping_v_mode.setter
    def wrapping_v_mode(self, value: SceneWrappingMode) -> None: ...
    @_property
    def wrapping_u_mode(self) -> SceneWrappingMode: ...
    @wrapping_u_mode.setter
    def wrapping_u_mode(self, value: SceneWrappingMode) -> None: ...
    @_property
    def surface(self) -> typing.Optional[microsoft_ui_composition.ICompositionSurface]: ...
    @surface.setter
    def surface(self, value: typing.Optional[microsoft_ui_composition.ICompositionSurface]) -> None: ...
    @_property
    def bitmap_interpolation_mode(self) -> microsoft_ui_composition.CompositionBitmapInterpolationMode: ...
    @bitmap_interpolation_mode.setter
    def bitmap_interpolation_mode(self, value: microsoft_ui_composition.CompositionBitmapInterpolationMode) -> None: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

@typing.final
class SceneVisual_Static(type):
    def create(cls, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Optional[SceneVisual]: ...

@typing.final
class SceneVisual(winrt.system.Object, metaclass=SceneVisual_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SceneVisual: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[microsoft_ui_composition.AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[microsoft_ui_composition.CompositionAnimation], animation_controller: typing.Optional[microsoft_ui_composition.AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[microsoft_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[microsoft_ui_composition.AnimationController]: ...
    @_property
    def root(self) -> typing.Optional[SceneNode]: ...
    @root.setter
    def root(self, value: typing.Optional[SceneNode]) -> None: ...
    @_property
    def children(self) -> typing.Optional[microsoft_ui_composition.VisualCollection]: ...
    @_property
    def transform_matrix(self) -> windows_foundation_numerics.Matrix4x4: ...
    @transform_matrix.setter
    def transform_matrix(self, value: windows_foundation_numerics.Matrix4x4) -> None: ...
    @_property
    def size(self) -> windows_foundation_numerics.Vector2: ...
    @size.setter
    def size(self, value: windows_foundation_numerics.Vector2) -> None: ...
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    @scale.setter
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_axis(self) -> windows_foundation_numerics.Vector3: ...
    @rotation_axis.setter
    def rotation_axis(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def orientation(self) -> windows_foundation_numerics.Quaternion: ...
    @orientation.setter
    def orientation(self, value: windows_foundation_numerics.Quaternion) -> None: ...
    @_property
    def opacity(self) -> winrt.system.Single: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> windows_foundation_numerics.Vector3: ...
    @offset.setter
    def offset(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    @_property
    def composite_mode(self) -> microsoft_ui_composition.CompositionCompositeMode: ...
    @composite_mode.setter
    def composite_mode(self, value: microsoft_ui_composition.CompositionCompositeMode) -> None: ...
    @_property
    def clip(self) -> typing.Optional[microsoft_ui_composition.CompositionClip]: ...
    @clip.setter
    def clip(self, value: typing.Optional[microsoft_ui_composition.CompositionClip]) -> None: ...
    @_property
    def center_point(self) -> windows_foundation_numerics.Vector3: ...
    @center_point.setter
    def center_point(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def border_mode(self) -> microsoft_ui_composition.CompositionBorderMode: ...
    @border_mode.setter
    def border_mode(self, value: microsoft_ui_composition.CompositionBorderMode) -> None: ...
    @_property
    def backface_visibility(self) -> microsoft_ui_composition.CompositionBackfaceVisibility: ...
    @backface_visibility.setter
    def backface_visibility(self, value: microsoft_ui_composition.CompositionBackfaceVisibility) -> None: ...
    @_property
    def anchor_point(self) -> windows_foundation_numerics.Vector2: ...
    @anchor_point.setter
    def anchor_point(self, value: windows_foundation_numerics.Vector2) -> None: ...
    @_property
    def parent(self) -> typing.Optional[microsoft_ui_composition.ContainerVisual]: ...
    @_property
    def relative_size_adjustment(self) -> windows_foundation_numerics.Vector2: ...
    @relative_size_adjustment.setter
    def relative_size_adjustment(self, value: windows_foundation_numerics.Vector2) -> None: ...
    @_property
    def relative_offset_adjustment(self) -> windows_foundation_numerics.Vector3: ...
    @relative_offset_adjustment.setter
    def relative_offset_adjustment(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def parent_for_transform(self) -> typing.Optional[microsoft_ui_composition.Visual]: ...
    @parent_for_transform.setter
    def parent_for_transform(self, value: typing.Optional[microsoft_ui_composition.Visual]) -> None: ...
    @_property
    def is_hit_test_visible(self) -> bool: ...
    @is_hit_test_visible.setter
    def is_hit_test_visible(self, value: bool) -> None: ...
    @_property
    def is_pixel_snapping_enabled(self) -> bool: ...
    @is_pixel_snapping_enabled.setter
    def is_pixel_snapping_enabled(self, value: bool) -> None: ...
    @_property
    def compositor(self) -> typing.Optional[microsoft_ui_composition.Compositor]: ...
    @_property
    def properties(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[microsoft_ui_composition.ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[microsoft_ui_dispatching.DispatcherQueue]: ...

