# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.windows.globalization.datetimeformatting import DayFormat, DayOfWeekFormat, HourFormat, MinuteFormat, MonthFormat, SecondFormat, YearFormat

Self = typing.TypeVar('Self')

@typing.final
class DateTimeFormatter_Static(type):
    @_property
    def long_date(cls) -> typing.Optional[DateTimeFormatter]: ...
    @_property
    def long_time(cls) -> typing.Optional[DateTimeFormatter]: ...
    @_property
    def short_date(cls) -> typing.Optional[DateTimeFormatter]: ...
    @_property
    def short_time(cls) -> typing.Optional[DateTimeFormatter]: ...

@typing.final
class DateTimeFormatter(winrt.system.Object, metaclass=DateTimeFormatter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DateTimeFormatter: ...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str, languages: typing.Iterable[str]) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str, languages: typing.Iterable[str], geographic_region: str, calendar: str, clock: str) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat, hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat, languages: typing.Iterable[str]) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat, hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat, languages: typing.Iterable[str], geographic_region: str, calendar: str, clock: str) -> DateTimeFormatter:...
    @typing.overload
    def format(self, value: datetime.datetime, /) -> str: ...
    @typing.overload
    def format(self, datetime: datetime.datetime, time_zone_id: str, /) -> str: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def clock(self) -> str: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def include_day(self) -> DayFormat: ...
    @_property
    def include_day_of_week(self) -> DayOfWeekFormat: ...
    @_property
    def include_hour(self) -> HourFormat: ...
    @_property
    def include_minute(self) -> MinuteFormat: ...
    @_property
    def include_month(self) -> MonthFormat: ...
    @_property
    def include_second(self) -> SecondFormat: ...
    @_property
    def include_year(self) -> YearFormat: ...
    @_property
    def languages(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def calendar(self) -> str: ...
    @_property
    def patterns(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def template(self) -> str: ...

