# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel as windows_applicationmodel
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage
import winrt.windows.storage.search as windows_storage_search
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system.diagnostics as windows_system_diagnostics
import winrt.windows.system.remotesystems as windows_system_remotesystems
import winrt.windows.ui.popups as windows_ui_popups
import winrt.windows.ui.viewmanagement as windows_ui_viewmanagement

from winrt.windows.system import AppDiagnosticInfoWatcherStatus, AppMemoryUsageLevel, AppResourceGroupEnergyQuotaState, AppResourceGroupExecutionState, AppResourceGroupInfoWatcherStatus, AutoUpdateTimeZoneStatus, DiagnosticAccessStatus, DispatcherQueuePriority, LaunchFileStatus, LaunchQuerySupportStatus, LaunchQuerySupportType, LaunchUriStatus, PowerState, ProcessorArchitecture, RemoteLaunchUriStatus, ShutdownKind, UserAgeConsentGroup, UserAgeConsentResult, UserAuthenticationStatus, UserPictureSize, UserType, UserWatcherStatus, UserWatcherUpdateKind, VirtualKey, VirtualKeyModifiers
from winrt.windows.system import DispatcherQueueHandler

Self = typing.TypeVar('Self')

@typing.final
class AppActivationResult(winrt.system.Object):
    # Windows.System.AppResourceGroupInfo Windows.System.AppActivationResult::get_AppResourceGroupInfo()
    @_property
    def app_resource_group_info(self) -> AppResourceGroupInfo: ...
    # Windows.Foundation.HResult Windows.System.AppActivationResult::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...

@typing.final
class AppDiagnosticInfo_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.AppDiagnosticInfoWatcher Windows.System.AppDiagnosticInfo::CreateWatcher()
    def create_watcher(cls) -> AppDiagnosticInfoWatcher: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.DiagnosticAccessStatus> Windows.System.AppDiagnosticInfo::RequestAccessAsync()
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[DiagnosticAccessStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVector`1<Windows.System.AppDiagnosticInfo>> Windows.System.AppDiagnosticInfo::RequestInfoAsync()
    def request_info_async(cls) -> windows_foundation.IAsyncOperation[typing.MutableSequence[AppDiagnosticInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVector`1<Windows.System.AppDiagnosticInfo>> Windows.System.AppDiagnosticInfo::RequestInfoForAppAsync()
    def request_info_for_app_async(cls) -> windows_foundation.IAsyncOperation[typing.MutableSequence[AppDiagnosticInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVector`1<Windows.System.AppDiagnosticInfo>> Windows.System.AppDiagnosticInfo::RequestInfoForAppAsync(System.String)
    def request_info_for_app_user_model_id(cls, app_user_model_id: str, /) -> windows_foundation.IAsyncOperation[typing.MutableSequence[AppDiagnosticInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVector`1<Windows.System.AppDiagnosticInfo>> Windows.System.AppDiagnosticInfo::RequestInfoForPackageAsync(System.String)
    def request_info_for_package_async(cls, package_family_name: str, /) -> windows_foundation.IAsyncOperation[typing.MutableSequence[AppDiagnosticInfo]]: ...

@typing.final
class AppDiagnosticInfo(winrt.system.Object, metaclass=AppDiagnosticInfo_Static):
    # Windows.System.AppResourceGroupInfoWatcher Windows.System.AppDiagnosticInfo::CreateResourceGroupWatcher()
    def create_resource_group_watcher(self) -> AppResourceGroupInfoWatcher: ...
    # Windows.Foundation.Collections.IVector`1<Windows.System.AppResourceGroupInfo> Windows.System.AppDiagnosticInfo::GetResourceGroups()
    def get_resource_groups(self) -> typing.MutableSequence[AppResourceGroupInfo]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.AppActivationResult> Windows.System.AppDiagnosticInfo::LaunchAsync()
    def launch_async(self) -> windows_foundation.IAsyncOperation[AppActivationResult]: ...
    # Windows.ApplicationModel.AppInfo Windows.System.AppDiagnosticInfo::get_AppInfo()
    @_property
    def app_info(self) -> windows_applicationmodel.AppInfo: ...

@typing.final
class AppDiagnosticInfoWatcher(winrt.system.Object):
    # System.Void Windows.System.AppDiagnosticInfoWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.System.AppDiagnosticInfoWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppDiagnosticInfoWatcher::add_Added(Windows.Foundation.TypedEventHandler`2<Windows.System.AppDiagnosticInfoWatcher,Windows.System.AppDiagnosticInfoWatcherEventArgs>)
    def add_added(self, handler: windows_foundation.TypedEventHandler[AppDiagnosticInfoWatcher, AppDiagnosticInfoWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppDiagnosticInfoWatcher::remove_Added(Windows.Foundation.EventRegistrationToken)
    def remove_added(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppDiagnosticInfoWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.System.AppDiagnosticInfoWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[AppDiagnosticInfoWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppDiagnosticInfoWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppDiagnosticInfoWatcher::add_Removed(Windows.Foundation.TypedEventHandler`2<Windows.System.AppDiagnosticInfoWatcher,Windows.System.AppDiagnosticInfoWatcherEventArgs>)
    def add_removed(self, handler: windows_foundation.TypedEventHandler[AppDiagnosticInfoWatcher, AppDiagnosticInfoWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppDiagnosticInfoWatcher::remove_Removed(Windows.Foundation.EventRegistrationToken)
    def remove_removed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppDiagnosticInfoWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.System.AppDiagnosticInfoWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[AppDiagnosticInfoWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppDiagnosticInfoWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.System.AppDiagnosticInfoWatcherStatus Windows.System.AppDiagnosticInfoWatcher::get_Status()
    @_property
    def status(self) -> AppDiagnosticInfoWatcherStatus: ...

@typing.final
class AppDiagnosticInfoWatcherEventArgs(winrt.system.Object):
    # Windows.System.AppDiagnosticInfo Windows.System.AppDiagnosticInfoWatcherEventArgs::get_AppDiagnosticInfo()
    @_property
    def app_diagnostic_info(self) -> AppDiagnosticInfo: ...

@typing.final
class AppExecutionStateChangeResult(winrt.system.Object):
    # Windows.Foundation.HResult Windows.System.AppExecutionStateChangeResult::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...

@typing.final
class AppMemoryReport(winrt.system.Object):
    # System.UInt64 Windows.System.AppMemoryReport::get_PeakPrivateCommitUsage()
    @_property
    def peak_private_commit_usage(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppMemoryReport::get_PrivateCommitUsage()
    @_property
    def private_commit_usage(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppMemoryReport::get_TotalCommitLimit()
    @_property
    def total_commit_limit(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppMemoryReport::get_TotalCommitUsage()
    @_property
    def total_commit_usage(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppMemoryReport::get_ExpectedTotalCommitLimit()
    @_property
    def expected_total_commit_limit(self) -> winrt.system.UInt64: ...

@typing.final
class AppMemoryUsageLimitChangingEventArgs(winrt.system.Object):
    # System.UInt64 Windows.System.AppMemoryUsageLimitChangingEventArgs::get_NewLimit()
    @_property
    def new_limit(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppMemoryUsageLimitChangingEventArgs::get_OldLimit()
    @_property
    def old_limit(self) -> winrt.system.UInt64: ...

@typing.final
class AppResourceGroupBackgroundTaskReport(winrt.system.Object):
    # System.String Windows.System.AppResourceGroupBackgroundTaskReport::get_EntryPoint()
    @_property
    def entry_point(self) -> str: ...
    # System.String Windows.System.AppResourceGroupBackgroundTaskReport::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Guid Windows.System.AppResourceGroupBackgroundTaskReport::get_TaskId()
    @_property
    def task_id(self) -> _uuid.UUID: ...
    # System.String Windows.System.AppResourceGroupBackgroundTaskReport::get_Trigger()
    @_property
    def trigger(self) -> str: ...

@typing.final
class AppResourceGroupInfo(winrt.system.Object):
    # Windows.Foundation.Collections.IVector`1<Windows.System.AppResourceGroupBackgroundTaskReport> Windows.System.AppResourceGroupInfo::GetBackgroundTaskReports()
    def get_background_task_reports(self) -> typing.MutableSequence[AppResourceGroupBackgroundTaskReport]: ...
    # Windows.System.AppResourceGroupMemoryReport Windows.System.AppResourceGroupInfo::GetMemoryReport()
    def get_memory_report(self) -> AppResourceGroupMemoryReport: ...
    # Windows.Foundation.Collections.IVector`1<Windows.System.Diagnostics.ProcessDiagnosticInfo> Windows.System.AppResourceGroupInfo::GetProcessDiagnosticInfos()
    def get_process_diagnostic_infos(self) -> typing.MutableSequence[windows_system_diagnostics.ProcessDiagnosticInfo]: ...
    # Windows.System.AppResourceGroupStateReport Windows.System.AppResourceGroupInfo::GetStateReport()
    def get_state_report(self) -> AppResourceGroupStateReport: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.AppExecutionStateChangeResult> Windows.System.AppResourceGroupInfo::StartResumeAsync()
    def start_resume_async(self) -> windows_foundation.IAsyncOperation[AppExecutionStateChangeResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.AppExecutionStateChangeResult> Windows.System.AppResourceGroupInfo::StartSuspendAsync()
    def start_suspend_async(self) -> windows_foundation.IAsyncOperation[AppExecutionStateChangeResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.AppExecutionStateChangeResult> Windows.System.AppResourceGroupInfo::StartTerminateAsync()
    def start_terminate_async(self) -> windows_foundation.IAsyncOperation[AppExecutionStateChangeResult]: ...
    # System.Guid Windows.System.AppResourceGroupInfo::get_InstanceId()
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    # System.Boolean Windows.System.AppResourceGroupInfo::get_IsShared()
    @_property
    def is_shared(self) -> bool: ...

@typing.final
class AppResourceGroupInfoWatcher(winrt.system.Object):
    # System.Void Windows.System.AppResourceGroupInfoWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppResourceGroupInfoWatcher::add_Added(Windows.Foundation.TypedEventHandler`2<Windows.System.AppResourceGroupInfoWatcher,Windows.System.AppResourceGroupInfoWatcherEventArgs>)
    def add_added(self, handler: windows_foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::remove_Added(Windows.Foundation.EventRegistrationToken)
    def remove_added(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppResourceGroupInfoWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.System.AppResourceGroupInfoWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[AppResourceGroupInfoWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppResourceGroupInfoWatcher::add_ExecutionStateChanged(Windows.Foundation.TypedEventHandler`2<Windows.System.AppResourceGroupInfoWatcher,Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs>)
    def add_execution_state_changed(self, handler: windows_foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherExecutionStateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::remove_ExecutionStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_execution_state_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppResourceGroupInfoWatcher::add_Removed(Windows.Foundation.TypedEventHandler`2<Windows.System.AppResourceGroupInfoWatcher,Windows.System.AppResourceGroupInfoWatcherEventArgs>)
    def add_removed(self, handler: windows_foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::remove_Removed(Windows.Foundation.EventRegistrationToken)
    def remove_removed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.AppResourceGroupInfoWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.System.AppResourceGroupInfoWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[AppResourceGroupInfoWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.AppResourceGroupInfoWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.System.AppResourceGroupInfoWatcherStatus Windows.System.AppResourceGroupInfoWatcher::get_Status()
    @_property
    def status(self) -> AppResourceGroupInfoWatcherStatus: ...

@typing.final
class AppResourceGroupInfoWatcherEventArgs(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.System.AppDiagnosticInfo> Windows.System.AppResourceGroupInfoWatcherEventArgs::get_AppDiagnosticInfos()
    @_property
    def app_diagnostic_infos(self) -> typing.Sequence[AppDiagnosticInfo]: ...
    # Windows.System.AppResourceGroupInfo Windows.System.AppResourceGroupInfoWatcherEventArgs::get_AppResourceGroupInfo()
    @_property
    def app_resource_group_info(self) -> AppResourceGroupInfo: ...

@typing.final
class AppResourceGroupInfoWatcherExecutionStateChangedEventArgs(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.System.AppDiagnosticInfo> Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs::get_AppDiagnosticInfos()
    @_property
    def app_diagnostic_infos(self) -> typing.Sequence[AppDiagnosticInfo]: ...
    # Windows.System.AppResourceGroupInfo Windows.System.AppResourceGroupInfoWatcherExecutionStateChangedEventArgs::get_AppResourceGroupInfo()
    @_property
    def app_resource_group_info(self) -> AppResourceGroupInfo: ...

@typing.final
class AppResourceGroupMemoryReport(winrt.system.Object):
    # Windows.System.AppMemoryUsageLevel Windows.System.AppResourceGroupMemoryReport::get_CommitUsageLevel()
    @_property
    def commit_usage_level(self) -> AppMemoryUsageLevel: ...
    # System.UInt64 Windows.System.AppResourceGroupMemoryReport::get_CommitUsageLimit()
    @_property
    def commit_usage_limit(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppResourceGroupMemoryReport::get_PrivateCommitUsage()
    @_property
    def private_commit_usage(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.AppResourceGroupMemoryReport::get_TotalCommitUsage()
    @_property
    def total_commit_usage(self) -> winrt.system.UInt64: ...

@typing.final
class AppResourceGroupStateReport(winrt.system.Object):
    # Windows.System.AppResourceGroupEnergyQuotaState Windows.System.AppResourceGroupStateReport::get_EnergyQuotaState()
    @_property
    def energy_quota_state(self) -> AppResourceGroupEnergyQuotaState: ...
    # Windows.System.AppResourceGroupExecutionState Windows.System.AppResourceGroupStateReport::get_ExecutionState()
    @_property
    def execution_state(self) -> AppResourceGroupExecutionState: ...

@typing.final
class AppUriHandlerHost(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.System.AppUriHandlerHost::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Void Windows.System.AppUriHandlerHost::put_Name(System.String)
    @name.setter
    def name(self, value: str) -> None: ...
    # System.Boolean Windows.System.AppUriHandlerHost::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Void Windows.System.AppUriHandlerHost::put_IsEnabled(System.Boolean)
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...

@typing.final
class AppUriHandlerRegistration(winrt.system.Object):
    # Windows.Foundation.Collections.IVector`1<Windows.System.AppUriHandlerHost> Windows.System.AppUriHandlerRegistration::GetAllHosts()
    def get_all_hosts(self) -> typing.MutableSequence[AppUriHandlerHost]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVector`1<Windows.System.AppUriHandlerHost>> Windows.System.AppUriHandlerRegistration::GetAppAddedHostsAsync()
    def get_app_added_hosts_async(self) -> windows_foundation.IAsyncOperation[typing.MutableSequence[AppUriHandlerHost]]: ...
    # Windows.Foundation.IAsyncAction Windows.System.AppUriHandlerRegistration::SetAppAddedHostsAsync(Windows.Foundation.Collections.IIterable`1<Windows.System.AppUriHandlerHost>)
    def set_app_added_hosts_async(self, hosts: typing.Iterable[AppUriHandlerHost], /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.System.AppUriHandlerRegistration::UpdateHosts(Windows.Foundation.Collections.IIterable`1<Windows.System.AppUriHandlerHost>)
    def update_hosts(self, hosts: typing.Iterable[AppUriHandlerHost], /) -> None: ...
    # System.String Windows.System.AppUriHandlerRegistration::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.System.User Windows.System.AppUriHandlerRegistration::get_User()
    @_property
    def user(self) -> User: ...
    # System.String Windows.System.AppUriHandlerRegistration::get_PackageFamilyName()
    @_property
    def package_family_name(self) -> str: ...

@typing.final
class AppUriHandlerRegistrationManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.AppUriHandlerRegistrationManager Windows.System.AppUriHandlerRegistrationManager::GetDefault()
    def get_default(cls) -> AppUriHandlerRegistrationManager: ...
    # Windows.System.AppUriHandlerRegistrationManager Windows.System.AppUriHandlerRegistrationManager::GetForPackage(System.String)
    def get_for_package(cls, package_family_name: str, /) -> AppUriHandlerRegistrationManager: ...
    # Windows.System.AppUriHandlerRegistrationManager Windows.System.AppUriHandlerRegistrationManager::GetForPackageForUser(System.String,Windows.System.User)
    def get_for_package_for_user(cls, package_family_name: str, user: User, /) -> AppUriHandlerRegistrationManager: ...
    # Windows.System.AppUriHandlerRegistrationManager Windows.System.AppUriHandlerRegistrationManager::GetForUser(Windows.System.User)
    def get_for_user(cls, user: User, /) -> AppUriHandlerRegistrationManager: ...

@typing.final
class AppUriHandlerRegistrationManager(winrt.system.Object, metaclass=AppUriHandlerRegistrationManager_Static):
    # Windows.System.AppUriHandlerRegistration Windows.System.AppUriHandlerRegistrationManager::TryGetRegistration(System.String)
    def try_get_registration(self, name: str, /) -> typing.Optional[AppUriHandlerRegistration]: ...
    # Windows.System.User Windows.System.AppUriHandlerRegistrationManager::get_User()
    @_property
    def user(self) -> User: ...
    # System.String Windows.System.AppUriHandlerRegistrationManager::get_PackageFamilyName()
    @_property
    def package_family_name(self) -> str: ...

@typing.final
class DateTimeSettings_Static(winrt._winrt.IInspectable_Static):
    # System.Void Windows.System.DateTimeSettings::SetSystemDateTime(Windows.Foundation.DateTime)
    def set_system_date_time(cls, utc_date_time: datetime.datetime, /) -> None: ...

@typing.final
class DateTimeSettings(winrt.system.Object, metaclass=DateTimeSettings_Static):
    pass

@typing.final
class DispatcherQueue_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.DispatcherQueue Windows.System.DispatcherQueue::GetForCurrentThread()
    def get_for_current_thread(cls) -> DispatcherQueue: ...

@typing.final
class DispatcherQueue(winrt.system.Object, metaclass=DispatcherQueue_Static):
    # Windows.System.DispatcherQueueTimer Windows.System.DispatcherQueue::CreateTimer()
    def create_timer(self) -> DispatcherQueueTimer: ...
    # System.Boolean Windows.System.DispatcherQueue::TryEnqueue(Windows.System.DispatcherQueueHandler)
    def try_enqueue(self, callback: DispatcherQueueHandler, /) -> bool: ...
    # System.Boolean Windows.System.DispatcherQueue::TryEnqueue(Windows.System.DispatcherQueuePriority,Windows.System.DispatcherQueueHandler)
    def try_enqueue_with_priority(self, priority: DispatcherQueuePriority, callback: DispatcherQueueHandler, /) -> bool: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.DispatcherQueue::add_ShutdownCompleted(Windows.Foundation.TypedEventHandler`2<Windows.System.DispatcherQueue,System.Object>)
    def add_shutdown_completed(self, handler: windows_foundation.TypedEventHandler[DispatcherQueue, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.DispatcherQueue::remove_ShutdownCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_shutdown_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.DispatcherQueue::add_ShutdownStarting(Windows.Foundation.TypedEventHandler`2<Windows.System.DispatcherQueue,Windows.System.DispatcherQueueShutdownStartingEventArgs>)
    def add_shutdown_starting(self, handler: windows_foundation.TypedEventHandler[DispatcherQueue, DispatcherQueueShutdownStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.DispatcherQueue::remove_ShutdownStarting(Windows.Foundation.EventRegistrationToken)
    def remove_shutdown_starting(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.System.DispatcherQueue::get_HasThreadAccess()
    @_property
    def has_thread_access(self) -> bool: ...

@typing.final
class DispatcherQueueController_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.DispatcherQueueController Windows.System.DispatcherQueueController::CreateOnDedicatedThread()
    def create_on_dedicated_thread(cls) -> DispatcherQueueController: ...

@typing.final
class DispatcherQueueController(winrt.system.Object, metaclass=DispatcherQueueController_Static):
    # Windows.Foundation.IAsyncAction Windows.System.DispatcherQueueController::ShutdownQueueAsync()
    def shutdown_queue_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.System.DispatcherQueue Windows.System.DispatcherQueueController::get_DispatcherQueue()
    @_property
    def dispatcher_queue(self) -> DispatcherQueue: ...

@typing.final
class DispatcherQueueShutdownStartingEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.System.DispatcherQueueShutdownStartingEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...

@typing.final
class DispatcherQueueTimer(winrt.system.Object):
    # System.Void Windows.System.DispatcherQueueTimer::Start()
    def start(self) -> None: ...
    # System.Void Windows.System.DispatcherQueueTimer::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.DispatcherQueueTimer::add_Tick(Windows.Foundation.TypedEventHandler`2<Windows.System.DispatcherQueueTimer,System.Object>)
    def add_tick(self, handler: windows_foundation.TypedEventHandler[DispatcherQueueTimer, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.DispatcherQueueTimer::remove_Tick(Windows.Foundation.EventRegistrationToken)
    def remove_tick(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.System.DispatcherQueueTimer::get_IsRepeating()
    @_property
    def is_repeating(self) -> bool: ...
    # System.Void Windows.System.DispatcherQueueTimer::put_IsRepeating(System.Boolean)
    @is_repeating.setter
    def is_repeating(self, value: bool) -> None: ...
    # Windows.Foundation.TimeSpan Windows.System.DispatcherQueueTimer::get_Interval()
    @_property
    def interval(self) -> datetime.timedelta: ...
    # System.Void Windows.System.DispatcherQueueTimer::put_Interval(Windows.Foundation.TimeSpan)
    @interval.setter
    def interval(self, value: datetime.timedelta) -> None: ...
    # System.Boolean Windows.System.DispatcherQueueTimer::get_IsRunning()
    @_property
    def is_running(self) -> bool: ...

@typing.final
class FolderLauncherOptions(winrt.system.Object, ILauncherViewOptions):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVector`1<Windows.Storage.IStorageItem> Windows.System.FolderLauncherOptions::get_ItemsToSelect()
    @_property
    def items_to_select(self) -> typing.MutableSequence[windows_storage.IStorageItem]: ...
    # Windows.UI.ViewManagement.ViewSizePreference Windows.System.FolderLauncherOptions::get_DesiredRemainingView()
    @_property
    def desired_remaining_view(self) -> windows_ui_viewmanagement.ViewSizePreference: ...
    # System.Void Windows.System.FolderLauncherOptions::put_DesiredRemainingView(Windows.UI.ViewManagement.ViewSizePreference)
    @desired_remaining_view.setter
    def desired_remaining_view(self, value: windows_ui_viewmanagement.ViewSizePreference) -> None: ...

@typing.final
class KnownUserProperties_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.System.KnownUserProperties::get_AccountName()
    @_property
    def account_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_DisplayName()
    @_property
    def display_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_DomainName()
    @_property
    def domain_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_FirstName()
    @_property
    def first_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_GuestHost()
    @_property
    def guest_host(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_LastName()
    @_property
    def last_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_PrincipalName()
    @_property
    def principal_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_ProviderName()
    @_property
    def provider_name(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_SessionInitiationProtocolUri()
    @_property
    def session_initiation_protocol_uri(cls) -> str: ...
    # System.String Windows.System.KnownUserProperties::get_AgeEnforcementRegion()
    @_property
    def age_enforcement_region(cls) -> str: ...

@typing.final
class KnownUserProperties(winrt.system.Object, metaclass=KnownUserProperties_Static):
    pass

@typing.final
class LaunchUriResult(winrt.system.Object):
    # Windows.Foundation.Collections.ValueSet Windows.System.LaunchUriResult::get_Result()
    @_property
    def result(self) -> windows_foundation_collections.ValueSet: ...
    # Windows.System.LaunchUriStatus Windows.System.LaunchUriResult::get_Status()
    @_property
    def status(self) -> LaunchUriStatus: ...

@typing.final
class Launcher_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>> Windows.System.Launcher::FindAppUriHandlersAsync(Windows.Foundation.Uri)
    def find_app_uri_handlers_async(cls, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[typing.Sequence[windows_applicationmodel.AppInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>> Windows.System.Launcher::FindFileHandlersAsync(System.String)
    def find_file_handlers_async(cls, extension: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[windows_applicationmodel.AppInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>> Windows.System.Launcher::FindUriSchemeHandlersAsync(System.String)
    def find_uri_scheme_handlers_async(cls, scheme: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[windows_applicationmodel.AppInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>> Windows.System.Launcher::FindUriSchemeHandlersAsync(System.String,Windows.System.LaunchQuerySupportType)
    def find_uri_scheme_handlers_with_launch_uri_type_async(cls, scheme: str, launch_query_support_type: LaunchQuerySupportType, /) -> windows_foundation.IAsyncOperation[typing.Sequence[windows_applicationmodel.AppInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFileAsync(Windows.Storage.IStorageFile)
    def launch_file_async(cls, file: windows_storage.IStorageFile, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFileAsync(Windows.Storage.IStorageFile,Windows.System.LauncherOptions)
    def launch_file_with_options_async(cls, file: windows_storage.IStorageFile, options: LauncherOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderAsync(Windows.Storage.IStorageFolder)
    def launch_folder_async(cls, folder: windows_storage.IStorageFolder, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderPathAsync(System.String)
    def launch_folder_path_async(cls, path: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderPathForUserAsync(Windows.System.User,System.String)
    def launch_folder_path_for_user_async(cls, user: User, path: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderPathAsync(System.String,Windows.System.FolderLauncherOptions)
    def launch_folder_path_with_options_async(cls, path: str, options: FolderLauncherOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderPathForUserAsync(Windows.System.User,System.String,Windows.System.FolderLauncherOptions)
    def launch_folder_path_with_options_for_user_async(cls, user: User, path: str, options: FolderLauncherOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchFolderAsync(Windows.Storage.IStorageFolder,Windows.System.FolderLauncherOptions)
    def launch_folder_with_options_async(cls, folder: windows_storage.IStorageFolder, options: FolderLauncherOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchUriAsync(Windows.Foundation.Uri)
    def launch_uri_async(cls, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriResult> Windows.System.Launcher::LaunchUriForResultsAsync(Windows.Foundation.Uri,Windows.System.LauncherOptions)
    def launch_uri_for_results_async(cls, uri: windows_foundation.Uri, options: LauncherOptions, /) -> windows_foundation.IAsyncOperation[LaunchUriResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriResult> Windows.System.Launcher::LaunchUriForResultsForUserAsync(Windows.System.User,Windows.Foundation.Uri,Windows.System.LauncherOptions)
    def launch_uri_for_results_for_user_async(cls, user: User, uri: windows_foundation.Uri, options: LauncherOptions, /) -> windows_foundation.IAsyncOperation[LaunchUriResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriResult> Windows.System.Launcher::LaunchUriForResultsAsync(Windows.Foundation.Uri,Windows.System.LauncherOptions,Windows.Foundation.Collections.ValueSet)
    def launch_uri_for_results_with_data_async(cls, uri: windows_foundation.Uri, options: LauncherOptions, input_data: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[LaunchUriResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriResult> Windows.System.Launcher::LaunchUriForResultsForUserAsync(Windows.System.User,Windows.Foundation.Uri,Windows.System.LauncherOptions,Windows.Foundation.Collections.ValueSet)
    def launch_uri_for_results_with_data_for_user_async(cls, user: User, uri: windows_foundation.Uri, options: LauncherOptions, input_data: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[LaunchUriResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriStatus> Windows.System.Launcher::LaunchUriForUserAsync(Windows.System.User,Windows.Foundation.Uri)
    def launch_uri_for_user_async(cls, user: User, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[LaunchUriStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchUriAsync(Windows.Foundation.Uri,Windows.System.LauncherOptions,Windows.Foundation.Collections.ValueSet)
    def launch_uri_with_data_async(cls, uri: windows_foundation.Uri, options: LauncherOptions, input_data: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriStatus> Windows.System.Launcher::LaunchUriForUserAsync(Windows.System.User,Windows.Foundation.Uri,Windows.System.LauncherOptions,Windows.Foundation.Collections.ValueSet)
    def launch_uri_with_data_for_user_async(cls, user: User, uri: windows_foundation.Uri, options: LauncherOptions, input_data: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[LaunchUriStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.System.Launcher::LaunchUriAsync(Windows.Foundation.Uri,Windows.System.LauncherOptions)
    def launch_uri_with_options_async(cls, uri: windows_foundation.Uri, options: LauncherOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriStatus> Windows.System.Launcher::LaunchUriForUserAsync(Windows.System.User,Windows.Foundation.Uri,Windows.System.LauncherOptions)
    def launch_uri_with_options_for_user_async(cls, user: User, uri: windows_foundation.Uri, options: LauncherOptions, /) -> windows_foundation.IAsyncOperation[LaunchUriStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryAppUriSupportAsync(Windows.Foundation.Uri)
    def query_app_uri_support_async(cls, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryAppUriSupportAsync(Windows.Foundation.Uri,System.String)
    def query_app_uri_support_with_package_family_name_async(cls, uri: windows_foundation.Uri, package_family_name: str, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryFileSupportAsync(Windows.Storage.StorageFile)
    def query_file_support_async(cls, file: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryFileSupportAsync(Windows.Storage.StorageFile,System.String)
    def query_file_support_with_package_family_name_async(cls, file: windows_storage.StorageFile, package_family_name: str, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryUriSupportAsync(Windows.Foundation.Uri,Windows.System.LaunchQuerySupportType)
    def query_uri_support_async(cls, uri: windows_foundation.Uri, launch_query_support_type: LaunchQuerySupportType, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus> Windows.System.Launcher::QueryUriSupportAsync(Windows.Foundation.Uri,Windows.System.LaunchQuerySupportType,System.String)
    def query_uri_support_with_package_family_name_async(cls, uri: windows_foundation.Uri, launch_query_support_type: LaunchQuerySupportType, package_family_name: str, /) -> windows_foundation.IAsyncOperation[LaunchQuerySupportStatus]: ...

@typing.final
class Launcher(winrt.system.Object, metaclass=Launcher_Static):
    pass

@typing.final
class LauncherOptions(winrt.system.Object, ILauncherViewOptions):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.System.LauncherOptions::get_TreatAsUntrusted()
    @_property
    def treat_as_untrusted(self) -> bool: ...
    # System.Void Windows.System.LauncherOptions::put_TreatAsUntrusted(System.Boolean)
    @treat_as_untrusted.setter
    def treat_as_untrusted(self, value: bool) -> None: ...
    # System.String Windows.System.LauncherOptions::get_PreferredApplicationPackageFamilyName()
    @_property
    def preferred_application_package_family_name(self) -> str: ...
    # System.Void Windows.System.LauncherOptions::put_PreferredApplicationPackageFamilyName(System.String)
    @preferred_application_package_family_name.setter
    def preferred_application_package_family_name(self, value: str) -> None: ...
    # System.String Windows.System.LauncherOptions::get_PreferredApplicationDisplayName()
    @_property
    def preferred_application_display_name(self) -> str: ...
    # System.Void Windows.System.LauncherOptions::put_PreferredApplicationDisplayName(System.String)
    @preferred_application_display_name.setter
    def preferred_application_display_name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.System.LauncherOptions::get_FallbackUri()
    @_property
    def fallback_uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.System.LauncherOptions::put_FallbackUri(Windows.Foundation.Uri)
    @fallback_uri.setter
    def fallback_uri(self, value: windows_foundation.Uri) -> None: ...
    # System.Boolean Windows.System.LauncherOptions::get_DisplayApplicationPicker()
    @_property
    def display_application_picker(self) -> bool: ...
    # System.Void Windows.System.LauncherOptions::put_DisplayApplicationPicker(System.Boolean)
    @display_application_picker.setter
    def display_application_picker(self, value: bool) -> None: ...
    # System.String Windows.System.LauncherOptions::get_ContentType()
    @_property
    def content_type(self) -> str: ...
    # System.Void Windows.System.LauncherOptions::put_ContentType(System.String)
    @content_type.setter
    def content_type(self, value: str) -> None: ...
    # Windows.System.LauncherUIOptions Windows.System.LauncherOptions::get_UI()
    @_property
    def ui(self) -> LauncherUIOptions: ...
    # System.String Windows.System.LauncherOptions::get_TargetApplicationPackageFamilyName()
    @_property
    def target_application_package_family_name(self) -> str: ...
    # System.Void Windows.System.LauncherOptions::put_TargetApplicationPackageFamilyName(System.String)
    @target_application_package_family_name.setter
    def target_application_package_family_name(self, value: str) -> None: ...
    # Windows.Storage.Search.StorageFileQueryResult Windows.System.LauncherOptions::get_NeighboringFilesQuery()
    @_property
    def neighboring_files_query(self) -> windows_storage_search.StorageFileQueryResult: ...
    # System.Void Windows.System.LauncherOptions::put_NeighboringFilesQuery(Windows.Storage.Search.StorageFileQueryResult)
    @neighboring_files_query.setter
    def neighboring_files_query(self, value: windows_storage_search.StorageFileQueryResult) -> None: ...
    # System.Boolean Windows.System.LauncherOptions::get_IgnoreAppUriHandlers()
    @_property
    def ignore_app_uri_handlers(self) -> bool: ...
    # System.Void Windows.System.LauncherOptions::put_IgnoreAppUriHandlers(System.Boolean)
    @ignore_app_uri_handlers.setter
    def ignore_app_uri_handlers(self, value: bool) -> None: ...
    # System.Boolean Windows.System.LauncherOptions::get_LimitPickerToCurrentAppAndAppUriHandlers()
    @_property
    def limit_picker_to_current_app_and_app_uri_handlers(self) -> bool: ...
    # System.Void Windows.System.LauncherOptions::put_LimitPickerToCurrentAppAndAppUriHandlers(System.Boolean)
    @limit_picker_to_current_app_and_app_uri_handlers.setter
    def limit_picker_to_current_app_and_app_uri_handlers(self, value: bool) -> None: ...
    # Windows.UI.ViewManagement.ViewSizePreference Windows.System.LauncherOptions::get_DesiredRemainingView()
    @_property
    def desired_remaining_view(self) -> windows_ui_viewmanagement.ViewSizePreference: ...
    # System.Void Windows.System.LauncherOptions::put_DesiredRemainingView(Windows.UI.ViewManagement.ViewSizePreference)
    @desired_remaining_view.setter
    def desired_remaining_view(self, value: windows_ui_viewmanagement.ViewSizePreference) -> None: ...

@typing.final
class LauncherUIOptions(winrt.system.Object):
    # Windows.Foundation.IReference`1<Windows.Foundation.Rect> Windows.System.LauncherUIOptions::get_SelectionRect()
    @_property
    def selection_rect(self) -> typing.Optional[windows_foundation.Rect]: ...
    # System.Void Windows.System.LauncherUIOptions::put_SelectionRect(Windows.Foundation.IReference`1<Windows.Foundation.Rect>)
    @selection_rect.setter
    def selection_rect(self, value: typing.Optional[windows_foundation.Rect]) -> None: ...
    # Windows.UI.Popups.Placement Windows.System.LauncherUIOptions::get_PreferredPlacement()
    @_property
    def preferred_placement(self) -> windows_ui_popups.Placement: ...
    # System.Void Windows.System.LauncherUIOptions::put_PreferredPlacement(Windows.UI.Popups.Placement)
    @preferred_placement.setter
    def preferred_placement(self, value: windows_ui_popups.Placement) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.Point> Windows.System.LauncherUIOptions::get_InvocationPoint()
    @_property
    def invocation_point(self) -> typing.Optional[windows_foundation.Point]: ...
    # System.Void Windows.System.LauncherUIOptions::put_InvocationPoint(Windows.Foundation.IReference`1<Windows.Foundation.Point>)
    @invocation_point.setter
    def invocation_point(self, value: typing.Optional[windows_foundation.Point]) -> None: ...

@typing.final
class MemoryManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.AppMemoryReport Windows.System.MemoryManager::GetAppMemoryReport()
    def get_app_memory_report(cls) -> AppMemoryReport: ...
    # Windows.System.ProcessMemoryReport Windows.System.MemoryManager::GetProcessMemoryReport()
    def get_process_memory_report(cls) -> ProcessMemoryReport: ...
    # System.Boolean Windows.System.MemoryManager::TrySetAppMemoryUsageLimit(System.UInt64)
    def try_set_app_memory_usage_limit(cls, value: winrt.system.UInt64, /) -> bool: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.MemoryManager::add_AppMemoryUsageDecreased(Windows.Foundation.EventHandler`1<System.Object>)
    def add_app_memory_usage_decreased(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.MemoryManager::remove_AppMemoryUsageDecreased(Windows.Foundation.EventRegistrationToken)
    def remove_app_memory_usage_decreased(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.MemoryManager::add_AppMemoryUsageIncreased(Windows.Foundation.EventHandler`1<System.Object>)
    def add_app_memory_usage_increased(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.MemoryManager::remove_AppMemoryUsageIncreased(Windows.Foundation.EventRegistrationToken)
    def remove_app_memory_usage_increased(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.MemoryManager::add_AppMemoryUsageLimitChanging(Windows.Foundation.EventHandler`1<Windows.System.AppMemoryUsageLimitChangingEventArgs>)
    def add_app_memory_usage_limit_changing(cls, handler: windows_foundation.EventHandler[AppMemoryUsageLimitChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.MemoryManager::remove_AppMemoryUsageLimitChanging(Windows.Foundation.EventRegistrationToken)
    def remove_app_memory_usage_limit_changing(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.UInt64 Windows.System.MemoryManager::get_AppMemoryUsage()
    @_property
    def app_memory_usage(cls) -> winrt.system.UInt64: ...
    # Windows.System.AppMemoryUsageLevel Windows.System.MemoryManager::get_AppMemoryUsageLevel()
    @_property
    def app_memory_usage_level(cls) -> AppMemoryUsageLevel: ...
    # System.UInt64 Windows.System.MemoryManager::get_AppMemoryUsageLimit()
    @_property
    def app_memory_usage_limit(cls) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.MemoryManager::get_ExpectedAppMemoryUsageLimit()
    @_property
    def expected_app_memory_usage_limit(cls) -> winrt.system.UInt64: ...

@typing.final
class MemoryManager(winrt.system.Object, metaclass=MemoryManager_Static):
    pass

@typing.final
class ProcessLauncher_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.System.ProcessLauncherResult> Windows.System.ProcessLauncher::RunToCompletionAsync(System.String,System.String)
    def run_to_completion_async(cls, file_name: str, args: str, /) -> windows_foundation.IAsyncOperation[ProcessLauncherResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.ProcessLauncherResult> Windows.System.ProcessLauncher::RunToCompletionAsync(System.String,System.String,Windows.System.ProcessLauncherOptions)
    def run_to_completion_async_with_options(cls, file_name: str, args: str, options: ProcessLauncherOptions, /) -> windows_foundation.IAsyncOperation[ProcessLauncherResult]: ...

@typing.final
class ProcessLauncher(winrt.system.Object, metaclass=ProcessLauncher_Static):
    pass

@typing.final
class ProcessLauncherOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.System.ProcessLauncherOptions::get_WorkingDirectory()
    @_property
    def working_directory(self) -> str: ...
    # System.Void Windows.System.ProcessLauncherOptions::put_WorkingDirectory(System.String)
    @working_directory.setter
    def working_directory(self, value: str) -> None: ...
    # Windows.Storage.Streams.IOutputStream Windows.System.ProcessLauncherOptions::get_StandardOutput()
    @_property
    def standard_output(self) -> windows_storage_streams.IOutputStream: ...
    # System.Void Windows.System.ProcessLauncherOptions::put_StandardOutput(Windows.Storage.Streams.IOutputStream)
    @standard_output.setter
    def standard_output(self, value: windows_storage_streams.IOutputStream) -> None: ...
    # Windows.Storage.Streams.IInputStream Windows.System.ProcessLauncherOptions::get_StandardInput()
    @_property
    def standard_input(self) -> windows_storage_streams.IInputStream: ...
    # System.Void Windows.System.ProcessLauncherOptions::put_StandardInput(Windows.Storage.Streams.IInputStream)
    @standard_input.setter
    def standard_input(self, value: windows_storage_streams.IInputStream) -> None: ...
    # Windows.Storage.Streams.IOutputStream Windows.System.ProcessLauncherOptions::get_StandardError()
    @_property
    def standard_error(self) -> windows_storage_streams.IOutputStream: ...
    # System.Void Windows.System.ProcessLauncherOptions::put_StandardError(Windows.Storage.Streams.IOutputStream)
    @standard_error.setter
    def standard_error(self, value: windows_storage_streams.IOutputStream) -> None: ...

@typing.final
class ProcessLauncherResult(winrt.system.Object):
    # System.UInt32 Windows.System.ProcessLauncherResult::get_ExitCode()
    @_property
    def exit_code(self) -> winrt.system.UInt32: ...

@typing.final
class ProcessMemoryReport(winrt.system.Object):
    # System.UInt64 Windows.System.ProcessMemoryReport::get_PrivateWorkingSetUsage()
    @_property
    def private_working_set_usage(self) -> winrt.system.UInt64: ...
    # System.UInt64 Windows.System.ProcessMemoryReport::get_TotalWorkingSetUsage()
    @_property
    def total_working_set_usage(self) -> winrt.system.UInt64: ...

@typing.final
class ProtocolForResultsOperation(winrt.system.Object):
    # System.Void Windows.System.ProtocolForResultsOperation::ReportCompleted(Windows.Foundation.Collections.ValueSet)
    def report_completed(self, data: windows_foundation_collections.ValueSet, /) -> None: ...

@typing.final
class RemoteLauncher_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.System.RemoteLaunchUriStatus> Windows.System.RemoteLauncher::LaunchUriAsync(Windows.System.RemoteSystems.RemoteSystemConnectionRequest,Windows.Foundation.Uri)
    def launch_uri_async(cls, remote_system_connection_request: windows_system_remotesystems.RemoteSystemConnectionRequest, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[RemoteLaunchUriStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.RemoteLaunchUriStatus> Windows.System.RemoteLauncher::LaunchUriAsync(Windows.System.RemoteSystems.RemoteSystemConnectionRequest,Windows.Foundation.Uri,Windows.System.RemoteLauncherOptions,Windows.Foundation.Collections.ValueSet)
    def launch_uri_with_data_async(cls, remote_system_connection_request: windows_system_remotesystems.RemoteSystemConnectionRequest, uri: windows_foundation.Uri, options: RemoteLauncherOptions, input_data: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[RemoteLaunchUriStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.RemoteLaunchUriStatus> Windows.System.RemoteLauncher::LaunchUriAsync(Windows.System.RemoteSystems.RemoteSystemConnectionRequest,Windows.Foundation.Uri,Windows.System.RemoteLauncherOptions)
    def launch_uri_with_options_async(cls, remote_system_connection_request: windows_system_remotesystems.RemoteSystemConnectionRequest, uri: windows_foundation.Uri, options: RemoteLauncherOptions, /) -> windows_foundation.IAsyncOperation[RemoteLaunchUriStatus]: ...

@typing.final
class RemoteLauncher(winrt.system.Object, metaclass=RemoteLauncher_Static):
    pass

@typing.final
class RemoteLauncherOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Uri Windows.System.RemoteLauncherOptions::get_FallbackUri()
    @_property
    def fallback_uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.System.RemoteLauncherOptions::put_FallbackUri(Windows.Foundation.Uri)
    @fallback_uri.setter
    def fallback_uri(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.System.RemoteLauncherOptions::get_PreferredAppIds()
    @_property
    def preferred_app_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class ShutdownManager_Static(winrt._winrt.IInspectable_Static):
    # System.Void Windows.System.ShutdownManager::BeginShutdown(Windows.System.ShutdownKind,Windows.Foundation.TimeSpan)
    def begin_shutdown(cls, shutdown_kind: ShutdownKind, timeout: datetime.timedelta, /) -> None: ...
    # System.Void Windows.System.ShutdownManager::CancelShutdown()
    def cancel_shutdown(cls) -> None: ...
    # System.Void Windows.System.ShutdownManager::EnterPowerState(Windows.System.PowerState)
    def enter_power_state(cls, power_state: PowerState, /) -> None: ...
    # System.Void Windows.System.ShutdownManager::EnterPowerState(Windows.System.PowerState,Windows.Foundation.TimeSpan)
    def enter_power_state_with_time_span(cls, power_state: PowerState, wake_up_after: datetime.timedelta, /) -> None: ...
    # System.Boolean Windows.System.ShutdownManager::IsPowerStateSupported(Windows.System.PowerState)
    def is_power_state_supported(cls, power_state: PowerState, /) -> bool: ...

@typing.final
class ShutdownManager(winrt.system.Object, metaclass=ShutdownManager_Static):
    pass

@typing.final
class TimeZoneSettings_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.System.AutoUpdateTimeZoneStatus> Windows.System.TimeZoneSettings::AutoUpdateTimeZoneAsync(Windows.Foundation.TimeSpan)
    def auto_update_time_zone_async(cls, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[AutoUpdateTimeZoneStatus]: ...
    # System.Void Windows.System.TimeZoneSettings::ChangeTimeZoneByDisplayName(System.String)
    def change_time_zone_by_display_name(cls, time_zone_display_name: str, /) -> None: ...
    # System.Boolean Windows.System.TimeZoneSettings::get_CanChangeTimeZone()
    @_property
    def can_change_time_zone(cls) -> bool: ...
    # System.String Windows.System.TimeZoneSettings::get_CurrentTimeZoneDisplayName()
    @_property
    def current_time_zone_display_name(cls) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.System.TimeZoneSettings::get_SupportedTimeZoneDisplayNames()
    @_property
    def supported_time_zone_display_names(cls) -> typing.Sequence[str]: ...

@typing.final
class TimeZoneSettings(winrt.system.Object, metaclass=TimeZoneSettings_Static):
    pass

@typing.final
class User_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.UserWatcher Windows.System.User::CreateWatcher()
    def create_watcher(cls) -> UserWatcher: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.System.User>> Windows.System.User::FindAllAsync()
    def find_all_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[User]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.System.User>> Windows.System.User::FindAllAsync(Windows.System.UserType)
    # @deprecated("FindAllAsyncByType is deprecated and might not function consistently on all platforms. Instead, use FindAllAsync or GetDefault.")
    def find_all_async_by_type(cls, type: UserType, /) -> windows_foundation.IAsyncOperation[typing.Sequence[User]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.System.User>> Windows.System.User::FindAllAsync(Windows.System.UserType,Windows.System.UserAuthenticationStatus)
    # @deprecated("FindAllAsyncByTypeAndStatus is deprecated and might not function consistently on all platforms. Instead, use FindAllAsync or GetDefault.")
    def find_all_async_by_type_and_status(cls, type: UserType, status: UserAuthenticationStatus, /) -> windows_foundation.IAsyncOperation[typing.Sequence[User]]: ...
    # Windows.System.User Windows.System.User::GetDefault()
    def get_default(cls) -> User: ...
    # Windows.System.User Windows.System.User::GetFromId(System.String)
    def get_from_id(cls, non_roamable_id: str, /) -> User: ...

@typing.final
class User(winrt.system.Object, metaclass=User_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.System.UserAgeConsentResult> Windows.System.User::CheckUserAgeConsentGroupAsync(Windows.System.UserAgeConsentGroup)
    def check_user_age_consent_group_async(self, consent_group: UserAgeConsentGroup, /) -> windows_foundation.IAsyncOperation[UserAgeConsentResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference> Windows.System.User::GetPictureAsync(Windows.System.UserPictureSize)
    def get_picture_async(self, desired_size: UserPictureSize, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStreamReference]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IPropertySet> Windows.System.User::GetPropertiesAsync(Windows.Foundation.Collections.IVectorView`1<System.String>)
    def get_properties_async(self, values: typing.Sequence[str], /) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IPropertySet]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Object> Windows.System.User::GetPropertyAsync(System.String)
    def get_property_async(self, value: str, /) -> windows_foundation.IAsyncOperation[winrt.system.Object]: ...
    # Windows.System.UserAuthenticationStatus Windows.System.User::get_AuthenticationStatus()
    @_property
    def authentication_status(self) -> UserAuthenticationStatus: ...
    # System.String Windows.System.User::get_NonRoamableId()
    @_property
    def non_roamable_id(self) -> str: ...
    # Windows.System.UserType Windows.System.User::get_Type()
    @_property
    def type(self) -> UserType: ...

@typing.final
class UserAuthenticationStatusChangeDeferral(winrt.system.Object):
    # System.Void Windows.System.UserAuthenticationStatusChangeDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class UserAuthenticationStatusChangingEventArgs(winrt.system.Object):
    # Windows.System.UserAuthenticationStatusChangeDeferral Windows.System.UserAuthenticationStatusChangingEventArgs::GetDeferral()
    def get_deferral(self) -> UserAuthenticationStatusChangeDeferral: ...
    # Windows.System.UserAuthenticationStatus Windows.System.UserAuthenticationStatusChangingEventArgs::get_CurrentStatus()
    @_property
    def current_status(self) -> UserAuthenticationStatus: ...
    # Windows.System.UserAuthenticationStatus Windows.System.UserAuthenticationStatusChangingEventArgs::get_NewStatus()
    @_property
    def new_status(self) -> UserAuthenticationStatus: ...
    # Windows.System.User Windows.System.UserAuthenticationStatusChangingEventArgs::get_User()
    @_property
    def user(self) -> User: ...

@typing.final
class UserChangedEventArgs(winrt.system.Object):
    # Windows.System.User Windows.System.UserChangedEventArgs::get_User()
    @_property
    def user(self) -> User: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.System.UserWatcherUpdateKind> Windows.System.UserChangedEventArgs::get_ChangedPropertyKinds()
    @_property
    def changed_property_kinds(self) -> typing.Sequence[UserWatcherUpdateKind]: ...

@typing.final
class UserDeviceAssociation_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.User Windows.System.UserDeviceAssociation::FindUserFromDeviceId(System.String)
    def find_user_from_device_id(cls, device_id: str, /) -> User: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserDeviceAssociation::add_UserDeviceAssociationChanged(Windows.Foundation.EventHandler`1<Windows.System.UserDeviceAssociationChangedEventArgs>)
    def add_user_device_association_changed(cls, handler: windows_foundation.EventHandler[UserDeviceAssociationChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserDeviceAssociation::remove_UserDeviceAssociationChanged(Windows.Foundation.EventRegistrationToken)
    def remove_user_device_association_changed(cls, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class UserDeviceAssociation(winrt.system.Object, metaclass=UserDeviceAssociation_Static):
    pass

@typing.final
class UserDeviceAssociationChangedEventArgs(winrt.system.Object):
    # System.String Windows.System.UserDeviceAssociationChangedEventArgs::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.System.User Windows.System.UserDeviceAssociationChangedEventArgs::get_NewUser()
    @_property
    def new_user(self) -> User: ...
    # Windows.System.User Windows.System.UserDeviceAssociationChangedEventArgs::get_OldUser()
    @_property
    def old_user(self) -> User: ...

@typing.final
class UserPicker_Static(winrt._winrt.IInspectable_Static):
    # System.Boolean Windows.System.UserPicker::IsSupported()
    def is_supported(cls) -> bool: ...

@typing.final
class UserPicker(winrt.system.Object, metaclass=UserPicker_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.System.User> Windows.System.UserPicker::PickSingleUserAsync()
    def pick_single_user_async(self) -> windows_foundation.IAsyncOperation[User]: ...
    # Windows.System.User Windows.System.UserPicker::get_SuggestedSelectedUser()
    @_property
    def suggested_selected_user(self) -> User: ...
    # System.Void Windows.System.UserPicker::put_SuggestedSelectedUser(Windows.System.User)
    @suggested_selected_user.setter
    def suggested_selected_user(self, value: User) -> None: ...
    # System.Boolean Windows.System.UserPicker::get_AllowGuestAccounts()
    @_property
    def allow_guest_accounts(self) -> bool: ...
    # System.Void Windows.System.UserPicker::put_AllowGuestAccounts(System.Boolean)
    @allow_guest_accounts.setter
    def allow_guest_accounts(self, value: bool) -> None: ...

@typing.final
class UserWatcher(winrt.system.Object):
    # System.Void Windows.System.UserWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.System.UserWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_Added(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,Windows.System.UserChangedEventArgs>)
    def add_added(self, handler: windows_foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_Added(Windows.Foundation.EventRegistrationToken)
    def remove_added(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_AuthenticationStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,Windows.System.UserChangedEventArgs>)
    def add_authentication_status_changed(self, handler: windows_foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_AuthenticationStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_authentication_status_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_AuthenticationStatusChanging(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,Windows.System.UserAuthenticationStatusChangingEventArgs>)
    def add_authentication_status_changing(self, handler: windows_foundation.TypedEventHandler[UserWatcher, UserAuthenticationStatusChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_AuthenticationStatusChanging(Windows.Foundation.EventRegistrationToken)
    def remove_authentication_status_changing(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[UserWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_Removed(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,Windows.System.UserChangedEventArgs>)
    def add_removed(self, handler: windows_foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_Removed(Windows.Foundation.EventRegistrationToken)
    def remove_removed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[UserWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.System.UserWatcher::add_Updated(Windows.Foundation.TypedEventHandler`2<Windows.System.UserWatcher,Windows.System.UserChangedEventArgs>)
    def add_updated(self, handler: windows_foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.System.UserWatcher::remove_Updated(Windows.Foundation.EventRegistrationToken)
    def remove_updated(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.System.UserWatcherStatus Windows.System.UserWatcher::get_Status()
    @_property
    def status(self) -> UserWatcherStatus: ...

@typing.final
class _ILauncherViewOptions: ...

class ILauncherViewOptions(winrt._winrt.IInspectable):
    # Windows.UI.ViewManagement.ViewSizePreference Windows.System.ILauncherViewOptions::get_DesiredRemainingView()
    @_property
    @abstractmethod
    def desired_remaining_view(self) -> windows_ui_viewmanagement.ViewSizePreference: ...
    # System.Void Windows.System.ILauncherViewOptions::put_DesiredRemainingView(Windows.UI.ViewManagement.ViewSizePreference)
    @desired_remaining_view.setter
    @abstractmethod
    def desired_remaining_view(self, value: windows_ui_viewmanagement.ViewSizePreference) -> None: ...

