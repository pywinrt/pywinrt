# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.sockets
import winrt.windows.security.cryptography.certificates
import winrt.windows.storage.streams
import winrt.windows.web.http.filters
import winrt.windows.web.http.headers

from winrt.windows.web.http import HttpCompletionOption, HttpProgressStage, HttpResponseMessageSource, HttpStatusCode, HttpVersion

Self = typing.TypeVar('Self')

@typing.final
class HttpProgress:
    stage: HttpProgressStage
    bytes_sent: winrt.system.UInt64
    total_bytes_to_send: winrt.system.UInt64
    bytes_received: winrt.system.UInt64
    total_bytes_to_receive: winrt.system.UInt64
    retries: winrt.system.UInt32
    def __init__(self, stage: HttpProgressStage, bytes_sent: winrt.system.UInt64, total_bytes_to_send: winrt.system.UInt64, bytes_received: winrt.system.UInt64, total_bytes_to_receive: winrt.system.UInt64, retries: winrt.system.UInt32) -> None: ...

@typing.final
class HttpBufferContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpBufferContent: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpBufferContent], content: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> HttpBufferContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpBufferContent], content: typing.Optional[winrt.windows.storage.streams.IBuffer], offset: winrt.system.UInt32, count: winrt.system.UInt32) -> HttpBufferContent:...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpClient(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpClient: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpClient], filter: typing.Optional[winrt.windows.web.http.filters.IHttpFilter]) -> HttpClient:...
    @typing.overload
    def __new__(cls: typing.Type[HttpClient]) -> HttpClient:...
    def close(self) -> None: ...
    def delete_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    @typing.overload
    def get_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    @typing.overload
    def get_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], completion_option: HttpCompletionOption, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    def get_buffer_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, HttpProgress]: ...
    def get_input_stream_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, HttpProgress]: ...
    def get_string_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, HttpProgress]: ...
    def post_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], content: typing.Optional[IHttpContent], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    def put_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], content: typing.Optional[IHttpContent], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    @typing.overload
    def send_request_async(self, request: typing.Optional[HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    @typing.overload
    def send_request_async(self, request: typing.Optional[HttpRequestMessage], completion_option: HttpCompletionOption, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpResponseMessage, HttpProgress]: ...
    def to_string(self) -> str: ...
    def try_delete_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    @typing.overload
    def try_get_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    @typing.overload
    def try_get_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], completion_option: HttpCompletionOption, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    def try_get_buffer_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpGetBufferResult, HttpProgress]: ...
    def try_get_input_stream_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpGetInputStreamResult, HttpProgress]: ...
    def try_get_string_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpGetStringResult, HttpProgress]: ...
    def try_post_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], content: typing.Optional[IHttpContent], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    def try_put_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], content: typing.Optional[IHttpContent], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    @typing.overload
    def try_send_request_async(self, request: typing.Optional[HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    @typing.overload
    def try_send_request_async(self, request: typing.Optional[HttpRequestMessage], completion_option: HttpCompletionOption, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[HttpRequestResult, HttpProgress]: ...
    @_property
    def default_request_headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpRequestHeaderCollection]: ...
    @_property
    def default_privacy_annotation(self) -> str: ...
    @default_privacy_annotation.setter
    def default_privacy_annotation(self, value: str) -> None: ...

@typing.final
class HttpCookie(winrt.system.Object):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookie: ...
    def __new__(cls: typing.Type[HttpCookie], name: str, domain: str, path: str) -> HttpCookie:...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def secure(self) -> bool: ...
    @secure.setter
    def secure(self, value: bool) -> None: ...
    @_property
    def http_only(self) -> bool: ...
    @http_only.setter
    def http_only(self, value: bool) -> None: ...
    @_property
    def expires(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @expires.setter
    def expires(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def domain(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def path(self) -> str: ...

@typing.final
class HttpCookieCollection(winrt.system.Object, winrt._winrt.Sequence[HttpCookie]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpCookie]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpCookie: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpCookie]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookieCollection: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpCookie]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpCookie]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpCookie], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[HttpCookie], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpCookieManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookieManager: ...
    def delete_cookie(self, cookie: typing.Optional[HttpCookie], /) -> None: ...
    def get_cookies(self, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[HttpCookieCollection]: ...
    @typing.overload
    def set_cookie(self, cookie: typing.Optional[HttpCookie], /) -> bool: ...
    @typing.overload
    def set_cookie(self, cookie: typing.Optional[HttpCookie], third_party: bool, /) -> bool: ...

@typing.final
class HttpFormUrlEncodedContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpFormUrlEncodedContent: ...
    def __new__(cls: typing.Type[HttpFormUrlEncodedContent], content: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]]) -> HttpFormUrlEncodedContent:...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpGetBufferResult(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpGetBufferResult: ...
    def close(self) -> None: ...
    def to_string(self) -> str: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def request_message(self) -> typing.Optional[HttpRequestMessage]: ...
    @_property
    def response_message(self) -> typing.Optional[HttpResponseMessage]: ...
    @_property
    def succeeded(self) -> bool: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...

@typing.final
class HttpGetInputStreamResult(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpGetInputStreamResult: ...
    def close(self) -> None: ...
    def to_string(self) -> str: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def request_message(self) -> typing.Optional[HttpRequestMessage]: ...
    @_property
    def response_message(self) -> typing.Optional[HttpResponseMessage]: ...
    @_property
    def succeeded(self) -> bool: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...

@typing.final
class HttpGetStringResult(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpGetStringResult: ...
    def close(self) -> None: ...
    def to_string(self) -> str: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def request_message(self) -> typing.Optional[HttpRequestMessage]: ...
    @_property
    def response_message(self) -> typing.Optional[HttpResponseMessage]: ...
    @_property
    def succeeded(self) -> bool: ...
    @_property
    def value(self) -> str: ...

@typing.final
class HttpMethod_Static(type):
    @_property
    def delete(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def get(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def head(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def options(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def patch(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def post(cls) -> typing.Optional[HttpMethod]: ...
    @_property
    def put(cls) -> typing.Optional[HttpMethod]: ...

@typing.final
class HttpMethod(winrt.system.Object, metaclass=HttpMethod_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMethod: ...
    def __new__(cls: typing.Type[HttpMethod], method: str) -> HttpMethod:...
    def to_string(self) -> str: ...
    @_property
    def method(self) -> str: ...

@typing.final
class HttpMultipartContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IHttpContent]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMultipartContent: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMultipartContent], subtype: str) -> HttpMultipartContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMultipartContent], subtype: str, boundary: str) -> HttpMultipartContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMultipartContent]) -> HttpMultipartContent:...
    def add(self, content: typing.Optional[IHttpContent], /) -> None: ...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IHttpContent]]: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpMultipartFormDataContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IHttpContent]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMultipartFormDataContent: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMultipartFormDataContent], boundary: str) -> HttpMultipartFormDataContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMultipartFormDataContent]) -> HttpMultipartFormDataContent:...
    @typing.overload
    def add(self, content: typing.Optional[IHttpContent], /) -> None: ...
    @typing.overload
    def add(self, content: typing.Optional[IHttpContent], name: str, /) -> None: ...
    @typing.overload
    def add(self, content: typing.Optional[IHttpContent], name: str, file_name: str, /) -> None: ...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IHttpContent]]: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpRequestMessage(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpRequestMessage: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpRequestMessage], method: typing.Optional[HttpMethod], uri: typing.Optional[winrt.windows.foundation.Uri]) -> HttpRequestMessage:...
    @typing.overload
    def __new__(cls: typing.Type[HttpRequestMessage]) -> HttpRequestMessage:...
    def close(self) -> None: ...
    def to_string(self) -> str: ...
    @_property
    def request_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @request_uri.setter
    def request_uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def method(self) -> typing.Optional[HttpMethod]: ...
    @method.setter
    def method(self, value: typing.Optional[HttpMethod]) -> None: ...
    @_property
    def content(self) -> typing.Optional[IHttpContent]: ...
    @content.setter
    def content(self, value: typing.Optional[IHttpContent]) -> None: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpRequestHeaderCollection]: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, winrt.system.Object]]: ...
    @_property
    def transport_information(self) -> typing.Optional[HttpTransportInformation]: ...
    @_property
    def privacy_annotation(self) -> str: ...
    @privacy_annotation.setter
    def privacy_annotation(self, value: str) -> None: ...

@typing.final
class HttpRequestResult(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpRequestResult: ...
    def close(self) -> None: ...
    def to_string(self) -> str: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def request_message(self) -> typing.Optional[HttpRequestMessage]: ...
    @_property
    def response_message(self) -> typing.Optional[HttpResponseMessage]: ...
    @_property
    def succeeded(self) -> bool: ...

@typing.final
class HttpResponseMessage(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpResponseMessage: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpResponseMessage], status_code: HttpStatusCode) -> HttpResponseMessage:...
    @typing.overload
    def __new__(cls: typing.Type[HttpResponseMessage]) -> HttpResponseMessage:...
    def close(self) -> None: ...
    def ensure_success_status_code(self) -> typing.Optional[HttpResponseMessage]: ...
    def to_string(self) -> str: ...
    @_property
    def version(self) -> HttpVersion: ...
    @version.setter
    def version(self, value: HttpVersion) -> None: ...
    @_property
    def status_code(self) -> HttpStatusCode: ...
    @status_code.setter
    def status_code(self, value: HttpStatusCode) -> None: ...
    @_property
    def source(self) -> HttpResponseMessageSource: ...
    @source.setter
    def source(self, value: HttpResponseMessageSource) -> None: ...
    @_property
    def request_message(self) -> typing.Optional[HttpRequestMessage]: ...
    @request_message.setter
    def request_message(self, value: typing.Optional[HttpRequestMessage]) -> None: ...
    @_property
    def reason_phrase(self) -> str: ...
    @reason_phrase.setter
    def reason_phrase(self, value: str) -> None: ...
    @_property
    def content(self) -> typing.Optional[IHttpContent]: ...
    @content.setter
    def content(self, value: typing.Optional[IHttpContent]) -> None: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpResponseHeaderCollection]: ...
    @_property
    def is_success_status_code(self) -> bool: ...

@typing.final
class HttpStreamContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpStreamContent: ...
    def __new__(cls: typing.Type[HttpStreamContent], content: typing.Optional[winrt.windows.storage.streams.IInputStream]) -> HttpStreamContent:...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpStringContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpStringContent: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpStringContent], content: str) -> HttpStringContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpStringContent], content: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> HttpStringContent:...
    @typing.overload
    def __new__(cls: typing.Type[HttpStringContent], content: str, encoding: winrt.windows.storage.streams.UnicodeEncoding, media_type: str) -> HttpStringContent:...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def to_string(self) -> str: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

@typing.final
class HttpTransportInformation(winrt.system.Object):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransportInformation: ...
    def to_string(self) -> str: ...
    @_property
    def server_certificate(self) -> typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]: ...
    @_property
    def server_certificate_error_severity(self) -> winrt.windows.networking.sockets.SocketSslErrorSeverity: ...
    @_property
    def server_certificate_errors(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]]: ...
    @_property
    def server_intermediate_certificates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]]: ...

@typing.final
class IHttpContent(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IHttpContent: ...
    def buffer_all_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    def close(self) -> None: ...
    def read_as_buffer_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, winrt.system.UInt64]: ...
    def read_as_input_stream_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IInputStream, winrt.system.UInt64]: ...
    def read_as_string_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[str, winrt.system.UInt64]: ...
    def try_compute_length(self) -> typing.Tuple[bool, winrt.system.UInt64]: ...
    def write_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.system.UInt64, winrt.system.UInt64]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.web.http.headers.HttpContentHeaderCollection]: ...

