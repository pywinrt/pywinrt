// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Services.Maps.h"


namespace py::cpp::Windows::Services::Maps
{
    // ----- EnhancedWaypoint class --------------------

    static PyObject* _new_EnhancedWaypoint(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::WaypointKind>(args, 1);

                winrt::Windows::Services::Maps::EnhancedWaypoint instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_EnhancedWaypoint(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EnhancedWaypoint_get_Kind(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.EnhancedWaypoint", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnhancedWaypoint_get_Point(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.EnhancedWaypoint", L"Point"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_EnhancedWaypoint(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::EnhancedWaypoint>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_EnhancedWaypoint(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::EnhancedWaypoint>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnhancedWaypoint[] = {
        { "_assign_array_", _assign_array_EnhancedWaypoint, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnhancedWaypoint), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnhancedWaypoint[] = {
        { "kind", reinterpret_cast<getter>(EnhancedWaypoint_get_Kind), nullptr, nullptr, nullptr },
        { "point", reinterpret_cast<getter>(EnhancedWaypoint_get_Point), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EnhancedWaypoint[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnhancedWaypoint) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_EnhancedWaypoint) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnhancedWaypoint) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnhancedWaypoint) },
        { },
    };

    static PyType_Spec type_spec_EnhancedWaypoint =
    {
        "winrt._winrt_windows_services_maps.EnhancedWaypoint",
        sizeof(py::wrapper::Windows::Services::Maps::EnhancedWaypoint),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnhancedWaypoint
    };

    // ----- ManeuverWarning class --------------------

    static PyObject* _new_ManeuverWarning(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::ManeuverWarning>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::ManeuverWarning>::type_name);
        return nullptr;
    }

    static void _dealloc_ManeuverWarning(py::wrapper::Windows::Services::Maps::ManeuverWarning* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ManeuverWarning_get_Kind(py::wrapper::Windows::Services::Maps::ManeuverWarning* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.ManeuverWarning", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ManeuverWarning_get_Severity(py::wrapper::Windows::Services::Maps::ManeuverWarning* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.ManeuverWarning", L"Severity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Severity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ManeuverWarning(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::ManeuverWarning>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ManeuverWarning(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::ManeuverWarning>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ManeuverWarning[] = {
        { "_assign_array_", _assign_array_ManeuverWarning, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ManeuverWarning), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ManeuverWarning[] = {
        { "kind", reinterpret_cast<getter>(ManeuverWarning_get_Kind), nullptr, nullptr, nullptr },
        { "severity", reinterpret_cast<getter>(ManeuverWarning_get_Severity), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ManeuverWarning[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ManeuverWarning) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ManeuverWarning) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ManeuverWarning) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ManeuverWarning) },
        { },
    };

    static PyType_Spec type_spec_ManeuverWarning =
    {
        "winrt._winrt_windows_services_maps.ManeuverWarning",
        sizeof(py::wrapper::Windows::Services::Maps::ManeuverWarning),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ManeuverWarning
    };

    // ----- MapAddress class --------------------

    static PyObject* _new_MapAddress(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapAddress>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapAddress>::type_name);
        return nullptr;
    }

    static void _dealloc_MapAddress(py::wrapper::Windows::Services::Maps::MapAddress* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapAddress_get_BuildingFloor(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"BuildingFloor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BuildingFloor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingName(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"BuildingName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BuildingName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingRoom(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"BuildingRoom"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BuildingRoom());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingWing(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"BuildingWing"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BuildingWing());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Continent(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Continent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Continent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Country(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Country"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Country());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_CountryCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"CountryCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CountryCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_District(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"District"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.District());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Neighborhood(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Neighborhood"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Neighborhood());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_PostCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"PostCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PostCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Region(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Region"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Region());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_RegionCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"RegionCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RegionCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Street(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Street"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Street());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_StreetNumber(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"StreetNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StreetNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Town(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"Town"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Town());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_FormattedAddress(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapAddress", L"FormattedAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FormattedAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapAddress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapAddress>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapAddress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapAddress>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapAddress[] = {
        { "_assign_array_", _assign_array_MapAddress, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapAddress), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapAddress[] = {
        { "building_floor", reinterpret_cast<getter>(MapAddress_get_BuildingFloor), nullptr, nullptr, nullptr },
        { "building_name", reinterpret_cast<getter>(MapAddress_get_BuildingName), nullptr, nullptr, nullptr },
        { "building_room", reinterpret_cast<getter>(MapAddress_get_BuildingRoom), nullptr, nullptr, nullptr },
        { "building_wing", reinterpret_cast<getter>(MapAddress_get_BuildingWing), nullptr, nullptr, nullptr },
        { "continent", reinterpret_cast<getter>(MapAddress_get_Continent), nullptr, nullptr, nullptr },
        { "country", reinterpret_cast<getter>(MapAddress_get_Country), nullptr, nullptr, nullptr },
        { "country_code", reinterpret_cast<getter>(MapAddress_get_CountryCode), nullptr, nullptr, nullptr },
        { "district", reinterpret_cast<getter>(MapAddress_get_District), nullptr, nullptr, nullptr },
        { "neighborhood", reinterpret_cast<getter>(MapAddress_get_Neighborhood), nullptr, nullptr, nullptr },
        { "post_code", reinterpret_cast<getter>(MapAddress_get_PostCode), nullptr, nullptr, nullptr },
        { "region", reinterpret_cast<getter>(MapAddress_get_Region), nullptr, nullptr, nullptr },
        { "region_code", reinterpret_cast<getter>(MapAddress_get_RegionCode), nullptr, nullptr, nullptr },
        { "street", reinterpret_cast<getter>(MapAddress_get_Street), nullptr, nullptr, nullptr },
        { "street_number", reinterpret_cast<getter>(MapAddress_get_StreetNumber), nullptr, nullptr, nullptr },
        { "town", reinterpret_cast<getter>(MapAddress_get_Town), nullptr, nullptr, nullptr },
        { "formatted_address", reinterpret_cast<getter>(MapAddress_get_FormattedAddress), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapAddress[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapAddress) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapAddress) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapAddress) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapAddress) },
        { },
    };

    static PyType_Spec type_spec_MapAddress =
    {
        "winrt._winrt_windows_services_maps.MapAddress",
        sizeof(py::wrapper::Windows::Services::Maps::MapAddress),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapAddress
    };

    // ----- MapLocation class --------------------

    static PyObject* _new_MapLocation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapLocation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapLocation>::type_name);
        return nullptr;
    }

    static void _dealloc_MapLocation(py::wrapper::Windows::Services::Maps::MapLocation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapLocation_get_Address(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocation", L"Address"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Address());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_Description(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocation", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_DisplayName(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocation", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_Point(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocation", L"Point"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapLocation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapLocation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocation[] = {
        { "_assign_array_", _assign_array_MapLocation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapLocation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapLocation[] = {
        { "address", reinterpret_cast<getter>(MapLocation_get_Address), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(MapLocation_get_Description), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(MapLocation_get_DisplayName), nullptr, nullptr, nullptr },
        { "point", reinterpret_cast<getter>(MapLocation_get_Point), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapLocation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapLocation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapLocation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapLocation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapLocation) },
        { },
    };

    static PyType_Spec type_spec_MapLocation =
    {
        "winrt._winrt_windows_services_maps.MapLocation",
        sizeof(py::wrapper::Windows::Services::Maps::MapLocation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocation
    };

    // ----- MapLocationFinder class --------------------

    static PyObject* _new_MapLocationFinder(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapLocationFinder>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapLocationFinder>::type_name);
        return nullptr;
    }

    static PyObject* MapLocationFinder_FindLocationsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapLocationFinder", L"FindLocationsAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapLocationFinder", L"FindLocationsAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapLocationFinder_FindLocationsAtAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapLocationFinder", L"FindLocationsAtAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAtAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapLocationFinder", L"FindLocationsAtAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapLocationDesiredAccuracy>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAtAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocationFinder[] = {
        { }
    };

    static PyGetSetDef _getset_MapLocationFinder[] = {
        { }
    };

    static PyType_Slot _type_slots_MapLocationFinder[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapLocationFinder) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapLocationFinder) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapLocationFinder) },
        { },
    };

    static PyType_Spec type_spec_MapLocationFinder =
    {
        "winrt._winrt_windows_services_maps.MapLocationFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocationFinder
    };

    static PyGetSetDef getset_MapLocationFinder_Static[] = {
        { }
    };

    static PyMethodDef methods_MapLocationFinder_Static[] = {
        { "find_locations_async", reinterpret_cast<PyCFunction>(MapLocationFinder_FindLocationsAsync), METH_VARARGS, nullptr },
        { "find_locations_at_async", reinterpret_cast<PyCFunction>(MapLocationFinder_FindLocationsAtAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_MapLocationFinder_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_MapLocationFinder_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_MapLocationFinder_Static) },
        { }
    };

    static PyType_Spec type_spec_MapLocationFinder_Static =
    {
        "winrt._winrt_windows_services_maps.MapLocationFinder_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_MapLocationFinder_Static
    };

    // ----- MapLocationFinderResult class --------------------

    static PyObject* _new_MapLocationFinderResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapLocationFinderResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapLocationFinderResult>::type_name);
        return nullptr;
    }

    static void _dealloc_MapLocationFinderResult(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapLocationFinderResult_get_Locations(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocationFinderResult", L"Locations"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Locations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocationFinderResult_get_Status(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapLocationFinderResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapLocationFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapLocationFinderResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapLocationFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapLocationFinderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocationFinderResult[] = {
        { "_assign_array_", _assign_array_MapLocationFinderResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapLocationFinderResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapLocationFinderResult[] = {
        { "locations", reinterpret_cast<getter>(MapLocationFinderResult_get_Locations), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(MapLocationFinderResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapLocationFinderResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapLocationFinderResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapLocationFinderResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapLocationFinderResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapLocationFinderResult) },
        { },
    };

    static PyType_Spec type_spec_MapLocationFinderResult =
    {
        "winrt._winrt_windows_services_maps.MapLocationFinderResult",
        sizeof(py::wrapper::Windows::Services::Maps::MapLocationFinderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocationFinderResult
    };

    // ----- MapManager class --------------------

    static PyObject* _new_MapManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapManager>::type_name);
        return nullptr;
    }

    static PyObject* MapManager_ShowDownloadedMapsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapManager", L"ShowDownloadedMapsUI", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Services::Maps::MapManager::ShowDownloadedMapsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapManager_ShowMapsUpdateUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapManager", L"ShowMapsUpdateUI", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Services::Maps::MapManager::ShowMapsUpdateUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapManager[] = {
        { }
    };

    static PyGetSetDef _getset_MapManager[] = {
        { }
    };

    static PyType_Slot _type_slots_MapManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapManager) },
        { },
    };

    static PyType_Spec type_spec_MapManager =
    {
        "winrt._winrt_windows_services_maps.MapManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapManager
    };

    static PyGetSetDef getset_MapManager_Static[] = {
        { }
    };

    static PyMethodDef methods_MapManager_Static[] = {
        { "show_downloaded_maps_u_i", reinterpret_cast<PyCFunction>(MapManager_ShowDownloadedMapsUI), METH_VARARGS, nullptr },
        { "show_maps_update_u_i", reinterpret_cast<PyCFunction>(MapManager_ShowMapsUpdateUI), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_MapManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_MapManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_MapManager_Static) },
        { }
    };

    static PyType_Spec type_spec_MapManager_Static =
    {
        "winrt._winrt_windows_services_maps.MapManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_MapManager_Static
    };

    // ----- MapRoute class --------------------

    static PyObject* _new_MapRoute(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapRoute>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapRoute>::type_name);
        return nullptr;
    }

    static void _dealloc_MapRoute(py::wrapper::Windows::Services::Maps::MapRoute* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapRoute_get_BoundingBox(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"BoundingBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_EstimatedDuration(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"EstimatedDuration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EstimatedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_IsTrafficBased(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"IsTrafficBased"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsTrafficBased());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_Legs(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"Legs"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Legs());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"LengthInMeters"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_Path(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"Path"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_HasBlockedRoads(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"HasBlockedRoads"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HasBlockedRoads());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_ViolatedRestrictions(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"ViolatedRestrictions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ViolatedRestrictions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_DurationWithoutTraffic(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"DurationWithoutTraffic"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DurationWithoutTraffic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_TrafficCongestion(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"TrafficCongestion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TrafficCongestion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_IsScenic(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRoute", L"IsScenic"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsScenic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapRoute(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapRoute>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapRoute(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRoute>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRoute[] = {
        { "_assign_array_", _assign_array_MapRoute, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRoute), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRoute[] = {
        { "bounding_box", reinterpret_cast<getter>(MapRoute_get_BoundingBox), nullptr, nullptr, nullptr },
        { "estimated_duration", reinterpret_cast<getter>(MapRoute_get_EstimatedDuration), nullptr, nullptr, nullptr },
        { "is_traffic_based", reinterpret_cast<getter>(MapRoute_get_IsTrafficBased), nullptr, nullptr, nullptr },
        { "legs", reinterpret_cast<getter>(MapRoute_get_Legs), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRoute_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "path", reinterpret_cast<getter>(MapRoute_get_Path), nullptr, nullptr, nullptr },
        { "has_blocked_roads", reinterpret_cast<getter>(MapRoute_get_HasBlockedRoads), nullptr, nullptr, nullptr },
        { "violated_restrictions", reinterpret_cast<getter>(MapRoute_get_ViolatedRestrictions), nullptr, nullptr, nullptr },
        { "duration_without_traffic", reinterpret_cast<getter>(MapRoute_get_DurationWithoutTraffic), nullptr, nullptr, nullptr },
        { "traffic_congestion", reinterpret_cast<getter>(MapRoute_get_TrafficCongestion), nullptr, nullptr, nullptr },
        { "is_scenic", reinterpret_cast<getter>(MapRoute_get_IsScenic), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRoute[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRoute) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapRoute) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRoute) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRoute) },
        { },
    };

    static PyType_Spec type_spec_MapRoute =
    {
        "winrt._winrt_windows_services_maps.MapRoute",
        sizeof(py::wrapper::Windows::Services::Maps::MapRoute),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRoute
    };

    // ----- MapRouteDrivingOptions class --------------------

    static PyObject* _new_MapRouteDrivingOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::MapRouteDrivingOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MapRouteDrivingOptions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapRouteDrivingOptions_get_RouteRestrictions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"RouteRestrictions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RouteRestrictions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_RouteRestrictions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"RouteRestrictions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(arg);

            self->obj.RouteRestrictions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_RouteOptimization(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"RouteOptimization"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RouteOptimization());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_RouteOptimization(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"RouteOptimization"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(arg);

            self->obj.RouteOptimization(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_MaxAlternateRouteCount(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"MaxAlternateRouteCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaxAlternateRouteCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_MaxAlternateRouteCount(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"MaxAlternateRouteCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxAlternateRouteCount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_InitialHeading(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"InitialHeading"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InitialHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_InitialHeading(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"InitialHeading"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<double>>(arg);

            self->obj.InitialHeading(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_DepartureTime(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"DepartureTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DepartureTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_DepartureTime(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteDrivingOptions", L"DepartureTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.DepartureTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_MapRouteDrivingOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapRouteDrivingOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapRouteDrivingOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteDrivingOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteDrivingOptions[] = {
        { "_assign_array_", _assign_array_MapRouteDrivingOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteDrivingOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteDrivingOptions[] = {
        { "route_restrictions", reinterpret_cast<getter>(MapRouteDrivingOptions_get_RouteRestrictions), reinterpret_cast<setter>(MapRouteDrivingOptions_put_RouteRestrictions), nullptr, nullptr },
        { "route_optimization", reinterpret_cast<getter>(MapRouteDrivingOptions_get_RouteOptimization), reinterpret_cast<setter>(MapRouteDrivingOptions_put_RouteOptimization), nullptr, nullptr },
        { "max_alternate_route_count", reinterpret_cast<getter>(MapRouteDrivingOptions_get_MaxAlternateRouteCount), reinterpret_cast<setter>(MapRouteDrivingOptions_put_MaxAlternateRouteCount), nullptr, nullptr },
        { "initial_heading", reinterpret_cast<getter>(MapRouteDrivingOptions_get_InitialHeading), reinterpret_cast<setter>(MapRouteDrivingOptions_put_InitialHeading), nullptr, nullptr },
        { "departure_time", reinterpret_cast<getter>(MapRouteDrivingOptions_get_DepartureTime), reinterpret_cast<setter>(MapRouteDrivingOptions_put_DepartureTime), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteDrivingOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRouteDrivingOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapRouteDrivingOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRouteDrivingOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRouteDrivingOptions) },
        { },
    };

    static PyType_Spec type_spec_MapRouteDrivingOptions =
    {
        "winrt._winrt_windows_services_maps.MapRouteDrivingOptions",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteDrivingOptions
    };

    // ----- MapRouteFinder class --------------------

    static PyObject* _new_MapRouteFinder(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapRouteFinder>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapRouteFinder>::type_name);
        return nullptr;
    }

    static PyObject* MapRouteFinder_GetDrivingRouteAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteDrivingOptions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 3);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 3);
                auto param4 = py::convert_to<double>(args, 4);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetDrivingRouteFromEnhancedWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromEnhancedWaypointsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Maps::EnhancedWaypoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromEnhancedWaypointsAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Maps::EnhancedWaypoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteDrivingOptions>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetDrivingRouteFromWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromWaypointsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromWaypointsAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromWaypointsAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetDrivingRouteFromWaypointsAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 2);
                auto param3 = py::convert_to<double>(args, 3);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetWalkingRouteAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetWalkingRouteAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetWalkingRouteAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetWalkingRouteFromWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.MapRouteFinder", L"GetWalkingRouteFromWaypointsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetWalkingRouteFromWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteFinder[] = {
        { }
    };

    static PyGetSetDef _getset_MapRouteFinder[] = {
        { }
    };

    static PyType_Slot _type_slots_MapRouteFinder[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRouteFinder) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRouteFinder) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRouteFinder) },
        { },
    };

    static PyType_Spec type_spec_MapRouteFinder =
    {
        "winrt._winrt_windows_services_maps.MapRouteFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteFinder
    };

    static PyGetSetDef getset_MapRouteFinder_Static[] = {
        { }
    };

    static PyMethodDef methods_MapRouteFinder_Static[] = {
        { "get_driving_route_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteAsync), METH_VARARGS, nullptr },
        { "get_driving_route_from_enhanced_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteFromEnhancedWaypointsAsync), METH_VARARGS, nullptr },
        { "get_driving_route_from_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteFromWaypointsAsync), METH_VARARGS, nullptr },
        { "get_walking_route_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetWalkingRouteAsync), METH_VARARGS, nullptr },
        { "get_walking_route_from_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetWalkingRouteFromWaypointsAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_MapRouteFinder_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_MapRouteFinder_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_MapRouteFinder_Static) },
        { }
    };

    static PyType_Spec type_spec_MapRouteFinder_Static =
    {
        "winrt._winrt_windows_services_maps.MapRouteFinder_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_MapRouteFinder_Static
    };

    // ----- MapRouteFinderResult class --------------------

    static PyObject* _new_MapRouteFinderResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapRouteFinderResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapRouteFinderResult>::type_name);
        return nullptr;
    }

    static void _dealloc_MapRouteFinderResult(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapRouteFinderResult_get_Route(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteFinderResult", L"Route"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Route());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteFinderResult_get_Status(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteFinderResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteFinderResult_get_AlternateRoutes(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteFinderResult", L"AlternateRoutes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlternateRoutes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapRouteFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapRouteFinderResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapRouteFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteFinderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteFinderResult[] = {
        { "_assign_array_", _assign_array_MapRouteFinderResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteFinderResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteFinderResult[] = {
        { "route", reinterpret_cast<getter>(MapRouteFinderResult_get_Route), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(MapRouteFinderResult_get_Status), nullptr, nullptr, nullptr },
        { "alternate_routes", reinterpret_cast<getter>(MapRouteFinderResult_get_AlternateRoutes), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteFinderResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRouteFinderResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapRouteFinderResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRouteFinderResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRouteFinderResult) },
        { },
    };

    static PyType_Spec type_spec_MapRouteFinderResult =
    {
        "winrt._winrt_windows_services_maps.MapRouteFinderResult",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteFinderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteFinderResult
    };

    // ----- MapRouteLeg class --------------------

    static PyObject* _new_MapRouteLeg(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapRouteLeg>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapRouteLeg>::type_name);
        return nullptr;
    }

    static void _dealloc_MapRouteLeg(py::wrapper::Windows::Services::Maps::MapRouteLeg* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapRouteLeg_get_BoundingBox(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"BoundingBox"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_EstimatedDuration(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"EstimatedDuration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EstimatedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"LengthInMeters"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_Maneuvers(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"Maneuvers"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Maneuvers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_Path(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"Path"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_DurationWithoutTraffic(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"DurationWithoutTraffic"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DurationWithoutTraffic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_TrafficCongestion(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteLeg", L"TrafficCongestion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TrafficCongestion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapRouteLeg(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapRouteLeg>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapRouteLeg(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteLeg>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteLeg[] = {
        { "_assign_array_", _assign_array_MapRouteLeg, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteLeg), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteLeg[] = {
        { "bounding_box", reinterpret_cast<getter>(MapRouteLeg_get_BoundingBox), nullptr, nullptr, nullptr },
        { "estimated_duration", reinterpret_cast<getter>(MapRouteLeg_get_EstimatedDuration), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRouteLeg_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "maneuvers", reinterpret_cast<getter>(MapRouteLeg_get_Maneuvers), nullptr, nullptr, nullptr },
        { "path", reinterpret_cast<getter>(MapRouteLeg_get_Path), nullptr, nullptr, nullptr },
        { "duration_without_traffic", reinterpret_cast<getter>(MapRouteLeg_get_DurationWithoutTraffic), nullptr, nullptr, nullptr },
        { "traffic_congestion", reinterpret_cast<getter>(MapRouteLeg_get_TrafficCongestion), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteLeg[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRouteLeg) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapRouteLeg) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRouteLeg) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRouteLeg) },
        { },
    };

    static PyType_Spec type_spec_MapRouteLeg =
    {
        "winrt._winrt_windows_services_maps.MapRouteLeg",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteLeg),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteLeg
    };

    // ----- MapRouteManeuver class --------------------

    static PyObject* _new_MapRouteManeuver(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapRouteManeuver>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapRouteManeuver>::type_name);
        return nullptr;
    }

    static void _dealloc_MapRouteManeuver(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MapRouteManeuver_get_ExitNumber(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"ExitNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExitNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_InstructionText(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"InstructionText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InstructionText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_Kind(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"LengthInMeters"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_ManeuverNotices(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"ManeuverNotices"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ManeuverNotices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StartingPoint(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"StartingPoint"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StartingPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_EndHeading(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"EndHeading"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EndHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StartHeading(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"StartHeading"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StartHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StreetName(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"StreetName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StreetName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_Warnings(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapRouteManeuver", L"Warnings"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Warnings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MapRouteManeuver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::MapRouteManeuver>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MapRouteManeuver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteManeuver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteManeuver[] = {
        { "_assign_array_", _assign_array_MapRouteManeuver, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteManeuver), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteManeuver[] = {
        { "exit_number", reinterpret_cast<getter>(MapRouteManeuver_get_ExitNumber), nullptr, nullptr, nullptr },
        { "instruction_text", reinterpret_cast<getter>(MapRouteManeuver_get_InstructionText), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(MapRouteManeuver_get_Kind), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRouteManeuver_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "maneuver_notices", reinterpret_cast<getter>(MapRouteManeuver_get_ManeuverNotices), nullptr, nullptr, nullptr },
        { "starting_point", reinterpret_cast<getter>(MapRouteManeuver_get_StartingPoint), nullptr, nullptr, nullptr },
        { "end_heading", reinterpret_cast<getter>(MapRouteManeuver_get_EndHeading), nullptr, nullptr, nullptr },
        { "start_heading", reinterpret_cast<getter>(MapRouteManeuver_get_StartHeading), nullptr, nullptr, nullptr },
        { "street_name", reinterpret_cast<getter>(MapRouteManeuver_get_StreetName), nullptr, nullptr, nullptr },
        { "warnings", reinterpret_cast<getter>(MapRouteManeuver_get_Warnings), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteManeuver[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapRouteManeuver) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MapRouteManeuver) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapRouteManeuver) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapRouteManeuver) },
        { },
    };

    static PyType_Spec type_spec_MapRouteManeuver =
    {
        "winrt._winrt_windows_services_maps.MapRouteManeuver",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteManeuver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteManeuver
    };

    // ----- MapService class --------------------

    static PyObject* _new_MapService(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::MapService>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::MapService>::type_name);
        return nullptr;
    }

    static PyObject* MapService_get_ServiceToken(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"ServiceToken"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::ServiceToken());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapService_put_ServiceToken(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"ServiceToken"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            winrt::Windows::Services::Maps::MapService::ServiceToken(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapService_get_WorldViewRegionCode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"WorldViewRegionCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::WorldViewRegionCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_get_DataAttributions(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"DataAttributions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::DataAttributions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_get_DataUsagePreference(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"DataUsagePreference"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::DataUsagePreference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapService_put_DataUsagePreference(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.MapService", L"DataUsagePreference"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapServiceDataUsagePreference>(arg);

            winrt::Windows::Services::Maps::MapService::DataUsagePreference(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_MapService[] = {
        { }
    };

    static PyGetSetDef _getset_MapService[] = {
        { }
    };

    static PyType_Slot _type_slots_MapService[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MapService) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MapService) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MapService) },
        { },
    };

    static PyType_Spec type_spec_MapService =
    {
        "winrt._winrt_windows_services_maps.MapService",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapService
    };

    static PyGetSetDef getset_MapService_Static[] = {
        { "service_token", reinterpret_cast<getter>(MapService_get_ServiceToken), reinterpret_cast<setter>(MapService_put_ServiceToken), nullptr, nullptr },
        { "world_view_region_code", reinterpret_cast<getter>(MapService_get_WorldViewRegionCode), nullptr, nullptr, nullptr },
        { "data_attributions", reinterpret_cast<getter>(MapService_get_DataAttributions), nullptr, nullptr, nullptr },
        { "data_usage_preference", reinterpret_cast<getter>(MapService_get_DataUsagePreference), reinterpret_cast<setter>(MapService_put_DataUsagePreference), nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_MapService_Static[] = {
        { }
    };

    static PyType_Slot type_slots_MapService_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_MapService_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_MapService_Static) },
        { }
    };

    static PyType_Spec type_spec_MapService_Static =
    {
        "winrt._winrt_windows_services_maps.MapService_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_MapService_Static
    };

    // ----- PlaceInfo class --------------------

    static PyObject* _new_PlaceInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Maps::PlaceInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Maps::PlaceInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_PlaceInfo(py::wrapper::Windows::Services::Maps::PlaceInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlaceInfo_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"Create", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"Create", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::Create(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromAddress(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"CreateFromAddress", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromAddress(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"CreateFromAddress", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromAddress(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromIdentifier(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"CreateFromIdentifier", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromIdentifier(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"CreateFromIdentifier", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromIdentifier(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromMapLocation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"CreateFromMapLocation", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapLocation>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromMapLocation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_Show(py::wrapper::Windows::Services::Maps::PlaceInfo* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"Show", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.Show(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Maps.PlaceInfo", L"Show", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                self->obj.Show(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfo", L"DisplayAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfo", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_Geoshape(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfo", L"Geoshape"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Geoshape());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_Identifier(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfo", L"Identifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_IsShowSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfo", L"IsShowSupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Services::Maps::PlaceInfo::IsShowSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PlaceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::PlaceInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlaceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::PlaceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaceInfo[] = {
        { "show", reinterpret_cast<PyCFunction>(PlaceInfo_Show), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PlaceInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlaceInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlaceInfo[] = {
        { "display_address", reinterpret_cast<getter>(PlaceInfo_get_DisplayAddress), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(PlaceInfo_get_DisplayName), nullptr, nullptr, nullptr },
        { "geoshape", reinterpret_cast<getter>(PlaceInfo_get_Geoshape), nullptr, nullptr, nullptr },
        { "identifier", reinterpret_cast<getter>(PlaceInfo_get_Identifier), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlaceInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlaceInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlaceInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlaceInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlaceInfo) },
        { },
    };

    static PyType_Spec type_spec_PlaceInfo =
    {
        "winrt._winrt_windows_services_maps.PlaceInfo",
        sizeof(py::wrapper::Windows::Services::Maps::PlaceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaceInfo
    };

    static PyGetSetDef getset_PlaceInfo_Static[] = {
        { "is_show_supported", reinterpret_cast<getter>(PlaceInfo_get_IsShowSupported), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_PlaceInfo_Static[] = {
        { "create", reinterpret_cast<PyCFunction>(PlaceInfo_Create), METH_VARARGS, nullptr },
        { "create_from_address", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromAddress), METH_VARARGS, nullptr },
        { "create_from_identifier", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromIdentifier), METH_VARARGS, nullptr },
        { "create_from_map_location", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromMapLocation), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_PlaceInfo_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PlaceInfo_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PlaceInfo_Static) },
        { }
    };

    static PyType_Spec type_spec_PlaceInfo_Static =
    {
        "winrt._winrt_windows_services_maps.PlaceInfo_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PlaceInfo_Static
    };

    // ----- PlaceInfoCreateOptions class --------------------

    static PyObject* _new_PlaceInfoCreateOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::PlaceInfoCreateOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PlaceInfoCreateOptions(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PlaceInfoCreateOptions_get_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfoCreateOptions", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlaceInfoCreateOptions_put_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfoCreateOptions", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PlaceInfoCreateOptions_get_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfoCreateOptions", L"DisplayAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlaceInfoCreateOptions_put_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Maps.PlaceInfoCreateOptions", L"DisplayAddress"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayAddress(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_PlaceInfoCreateOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PlaceInfoCreateOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaceInfoCreateOptions[] = {
        { "_assign_array_", _assign_array_PlaceInfoCreateOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlaceInfoCreateOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlaceInfoCreateOptions[] = {
        { "display_name", reinterpret_cast<getter>(PlaceInfoCreateOptions_get_DisplayName), reinterpret_cast<setter>(PlaceInfoCreateOptions_put_DisplayName), nullptr, nullptr },
        { "display_address", reinterpret_cast<getter>(PlaceInfoCreateOptions_get_DisplayAddress), reinterpret_cast<setter>(PlaceInfoCreateOptions_put_DisplayAddress), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlaceInfoCreateOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PlaceInfoCreateOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PlaceInfoCreateOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PlaceInfoCreateOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PlaceInfoCreateOptions) },
        { },
    };

    static PyType_Spec type_spec_PlaceInfoCreateOptions =
    {
        "winrt._winrt_windows_services_maps.PlaceInfoCreateOptions",
        sizeof(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaceInfoCreateOptions
    };

    // ----- Windows.Services.Maps Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Services::Maps");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_services_maps",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Services::Maps

PyMODINIT_FUNC PyInit__winrt_windows_services_maps(void) noexcept
{
    using namespace py::cpp::Windows::Services::Maps;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_EnhancedWaypoint, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ManeuverWarning, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapAddress, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapLocation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_MapLocationFinder_Static{PyType_FromSpec(&type_spec_MapLocationFinder_Static)};
    if (!type_MapLocationFinder_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapLocationFinder, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_MapLocationFinder_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapLocationFinderResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_MapManager_Static{PyType_FromSpec(&type_spec_MapManager_Static)};
    if (!type_MapManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_MapManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRoute, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRouteDrivingOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_MapRouteFinder_Static{PyType_FromSpec(&type_spec_MapRouteFinder_Static)};
    if (!type_MapRouteFinder_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRouteFinder, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_MapRouteFinder_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRouteFinderResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRouteLeg, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapRouteManeuver, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_MapService_Static{PyType_FromSpec(&type_spec_MapService_Static)};
    if (!type_MapService_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MapService, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_MapService_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_PlaceInfo_Static{PyType_FromSpec(&type_spec_PlaceInfo_Static)};
    if (!type_PlaceInfo_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PlaceInfo, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PlaceInfo_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PlaceInfoCreateOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
