# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.ui.popups as windows_ui_popups

from winrt.windows.services.maps import ManeuverWarningKind, ManeuverWarningSeverity, MapLocationDesiredAccuracy, MapLocationFinderStatus, MapManeuverNotices, MapRouteFinderStatus, MapRouteManeuverKind, MapRouteOptimization, MapRouteRestrictions, MapServiceDataUsagePreference, TrafficCongestion, WaypointKind

Self = typing.TypeVar('Self')

@typing.final
class EnhancedWaypoint(winrt.system.Object):
    def __new__(cls: typing.Type[Self], point: windows_devices_geolocation.Geopoint, kind: WaypointKind) -> Self: ...
    # Windows.Services.Maps.WaypointKind Windows.Services.Maps.EnhancedWaypoint::get_Kind()
    @_property
    def kind(self) -> WaypointKind: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Services.Maps.EnhancedWaypoint::get_Point()
    @_property
    def point(self) -> windows_devices_geolocation.Geopoint: ...

@typing.final
class ManeuverWarning(winrt.system.Object):
    # Windows.Services.Maps.ManeuverWarningKind Windows.Services.Maps.ManeuverWarning::get_Kind()
    @_property
    def kind(self) -> ManeuverWarningKind: ...
    # Windows.Services.Maps.ManeuverWarningSeverity Windows.Services.Maps.ManeuverWarning::get_Severity()
    @_property
    def severity(self) -> ManeuverWarningSeverity: ...

@typing.final
class MapAddress(winrt.system.Object):
    # System.String Windows.Services.Maps.MapAddress::get_BuildingFloor()
    @_property
    def building_floor(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_BuildingName()
    @_property
    def building_name(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_BuildingRoom()
    @_property
    def building_room(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_BuildingWing()
    @_property
    def building_wing(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Continent()
    @_property
    def continent(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Country()
    @_property
    def country(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_CountryCode()
    @_property
    def country_code(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_District()
    @_property
    def district(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Neighborhood()
    @_property
    def neighborhood(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_PostCode()
    @_property
    def post_code(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Region()
    @_property
    def region(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_RegionCode()
    @_property
    def region_code(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Street()
    @_property
    def street(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_StreetNumber()
    @_property
    def street_number(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_Town()
    @_property
    def town(self) -> str: ...
    # System.String Windows.Services.Maps.MapAddress::get_FormattedAddress()
    @_property
    def formatted_address(self) -> str: ...

@typing.final
class MapLocation(winrt.system.Object):
    # Windows.Services.Maps.MapAddress Windows.Services.Maps.MapLocation::get_Address()
    @_property
    def address(self) -> MapAddress: ...
    # System.String Windows.Services.Maps.MapLocation::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.Services.Maps.MapLocation::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Services.Maps.MapLocation::get_Point()
    @_property
    def point(self) -> windows_devices_geolocation.Geopoint: ...

@typing.final
class MapLocationFinder_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapLocationFinderResult> Windows.Services.Maps.MapLocationFinder::FindLocationsAsync(System.String,Windows.Devices.Geolocation.Geopoint)
    def find_locations_async(cls, search_text: str, reference_point: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[MapLocationFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapLocationFinderResult> Windows.Services.Maps.MapLocationFinder::FindLocationsAtAsync(Windows.Devices.Geolocation.Geopoint)
    def find_locations_at_async(cls, query_point: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[MapLocationFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapLocationFinderResult> Windows.Services.Maps.MapLocationFinder::FindLocationsAtAsync(Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.MapLocationDesiredAccuracy)
    def find_locations_at_with_accuracy_async(cls, query_point: windows_devices_geolocation.Geopoint, accuracy: MapLocationDesiredAccuracy, /) -> windows_foundation.IAsyncOperation[MapLocationFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapLocationFinderResult> Windows.Services.Maps.MapLocationFinder::FindLocationsAsync(System.String,Windows.Devices.Geolocation.Geopoint,System.UInt32)
    def find_locations_with_max_count_async(cls, search_text: str, reference_point: windows_devices_geolocation.Geopoint, max_count: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[MapLocationFinderResult]: ...

@typing.final
class MapLocationFinder(winrt.system.Object, metaclass=MapLocationFinder_Static):
    pass

@typing.final
class MapLocationFinderResult(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.MapLocation> Windows.Services.Maps.MapLocationFinderResult::get_Locations()
    @_property
    def locations(self) -> typing.Sequence[MapLocation]: ...
    # Windows.Services.Maps.MapLocationFinderStatus Windows.Services.Maps.MapLocationFinderResult::get_Status()
    @_property
    def status(self) -> MapLocationFinderStatus: ...

@typing.final
class MapManager_Static(type):
    # System.Void Windows.Services.Maps.MapManager::ShowDownloadedMapsUI()
    def show_downloaded_maps_ui(cls) -> None: ...
    # System.Void Windows.Services.Maps.MapManager::ShowMapsUpdateUI()
    def show_maps_update_ui(cls) -> None: ...

@typing.final
class MapManager(winrt.system.Object, metaclass=MapManager_Static):
    pass

@typing.final
class MapRoute(winrt.system.Object):
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Services.Maps.MapRoute::get_BoundingBox()
    @_property
    def bounding_box(self) -> windows_devices_geolocation.GeoboundingBox: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.MapRoute::get_EstimatedDuration()
    @_property
    def estimated_duration(self) -> datetime.timedelta: ...
    # System.Boolean Windows.Services.Maps.MapRoute::get_IsTrafficBased()
    @_property
    def is_traffic_based(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.MapRouteLeg> Windows.Services.Maps.MapRoute::get_Legs()
    @_property
    def legs(self) -> typing.Sequence[MapRouteLeg]: ...
    # System.Double Windows.Services.Maps.MapRoute::get_LengthInMeters()
    @_property
    def length_in_meters(self) -> winrt.system.Double: ...
    # Windows.Devices.Geolocation.Geopath Windows.Services.Maps.MapRoute::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # System.Boolean Windows.Services.Maps.MapRoute::get_HasBlockedRoads()
    @_property
    def has_blocked_roads(self) -> bool: ...
    # Windows.Services.Maps.MapRouteRestrictions Windows.Services.Maps.MapRoute::get_ViolatedRestrictions()
    @_property
    def violated_restrictions(self) -> MapRouteRestrictions: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.MapRoute::get_DurationWithoutTraffic()
    @_property
    def duration_without_traffic(self) -> datetime.timedelta: ...
    # Windows.Services.Maps.TrafficCongestion Windows.Services.Maps.MapRoute::get_TrafficCongestion()
    @_property
    def traffic_congestion(self) -> TrafficCongestion: ...
    # System.Boolean Windows.Services.Maps.MapRoute::get_IsScenic()
    @_property
    def is_scenic(self) -> bool: ...

@typing.final
class MapRouteDrivingOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Services.Maps.MapRouteRestrictions Windows.Services.Maps.MapRouteDrivingOptions::get_RouteRestrictions()
    @_property
    def route_restrictions(self) -> MapRouteRestrictions: ...
    # System.Void Windows.Services.Maps.MapRouteDrivingOptions::put_RouteRestrictions(Windows.Services.Maps.MapRouteRestrictions)
    @route_restrictions.setter
    def route_restrictions(self, value: MapRouteRestrictions) -> None: ...
    # Windows.Services.Maps.MapRouteOptimization Windows.Services.Maps.MapRouteDrivingOptions::get_RouteOptimization()
    @_property
    def route_optimization(self) -> MapRouteOptimization: ...
    # System.Void Windows.Services.Maps.MapRouteDrivingOptions::put_RouteOptimization(Windows.Services.Maps.MapRouteOptimization)
    @route_optimization.setter
    def route_optimization(self, value: MapRouteOptimization) -> None: ...
    # System.UInt32 Windows.Services.Maps.MapRouteDrivingOptions::get_MaxAlternateRouteCount()
    @_property
    def max_alternate_route_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Services.Maps.MapRouteDrivingOptions::put_MaxAlternateRouteCount(System.UInt32)
    @max_alternate_route_count.setter
    def max_alternate_route_count(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Services.Maps.MapRouteDrivingOptions::get_InitialHeading()
    @_property
    def initial_heading(self) -> typing.Optional[winrt.system.Double]: ...
    # System.Void Windows.Services.Maps.MapRouteDrivingOptions::put_InitialHeading(Windows.Foundation.IReference`1<System.Double>)
    @initial_heading.setter
    def initial_heading(self, value: typing.Optional[winrt.system.Double]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Services.Maps.MapRouteDrivingOptions::get_DepartureTime()
    @_property
    def departure_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.Services.Maps.MapRouteDrivingOptions::put_DepartureTime(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @departure_time.setter
    def departure_time(self, value: typing.Optional[datetime.datetime]) -> None: ...

@typing.final
class MapRouteFinder_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint)
    def get_driving_route_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Services.Maps.EnhancedWaypoint>)
    def get_driving_route_from_enhanced_waypoints_async(cls, waypoints: typing.Iterable[EnhancedWaypoint], /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Services.Maps.EnhancedWaypoint>,Windows.Services.Maps.MapRouteDrivingOptions)
    def get_driving_route_from_enhanced_waypoints_with_options_async(cls, waypoints: typing.Iterable[EnhancedWaypoint], options: MapRouteDrivingOptions, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>,Windows.Services.Maps.MapRouteOptimization)
    def get_driving_route_from_waypoints_and_optimization_async(cls, way_points: typing.Iterable[windows_devices_geolocation.Geopoint], optimization: MapRouteOptimization, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>)
    def get_driving_route_from_waypoints_async(cls, way_points: typing.Iterable[windows_devices_geolocation.Geopoint], /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>,Windows.Services.Maps.MapRouteOptimization,Windows.Services.Maps.MapRouteRestrictions)
    def get_driving_route_from_waypoints_optimization_and_restrictions_async(cls, way_points: typing.Iterable[windows_devices_geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>,Windows.Services.Maps.MapRouteOptimization,Windows.Services.Maps.MapRouteRestrictions,System.Double)
    def get_driving_route_from_waypoints_optimization_restrictions_and_heading_async(cls, way_points: typing.Iterable[windows_devices_geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, heading_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.MapRouteOptimization,Windows.Services.Maps.MapRouteRestrictions)
    def get_driving_route_with_optimization_and_restrictions_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.MapRouteOptimization)
    def get_driving_route_with_optimization_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, optimization: MapRouteOptimization, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.MapRouteOptimization,Windows.Services.Maps.MapRouteRestrictions,System.Double)
    def get_driving_route_with_optimization_restrictions_and_heading_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, heading_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetDrivingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.MapRouteDrivingOptions)
    def get_driving_route_with_options_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, options: MapRouteDrivingOptions, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetWalkingRouteAsync(Windows.Devices.Geolocation.Geopoint,Windows.Devices.Geolocation.Geopoint)
    def get_walking_route_async(cls, start_point: windows_devices_geolocation.Geopoint, end_point: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Services.Maps.MapRouteFinderResult> Windows.Services.Maps.MapRouteFinder::GetWalkingRouteFromWaypointsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>)
    def get_walking_route_from_waypoints_async(cls, way_points: typing.Iterable[windows_devices_geolocation.Geopoint], /) -> windows_foundation.IAsyncOperation[MapRouteFinderResult]: ...

@typing.final
class MapRouteFinder(winrt.system.Object, metaclass=MapRouteFinder_Static):
    pass

@typing.final
class MapRouteFinderResult(winrt.system.Object):
    # Windows.Services.Maps.MapRoute Windows.Services.Maps.MapRouteFinderResult::get_Route()
    @_property
    def route(self) -> MapRoute: ...
    # Windows.Services.Maps.MapRouteFinderStatus Windows.Services.Maps.MapRouteFinderResult::get_Status()
    @_property
    def status(self) -> MapRouteFinderStatus: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.MapRoute> Windows.Services.Maps.MapRouteFinderResult::get_AlternateRoutes()
    @_property
    def alternate_routes(self) -> typing.Sequence[MapRoute]: ...

@typing.final
class MapRouteLeg(winrt.system.Object):
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Services.Maps.MapRouteLeg::get_BoundingBox()
    @_property
    def bounding_box(self) -> windows_devices_geolocation.GeoboundingBox: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.MapRouteLeg::get_EstimatedDuration()
    @_property
    def estimated_duration(self) -> datetime.timedelta: ...
    # System.Double Windows.Services.Maps.MapRouteLeg::get_LengthInMeters()
    @_property
    def length_in_meters(self) -> winrt.system.Double: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.MapRouteManeuver> Windows.Services.Maps.MapRouteLeg::get_Maneuvers()
    @_property
    def maneuvers(self) -> typing.Sequence[MapRouteManeuver]: ...
    # Windows.Devices.Geolocation.Geopath Windows.Services.Maps.MapRouteLeg::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.MapRouteLeg::get_DurationWithoutTraffic()
    @_property
    def duration_without_traffic(self) -> datetime.timedelta: ...
    # Windows.Services.Maps.TrafficCongestion Windows.Services.Maps.MapRouteLeg::get_TrafficCongestion()
    @_property
    def traffic_congestion(self) -> TrafficCongestion: ...

@typing.final
class MapRouteManeuver(winrt.system.Object):
    # System.String Windows.Services.Maps.MapRouteManeuver::get_ExitNumber()
    @_property
    def exit_number(self) -> str: ...
    # System.String Windows.Services.Maps.MapRouteManeuver::get_InstructionText()
    @_property
    def instruction_text(self) -> str: ...
    # Windows.Services.Maps.MapRouteManeuverKind Windows.Services.Maps.MapRouteManeuver::get_Kind()
    @_property
    def kind(self) -> MapRouteManeuverKind: ...
    # System.Double Windows.Services.Maps.MapRouteManeuver::get_LengthInMeters()
    @_property
    def length_in_meters(self) -> winrt.system.Double: ...
    # Windows.Services.Maps.MapManeuverNotices Windows.Services.Maps.MapRouteManeuver::get_ManeuverNotices()
    @_property
    def maneuver_notices(self) -> MapManeuverNotices: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Services.Maps.MapRouteManeuver::get_StartingPoint()
    @_property
    def starting_point(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Double Windows.Services.Maps.MapRouteManeuver::get_EndHeading()
    @_property
    def end_heading(self) -> winrt.system.Double: ...
    # System.Double Windows.Services.Maps.MapRouteManeuver::get_StartHeading()
    @_property
    def start_heading(self) -> winrt.system.Double: ...
    # System.String Windows.Services.Maps.MapRouteManeuver::get_StreetName()
    @_property
    def street_name(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.ManeuverWarning> Windows.Services.Maps.MapRouteManeuver::get_Warnings()
    @_property
    def warnings(self) -> typing.Sequence[ManeuverWarning]: ...

@typing.final
class MapService_Static(type):
    # System.String Windows.Services.Maps.MapService::get_ServiceToken()
    @_property
    def service_token(cls) -> str: ...
    # System.Void Windows.Services.Maps.MapService::put_ServiceToken(System.String)
    @service_token.setter
    def service_token(cls, value: str) -> None: ...
    # System.String Windows.Services.Maps.MapService::get_WorldViewRegionCode()
    @_property
    def world_view_region_code(cls) -> str: ...
    # System.String Windows.Services.Maps.MapService::get_DataAttributions()
    @_property
    def data_attributions(cls) -> str: ...
    # Windows.Services.Maps.MapServiceDataUsagePreference Windows.Services.Maps.MapService::get_DataUsagePreference()
    @_property
    def data_usage_preference(cls) -> MapServiceDataUsagePreference: ...
    # System.Void Windows.Services.Maps.MapService::put_DataUsagePreference(Windows.Services.Maps.MapServiceDataUsagePreference)
    @data_usage_preference.setter
    def data_usage_preference(cls, value: MapServiceDataUsagePreference) -> None: ...

@typing.final
class MapService(winrt.system.Object, metaclass=MapService_Static):
    pass

@typing.final
class PlaceInfo_Static(type):
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::Create(Windows.Devices.Geolocation.Geopoint)
    def create(cls, reference_point: windows_devices_geolocation.Geopoint, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::CreateFromAddress(System.String)
    def create_from_address(cls, display_address: str, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::CreateFromAddress(System.String,System.String)
    def create_from_address_with_name(cls, display_address: str, display_name: str, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::CreateFromIdentifier(System.String)
    def create_from_identifier(cls, identifier: str, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::CreateFromIdentifier(System.String,Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.PlaceInfoCreateOptions)
    def create_from_identifier_with_options(cls, identifier: str, default_point: windows_devices_geolocation.Geopoint, options: PlaceInfoCreateOptions, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::CreateFromMapLocation(Windows.Services.Maps.MapLocation)
    def create_from_map_location(cls, location: MapLocation, /) -> PlaceInfo: ...
    # Windows.Services.Maps.PlaceInfo Windows.Services.Maps.PlaceInfo::Create(Windows.Devices.Geolocation.Geopoint,Windows.Services.Maps.PlaceInfoCreateOptions)
    def create_with_geopoint_and_options(cls, reference_point: windows_devices_geolocation.Geopoint, options: PlaceInfoCreateOptions, /) -> PlaceInfo: ...
    # System.Boolean Windows.Services.Maps.PlaceInfo::get_IsShowSupported()
    @_property
    def is_show_supported(cls) -> bool: ...

@typing.final
class PlaceInfo(winrt.system.Object, metaclass=PlaceInfo_Static):
    # System.Void Windows.Services.Maps.PlaceInfo::Show(Windows.Foundation.Rect)
    def show(self, selection: windows_foundation.Rect, /) -> None: ...
    # System.Void Windows.Services.Maps.PlaceInfo::Show(Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_with_preferred_placement(self, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> None: ...
    # System.String Windows.Services.Maps.PlaceInfo::get_DisplayAddress()
    @_property
    def display_address(self) -> str: ...
    # System.String Windows.Services.Maps.PlaceInfo::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.IGeoshape Windows.Services.Maps.PlaceInfo::get_Geoshape()
    @_property
    def geoshape(self) -> windows_devices_geolocation.IGeoshape: ...
    # System.String Windows.Services.Maps.PlaceInfo::get_Identifier()
    @_property
    def identifier(self) -> str: ...

@typing.final
class PlaceInfoCreateOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.Services.Maps.PlaceInfoCreateOptions::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.Services.Maps.PlaceInfoCreateOptions::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.String Windows.Services.Maps.PlaceInfoCreateOptions::get_DisplayAddress()
    @_property
    def display_address(self) -> str: ...
    # System.Void Windows.Services.Maps.PlaceInfoCreateOptions::put_DisplayAddress(System.String)
    @display_address.setter
    def display_address(self, value: str) -> None: ...

