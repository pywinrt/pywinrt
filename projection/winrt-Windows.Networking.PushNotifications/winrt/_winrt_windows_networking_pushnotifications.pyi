# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system
import winrt.windows.ui.notifications as windows_ui_notifications

from winrt.windows.networking.pushnotifications import PushNotificationType

Self = typing.TypeVar('Self')

@typing.final
class PushNotificationChannel(winrt.system.Object):
    # System.Void Windows.Networking.PushNotifications.PushNotificationChannel::Close()
    def close(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.PushNotifications.PushNotificationChannel::add_PushNotificationReceived(Windows.Foundation.TypedEventHandler`2<Windows.Networking.PushNotifications.PushNotificationChannel,Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs>)
    def add_push_notification_received(self, handler: windows_foundation.TypedEventHandler[PushNotificationChannel, PushNotificationReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.PushNotifications.PushNotificationChannel::remove_PushNotificationReceived(Windows.Foundation.EventRegistrationToken)
    def remove_push_notification_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.DateTime Windows.Networking.PushNotifications.PushNotificationChannel::get_ExpirationTime()
    @_property
    def expiration_time(self) -> datetime.datetime: ...
    # System.String Windows.Networking.PushNotifications.PushNotificationChannel::get_Uri()
    @_property
    def uri(self) -> str: ...

@typing.final
class PushNotificationChannelManager_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync()
    def create_push_notification_channel_for_application_async(cls) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync(System.String)
    def create_push_notification_channel_for_application_async_with_id(cls, application_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManager::CreatePushNotificationChannelForSecondaryTileAsync(System.String)
    def create_push_notification_channel_for_secondary_tile_async(cls, tile_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser Windows.Networking.PushNotifications.PushNotificationChannelManager::GetDefault()
    def get_default(cls) -> PushNotificationChannelManagerForUser: ...
    # Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser Windows.Networking.PushNotifications.PushNotificationChannelManager::GetForUser(Windows.System.User)
    def get_for_user(cls, user: windows_system.User, /) -> PushNotificationChannelManagerForUser: ...
    # Windows.Foundation.EventRegistrationToken Windows.Networking.PushNotifications.PushNotificationChannelManager::add_ChannelsRevoked(Windows.Foundation.EventHandler`1<Windows.Networking.PushNotifications.PushNotificationChannelsRevokedEventArgs>)
    def add_channels_revoked(cls, handler: windows_foundation.EventHandler[PushNotificationChannelsRevokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Networking.PushNotifications.PushNotificationChannelManager::remove_ChannelsRevoked(Windows.Foundation.EventRegistrationToken)
    def remove_channels_revoked(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class PushNotificationChannelManager(winrt.system.Object, metaclass=PushNotificationChannelManager_Static):
    pass

@typing.final
class PushNotificationChannelManagerForUser(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::CreatePushNotificationChannelForApplicationAsync()
    def create_push_notification_channel_for_application_async(self) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::CreatePushNotificationChannelForApplicationAsync(System.String)
    def create_push_notification_channel_for_application_async_with_id(self, application_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::CreatePushNotificationChannelForSecondaryTileAsync(System.String)
    def create_push_notification_channel_for_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(Windows.Storage.Streams.IBuffer,System.String)
    def create_raw_push_notification_channel_with_alternate_key_for_application_async(self, app_server_key: windows_storage_streams.IBuffer, channel_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Networking.PushNotifications.PushNotificationChannel> Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(Windows.Storage.Streams.IBuffer,System.String,System.String)
    def create_raw_push_notification_channel_with_alternate_key_for_application_async_with_id(self, app_server_key: windows_storage_streams.IBuffer, channel_id: str, app_id: str, /) -> windows_foundation.IAsyncOperation[PushNotificationChannel]: ...
    # Windows.System.User Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser::get_User()
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class PushNotificationChannelsRevokedEventArgs(winrt.system.Object):
    pass

@typing.final
class PushNotificationReceivedEventArgs(winrt.system.Object):
    # System.Boolean Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Windows.UI.Notifications.BadgeNotification Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_BadgeNotification()
    @_property
    def badge_notification(self) -> windows_ui_notifications.BadgeNotification: ...
    # Windows.Networking.PushNotifications.PushNotificationType Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_NotificationType()
    @_property
    def notification_type(self) -> PushNotificationType: ...
    # Windows.Networking.PushNotifications.RawNotification Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_RawNotification()
    @_property
    def raw_notification(self) -> RawNotification: ...
    # Windows.UI.Notifications.TileNotification Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_TileNotification()
    @_property
    def tile_notification(self) -> windows_ui_notifications.TileNotification: ...
    # Windows.UI.Notifications.ToastNotification Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs::get_ToastNotification()
    @_property
    def toast_notification(self) -> windows_ui_notifications.ToastNotification: ...

@typing.final
class RawNotification(winrt.system.Object):
    # System.String Windows.Networking.PushNotifications.RawNotification::get_Content()
    @_property
    def content(self) -> str: ...
    # System.String Windows.Networking.PushNotifications.RawNotification::get_ChannelId()
    @_property
    def channel_id(self) -> str: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> Windows.Networking.PushNotifications.RawNotification::get_Headers()
    @_property
    def headers(self) -> typing.Mapping[str, str]: ...
    # Windows.Storage.Streams.IBuffer Windows.Networking.PushNotifications.RawNotification::get_ContentBytes()
    @_property
    def content_bytes(self) -> windows_storage_streams.IBuffer: ...

