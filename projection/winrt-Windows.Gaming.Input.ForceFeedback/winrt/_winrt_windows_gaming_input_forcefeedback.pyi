# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.numerics as windows_foundation_numerics

from winrt.windows.gaming.input.forcefeedback import ConditionForceEffectKind, ForceFeedbackEffectAxes, ForceFeedbackEffectState, ForceFeedbackLoadEffectResult, PeriodicForceEffectKind

Self = typing.TypeVar('Self')

@typing.final
class ConditionForceEffect(winrt.system.Object, IForceFeedbackEffect):
    def __new__(cls: typing.Type[Self], effect_kind: ConditionForceEffectKind) -> Self: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::SetParameters(Windows.Foundation.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
    def set_parameters(self, direction: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], positive_coefficient: winrt.system.Single, negative_coefficient: winrt.system.Single, max_positive_magnitude: winrt.system.Single, max_negative_magnitude: winrt.system.Single, dead_zone: winrt.system.Single, bias: winrt.system.Single, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::Start()
    def start(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::Stop()
    def stop(self) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::get_Kind()
    @_property
    def kind(self) -> ConditionForceEffectKind: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::get_Gain()
    @_property
    def gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::put_Gain(System.Double)
    @gain.setter
    def gain(self, value: winrt.system.Double) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState Windows.Gaming.Input.ForceFeedback.ConditionForceEffect::get_State()
    @_property
    def state(self) -> ForceFeedbackEffectState: ...

@typing.final
class ConstantForceEffect(winrt.system.Object, IForceFeedbackEffect):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::SetParameters(Windows.Foundation.Numerics.Vector3,Windows.Foundation.TimeSpan)
    def set_parameters(self, vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], duration: datetime.timedelta, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::SetParametersWithEnvelope(Windows.Foundation.Numerics.Vector3,System.Single,System.Single,System.Single,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,System.UInt32)
    def set_parameters_with_envelope(self, vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::Start()
    def start(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::Stop()
    def stop(self) -> None: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::get_Gain()
    @_property
    def gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::put_Gain(System.Double)
    @gain.setter
    def gain(self, value: winrt.system.Double) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState Windows.Gaming.Input.ForceFeedback.ConstantForceEffect::get_State()
    @_property
    def state(self) -> ForceFeedbackEffectState: ...

@typing.final
class ForceFeedbackMotor(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult> Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::LoadEffectAsync(Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect)
    def load_effect_async(self, effect: IForceFeedbackEffect, /) -> windows_foundation.IAsyncOperation[ForceFeedbackLoadEffectResult]: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::PauseAllEffects()
    def pause_all_effects(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::ResumeAllEffects()
    def resume_all_effects(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::StopAllEffects()
    def stop_all_effects(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::TryDisableAsync()
    def try_disable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::TryEnableAsync()
    def try_enable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::TryResetAsync()
    def try_reset_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::TryUnloadEffectAsync(Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect)
    def try_unload_effect_async(self, effect: IForceFeedbackEffect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::get_MasterGain()
    @_property
    def master_gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::put_MasterGain(System.Double)
    @master_gain.setter
    def master_gain(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::get_AreEffectsPaused()
    @_property
    def are_effects_paused(self) -> bool: ...
    # System.Boolean Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectAxes Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor::get_SupportedAxes()
    @_property
    def supported_axes(self) -> ForceFeedbackEffectAxes: ...

@typing.final
class PeriodicForceEffect(winrt.system.Object, IForceFeedbackEffect):
    def __new__(cls: typing.Type[Self], effect_kind: PeriodicForceEffectKind) -> Self: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::SetParameters(Windows.Foundation.Numerics.Vector3,System.Single,System.Single,System.Single,Windows.Foundation.TimeSpan)
    def set_parameters(self, vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], frequency: winrt.system.Single, phase: winrt.system.Single, bias: winrt.system.Single, duration: datetime.timedelta, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::SetParametersWithEnvelope(Windows.Foundation.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,System.UInt32)
    def set_parameters_with_envelope(self, vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], frequency: winrt.system.Single, phase: winrt.system.Single, bias: winrt.system.Single, attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::Start()
    def start(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::Stop()
    def stop(self) -> None: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::get_Gain()
    @_property
    def gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::put_Gain(System.Double)
    @gain.setter
    def gain(self, value: winrt.system.Double) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::get_State()
    @_property
    def state(self) -> ForceFeedbackEffectState: ...
    # Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect::get_Kind()
    @_property
    def kind(self) -> PeriodicForceEffectKind: ...

@typing.final
class RampForceEffect(winrt.system.Object, IForceFeedbackEffect):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.RampForceEffect::SetParameters(Windows.Foundation.Numerics.Vector3,Windows.Foundation.Numerics.Vector3,Windows.Foundation.TimeSpan)
    def set_parameters(self, start_vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], end_vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], duration: datetime.timedelta, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.RampForceEffect::SetParametersWithEnvelope(Windows.Foundation.Numerics.Vector3,Windows.Foundation.Numerics.Vector3,System.Single,System.Single,System.Single,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,System.UInt32)
    def set_parameters_with_envelope(self, start_vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], end_vector: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]], attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.RampForceEffect::Start()
    def start(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.RampForceEffect::Stop()
    def stop(self) -> None: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.RampForceEffect::get_Gain()
    @_property
    def gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.RampForceEffect::put_Gain(System.Double)
    @gain.setter
    def gain(self, value: winrt.system.Double) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState Windows.Gaming.Input.ForceFeedback.RampForceEffect::get_State()
    @_property
    def state(self) -> ForceFeedbackEffectState: ...

@typing.final
class _IForceFeedbackEffect: ...

class IForceFeedbackEffect(winrt._winrt.IInspectable):
    # System.Void Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect::Start()
    @abstractmethod
    def start(self) -> None: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect::Stop()
    @abstractmethod
    def stop(self) -> None: ...
    # System.Double Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect::get_Gain()
    @_property
    @abstractmethod
    def gain(self) -> winrt.system.Double: ...
    # System.Void Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect::put_Gain(System.Double)
    @gain.setter
    @abstractmethod
    def gain(self, value: winrt.system.Double) -> None: ...
    # Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect::get_State()
    @_property
    @abstractmethod
    def state(self) -> ForceFeedbackEffectState: ...

