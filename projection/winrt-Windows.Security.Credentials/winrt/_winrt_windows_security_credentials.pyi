# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.cryptography.core as windows_security_cryptography_core
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system

from winrt.windows.security.credentials import KeyCredentialAttestationStatus, KeyCredentialCreationOption, KeyCredentialStatus, WebAccountPictureSize, WebAccountState

Self = typing.TypeVar('Self')

@typing.final
class KeyCredential(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Credentials.KeyCredentialAttestationResult> Windows.Security.Credentials.KeyCredential::GetAttestationAsync()
    def get_attestation_async(self) -> windows_foundation.IAsyncOperation[KeyCredentialAttestationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Credentials.KeyCredentialOperationResult> Windows.Security.Credentials.KeyCredential::RequestSignAsync(Windows.Storage.Streams.IBuffer)
    def request_sign_async(self, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[KeyCredentialOperationResult]: ...
    # Windows.Storage.Streams.IBuffer Windows.Security.Credentials.KeyCredential::RetrievePublicKey(Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType)
    def retrieve_public_key_with_blob_type(self, blob_type: windows_security_cryptography_core.CryptographicPublicKeyBlobType, /) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Security.Credentials.KeyCredential::RetrievePublicKey()
    def retrieve_public_key_with_default_blob_type(self) -> windows_storage_streams.IBuffer: ...
    # System.String Windows.Security.Credentials.KeyCredential::get_Name()
    @_property
    def name(self) -> str: ...

@typing.final
class KeyCredentialAttestationResult(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Security.Credentials.KeyCredentialAttestationResult::get_AttestationBuffer()
    @_property
    def attestation_buffer(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Security.Credentials.KeyCredentialAttestationResult::get_CertificateChainBuffer()
    @_property
    def certificate_chain_buffer(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Security.Credentials.KeyCredentialAttestationStatus Windows.Security.Credentials.KeyCredentialAttestationResult::get_Status()
    @_property
    def status(self) -> KeyCredentialAttestationStatus: ...

@typing.final
class KeyCredentialManager_Static(type):
    # Windows.Foundation.IAsyncAction Windows.Security.Credentials.KeyCredentialManager::DeleteAsync(System.String)
    def delete_async(cls, name: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Security.Credentials.KeyCredentialManager::IsSupportedAsync()
    def is_supported_async(cls) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Credentials.KeyCredentialRetrievalResult> Windows.Security.Credentials.KeyCredentialManager::OpenAsync(System.String)
    def open_async(cls, name: str, /) -> windows_foundation.IAsyncOperation[KeyCredentialRetrievalResult]: ...
    # Windows.Foundation.IAsyncAction Windows.Security.Credentials.KeyCredentialManager::RenewAttestationAsync()
    def renew_attestation_async(cls) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Credentials.KeyCredentialRetrievalResult> Windows.Security.Credentials.KeyCredentialManager::RequestCreateAsync(System.String,Windows.Security.Credentials.KeyCredentialCreationOption)
    def request_create_async(cls, name: str, option: KeyCredentialCreationOption, /) -> windows_foundation.IAsyncOperation[KeyCredentialRetrievalResult]: ...

@typing.final
class KeyCredentialManager(winrt.system.Object, metaclass=KeyCredentialManager_Static):
    pass

@typing.final
class KeyCredentialOperationResult(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Security.Credentials.KeyCredentialOperationResult::get_Result()
    @_property
    def result(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Security.Credentials.KeyCredentialStatus Windows.Security.Credentials.KeyCredentialOperationResult::get_Status()
    @_property
    def status(self) -> KeyCredentialStatus: ...

@typing.final
class KeyCredentialRetrievalResult(winrt.system.Object):
    # Windows.Security.Credentials.KeyCredential Windows.Security.Credentials.KeyCredentialRetrievalResult::get_Credential()
    @_property
    def credential(self) -> KeyCredential: ...
    # Windows.Security.Credentials.KeyCredentialStatus Windows.Security.Credentials.KeyCredentialRetrievalResult::get_Status()
    @_property
    def status(self) -> KeyCredentialStatus: ...

@typing.final
class PasswordCredential(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], resource: str, user_name: str, password: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Security.Credentials.PasswordCredential::RetrievePassword()
    def retrieve_password(self) -> None: ...
    # System.String Windows.Security.Credentials.PasswordCredential::get_UserName()
    @_property
    def user_name(self) -> str: ...
    # System.Void Windows.Security.Credentials.PasswordCredential::put_UserName(System.String)
    @user_name.setter
    def user_name(self, value: str) -> None: ...
    # System.String Windows.Security.Credentials.PasswordCredential::get_Resource()
    @_property
    def resource(self) -> str: ...
    # System.Void Windows.Security.Credentials.PasswordCredential::put_Resource(System.String)
    @resource.setter
    def resource(self, value: str) -> None: ...
    # System.String Windows.Security.Credentials.PasswordCredential::get_Password()
    @_property
    def password(self) -> str: ...
    # System.Void Windows.Security.Credentials.PasswordCredential::put_Password(System.String)
    @password.setter
    def password(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IPropertySet Windows.Security.Credentials.PasswordCredential::get_Properties()
    @_property
    def properties(self) -> windows_foundation_collections.IPropertySet: ...

@typing.final
class PasswordCredentialPropertyStore(winrt.system.Object, windows_foundation_collections.ImplementsIPropertySet, windows_foundation_collections.ImplementsIObservableMap[str, winrt.system.Object], winrt._winrt.MutableMapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    def __setitem__(self, key: str, value: winrt.system.Object) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Security.Credentials.PasswordCredentialPropertyStore::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.Object>> Windows.Security.Credentials.PasswordCredentialPropertyStore::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, winrt.system.Object]]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.Security.Credentials.PasswordCredentialPropertyStore::GetView()
    def get_view(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # System.Boolean Windows.Security.Credentials.PasswordCredentialPropertyStore::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # System.Boolean Windows.Security.Credentials.PasswordCredentialPropertyStore::Insert(System.String,System.Object)
    def insert(self, key: str, value: winrt.system.Object, /) -> bool: ...
    # System.Object Windows.Security.Credentials.PasswordCredentialPropertyStore::Lookup(System.String)
    def lookup(self, key: str, /) -> winrt.system.Object: ...
    # System.Void Windows.Security.Credentials.PasswordCredentialPropertyStore::Remove(System.String)
    def remove(self, key: str, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Security.Credentials.PasswordCredentialPropertyStore::add_MapChanged(Windows.Foundation.Collections.MapChangedEventHandler`2<System.String,System.Object>)
    def add_map_changed(self, vhnd: windows_foundation_collections.MapChangedEventHandler[str, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Security.Credentials.PasswordCredentialPropertyStore::remove_MapChanged(Windows.Foundation.EventRegistrationToken)
    def remove_map_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.Security.Credentials.PasswordCredentialPropertyStore::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class PasswordVault(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Security.Credentials.PasswordVault::Add(Windows.Security.Credentials.PasswordCredential)
    def add(self, credential: PasswordCredential, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Security.Credentials.PasswordCredential> Windows.Security.Credentials.PasswordVault::FindAllByResource(System.String)
    def find_all_by_resource(self, resource: str, /) -> typing.Sequence[PasswordCredential]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Security.Credentials.PasswordCredential> Windows.Security.Credentials.PasswordVault::FindAllByUserName(System.String)
    def find_all_by_user_name(self, user_name: str, /) -> typing.Sequence[PasswordCredential]: ...
    # System.Void Windows.Security.Credentials.PasswordVault::Remove(Windows.Security.Credentials.PasswordCredential)
    def remove(self, credential: PasswordCredential, /) -> None: ...
    # Windows.Security.Credentials.PasswordCredential Windows.Security.Credentials.PasswordVault::Retrieve(System.String,System.String)
    def retrieve(self, resource: str, user_name: str, /) -> PasswordCredential: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Security.Credentials.PasswordCredential> Windows.Security.Credentials.PasswordVault::RetrieveAll()
    def retrieve_all(self) -> typing.Sequence[PasswordCredential]: ...

@typing.final
class WebAccount(winrt.system.Object, ImplementsIWebAccount):
    def __new__(cls: typing.Type[Self], web_account_provider: WebAccountProvider, user_name: str, state: WebAccountState) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream> Windows.Security.Credentials.WebAccount::GetPictureAsync(Windows.Security.Credentials.WebAccountPictureSize)
    def get_picture_async(self, desized_size: WebAccountPictureSize, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStream]: ...
    # Windows.Foundation.IAsyncAction Windows.Security.Credentials.WebAccount::SignOutAsync()
    def sign_out_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Security.Credentials.WebAccount::SignOutAsync(System.String)
    def sign_out_with_client_id_async(self, client_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Security.Credentials.WebAccountState Windows.Security.Credentials.WebAccount::get_State()
    @_property
    def state(self) -> WebAccountState: ...
    # System.String Windows.Security.Credentials.WebAccount::get_UserName()
    @_property
    def user_name(self) -> str: ...
    # Windows.Security.Credentials.WebAccountProvider Windows.Security.Credentials.WebAccount::get_WebAccountProvider()
    @_property
    def web_account_provider(self) -> WebAccountProvider: ...
    # System.String Windows.Security.Credentials.WebAccount::get_Id()
    @_property
    def id(self) -> str: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> Windows.Security.Credentials.WebAccount::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[str, str]: ...

@typing.final
class WebAccountProvider(winrt.system.Object):
    def __new__(cls: typing.Type[Self], id: str, display_name: str, icon_uri: windows_foundation.Uri) -> Self: ...
    # System.String Windows.Security.Credentials.WebAccountProvider::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Foundation.Uri Windows.Security.Credentials.WebAccountProvider::get_IconUri()
    @_property
    def icon_uri(self) -> windows_foundation.Uri: ...
    # System.String Windows.Security.Credentials.WebAccountProvider::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.Security.Credentials.WebAccountProvider::get_Authority()
    @_property
    def authority(self) -> str: ...
    # System.String Windows.Security.Credentials.WebAccountProvider::get_DisplayPurpose()
    @_property
    def display_purpose(self) -> str: ...
    # Windows.System.User Windows.Security.Credentials.WebAccountProvider::get_User()
    @_property
    def user(self) -> windows_system.User: ...
    # System.Boolean Windows.Security.Credentials.WebAccountProvider::get_IsSystemProvider()
    @_property
    def is_system_provider(self) -> bool: ...

class ImplementsIWebAccount():
    pass

@typing.final
class IWebAccount(winrt.system.Object, ImplementsIWebAccount):
    # Windows.Security.Credentials.WebAccountState Windows.Security.Credentials.IWebAccount::get_State()
    @_property
    def state(self) -> WebAccountState: ...
    # System.String Windows.Security.Credentials.IWebAccount::get_UserName()
    @_property
    def user_name(self) -> str: ...
    # Windows.Security.Credentials.WebAccountProvider Windows.Security.Credentials.IWebAccount::get_WebAccountProvider()
    @_property
    def web_account_provider(self) -> WebAccountProvider: ...

