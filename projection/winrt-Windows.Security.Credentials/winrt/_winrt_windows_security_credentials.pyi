# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.cryptography.core
import winrt.windows.storage.streams
import winrt.windows.system

from winrt.windows.security.credentials import KeyCredentialAttestationStatus, KeyCredentialCreationOption, KeyCredentialStatus, WebAccountPictureSize, WebAccountState

Self = typing.TypeVar('Self')

@typing.final
class KeyCredential(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyCredential: ...
    def get_attestation_async(self) -> winrt.windows.foundation.IAsyncOperation[KeyCredentialAttestationResult]: ...
    def request_sign_async(self, data: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[KeyCredentialOperationResult]: ...
    @typing.overload
    def retrieve_public_key(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @typing.overload
    def retrieve_public_key(self, blob_type: winrt.windows.security.cryptography.core.CryptographicPublicKeyBlobType, /) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def name(self) -> str: ...

@typing.final
class KeyCredentialAttestationResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyCredentialAttestationResult: ...
    @_property
    def attestation_buffer(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def certificate_chain_buffer(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def status(self) -> KeyCredentialAttestationStatus: ...

@typing.final
class KeyCredentialManager_Static(type):
    def delete_async(cls, name: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def is_supported_async(cls) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def open_async(cls, name: str, /) -> winrt.windows.foundation.IAsyncOperation[KeyCredentialRetrievalResult]: ...
    def renew_attestation_async(cls) -> winrt.windows.foundation.IAsyncAction: ...
    def request_create_async(cls, name: str, option: KeyCredentialCreationOption, /) -> winrt.windows.foundation.IAsyncOperation[KeyCredentialRetrievalResult]: ...

@typing.final
class KeyCredentialManager(winrt.system.Object, metaclass=KeyCredentialManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyCredentialManager: ...

@typing.final
class KeyCredentialOperationResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyCredentialOperationResult: ...
    @_property
    def result(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def status(self) -> KeyCredentialStatus: ...

@typing.final
class KeyCredentialRetrievalResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyCredentialRetrievalResult: ...
    @_property
    def credential(self) -> typing.Optional[KeyCredential]: ...
    @_property
    def status(self) -> KeyCredentialStatus: ...

@typing.final
class PasswordCredential(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PasswordCredential: ...
    @typing.overload
    def __new__(cls: typing.Type[PasswordCredential], resource: str, user_name: str, password: str) -> PasswordCredential:...
    @typing.overload
    def __new__(cls: typing.Type[PasswordCredential]) -> PasswordCredential:...
    def retrieve_password(self) -> None: ...
    @_property
    def user_name(self) -> str: ...
    @user_name.setter
    def user_name(self, value: str) -> None: ...
    @_property
    def resource(self) -> str: ...
    @resource.setter
    def resource(self, value: str) -> None: ...
    @_property
    def password(self) -> str: ...
    @password.setter
    def password(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...

@typing.final
class PasswordCredentialPropertyStore(winrt.system.Object, winrt._winrt.MutableMapping[str, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: winrt.system.Object) -> None: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PasswordCredentialPropertyStore: ...
    def __new__(cls: typing.Type[PasswordCredentialPropertyStore]) -> PasswordCredentialPropertyStore:...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.system.Object]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: typing.Optional[winrt.system.Object], /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[winrt.system.Object]: ...
    def remove(self, key: str, /) -> None: ...
    def add_map_changed(self, vhnd: winrt.windows.foundation.collections.MapChangedEventHandler[str, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class PasswordVault(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PasswordVault: ...
    def __new__(cls: typing.Type[PasswordVault]) -> PasswordVault:...
    def add(self, credential: typing.Optional[PasswordCredential], /) -> None: ...
    def find_all_by_resource(self, resource: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[PasswordCredential]]: ...
    def find_all_by_user_name(self, user_name: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[PasswordCredential]]: ...
    def remove(self, credential: typing.Optional[PasswordCredential], /) -> None: ...
    def retrieve(self, resource: str, user_name: str, /) -> typing.Optional[PasswordCredential]: ...
    def retrieve_all(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[PasswordCredential]]: ...

@typing.final
class WebAccount(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccount: ...
    def __new__(cls: typing.Type[WebAccount], web_account_provider: typing.Optional[WebAccountProvider], user_name: str, state: WebAccountState) -> WebAccount:...
    def get_picture_async(self, desized_size: WebAccountPictureSize, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @typing.overload
    def sign_out_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def sign_out_async(self, client_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def state(self) -> WebAccountState: ...
    @_property
    def user_name(self) -> str: ...
    @_property
    def web_account_provider(self) -> typing.Optional[WebAccountProvider]: ...
    @_property
    def id(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...

@typing.final
class WebAccountProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountProvider: ...
    def __new__(cls: typing.Type[WebAccountProvider], id: str, display_name: str, icon_uri: typing.Optional[winrt.windows.foundation.Uri]) -> WebAccountProvider:...
    @_property
    def display_name(self) -> str: ...
    @_property
    def icon_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def id(self) -> str: ...
    @_property
    def authority(self) -> str: ...
    @_property
    def display_purpose(self) -> str: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def is_system_provider(self) -> bool: ...

@typing.final
class IWebAccount(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebAccount: ...
    @_property
    def state(self) -> WebAccountState: ...
    @_property
    def user_name(self) -> str: ...
    @_property
    def web_account_provider(self) -> typing.Optional[WebAccountProvider]: ...

