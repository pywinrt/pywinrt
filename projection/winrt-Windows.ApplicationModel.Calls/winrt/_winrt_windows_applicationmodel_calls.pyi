# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.contacts as windows_applicationmodel_contacts
import winrt.windows.devices.enumeration as windows_devices_enumeration
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui

from winrt.windows.applicationmodel.calls import CellularDtmfMode, DtmfKey, DtmfToneAudioPlayback, PhoneAudioRoutingEndpoint, PhoneCallAudioDevice, PhoneCallDirection, PhoneCallHistoryEntryMedia, PhoneCallHistoryEntryOtherAppReadAccess, PhoneCallHistoryEntryQueryDesiredMedia, PhoneCallHistoryEntryRawAddressKind, PhoneCallHistorySourceIdKind, PhoneCallHistoryStoreAccessType, PhoneCallMedia, PhoneCallOperationStatus, PhoneCallStatus, PhoneLineNetworkOperatorDisplayTextLocation, PhoneLineOperationStatus, PhoneLineTransport, PhoneLineWatcherStatus, PhoneNetworkState, PhoneSimState, PhoneVoicemailType, TransportDeviceAudioRoutingStatus, VoipCallControlDeviceKind, VoipPhoneCallMedia, VoipPhoneCallRejectReason, VoipPhoneCallResourceReservationStatus, VoipPhoneCallState

Self = typing.TypeVar('Self')

@typing.final
class AcceptedVoipPhoneCallOptions(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], associated_device_ids: typing.Iterable[str]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_ServiceName()
    @_property
    def service_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::put_ServiceName(System.String)
    @service_name.setter
    def service_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_Media()
    @_property
    def media(self) -> VoipPhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::put_Media(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    @media.setter
    def media(self, value: VoipPhoneCallMedia) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_Context()
    @_property
    def context(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::put_Context(System.String)
    @context.setter
    def context(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_ContactNumber()
    @_property
    def contact_number(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::put_ContactNumber(System.String)
    @contact_number.setter
    def contact_number(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_ContactName()
    @_property
    def contact_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::put_ContactName(System.String)
    @contact_name.setter
    def contact_name(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions::get_AssociatedDeviceIds()
    @_property
    def associated_device_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class AppInitiatedVoipPhoneCallOptions(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], associated_device_ids: typing.Iterable[str]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_ServiceName()
    @_property
    def service_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::put_ServiceName(System.String)
    @service_name.setter
    def service_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_Media()
    @_property
    def media(self) -> VoipPhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::put_Media(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    @media.setter
    def media(self, value: VoipPhoneCallMedia) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_Context()
    @_property
    def context(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::put_Context(System.String)
    @context.setter
    def context(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_ContactNumber()
    @_property
    def contact_number(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::put_ContactNumber(System.String)
    @contact_number.setter
    def contact_number(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_ContactName()
    @_property
    def contact_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::put_ContactName(System.String)
    @contact_name.setter
    def contact_name(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions::get_AssociatedDeviceIds()
    @_property
    def associated_device_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class CallAnswerEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.CallAnswerEventArgs::get_AcceptedMedia()
    @_property
    def accepted_media(self) -> VoipPhoneCallMedia: ...
    # System.String Windows.ApplicationModel.Calls.CallAnswerEventArgs::get_SourceDeviceId()
    @_property
    def source_device_id(self) -> str: ...

@typing.final
class CallRejectEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Calls.VoipPhoneCallRejectReason Windows.ApplicationModel.Calls.CallRejectEventArgs::get_RejectReason()
    @_property
    def reject_reason(self) -> VoipPhoneCallRejectReason: ...

@typing.final
class CallStateChangeEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Calls.VoipPhoneCallState Windows.ApplicationModel.Calls.CallStateChangeEventArgs::get_State()
    @_property
    def state(self) -> VoipPhoneCallState: ...

@typing.final
class IncomingVoipPhoneCallOptions(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], associated_device_ids: typing.Iterable[str]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_ServiceName()
    @_property
    def service_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_ServiceName(System.String)
    @service_name.setter
    def service_name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_Ringtone()
    @_property
    def ringtone(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_Ringtone(Windows.Foundation.Uri)
    @ringtone.setter
    def ringtone(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_RingTimeout()
    @_property
    def ring_timeout(self) -> datetime.timedelta: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_RingTimeout(Windows.Foundation.TimeSpan)
    @ring_timeout.setter
    def ring_timeout(self, value: datetime.timedelta) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_Media()
    @_property
    def media(self) -> VoipPhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_Media(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    @media.setter
    def media(self, value: VoipPhoneCallMedia) -> None: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_Context()
    @_property
    def context(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_Context(System.String)
    @context.setter
    def context(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_ContactRemoteId()
    @_property
    def contact_remote_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_ContactRemoteId(System.String)
    @contact_remote_id.setter
    def contact_remote_id(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_ContactNumber()
    @_property
    def contact_number(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_ContactNumber(System.String)
    @contact_number.setter
    def contact_number(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_ContactName()
    @_property
    def contact_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_ContactName(System.String)
    @contact_name.setter
    def contact_name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_ContactImage()
    @_property
    def contact_image(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_ContactImage(Windows.Foundation.Uri)
    @contact_image.setter
    def contact_image(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_CallDetails()
    @_property
    def call_details(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_CallDetails(System.String)
    @call_details.setter
    def call_details(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_BrandingImage()
    @_property
    def branding_image(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::put_BrandingImage(Windows.Foundation.Uri)
    @branding_image.setter
    def branding_image(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions::get_AssociatedDeviceIds()
    @_property
    def associated_device_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class LockScreenCallEndCallDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class LockScreenCallEndRequestedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> LockScreenCallEndCallDeferral: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class LockScreenCallUI(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Calls.LockScreenCallUI::Dismiss()
    def dismiss(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.LockScreenCallUI::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.LockScreenCallUI,System.Object>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[LockScreenCallUI, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.LockScreenCallUI::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.LockScreenCallUI::add_EndRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.LockScreenCallUI,Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs>)
    def add_end_requested(self, handler: windows_foundation.TypedEventHandler[LockScreenCallUI, LockScreenCallEndRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.LockScreenCallUI::remove_EndRequested(Windows.Foundation.EventRegistrationToken)
    def remove_end_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Calls.LockScreenCallUI::get_CallTitle()
    @_property
    def call_title(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.LockScreenCallUI::put_CallTitle(System.String)
    @call_title.setter
    def call_title(self, value: str) -> None: ...

@typing.final
class MuteChangeEventArgs(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Calls.MuteChangeEventArgs::get_Muted()
    @_property
    def muted(self) -> bool: ...

@typing.final
class OutgoingVoipPhoneCallOptions(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], associated_device_ids: typing.Iterable[str]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::get_ServiceName()
    @_property
    def service_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::put_ServiceName(System.String)
    @service_name.setter
    def service_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::get_Media()
    @_property
    def media(self) -> VoipPhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::put_Media(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    @media.setter
    def media(self, value: VoipPhoneCallMedia) -> None: ...
    # System.String Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::get_Context()
    @_property
    def context(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::put_Context(System.String)
    @context.setter
    def context(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::get_ContactName()
    @_property
    def contact_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::put_ContactName(System.String)
    @contact_name.setter
    def contact_name(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions::get_AssociatedDeviceIds()
    @_property
    def associated_device_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class PhoneCall_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Calls.PhoneCall Windows.ApplicationModel.Calls.PhoneCall::GetFromId(System.String)
    def get_from_id(cls, call_id: str, /) -> PhoneCall: ...

@typing.final
class PhoneCall(winrt.system.Object, metaclass=PhoneCall_Static):
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::AcceptIncoming()
    def accept_incoming(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::AcceptIncomingAsync()
    def accept_incoming_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::ChangeAudioDevice(Windows.ApplicationModel.Calls.PhoneCallAudioDevice)
    def change_audio_device(self, endpoint: PhoneCallAudioDevice, /) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::ChangeAudioDeviceAsync(Windows.ApplicationModel.Calls.PhoneCallAudioDevice)
    def change_audio_device_async(self, endpoint: PhoneCallAudioDevice, /) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::End()
    def end(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::EndAsync()
    def end_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallInfo Windows.ApplicationModel.Calls.PhoneCall::GetPhoneCallInfo()
    def get_phone_call_info(self) -> PhoneCallInfo: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallInfo> Windows.ApplicationModel.Calls.PhoneCall::GetPhoneCallInfoAsync()
    def get_phone_call_info_async(self) -> windows_foundation.IAsyncOperation[PhoneCallInfo]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::Hold()
    def hold(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::HoldAsync()
    def hold_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::Mute()
    def mute(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::MuteAsync()
    def mute_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::RejectIncoming()
    def reject_incoming(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::RejectIncomingAsync()
    def reject_incoming_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::ResumeFromHold()
    def resume_from_hold(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::ResumeFromHoldAsync()
    def resume_from_hold_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::SendDtmfKey(Windows.ApplicationModel.Calls.DtmfKey,Windows.ApplicationModel.Calls.DtmfToneAudioPlayback)
    def send_dtmf_key(self, key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback, /) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::SendDtmfKeyAsync(Windows.ApplicationModel.Calls.DtmfKey,Windows.ApplicationModel.Calls.DtmfToneAudioPlayback)
    def send_dtmf_key_async(self, key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback, /) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneCall::Unmute()
    def unmute(self) -> PhoneCallOperationStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallOperationStatus> Windows.ApplicationModel.Calls.PhoneCall::UnmuteAsync()
    def unmute_async(self) -> windows_foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneCall::add_AudioDeviceChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneCall,System.Object>)
    def add_audio_device_changed(self, handler: windows_foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCall::remove_AudioDeviceChanged(Windows.Foundation.EventRegistrationToken)
    def remove_audio_device_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneCall::add_IsMutedChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneCall,System.Object>)
    def add_is_muted_changed(self, handler: windows_foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCall::remove_IsMutedChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_muted_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneCall::add_StatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneCall,System.Object>)
    def add_status_changed(self, handler: windows_foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCall::remove_StatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallAudioDevice Windows.ApplicationModel.Calls.PhoneCall::get_AudioDevice()
    @_property
    def audio_device(self) -> PhoneCallAudioDevice: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCall::get_CallId()
    @_property
    def call_id(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCall::get_IsMuted()
    @_property
    def is_muted(self) -> bool: ...
    # Windows.ApplicationModel.Calls.PhoneCallStatus Windows.ApplicationModel.Calls.PhoneCall::get_Status()
    @_property
    def status(self) -> PhoneCallStatus: ...

@typing.final
class PhoneCallBlocking_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Calls.PhoneCallBlocking::SetCallBlockingListAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def set_call_blocking_list_async(cls, phone_number_list: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallBlocking::get_BlockUnknownNumbers()
    @_property
    def block_unknown_numbers(cls) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallBlocking::put_BlockUnknownNumbers(System.Boolean)
    @block_unknown_numbers.setter
    def block_unknown_numbers(cls, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallBlocking::get_BlockPrivateNumbers()
    @_property
    def block_private_numbers(cls) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallBlocking::put_BlockPrivateNumbers(System.Boolean)
    @block_private_numbers.setter
    def block_private_numbers(cls, value: bool) -> None: ...

@typing.final
class PhoneCallBlocking(winrt.system.Object, metaclass=PhoneCallBlocking_Static):
    pass

@typing.final
class PhoneCallHistoryEntry(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryMedia Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_Media()
    @_property
    def media(self) -> PhoneCallHistoryEntryMedia: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_Media(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryMedia)
    @media.setter
    def media(self, value: PhoneCallHistoryEntryMedia) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsMissed()
    @_property
    def is_missed(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsMissed(System.Boolean)
    @is_missed.setter
    def is_missed(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsIncoming()
    @_property
    def is_incoming(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsIncoming(System.Boolean)
    @is_incoming.setter
    def is_incoming(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsCallerIdBlocked()
    @_property
    def is_caller_id_blocked(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsCallerIdBlocked(System.Boolean)
    @is_caller_id_blocked.setter
    def is_caller_id_blocked(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsSeen()
    @_property
    def is_seen(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsSeen(System.Boolean)
    @is_seen.setter
    def is_seen(self, value: bool) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_Duration()
    @_property
    def duration(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_Duration(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @duration.setter
    def duration(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsEmergency()
    @_property
    def is_emergency(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsEmergency(System.Boolean)
    @is_emergency.setter
    def is_emergency(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsSuppressed()
    @_property
    def is_suppressed(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsSuppressed(System.Boolean)
    @is_suppressed.setter
    def is_suppressed(self, value: bool) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_StartTime()
    @_property
    def start_time(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_StartTime(Windows.Foundation.DateTime)
    @start_time.setter
    def start_time(self, value: datetime.datetime) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistorySourceIdKind Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_SourceIdKind()
    @_property
    def source_id_kind(self) -> PhoneCallHistorySourceIdKind: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_SourceIdKind(Windows.ApplicationModel.Calls.PhoneCallHistorySourceIdKind)
    @source_id_kind.setter
    def source_id_kind(self, value: PhoneCallHistorySourceIdKind) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_Address()
    @_property
    def address(self) -> PhoneCallHistoryEntryAddress: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_Address(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress)
    @address.setter
    def address(self, value: PhoneCallHistoryEntryAddress) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_SourceId()
    @_property
    def source_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_SourceId(System.String)
    @source_id.setter
    def source_id(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_RemoteId()
    @_property
    def remote_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_RemoteId(System.String)
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryOtherAppReadAccess Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_OtherAppReadAccess()
    @_property
    def other_app_read_access(self) -> PhoneCallHistoryEntryOtherAppReadAccess: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_OtherAppReadAccess(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryOtherAppReadAccess)
    @other_app_read_access.setter
    def other_app_read_access(self, value: PhoneCallHistoryEntryOtherAppReadAccess) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsRinging()
    @_property
    def is_ringing(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsRinging(System.Boolean)
    @is_ringing.setter
    def is_ringing(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_IsVoicemail()
    @_property
    def is_voicemail(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::put_IsVoicemail(System.Boolean)
    @is_voicemail.setter
    def is_voicemail(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntry::get_SourceDisplayName()
    @_property
    def source_display_name(self) -> str: ...

@typing.final
class PhoneCallHistoryEntryAddress(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], raw_address: str, raw_address_kind: PhoneCallHistoryEntryRawAddressKind) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::get_RawAddressKind()
    @_property
    def raw_address_kind(self) -> PhoneCallHistoryEntryRawAddressKind: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::put_RawAddressKind(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind)
    @raw_address_kind.setter
    def raw_address_kind(self, value: PhoneCallHistoryEntryRawAddressKind) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::get_RawAddress()
    @_property
    def raw_address(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::put_RawAddress(System.String)
    @raw_address.setter
    def raw_address(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::get_ContactId()
    @_property
    def contact_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress::put_ContactId(System.String)
    @contact_id.setter
    def contact_id(self, value: str) -> None: ...

@typing.final
class PhoneCallHistoryEntryQueryOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryDesiredMedia Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions::get_DesiredMedia()
    @_property
    def desired_media(self) -> PhoneCallHistoryEntryQueryDesiredMedia: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions::put_DesiredMedia(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryDesiredMedia)
    @desired_media.setter
    def desired_media(self, value: PhoneCallHistoryEntryQueryDesiredMedia) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions::get_SourceIds()
    @_property
    def source_ids(self) -> typing.MutableSequence[str]: ...

@typing.final
class PhoneCallHistoryEntryReader(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Calls.PhoneCallHistoryEntry>> Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[PhoneCallHistoryEntry]]: ...

@typing.final
class PhoneCallHistoryManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Calls.PhoneCallHistoryManagerForUser Windows.ApplicationModel.Calls.PhoneCallHistoryManager::GetForUser(Windows.System.User)
    def get_for_user(cls, user: windows_system.User, /) -> PhoneCallHistoryManagerForUser: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallHistoryStore> Windows.ApplicationModel.Calls.PhoneCallHistoryManager::RequestStoreAsync(Windows.ApplicationModel.Calls.PhoneCallHistoryStoreAccessType)
    def request_store_async(cls, access_type: PhoneCallHistoryStoreAccessType, /) -> windows_foundation.IAsyncOperation[PhoneCallHistoryStore]: ...

@typing.final
class PhoneCallHistoryManager(winrt.system.Object, metaclass=PhoneCallHistoryManager_Static):
    pass

@typing.final
class PhoneCallHistoryManagerForUser(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallHistoryStore> Windows.ApplicationModel.Calls.PhoneCallHistoryManagerForUser::RequestStoreAsync(Windows.ApplicationModel.Calls.PhoneCallHistoryStoreAccessType)
    def request_store_async(self, access_type: PhoneCallHistoryStoreAccessType, /) -> windows_foundation.IAsyncOperation[PhoneCallHistoryStore]: ...
    # Windows.System.User Windows.ApplicationModel.Calls.PhoneCallHistoryManagerForUser::get_User()
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class PhoneCallHistoryStore(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::DeleteEntriesAsync(Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Calls.PhoneCallHistoryEntry>)
    def delete_entries_async(self, call_history_entries: typing.Iterable[PhoneCallHistoryEntry], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::DeleteEntryAsync(Windows.ApplicationModel.Calls.PhoneCallHistoryEntry)
    def delete_entry_async(self, call_history_entry: PhoneCallHistoryEntry, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallHistoryEntry> Windows.ApplicationModel.Calls.PhoneCallHistoryStore::GetEntryAsync(System.String)
    def get_entry_async(self, call_history_entry_id: str, /) -> windows_foundation.IAsyncOperation[PhoneCallHistoryEntry]: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader Windows.ApplicationModel.Calls.PhoneCallHistoryStore::GetEntryReader()
    def get_entry_reader(self) -> PhoneCallHistoryEntryReader: ...
    # Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader Windows.ApplicationModel.Calls.PhoneCallHistoryStore::GetEntryReader(Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions)
    def get_entry_reader_with_options(self, query_options: PhoneCallHistoryEntryQueryOptions, /) -> PhoneCallHistoryEntryReader: ...
    # Windows.Foundation.IAsyncOperation`1<System.UInt32> Windows.ApplicationModel.Calls.PhoneCallHistoryStore::GetSourcesUnseenCountAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_sources_unseen_count_async(self, source_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[winrt.system.UInt32]: ...
    # Windows.Foundation.IAsyncOperation`1<System.UInt32> Windows.ApplicationModel.Calls.PhoneCallHistoryStore::GetUnseenCountAsync()
    def get_unseen_count_async(self) -> windows_foundation.IAsyncOperation[winrt.system.UInt32]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::MarkAllAsSeenAsync()
    def mark_all_as_seen_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::MarkEntriesAsSeenAsync(Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Calls.PhoneCallHistoryEntry>)
    def mark_entries_as_seen_async(self, call_history_entries: typing.Iterable[PhoneCallHistoryEntry], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::MarkEntryAsSeenAsync(Windows.ApplicationModel.Calls.PhoneCallHistoryEntry)
    def mark_entry_as_seen_async(self, call_history_entry: PhoneCallHistoryEntry, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::MarkSourcesAsSeenAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def mark_sources_as_seen_async(self, source_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneCallHistoryStore::SaveEntryAsync(Windows.ApplicationModel.Calls.PhoneCallHistoryEntry)
    def save_entry_async(self, call_history_entry: PhoneCallHistoryEntry, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class PhoneCallInfo(winrt.system.Object):
    # Windows.ApplicationModel.Calls.PhoneCallDirection Windows.ApplicationModel.Calls.PhoneCallInfo::get_CallDirection()
    @_property
    def call_direction(self) -> PhoneCallDirection: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallInfo::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallInfo::get_IsHoldSupported()
    @_property
    def is_hold_supported(self) -> bool: ...
    # System.Guid Windows.ApplicationModel.Calls.PhoneCallInfo::get_LineId()
    @_property
    def line_id(self) -> _uuid.UUID: ...
    # System.String Windows.ApplicationModel.Calls.PhoneCallInfo::get_PhoneNumber()
    @_property
    def phone_number(self) -> str: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Calls.PhoneCallInfo::get_StartTime()
    @_property
    def start_time(self) -> datetime.datetime: ...

@typing.final
class PhoneCallManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallStore> Windows.ApplicationModel.Calls.PhoneCallManager::RequestStoreAsync()
    def request_store_async(cls) -> windows_foundation.IAsyncOperation[PhoneCallStore]: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallManager::ShowPhoneCallSettingsUI()
    def show_phone_call_settings_ui(cls) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallManager::ShowPhoneCallUI(System.String,System.String)
    def show_phone_call_ui(cls, phone_number: str, display_name: str, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneCallManager::add_CallStateChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_call_state_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneCallManager::remove_CallStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_call_state_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallManager::get_IsCallActive()
    @_property
    def is_call_active(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallManager::get_IsCallIncoming()
    @_property
    def is_call_incoming(cls) -> bool: ...

@typing.final
class PhoneCallManager(winrt.system.Object, metaclass=PhoneCallManager_Static):
    pass

@typing.final
class PhoneCallStore(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Guid> Windows.ApplicationModel.Calls.PhoneCallStore::GetDefaultLineAsync()
    def get_default_line_async(self) -> windows_foundation.IAsyncOperation[_uuid.UUID]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Calls.PhoneCallStore::IsEmergencyPhoneNumberAsync(System.String)
    def is_emergency_phone_number_async(self, number: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.ApplicationModel.Calls.PhoneLineWatcher Windows.ApplicationModel.Calls.PhoneCallStore::RequestLineWatcher()
    def request_line_watcher(self) -> PhoneLineWatcher: ...

@typing.final
class PhoneCallVideoCapabilities(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities::get_IsVideoCallingCapable()
    @_property
    def is_video_calling_capable(self) -> bool: ...

@typing.final
class PhoneCallVideoCapabilitiesManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities> Windows.ApplicationModel.Calls.PhoneCallVideoCapabilitiesManager::GetCapabilitiesAsync(System.String)
    def get_capabilities_async(cls, phone_number: str, /) -> windows_foundation.IAsyncOperation[PhoneCallVideoCapabilities]: ...

@typing.final
class PhoneCallVideoCapabilitiesManager(winrt.system.Object, metaclass=PhoneCallVideoCapabilitiesManager_Static):
    pass

@typing.final
class PhoneCallsResult(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Calls.PhoneCall> Windows.ApplicationModel.Calls.PhoneCallsResult::get_AllActivePhoneCalls()
    @_property
    def all_active_phone_calls(self) -> typing.Sequence[PhoneCall]: ...
    # Windows.ApplicationModel.Calls.PhoneLineOperationStatus Windows.ApplicationModel.Calls.PhoneCallsResult::get_OperationStatus()
    @_property
    def operation_status(self) -> PhoneLineOperationStatus: ...

@typing.final
class PhoneDialOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Calls.PhoneDialOptions::get_Number()
    @_property
    def number(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_Number(System.String)
    @number.setter
    def number(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallMedia Windows.ApplicationModel.Calls.PhoneDialOptions::get_Media()
    @_property
    def media(self) -> PhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_Media(Windows.ApplicationModel.Calls.PhoneCallMedia)
    @media.setter
    def media(self, value: PhoneCallMedia) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneDialOptions::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Contacts.ContactPhone Windows.ApplicationModel.Calls.PhoneDialOptions::get_ContactPhone()
    @_property
    def contact_phone(self) -> windows_applicationmodel_contacts.ContactPhone: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_ContactPhone(Windows.ApplicationModel.Contacts.ContactPhone)
    @contact_phone.setter
    def contact_phone(self, value: windows_applicationmodel_contacts.ContactPhone) -> None: ...
    # Windows.ApplicationModel.Contacts.Contact Windows.ApplicationModel.Calls.PhoneDialOptions::get_Contact()
    @_property
    def contact(self) -> windows_applicationmodel_contacts.Contact: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_Contact(Windows.ApplicationModel.Contacts.Contact)
    @contact.setter
    def contact(self, value: windows_applicationmodel_contacts.Contact) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneAudioRoutingEndpoint Windows.ApplicationModel.Calls.PhoneDialOptions::get_AudioEndpoint()
    @_property
    def audio_endpoint(self) -> PhoneAudioRoutingEndpoint: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneDialOptions::put_AudioEndpoint(Windows.ApplicationModel.Calls.PhoneAudioRoutingEndpoint)
    @audio_endpoint.setter
    def audio_endpoint(self, value: PhoneAudioRoutingEndpoint) -> None: ...

@typing.final
class PhoneLine_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneLine> Windows.ApplicationModel.Calls.PhoneLine::FromIdAsync(System.Guid)
    def from_id_async(cls, line_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[PhoneLine]: ...

@typing.final
class PhoneLine(winrt.system.Object, metaclass=PhoneLine_Static):
    # System.Void Windows.ApplicationModel.Calls.PhoneLine::Dial(System.String,System.String)
    def dial(self, number: str, display_name: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLine::DialWithOptions(Windows.ApplicationModel.Calls.PhoneDialOptions)
    def dial_with_options(self, options: PhoneDialOptions, /) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneLineDialResult Windows.ApplicationModel.Calls.PhoneLine::DialWithResult(System.String,System.String)
    def dial_with_result(self, number: str, display_name: str, /) -> PhoneLineDialResult: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneLineDialResult> Windows.ApplicationModel.Calls.PhoneLine::DialWithResultAsync(System.String,System.String)
    def dial_with_result_async(self, number: str, display_name: str, /) -> windows_foundation.IAsyncOperation[PhoneLineDialResult]: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLine::EnableTextReply(System.Boolean)
    # @deprecated("EnableTextReply is deprecated and might not work for all platforms. For more info, see MSDN.")
    def enable_text_reply(self, value: bool, /) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneCallsResult Windows.ApplicationModel.Calls.PhoneLine::GetAllActivePhoneCalls()
    def get_all_active_phone_calls(self) -> PhoneCallsResult: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.PhoneCallsResult> Windows.ApplicationModel.Calls.PhoneLine::GetAllActivePhoneCallsAsync()
    def get_all_active_phone_calls_async(self) -> windows_foundation.IAsyncOperation[PhoneCallsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Calls.PhoneLine::IsImmediateDialNumberAsync(System.String)
    def is_immediate_dial_number_async(self, number: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLine::add_LineChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLine,System.Object>)
    def add_line_changed(self, handler: windows_foundation.TypedEventHandler[PhoneLine, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLine::remove_LineChanged(Windows.Foundation.EventRegistrationToken)
    def remove_line_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLine::get_CanDial()
    @_property
    def can_dial(self) -> bool: ...
    # Windows.ApplicationModel.Calls.PhoneLineCellularDetails Windows.ApplicationModel.Calls.PhoneLine::get_CellularDetails()
    @_property
    def cellular_details(self) -> PhoneLineCellularDetails: ...
    # Windows.UI.Color Windows.ApplicationModel.Calls.PhoneLine::get_DisplayColor()
    @_property
    def display_color(self) -> windows_ui.Color: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLine::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Guid Windows.ApplicationModel.Calls.PhoneLine::get_Id()
    @_property
    def id(self) -> _uuid.UUID: ...
    # Windows.ApplicationModel.Calls.PhoneLineConfiguration Windows.ApplicationModel.Calls.PhoneLine::get_LineConfiguration()
    @_property
    def line_configuration(self) -> PhoneLineConfiguration: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLine::get_NetworkName()
    @_property
    def network_name(self) -> str: ...
    # Windows.ApplicationModel.Calls.PhoneNetworkState Windows.ApplicationModel.Calls.PhoneLine::get_NetworkState()
    @_property
    def network_state(self) -> PhoneNetworkState: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLine::get_SupportsTile()
    @_property
    def supports_tile(self) -> bool: ...
    # Windows.ApplicationModel.Calls.PhoneLineTransport Windows.ApplicationModel.Calls.PhoneLine::get_Transport()
    @_property
    def transport(self) -> PhoneLineTransport: ...
    # Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities Windows.ApplicationModel.Calls.PhoneLine::get_VideoCallingCapabilities()
    @_property
    def video_calling_capabilities(self) -> PhoneCallVideoCapabilities: ...
    # Windows.ApplicationModel.Calls.PhoneVoicemail Windows.ApplicationModel.Calls.PhoneLine::get_Voicemail()
    @_property
    def voicemail(self) -> PhoneVoicemail: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLine::get_TransportDeviceId()
    @_property
    def transport_device_id(self) -> str: ...

@typing.final
class PhoneLineCellularDetails(winrt.system.Object):
    # System.String Windows.ApplicationModel.Calls.PhoneLineCellularDetails::GetNetworkOperatorDisplayText(Windows.ApplicationModel.Calls.PhoneLineNetworkOperatorDisplayTextLocation)
    def get_network_operator_display_text(self, location: PhoneLineNetworkOperatorDisplayTextLocation, /) -> str: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLineCellularDetails::get_IsModemOn()
    @_property
    def is_modem_on(self) -> bool: ...
    # System.Int32 Windows.ApplicationModel.Calls.PhoneLineCellularDetails::get_RegistrationRejectCode()
    @_property
    def registration_reject_code(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Calls.PhoneLineCellularDetails::get_SimSlotIndex()
    @_property
    def sim_slot_index(self) -> winrt.system.Int32: ...
    # Windows.ApplicationModel.Calls.PhoneSimState Windows.ApplicationModel.Calls.PhoneLineCellularDetails::get_SimState()
    @_property
    def sim_state(self) -> PhoneSimState: ...

@typing.final
class PhoneLineConfiguration(winrt.system.Object):
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.ApplicationModel.Calls.PhoneLineConfiguration::get_ExtendedProperties()
    @_property
    def extended_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLineConfiguration::get_IsVideoCallingEnabled()
    @_property
    def is_video_calling_enabled(self) -> bool: ...

@typing.final
class PhoneLineDialResult(winrt.system.Object):
    # Windows.ApplicationModel.Calls.PhoneCallOperationStatus Windows.ApplicationModel.Calls.PhoneLineDialResult::get_DialCallStatus()
    @_property
    def dial_call_status(self) -> PhoneCallOperationStatus: ...
    # Windows.ApplicationModel.Calls.PhoneCall Windows.ApplicationModel.Calls.PhoneLineDialResult::get_DialedCall()
    @_property
    def dialed_call(self) -> PhoneCall: ...

@typing.final
class PhoneLineTransportDevice_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Calls.PhoneLineTransportDevice Windows.ApplicationModel.Calls.PhoneLineTransportDevice::FromId(System.String)
    def from_id(cls, id: str, /) -> PhoneLineTransportDevice: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLineTransportDevice::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLineTransportDevice::GetDeviceSelector(Windows.ApplicationModel.Calls.PhoneLineTransport)
    def get_device_selector_for_phone_line_transport(cls, transport: PhoneLineTransport, /) -> str: ...

@typing.final
class PhoneLineTransportDevice(winrt.system.Object, metaclass=PhoneLineTransportDevice_Static):
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLineTransportDevice::Connect()
    def connect(self) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Calls.PhoneLineTransportDevice::ConnectAsync()
    def connect_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLineTransportDevice::IsRegistered()
    def is_registered(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::RegisterApp()
    def register_app(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::RegisterAppForUser(Windows.System.User)
    def register_app_for_user(self, user: windows_system.User, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Enumeration.DeviceAccessStatus> Windows.ApplicationModel.Calls.PhoneLineTransportDevice::RequestAccessAsync()
    def request_access_async(self) -> windows_foundation.IAsyncOperation[windows_devices_enumeration.DeviceAccessStatus]: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::UnregisterApp()
    def unregister_app(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::UnregisterAppForUser(Windows.System.User)
    def unregister_app_for_user(self, user: windows_system.User, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineTransportDevice::add_AudioRoutingStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineTransportDevice,System.Object>)
    def add_audio_routing_status_changed(self, handler: windows_foundation.TypedEventHandler[PhoneLineTransportDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::remove_AudioRoutingStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_audio_routing_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineTransportDevice::add_InBandRingingEnabledChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineTransportDevice,System.Object>)
    def add_in_band_ringing_enabled_changed(self, handler: windows_foundation.TypedEventHandler[PhoneLineTransportDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineTransportDevice::remove_InBandRingingEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_in_band_ringing_enabled_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Calls.PhoneLineTransportDevice::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.ApplicationModel.Calls.PhoneLineTransport Windows.ApplicationModel.Calls.PhoneLineTransportDevice::get_Transport()
    @_property
    def transport(self) -> PhoneLineTransport: ...
    # Windows.ApplicationModel.Calls.TransportDeviceAudioRoutingStatus Windows.ApplicationModel.Calls.PhoneLineTransportDevice::get_AudioRoutingStatus()
    @_property
    def audio_routing_status(self) -> TransportDeviceAudioRoutingStatus: ...
    # System.Boolean Windows.ApplicationModel.Calls.PhoneLineTransportDevice::get_InBandRingingEnabled()
    @_property
    def in_band_ringing_enabled(self) -> bool: ...

@typing.final
class PhoneLineWatcher(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::Start()
    def start(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineWatcher::add_EnumerationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineWatcher,System.Object>)
    def add_enumeration_completed(self, handler: windows_foundation.TypedEventHandler[PhoneLineWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_enumeration_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineWatcher::add_LineAdded(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineWatcher,Windows.ApplicationModel.Calls.PhoneLineWatcherEventArgs>)
    def add_line_added(self, handler: windows_foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::remove_LineAdded(Windows.Foundation.EventRegistrationToken)
    def remove_line_added(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineWatcher::add_LineRemoved(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineWatcher,Windows.ApplicationModel.Calls.PhoneLineWatcherEventArgs>)
    def add_line_removed(self, handler: windows_foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::remove_LineRemoved(Windows.Foundation.EventRegistrationToken)
    def remove_line_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineWatcher::add_LineUpdated(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineWatcher,Windows.ApplicationModel.Calls.PhoneLineWatcherEventArgs>)
    def add_line_updated(self, handler: windows_foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::remove_LineUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_line_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.PhoneLineWatcher::add_Stopped(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.PhoneLineWatcher,System.Object>)
    def add_stopped(self, handler: windows_foundation.TypedEventHandler[PhoneLineWatcher, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.PhoneLineWatcher::remove_Stopped(Windows.Foundation.EventRegistrationToken)
    def remove_stopped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Calls.PhoneLineWatcherStatus Windows.ApplicationModel.Calls.PhoneLineWatcher::get_Status()
    @_property
    def status(self) -> PhoneLineWatcherStatus: ...

@typing.final
class PhoneLineWatcherEventArgs(winrt.system.Object):
    # System.Guid Windows.ApplicationModel.Calls.PhoneLineWatcherEventArgs::get_LineId()
    @_property
    def line_id(self) -> _uuid.UUID: ...

@typing.final
class PhoneVoicemail(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Calls.PhoneVoicemail::DialVoicemailAsync()
    def dial_voicemail_async(self) -> windows_foundation.IAsyncAction: ...
    # System.Int32 Windows.ApplicationModel.Calls.PhoneVoicemail::get_MessageCount()
    @_property
    def message_count(self) -> winrt.system.Int32: ...
    # System.String Windows.ApplicationModel.Calls.PhoneVoicemail::get_Number()
    @_property
    def number(self) -> str: ...
    # Windows.ApplicationModel.Calls.PhoneVoicemailType Windows.ApplicationModel.Calls.PhoneVoicemail::get_Type()
    @_property
    def type(self) -> PhoneVoicemailType: ...

@typing.final
class VoipCallCoordinator_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Calls.VoipCallCoordinator Windows.ApplicationModel.Calls.VoipCallCoordinator::GetDefault()
    def get_default(cls) -> VoipCallCoordinator: ...
    # System.String Windows.ApplicationModel.Calls.VoipCallCoordinator::GetDeviceSelectorForCallControl()
    def get_device_selector_for_call_control(cls) -> str: ...
    # System.Boolean Windows.ApplicationModel.Calls.VoipCallCoordinator::IsCallControlDeviceKindSupportedForAssociation(Windows.ApplicationModel.Calls.VoipCallControlDeviceKind)
    def is_call_control_device_kind_supported_for_association(cls, kind: VoipCallControlDeviceKind, /) -> bool: ...

@typing.final
class VoipCallCoordinator(winrt.system.Object, metaclass=VoipCallCoordinator_Static):
    # System.Void Windows.ApplicationModel.Calls.VoipCallCoordinator::CancelUpgrade(System.Guid)
    def cancel_upgrade(self, call_upgrade_guid: _uuid.UUID, /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipCallCoordinator::NotifyMuted()
    def notify_muted(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipCallCoordinator::NotifyUnmuted()
    def notify_unmuted(self) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestIncomingUpgradeToVideoCall(System.String,System.String,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,Windows.Foundation.TimeSpan)
    def request_incoming_upgrade_to_video_call(self, context: str, contact_name: str, contact_number: str, contact_image: windows_foundation.Uri, service_name: str, branding_image: windows_foundation.Uri, call_details: str, ringtone: windows_foundation.Uri, ring_timeout: datetime.timedelta, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewAppInitiatedCall(System.String,System.String,System.String,System.String,Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    def request_new_app_initiated_call(self, context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewAppInitiatedCallWithOptions(Windows.ApplicationModel.Calls.AppInitiatedVoipPhoneCallOptions)
    def request_new_app_initiated_call_with_options(self, call_options: AppInitiatedVoipPhoneCallOptions, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewIncomingCall(System.String,System.String,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,Windows.ApplicationModel.Calls.VoipPhoneCallMedia,Windows.Foundation.TimeSpan)
    def request_new_incoming_call(self, context: str, contact_name: str, contact_number: str, contact_image: windows_foundation.Uri, service_name: str, branding_image: windows_foundation.Uri, call_details: str, ringtone: windows_foundation.Uri, media: VoipPhoneCallMedia, ring_timeout: datetime.timedelta, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewIncomingCall(System.String,System.String,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,System.String,Windows.Foundation.Uri,Windows.ApplicationModel.Calls.VoipPhoneCallMedia,Windows.Foundation.TimeSpan,System.String)
    def request_new_incoming_call_with_contact_remote_id(self, context: str, contact_name: str, contact_number: str, contact_image: windows_foundation.Uri, service_name: str, branding_image: windows_foundation.Uri, call_details: str, ringtone: windows_foundation.Uri, media: VoipPhoneCallMedia, ring_timeout: datetime.timedelta, contact_remote_id: str, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewIncomingCallWithOptions(Windows.ApplicationModel.Calls.IncomingVoipPhoneCallOptions)
    def request_new_incoming_call_with_options(self, call_options: IncomingVoipPhoneCallOptions, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewOutgoingCall(System.String,System.String,System.String,Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    def request_new_outgoing_call(self, context: str, contact_name: str, service_name: str, media: VoipPhoneCallMedia, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestNewOutgoingCallWithOptions(Windows.ApplicationModel.Calls.OutgoingVoipPhoneCallOptions)
    def request_new_outgoing_call_with_options(self, call_options: OutgoingVoipPhoneCallOptions, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::RequestOutgoingUpgradeToVideoCall(System.Guid,System.String,System.String,System.String)
    def request_outgoing_upgrade_to_video_call(self, call_upgrade_guid: _uuid.UUID, context: str, contact_name: str, service_name: str, /) -> VoipPhoneCall: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus> Windows.ApplicationModel.Calls.VoipCallCoordinator::ReserveCallResourcesAsync(System.String)
    def reserve_call_resources_async(self, task_entry_point: str, /) -> windows_foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus> Windows.ApplicationModel.Calls.VoipCallCoordinator::ReserveCallResourcesAsync()
    def reserve_one_process_call_resources_async(self) -> windows_foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::SetupNewAcceptedCall(System.String,System.String,System.String,System.String,Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    def setup_new_accepted_call(self, context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia, /) -> VoipPhoneCall: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCall Windows.ApplicationModel.Calls.VoipCallCoordinator::SetupNewAcceptedCallWithOptions(Windows.ApplicationModel.Calls.AcceptedVoipPhoneCallOptions)
    def setup_new_accepted_call_with_options(self, call_options: AcceptedVoipPhoneCallOptions, /) -> VoipPhoneCall: ...
    # System.Void Windows.ApplicationModel.Calls.VoipCallCoordinator::TerminateCellularCall(System.Guid)
    def terminate_cellular_call(self, call_upgrade_guid: _uuid.UUID, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipCallCoordinator::add_MuteStateChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipCallCoordinator,Windows.ApplicationModel.Calls.MuteChangeEventArgs>)
    def add_mute_state_changed(self, mute_change_handler: windows_foundation.TypedEventHandler[VoipCallCoordinator, MuteChangeEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipCallCoordinator::remove_MuteStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_mute_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class VoipPhoneCall(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::AddAssociatedCallControlDevice(System.String)
    def add_associated_call_control_device(self, device_id: str, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.ApplicationModel.Calls.VoipPhoneCall::GetAssociatedCallControlDevices()
    def get_associated_call_control_devices(self) -> typing.Sequence[str]: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallAccepted(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    def notify_call_accepted(self, media: VoipPhoneCallMedia, /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallActive()
    def notify_call_active(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallActive(Windows.Foundation.Collections.IIterable`1<System.String>)
    def notify_call_active_on_devices(self, associated_device_ids: typing.Iterable[str], /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallEnded()
    def notify_call_ended(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallHeld()
    def notify_call_held(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::NotifyCallReady()
    def notify_call_ready(self) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::RemoveAssociatedCallControlDevice(System.String)
    def remove_associated_call_control_device(self, device_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::SetAssociatedCallControlDevices(Windows.Foundation.Collections.IIterable`1<System.String>)
    def set_associated_call_control_devices(self, associated_device_ids: typing.Iterable[str], /) -> None: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::TryShowAppUI()
    def try_show_app_ui(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipPhoneCall::add_AnswerRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipPhoneCall,Windows.ApplicationModel.Calls.CallAnswerEventArgs>)
    def add_answer_requested(self, accept_handler: windows_foundation.TypedEventHandler[VoipPhoneCall, CallAnswerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::remove_AnswerRequested(Windows.Foundation.EventRegistrationToken)
    def remove_answer_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipPhoneCall::add_EndRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipPhoneCall,Windows.ApplicationModel.Calls.CallStateChangeEventArgs>)
    def add_end_requested(self, handler: windows_foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::remove_EndRequested(Windows.Foundation.EventRegistrationToken)
    def remove_end_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipPhoneCall::add_HoldRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipPhoneCall,Windows.ApplicationModel.Calls.CallStateChangeEventArgs>)
    def add_hold_requested(self, handler: windows_foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::remove_HoldRequested(Windows.Foundation.EventRegistrationToken)
    def remove_hold_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipPhoneCall::add_RejectRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipPhoneCall,Windows.ApplicationModel.Calls.CallRejectEventArgs>)
    def add_reject_requested(self, reject_handler: windows_foundation.TypedEventHandler[VoipPhoneCall, CallRejectEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::remove_RejectRequested(Windows.Foundation.EventRegistrationToken)
    def remove_reject_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Calls.VoipPhoneCall::add_ResumeRequested(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Calls.VoipPhoneCall,Windows.ApplicationModel.Calls.CallStateChangeEventArgs>)
    def add_resume_requested(self, handler: windows_foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::remove_ResumeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_resume_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Calls.VoipPhoneCall::get_StartTime()
    @_property
    def start_time(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::put_StartTime(Windows.Foundation.DateTime)
    @start_time.setter
    def start_time(self, value: datetime.datetime) -> None: ...
    # System.String Windows.ApplicationModel.Calls.VoipPhoneCall::get_ContactName()
    @_property
    def contact_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::put_ContactName(System.String)
    @contact_name.setter
    def contact_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Calls.VoipPhoneCallMedia Windows.ApplicationModel.Calls.VoipPhoneCall::get_CallMedia()
    @_property
    def call_media(self) -> VoipPhoneCallMedia: ...
    # System.Void Windows.ApplicationModel.Calls.VoipPhoneCall::put_CallMedia(Windows.ApplicationModel.Calls.VoipPhoneCallMedia)
    @call_media.setter
    def call_media(self, value: VoipPhoneCallMedia) -> None: ...
    # System.Boolean Windows.ApplicationModel.Calls.VoipPhoneCall::get_IsUsingAssociatedDevicesList()
    @_property
    def is_using_associated_devices_list(self) -> bool: ...

