// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.UI.Composition.SystemBackdrops.h"


namespace py::cpp::Microsoft::UI::Composition::SystemBackdrops
{
    // ----- DesktopAcrylicController class --------------------

    static PyObject* _new_DesktopAcrylicController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DesktopAcrylicController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesktopAcrylicController_AddSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"AddSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.AddSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_Close(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_RemoveAllSystemBackdropTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"RemoveAllSystemBackdropTargets", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RemoveAllSystemBackdropTargets();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_RemoveSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"RemoveSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.RemoveSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_ResetProperties(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"ResetProperties", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ResetProperties();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_SetSystemBackdropConfiguration(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"SetSystemBackdropConfiguration", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration>(args, 0);

                self->obj.SetSystemBackdropConfiguration(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_SetTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"SetTarget", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Composition::CompositionTarget>(args, 1);

                return py::convert(self->obj.SetTarget(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_get_TintOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"TintOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TintOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopAcrylicController_put_TintOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"TintOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.TintOpacity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopAcrylicController_get_TintColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"TintColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TintColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopAcrylicController_put_TintColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"TintColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.TintColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopAcrylicController_get_LuminosityOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"LuminosityOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LuminosityOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopAcrylicController_put_LuminosityOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"LuminosityOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.LuminosityOpacity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopAcrylicController_get_FallbackColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"FallbackColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FallbackColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopAcrylicController_put_FallbackColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"FallbackColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.FallbackColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopAcrylicController_get_Kind(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopAcrylicController_put_Kind(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicKind>(arg);

            self->obj.Kind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopAcrylicController_get_State(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"State"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_get_IsClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"IsClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsClosed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_add_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_remove_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_add_Closed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::ClosableNotifierHandler>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_remove_Closed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_add_FrameworkClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"FrameworkClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::ClosableNotifierHandler>(arg);

            return py::convert(self->obj.FrameworkClosed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopAcrylicController_remove_FrameworkClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController", L"FrameworkClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameworkClosed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesktopAcrylicController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesktopAcrylicController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_DesktopAcrylicController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_DesktopAcrylicController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesktopAcrylicController[] = {
        { "add_system_backdrop_target", reinterpret_cast<PyCFunction>(DesktopAcrylicController_AddSystemBackdropTarget), METH_VARARGS, nullptr },
        { "close", reinterpret_cast<PyCFunction>(DesktopAcrylicController_Close), METH_VARARGS, nullptr },
        { "remove_all_system_backdrop_targets", reinterpret_cast<PyCFunction>(DesktopAcrylicController_RemoveAllSystemBackdropTargets), METH_VARARGS, nullptr },
        { "remove_system_backdrop_target", reinterpret_cast<PyCFunction>(DesktopAcrylicController_RemoveSystemBackdropTarget), METH_VARARGS, nullptr },
        { "reset_properties", reinterpret_cast<PyCFunction>(DesktopAcrylicController_ResetProperties), METH_VARARGS, nullptr },
        { "set_system_backdrop_configuration", reinterpret_cast<PyCFunction>(DesktopAcrylicController_SetSystemBackdropConfiguration), METH_VARARGS, nullptr },
        { "set_target", reinterpret_cast<PyCFunction>(DesktopAcrylicController_SetTarget), METH_VARARGS, nullptr },
        { "add_state_changed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_add_StateChanged), METH_O, nullptr },
        { "remove_state_changed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_remove_StateChanged), METH_O, nullptr },
        { "add_closed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_add_Closed), METH_O, nullptr },
        { "remove_closed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_remove_Closed), METH_O, nullptr },
        { "add_framework_closed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_add_FrameworkClosed), METH_O, nullptr },
        { "remove_framework_closed", reinterpret_cast<PyCFunction>(DesktopAcrylicController_remove_FrameworkClosed), METH_O, nullptr },
        { "_assign_array_", _assign_array_DesktopAcrylicController, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesktopAcrylicController), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_DesktopAcrylicController), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_DesktopAcrylicController), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_DesktopAcrylicController[] = {
        { "tint_opacity", reinterpret_cast<getter>(DesktopAcrylicController_get_TintOpacity), reinterpret_cast<setter>(DesktopAcrylicController_put_TintOpacity), nullptr, nullptr },
        { "tint_color", reinterpret_cast<getter>(DesktopAcrylicController_get_TintColor), reinterpret_cast<setter>(DesktopAcrylicController_put_TintColor), nullptr, nullptr },
        { "luminosity_opacity", reinterpret_cast<getter>(DesktopAcrylicController_get_LuminosityOpacity), reinterpret_cast<setter>(DesktopAcrylicController_put_LuminosityOpacity), nullptr, nullptr },
        { "fallback_color", reinterpret_cast<getter>(DesktopAcrylicController_get_FallbackColor), reinterpret_cast<setter>(DesktopAcrylicController_put_FallbackColor), nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(DesktopAcrylicController_get_Kind), reinterpret_cast<setter>(DesktopAcrylicController_put_Kind), nullptr, nullptr },
        { "state", reinterpret_cast<getter>(DesktopAcrylicController_get_State), nullptr, nullptr, nullptr },
        { "is_closed", reinterpret_cast<getter>(DesktopAcrylicController_get_IsClosed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DesktopAcrylicController[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesktopAcrylicController) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesktopAcrylicController) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesktopAcrylicController) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesktopAcrylicController) },
        { },
    };

    static PyType_Spec type_spec_DesktopAcrylicController =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.DesktopAcrylicController",
        sizeof(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesktopAcrylicController
    };

    static PyGetSetDef getset_DesktopAcrylicController_Static[] = {
        { }
    };

    static PyMethodDef methods_DesktopAcrylicController_Static[] = {
        { "is_supported", reinterpret_cast<PyCFunction>(DesktopAcrylicController_IsSupported), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_DesktopAcrylicController_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DesktopAcrylicController_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_DesktopAcrylicController_Static) },
        { }
    };

    static PyType_Spec type_spec_DesktopAcrylicController_Static =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.DesktopAcrylicController_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DesktopAcrylicController_Static
    };

    // ----- MicaController class --------------------

    static PyObject* _new_MicaController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Composition::SystemBackdrops::MicaController instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MicaController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MicaController_AddSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"AddSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.AddSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_Close(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::UI::Composition::SystemBackdrops::MicaController::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_RemoveAllSystemBackdropTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"RemoveAllSystemBackdropTargets", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RemoveAllSystemBackdropTargets();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_RemoveSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"RemoveSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.RemoveSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_ResetProperties(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"ResetProperties", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ResetProperties();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_SetSystemBackdropConfiguration(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"SetSystemBackdropConfiguration", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration>(args, 0);

                self->obj.SetSystemBackdropConfiguration(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_SetTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"SetTarget", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Composition::CompositionTarget>(args, 1);

                return py::convert(self->obj.SetTarget(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MicaController_get_TintOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"TintOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TintOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MicaController_put_TintOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"TintOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.TintOpacity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MicaController_get_TintColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"TintColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TintColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MicaController_put_TintColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"TintColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.TintColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MicaController_get_LuminosityOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"LuminosityOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LuminosityOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MicaController_put_LuminosityOpacity(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"LuminosityOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.LuminosityOpacity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MicaController_get_FallbackColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"FallbackColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FallbackColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MicaController_put_FallbackColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"FallbackColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.FallbackColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MicaController_get_Kind(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MicaController_put_Kind(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaKind>(arg);

            self->obj.Kind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MicaController_get_State(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"State"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_get_IsClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"IsClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsClosed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_add_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_remove_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_add_Closed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::ClosableNotifierHandler>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_remove_Closed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"Closed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_add_FrameworkClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"FrameworkClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::ClosableNotifierHandler>(arg);

            return py::convert(self->obj.FrameworkClosed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MicaController_remove_FrameworkClosed(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.MicaController", L"FrameworkClosed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameworkClosed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MicaController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaController>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MicaController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MicaController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_MicaController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MicaController[] = {
        { "add_system_backdrop_target", reinterpret_cast<PyCFunction>(MicaController_AddSystemBackdropTarget), METH_VARARGS, nullptr },
        { "close", reinterpret_cast<PyCFunction>(MicaController_Close), METH_VARARGS, nullptr },
        { "remove_all_system_backdrop_targets", reinterpret_cast<PyCFunction>(MicaController_RemoveAllSystemBackdropTargets), METH_VARARGS, nullptr },
        { "remove_system_backdrop_target", reinterpret_cast<PyCFunction>(MicaController_RemoveSystemBackdropTarget), METH_VARARGS, nullptr },
        { "reset_properties", reinterpret_cast<PyCFunction>(MicaController_ResetProperties), METH_VARARGS, nullptr },
        { "set_system_backdrop_configuration", reinterpret_cast<PyCFunction>(MicaController_SetSystemBackdropConfiguration), METH_VARARGS, nullptr },
        { "set_target", reinterpret_cast<PyCFunction>(MicaController_SetTarget), METH_VARARGS, nullptr },
        { "add_state_changed", reinterpret_cast<PyCFunction>(MicaController_add_StateChanged), METH_O, nullptr },
        { "remove_state_changed", reinterpret_cast<PyCFunction>(MicaController_remove_StateChanged), METH_O, nullptr },
        { "add_closed", reinterpret_cast<PyCFunction>(MicaController_add_Closed), METH_O, nullptr },
        { "remove_closed", reinterpret_cast<PyCFunction>(MicaController_remove_Closed), METH_O, nullptr },
        { "add_framework_closed", reinterpret_cast<PyCFunction>(MicaController_add_FrameworkClosed), METH_O, nullptr },
        { "remove_framework_closed", reinterpret_cast<PyCFunction>(MicaController_remove_FrameworkClosed), METH_O, nullptr },
        { "_assign_array_", _assign_array_MicaController, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MicaController), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_MicaController), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_MicaController), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_MicaController[] = {
        { "tint_opacity", reinterpret_cast<getter>(MicaController_get_TintOpacity), reinterpret_cast<setter>(MicaController_put_TintOpacity), nullptr, nullptr },
        { "tint_color", reinterpret_cast<getter>(MicaController_get_TintColor), reinterpret_cast<setter>(MicaController_put_TintColor), nullptr, nullptr },
        { "luminosity_opacity", reinterpret_cast<getter>(MicaController_get_LuminosityOpacity), reinterpret_cast<setter>(MicaController_put_LuminosityOpacity), nullptr, nullptr },
        { "fallback_color", reinterpret_cast<getter>(MicaController_get_FallbackColor), reinterpret_cast<setter>(MicaController_put_FallbackColor), nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(MicaController_get_Kind), reinterpret_cast<setter>(MicaController_put_Kind), nullptr, nullptr },
        { "state", reinterpret_cast<getter>(MicaController_get_State), nullptr, nullptr, nullptr },
        { "is_closed", reinterpret_cast<getter>(MicaController_get_IsClosed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MicaController[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MicaController) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MicaController) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MicaController) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MicaController) },
        { },
    };

    static PyType_Spec type_spec_MicaController =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.MicaController",
        sizeof(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::MicaController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MicaController
    };

    static PyGetSetDef getset_MicaController_Static[] = {
        { }
    };

    static PyMethodDef methods_MicaController_Static[] = {
        { "is_supported", reinterpret_cast<PyCFunction>(MicaController_IsSupported), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_MicaController_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_MicaController_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_MicaController_Static) },
        { }
    };

    static PyType_Spec type_spec_MicaController_Static =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.MicaController_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_MicaController_Static
    };

    // ----- SystemBackdropConfiguration class --------------------

    static PyObject* _new_SystemBackdropConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SystemBackdropConfiguration(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SystemBackdropConfiguration_get_Theme(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"Theme"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Theme());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SystemBackdropConfiguration_put_Theme(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"Theme"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropTheme>(arg);

            self->obj.Theme(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SystemBackdropConfiguration_get_IsInputActive(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"IsInputActive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsInputActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SystemBackdropConfiguration_put_IsInputActive(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"IsInputActive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputActive(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SystemBackdropConfiguration_get_IsHighContrast(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"IsHighContrast"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsHighContrast());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SystemBackdropConfiguration_put_IsHighContrast(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"IsHighContrast"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsHighContrast(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SystemBackdropConfiguration_get_HighContrastBackgroundColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"HighContrastBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HighContrastBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SystemBackdropConfiguration_put_HighContrastBackgroundColor(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration", L"HighContrastBackgroundColor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.HighContrastBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SystemBackdropConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SystemBackdropConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SystemBackdropConfiguration[] = {
        { "_assign_array_", _assign_array_SystemBackdropConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SystemBackdropConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SystemBackdropConfiguration[] = {
        { "theme", reinterpret_cast<getter>(SystemBackdropConfiguration_get_Theme), reinterpret_cast<setter>(SystemBackdropConfiguration_put_Theme), nullptr, nullptr },
        { "is_input_active", reinterpret_cast<getter>(SystemBackdropConfiguration_get_IsInputActive), reinterpret_cast<setter>(SystemBackdropConfiguration_put_IsInputActive), nullptr, nullptr },
        { "is_high_contrast", reinterpret_cast<getter>(SystemBackdropConfiguration_get_IsHighContrast), reinterpret_cast<setter>(SystemBackdropConfiguration_put_IsHighContrast), nullptr, nullptr },
        { "high_contrast_background_color", reinterpret_cast<getter>(SystemBackdropConfiguration_get_HighContrastBackgroundColor), reinterpret_cast<setter>(SystemBackdropConfiguration_put_HighContrastBackgroundColor), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SystemBackdropConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SystemBackdropConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SystemBackdropConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SystemBackdropConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SystemBackdropConfiguration) },
        { },
    };

    static PyType_Spec type_spec_SystemBackdropConfiguration =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.SystemBackdropConfiguration",
        sizeof(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SystemBackdropConfiguration
    };

    // ----- ISystemBackdropController interface --------------------

    static PyObject* _new_ISystemBackdropController(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController>::type_name);
        return nullptr;
    }

    static void _dealloc_ISystemBackdropController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISystemBackdropController_Close(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropController_SetTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController", L"SetTarget", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Composition::CompositionTarget>(args, 1);

                return py::convert(self->obj.SetTarget(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ISystemBackdropController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISystemBackdropController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ISystemBackdropController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ISystemBackdropController(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISystemBackdropController[] = {
        { "close", reinterpret_cast<PyCFunction>(ISystemBackdropController_Close), METH_VARARGS, nullptr },
        { "set_target", reinterpret_cast<PyCFunction>(ISystemBackdropController_SetTarget), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISystemBackdropController, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISystemBackdropController), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ISystemBackdropController), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_ISystemBackdropController), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISystemBackdropController[] = {
        { }
    };

    static PyType_Slot _type_slots_ISystemBackdropController[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISystemBackdropController) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISystemBackdropController) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISystemBackdropController) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISystemBackdropController) },
        { },
    };

    static PyType_Spec type_spec_ISystemBackdropController =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.ISystemBackdropController",
        sizeof(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISystemBackdropController
    };

    // ----- ISystemBackdropControllerWithTargets interface --------------------

    static PyObject* _new_ISystemBackdropControllerWithTargets(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets>::type_name);
        return nullptr;
    }

    static void _dealloc_ISystemBackdropControllerWithTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISystemBackdropControllerWithTargets_AddSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"AddSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.AddSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_Close(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_RemoveAllSystemBackdropTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"RemoveAllSystemBackdropTargets", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.RemoveAllSystemBackdropTargets();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_RemoveSystemBackdropTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"RemoveSystemBackdropTarget", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop>(args, 0);

                return py::convert(self->obj.RemoveSystemBackdropTarget(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_SetSystemBackdropConfiguration(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"SetSystemBackdropConfiguration", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration>(args, 0);

                self->obj.SetSystemBackdropConfiguration(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_SetTarget(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController", L"SetTarget", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Composition::CompositionTarget>(args, 1);

                return py::convert(self->obj.SetTarget(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_get_State(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"State"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_add_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISystemBackdropControllerWithTargets_remove_StateChanged(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets", L"StateChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ISystemBackdropControllerWithTargets(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISystemBackdropControllerWithTargets(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ISystemBackdropControllerWithTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ISystemBackdropControllerWithTargets(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISystemBackdropControllerWithTargets[] = {
        { "add_system_backdrop_target", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_AddSystemBackdropTarget), METH_VARARGS, nullptr },
        { "close", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_Close), METH_VARARGS, nullptr },
        { "remove_all_system_backdrop_targets", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_RemoveAllSystemBackdropTargets), METH_VARARGS, nullptr },
        { "remove_system_backdrop_target", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_RemoveSystemBackdropTarget), METH_VARARGS, nullptr },
        { "set_system_backdrop_configuration", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_SetSystemBackdropConfiguration), METH_VARARGS, nullptr },
        { "set_target", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_SetTarget), METH_VARARGS, nullptr },
        { "add_state_changed", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_add_StateChanged), METH_O, nullptr },
        { "remove_state_changed", reinterpret_cast<PyCFunction>(ISystemBackdropControllerWithTargets_remove_StateChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_ISystemBackdropControllerWithTargets, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISystemBackdropControllerWithTargets), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ISystemBackdropControllerWithTargets), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_ISystemBackdropControllerWithTargets), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISystemBackdropControllerWithTargets[] = {
        { "state", reinterpret_cast<getter>(ISystemBackdropControllerWithTargets_get_State), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISystemBackdropControllerWithTargets[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISystemBackdropControllerWithTargets) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISystemBackdropControllerWithTargets) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISystemBackdropControllerWithTargets) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISystemBackdropControllerWithTargets) },
        { },
    };

    static PyType_Spec type_spec_ISystemBackdropControllerWithTargets =
    {
        "winrt._winrt_microsoft_ui_composition_systembackdrops.ISystemBackdropControllerWithTargets",
        sizeof(py::wrapper::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISystemBackdropControllerWithTargets
    };

    // ----- Microsoft.UI.Composition.SystemBackdrops Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::UI::Composition::SystemBackdrops");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_ui_composition_systembackdrops",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::UI::Composition::SystemBackdrops

PyMODINIT_FUNC PyInit__winrt_microsoft_ui_composition_systembackdrops(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Composition::SystemBackdrops;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_DesktopAcrylicController_Static{PyType_FromSpec(&type_spec_DesktopAcrylicController_Static)};
    if (!type_DesktopAcrylicController_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DesktopAcrylicController, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_DesktopAcrylicController_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_MicaController_Static{PyType_FromSpec(&type_spec_MicaController_Static)};
    if (!type_MicaController_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MicaController, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_MicaController_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SystemBackdropConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ISystemBackdropController, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ISystemBackdropControllerWithTargets, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
