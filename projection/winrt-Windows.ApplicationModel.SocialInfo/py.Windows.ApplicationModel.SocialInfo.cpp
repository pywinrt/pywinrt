// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.SocialInfo.h"


namespace py::cpp::Windows::ApplicationModel::SocialInfo
{
    // ----- SocialFeedChildItem class --------------------

    static PyObject* _new_SocialFeedChildItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SocialFeedChildItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialFeedChildItem_get_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedChildItem_put_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.Timestamp(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedChildItem_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedChildItem_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedChildItem_get_SharedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"SharedItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SharedItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedChildItem_put_SharedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"SharedItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem>(arg);

            self->obj.SharedItem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedChildItem_get_Author(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"Author"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Author());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedChildItem_get_PrimaryContent(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"PrimaryContent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrimaryContent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedChildItem_get_SecondaryContent(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"SecondaryContent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SecondaryContent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedChildItem_get_Thumbnails(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedChildItem", L"Thumbnails"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Thumbnails());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SocialFeedChildItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialFeedChildItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialFeedChildItem[] = {
        { "_assign_array_", _assign_array_SocialFeedChildItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialFeedChildItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialFeedChildItem[] = {
        { "timestamp", reinterpret_cast<getter>(SocialFeedChildItem_get_Timestamp), reinterpret_cast<setter>(SocialFeedChildItem_put_Timestamp), nullptr, nullptr },
        { "target_uri", reinterpret_cast<getter>(SocialFeedChildItem_get_TargetUri), reinterpret_cast<setter>(SocialFeedChildItem_put_TargetUri), nullptr, nullptr },
        { "shared_item", reinterpret_cast<getter>(SocialFeedChildItem_get_SharedItem), reinterpret_cast<setter>(SocialFeedChildItem_put_SharedItem), nullptr, nullptr },
        { "author", reinterpret_cast<getter>(SocialFeedChildItem_get_Author), nullptr, nullptr, nullptr },
        { "primary_content", reinterpret_cast<getter>(SocialFeedChildItem_get_PrimaryContent), nullptr, nullptr, nullptr },
        { "secondary_content", reinterpret_cast<getter>(SocialFeedChildItem_get_SecondaryContent), nullptr, nullptr, nullptr },
        { "thumbnails", reinterpret_cast<getter>(SocialFeedChildItem_get_Thumbnails), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialFeedChildItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialFeedChildItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialFeedChildItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialFeedChildItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialFeedChildItem) },
        { },
    };

    static PyType_Spec type_spec_SocialFeedChildItem =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialFeedChildItem",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialFeedChildItem
    };

    // ----- SocialFeedContent class --------------------

    static PyObject* _new_SocialFeedContent(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedContent>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedContent>::type_name);
        return nullptr;
    }

    static void _dealloc_SocialFeedContent(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialFeedContent_get_Title(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedContent_put_Title(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedContent_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedContent_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedContent_get_Message(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedContent_put_Message(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedContent", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SocialFeedContent(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedContent>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialFeedContent(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedContent>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialFeedContent[] = {
        { "_assign_array_", _assign_array_SocialFeedContent, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialFeedContent), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialFeedContent[] = {
        { "title", reinterpret_cast<getter>(SocialFeedContent_get_Title), reinterpret_cast<setter>(SocialFeedContent_put_Title), nullptr, nullptr },
        { "target_uri", reinterpret_cast<getter>(SocialFeedContent_get_TargetUri), reinterpret_cast<setter>(SocialFeedContent_put_TargetUri), nullptr, nullptr },
        { "message", reinterpret_cast<getter>(SocialFeedContent_get_Message), reinterpret_cast<setter>(SocialFeedContent_put_Message), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialFeedContent[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialFeedContent) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialFeedContent) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialFeedContent) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialFeedContent) },
        { },
    };

    static PyType_Spec type_spec_SocialFeedContent =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialFeedContent",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedContent),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialFeedContent
    };

    // ----- SocialFeedItem class --------------------

    static PyObject* _new_SocialFeedItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::SocialInfo::SocialFeedItem instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SocialFeedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialFeedItem_get_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.Timestamp(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_Style(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Style"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Style());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_Style(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Style"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedItemStyle>(arg);

            self->obj.Style(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_SharedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"SharedItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SharedItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_SharedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"SharedItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem>(arg);

            self->obj.SharedItem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_RemoteId(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemoteId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_RemoteId(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.RemoteId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_ChildItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"ChildItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ChildItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_ChildItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"ChildItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedChildItem>(arg);

            self->obj.ChildItem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_BadgeStyle(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"BadgeStyle"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BadgeStyle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_BadgeStyle(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"BadgeStyle"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialItemBadgeStyle>(arg);

            self->obj.BadgeStyle(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_BadgeCountValue(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"BadgeCountValue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BadgeCountValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedItem_put_BadgeCountValue(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"BadgeCountValue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.BadgeCountValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedItem_get_Author(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Author"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Author());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedItem_get_Thumbnails(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"Thumbnails"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Thumbnails());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedItem_get_PrimaryContent(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"PrimaryContent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrimaryContent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SocialFeedItem_get_SecondaryContent(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedItem", L"SecondaryContent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SecondaryContent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SocialFeedItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialFeedItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialFeedItem[] = {
        { "_assign_array_", _assign_array_SocialFeedItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialFeedItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialFeedItem[] = {
        { "timestamp", reinterpret_cast<getter>(SocialFeedItem_get_Timestamp), reinterpret_cast<setter>(SocialFeedItem_put_Timestamp), nullptr, nullptr },
        { "target_uri", reinterpret_cast<getter>(SocialFeedItem_get_TargetUri), reinterpret_cast<setter>(SocialFeedItem_put_TargetUri), nullptr, nullptr },
        { "style", reinterpret_cast<getter>(SocialFeedItem_get_Style), reinterpret_cast<setter>(SocialFeedItem_put_Style), nullptr, nullptr },
        { "shared_item", reinterpret_cast<getter>(SocialFeedItem_get_SharedItem), reinterpret_cast<setter>(SocialFeedItem_put_SharedItem), nullptr, nullptr },
        { "remote_id", reinterpret_cast<getter>(SocialFeedItem_get_RemoteId), reinterpret_cast<setter>(SocialFeedItem_put_RemoteId), nullptr, nullptr },
        { "child_item", reinterpret_cast<getter>(SocialFeedItem_get_ChildItem), reinterpret_cast<setter>(SocialFeedItem_put_ChildItem), nullptr, nullptr },
        { "badge_style", reinterpret_cast<getter>(SocialFeedItem_get_BadgeStyle), reinterpret_cast<setter>(SocialFeedItem_put_BadgeStyle), nullptr, nullptr },
        { "badge_count_value", reinterpret_cast<getter>(SocialFeedItem_get_BadgeCountValue), reinterpret_cast<setter>(SocialFeedItem_put_BadgeCountValue), nullptr, nullptr },
        { "author", reinterpret_cast<getter>(SocialFeedItem_get_Author), nullptr, nullptr, nullptr },
        { "thumbnails", reinterpret_cast<getter>(SocialFeedItem_get_Thumbnails), nullptr, nullptr, nullptr },
        { "primary_content", reinterpret_cast<getter>(SocialFeedItem_get_PrimaryContent), nullptr, nullptr, nullptr },
        { "secondary_content", reinterpret_cast<getter>(SocialFeedItem_get_SecondaryContent), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialFeedItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialFeedItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialFeedItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialFeedItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialFeedItem) },
        { },
    };

    static PyType_Spec type_spec_SocialFeedItem =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialFeedItem",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialFeedItem
    };

    // ----- SocialFeedSharedItem class --------------------

    static PyObject* _new_SocialFeedSharedItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SocialFeedSharedItem(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialFeedSharedItem_get_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedSharedItem_put_Timestamp(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.Timestamp(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedSharedItem_get_Thumbnail(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"Thumbnail"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedSharedItem_put_Thumbnail(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"Thumbnail"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail>(arg);

            self->obj.Thumbnail(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedSharedItem_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedSharedItem_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedSharedItem_get_OriginalSource(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"OriginalSource"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OriginalSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialFeedSharedItem_put_OriginalSource(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"OriginalSource"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.OriginalSource(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialFeedSharedItem_get_Content(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SocialFeedSharedItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialFeedSharedItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialFeedSharedItem[] = {
        { "_assign_array_", _assign_array_SocialFeedSharedItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialFeedSharedItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialFeedSharedItem[] = {
        { "timestamp", reinterpret_cast<getter>(SocialFeedSharedItem_get_Timestamp), reinterpret_cast<setter>(SocialFeedSharedItem_put_Timestamp), nullptr, nullptr },
        { "thumbnail", reinterpret_cast<getter>(SocialFeedSharedItem_get_Thumbnail), reinterpret_cast<setter>(SocialFeedSharedItem_put_Thumbnail), nullptr, nullptr },
        { "target_uri", reinterpret_cast<getter>(SocialFeedSharedItem_get_TargetUri), reinterpret_cast<setter>(SocialFeedSharedItem_put_TargetUri), nullptr, nullptr },
        { "original_source", reinterpret_cast<getter>(SocialFeedSharedItem_get_OriginalSource), reinterpret_cast<setter>(SocialFeedSharedItem_put_OriginalSource), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(SocialFeedSharedItem_get_Content), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialFeedSharedItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialFeedSharedItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialFeedSharedItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialFeedSharedItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialFeedSharedItem) },
        { },
    };

    static PyType_Spec type_spec_SocialFeedSharedItem =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialFeedSharedItem",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialFeedSharedItem
    };

    // ----- SocialItemThumbnail class --------------------

    static PyObject* _new_SocialItemThumbnail(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SocialItemThumbnail(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialItemThumbnail_SetImageAsync(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"SetImageAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);

                return py::convert(self->obj.SetImageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SocialItemThumbnail_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialItemThumbnail_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialItemThumbnail_get_ImageUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"ImageUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ImageUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialItemThumbnail_put_ImageUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"ImageUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.ImageUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialItemThumbnail_get_BitmapSize(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"BitmapSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BitmapSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialItemThumbnail_put_BitmapSize(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialItemThumbnail", L"BitmapSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::BitmapSize>(arg);

            self->obj.BitmapSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SocialItemThumbnail(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialItemThumbnail(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialItemThumbnail[] = {
        { "set_image_async", reinterpret_cast<PyCFunction>(SocialItemThumbnail_SetImageAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SocialItemThumbnail, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialItemThumbnail), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialItemThumbnail[] = {
        { "target_uri", reinterpret_cast<getter>(SocialItemThumbnail_get_TargetUri), reinterpret_cast<setter>(SocialItemThumbnail_put_TargetUri), nullptr, nullptr },
        { "image_uri", reinterpret_cast<getter>(SocialItemThumbnail_get_ImageUri), reinterpret_cast<setter>(SocialItemThumbnail_put_ImageUri), nullptr, nullptr },
        { "bitmap_size", reinterpret_cast<getter>(SocialItemThumbnail_get_BitmapSize), reinterpret_cast<setter>(SocialItemThumbnail_put_BitmapSize), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialItemThumbnail[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialItemThumbnail) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialItemThumbnail) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialItemThumbnail) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialItemThumbnail) },
        { },
    };

    static PyType_Spec type_spec_SocialItemThumbnail =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialItemThumbnail",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialItemThumbnail),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialItemThumbnail
    };

    // ----- SocialUserInfo class --------------------

    static PyObject* _new_SocialUserInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::SocialInfo::SocialUserInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::SocialInfo::SocialUserInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_SocialUserInfo(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SocialUserInfo_get_UserName(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"UserName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UserName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialUserInfo_put_UserName(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"UserName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.UserName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialUserInfo_get_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialUserInfo_put_TargetUri(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"TargetUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.TargetUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialUserInfo_get_RemoteId(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemoteId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialUserInfo_put_RemoteId(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"RemoteId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.RemoteId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SocialUserInfo_get_DisplayName(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SocialUserInfo_put_DisplayName(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.SocialInfo.SocialUserInfo", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SocialUserInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::SocialInfo::SocialUserInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SocialUserInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::SocialInfo::SocialUserInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SocialUserInfo[] = {
        { "_assign_array_", _assign_array_SocialUserInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SocialUserInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SocialUserInfo[] = {
        { "user_name", reinterpret_cast<getter>(SocialUserInfo_get_UserName), reinterpret_cast<setter>(SocialUserInfo_put_UserName), nullptr, nullptr },
        { "target_uri", reinterpret_cast<getter>(SocialUserInfo_get_TargetUri), reinterpret_cast<setter>(SocialUserInfo_put_TargetUri), nullptr, nullptr },
        { "remote_id", reinterpret_cast<getter>(SocialUserInfo_get_RemoteId), reinterpret_cast<setter>(SocialUserInfo_put_RemoteId), nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(SocialUserInfo_get_DisplayName), reinterpret_cast<setter>(SocialUserInfo_put_DisplayName), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SocialUserInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SocialUserInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SocialUserInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SocialUserInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SocialUserInfo) },
        { },
    };

    static PyType_Spec type_spec_SocialUserInfo =
    {
        "winrt._winrt_windows_applicationmodel_socialinfo.SocialUserInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::SocialInfo::SocialUserInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SocialUserInfo
    };

    // ----- Windows.ApplicationModel.SocialInfo Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::SocialInfo");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_socialinfo",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::SocialInfo

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_socialinfo(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::SocialInfo;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialFeedChildItem, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialFeedContent, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialFeedItem, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialFeedSharedItem, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialItemThumbnail, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SocialUserInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
