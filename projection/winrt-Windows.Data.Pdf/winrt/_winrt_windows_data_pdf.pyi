# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui

from winrt.windows.data.pdf import PdfPageRotation

Self = typing.TypeVar('Self')

@typing.final
class PdfDocument_Static(type):
    @typing.overload
    def load_from_file_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[PdfDocument]: ...
    @typing.overload
    def load_from_file_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], password: str, /) -> winrt.windows.foundation.IAsyncOperation[PdfDocument]: ...
    @typing.overload
    def load_from_stream_async(cls, input_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncOperation[PdfDocument]: ...
    @typing.overload
    def load_from_stream_async(cls, input_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], password: str, /) -> winrt.windows.foundation.IAsyncOperation[PdfDocument]: ...

@typing.final
class PdfDocument(winrt.system.Object, metaclass=PdfDocument_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PdfDocument: ...
    def get_page(self, page_index: winrt.system.UInt32, /) -> typing.Optional[PdfPage]: ...
    @_property
    def is_password_protected(self) -> bool: ...
    @_property
    def page_count(self) -> winrt.system.UInt32: ...

@typing.final
class PdfPage(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PdfPage: ...
    def close(self) -> None: ...
    def prepare_page_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def render_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def render_to_stream_async(self, output_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], options: typing.Optional[PdfPageRenderOptions], /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def dimensions(self) -> typing.Optional[PdfPageDimensions]: ...
    @_property
    def index(self) -> winrt.system.UInt32: ...
    @_property
    def preferred_zoom(self) -> winrt.system.Single: ...
    @_property
    def rotation(self) -> PdfPageRotation: ...
    @_property
    def size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class PdfPageDimensions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PdfPageDimensions: ...
    @_property
    def art_box(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def bleed_box(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def crop_box(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def media_box(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def trim_box(self) -> winrt.windows.foundation.Rect: ...

@typing.final
class PdfPageRenderOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PdfPageRenderOptions: ...
    def __new__(cls: typing.Type[PdfPageRenderOptions]) -> PdfPageRenderOptions:...
    @_property
    def source_rect(self) -> winrt.windows.foundation.Rect: ...
    @source_rect.setter
    def source_rect(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def is_ignoring_high_contrast(self) -> bool: ...
    @is_ignoring_high_contrast.setter
    def is_ignoring_high_contrast(self, value: bool) -> None: ...
    @_property
    def destination_width(self) -> winrt.system.UInt32: ...
    @destination_width.setter
    def destination_width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def destination_height(self) -> winrt.system.UInt32: ...
    @destination_height.setter
    def destination_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bitmap_encoder_id(self) -> _uuid.UUID: ...
    @bitmap_encoder_id.setter
    def bitmap_encoder_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def background_color(self) -> winrt.windows.ui.Color: ...
    @background_color.setter
    def background_color(self, value: winrt.windows.ui.Color) -> None: ...

