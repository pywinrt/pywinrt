# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.storage as windows_storage
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.devices.pointofservice import BarcodeScannerStatus, BarcodeSymbologyDecodeLengthKind, CashDrawerStatusKind, LineDisplayCursorType, LineDisplayDescriptorState, LineDisplayHorizontalAlignment, LineDisplayMarqueeFormat, LineDisplayPowerStatus, LineDisplayScrollDirection, LineDisplayTextAttribute, LineDisplayTextAttributeGranularity, LineDisplayVerticalAlignment, MagneticStripeReaderAuthenticationLevel, MagneticStripeReaderAuthenticationProtocol, MagneticStripeReaderErrorReportingType, MagneticStripeReaderStatus, MagneticStripeReaderTrackErrorType, MagneticStripeReaderTrackIds, PosConnectionTypes, PosPrinterAlignment, PosPrinterBarcodeTextPosition, PosPrinterCartridgeSensors, PosPrinterColorCapabilities, PosPrinterColorCartridge, PosPrinterLineDirection, PosPrinterLineStyle, PosPrinterMapMode, PosPrinterMarkFeedCapabilities, PosPrinterMarkFeedKind, PosPrinterPrintSide, PosPrinterRotation, PosPrinterRuledLineCapabilities, PosPrinterStatusKind, UnifiedPosErrorReason, UnifiedPosErrorSeverity, UnifiedPosHealthCheckLevel, UnifiedPosPowerReportingType

Self = typing.TypeVar('Self')

@typing.final
class SizeUInt32:
    width: winrt.system.UInt32
    height: winrt.system.UInt32
    def __init__(self, width: winrt.system.UInt32 = 0, height: winrt.system.UInt32 = 0) -> None: ...

@typing.final
class BarcodeScanner_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.BarcodeScanner> Windows.Devices.PointOfService.BarcodeScanner::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[BarcodeScanner]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.BarcodeScanner> Windows.Devices.PointOfService.BarcodeScanner::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[BarcodeScanner]: ...
    # System.String Windows.Devices.PointOfService.BarcodeScanner::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.BarcodeScanner::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class BarcodeScanner(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=BarcodeScanner_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.BarcodeScanner::CheckHealthAsync(Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel)
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedBarcodeScanner> Windows.Devices.PointOfService.BarcodeScanner::ClaimScannerAsync()
    def claim_scanner_async(self) -> windows_foundation.IAsyncOperation[ClaimedBarcodeScanner]: ...
    # System.Void Windows.Devices.PointOfService.BarcodeScanner::Close()
    def close(self) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Devices.PointOfService.BarcodeScanner::GetSupportedProfiles()
    def get_supported_profiles(self) -> typing.Sequence[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<System.UInt32>> Windows.Devices.PointOfService.BarcodeScanner::GetSupportedSymbologiesAsync()
    def get_supported_symbologies_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[winrt.system.UInt32]]: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScanner::IsProfileSupported(System.String)
    def is_profile_supported(self, profile: str, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.BarcodeScanner::IsSymbologySupportedAsync(System.UInt32)
    def is_symbology_supported_async(self, barcode_symbology: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer> Windows.Devices.PointOfService.BarcodeScanner::RetrieveStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def retrieve_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.BarcodeScanner::add_StatusUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.BarcodeScanner,Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs>)
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[BarcodeScanner, BarcodeScannerStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.BarcodeScanner::remove_StatusUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.BarcodeScannerCapabilities Windows.Devices.PointOfService.BarcodeScanner::get_Capabilities()
    @_property
    def capabilities(self) -> BarcodeScannerCapabilities: ...
    # System.String Windows.Devices.PointOfService.BarcodeScanner::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.String Windows.Devices.PointOfService.BarcodeScanner::get_VideoDeviceId()
    @_property
    def video_device_id(self) -> str: ...

@typing.final
class BarcodeScannerCapabilities(winrt.system.Object):
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_IsImagePreviewSupported()
    @_property
    def is_image_preview_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_IsStatisticsReportingSupported()
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_IsStatisticsUpdatingSupported()
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.UnifiedPosPowerReportingType Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_PowerReportingType()
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_IsSoftwareTriggerSupported()
    @_property
    def is_software_trigger_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerCapabilities::get_IsVideoPreviewSupported()
    @_property
    def is_video_preview_supported(self) -> bool: ...

@typing.final
class BarcodeScannerDataReceivedEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.BarcodeScannerReport Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs::get_Report()
    @_property
    def report(self) -> BarcodeScannerReport: ...

@typing.final
class BarcodeScannerErrorOccurredEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.UnifiedPosErrorData Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs::get_ErrorData()
    @_property
    def error_data(self) -> UnifiedPosErrorData: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs::get_IsRetriable()
    @_property
    def is_retriable(self) -> bool: ...
    # Windows.Devices.PointOfService.BarcodeScannerReport Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs::get_PartialInputData()
    @_property
    def partial_input_data(self) -> BarcodeScannerReport: ...

@typing.final
class BarcodeScannerImagePreviewReceivedEventArgs(winrt.system.Object):
    # Windows.Storage.Streams.IRandomAccessStreamWithContentType Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs::get_Preview()
    @_property
    def preview(self) -> windows_storage_streams.IRandomAccessStreamWithContentType: ...

@typing.final
class BarcodeScannerReport(winrt.system.Object):
    def __new__(cls: typing.Type[Self], scan_data_type: winrt.system.UInt32, scan_data: windows_storage_streams.ImplementsIBuffer, scan_data_label: windows_storage_streams.ImplementsIBuffer) -> Self: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.BarcodeScannerReport::get_ScanData()
    @_property
    def scan_data(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.BarcodeScannerReport::get_ScanDataLabel()
    @_property
    def scan_data_label(self) -> windows_storage_streams.IBuffer: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeScannerReport::get_ScanDataType()
    @_property
    def scan_data_type(self) -> winrt.system.UInt32: ...

@typing.final
class BarcodeScannerStatusUpdatedEventArgs(winrt.system.Object):
    # System.UInt32 Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs::get_ExtendedStatus()
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    # Windows.Devices.PointOfService.BarcodeScannerStatus Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs::get_Status()
    @_property
    def status(self) -> BarcodeScannerStatus: ...

@typing.final
class BarcodeSymbologies_Static(type):
    # System.String Windows.Devices.PointOfService.BarcodeSymbologies::GetName(System.UInt32)
    def get_name(cls, scan_data_type: winrt.system.UInt32, /) -> str: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code11()
    @_property
    def code11(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_AusPost()
    @_property
    def aus_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Aztec()
    @_property
    def aztec(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_CanPost()
    @_property
    def can_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ccab()
    @_property
    def ccab(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ccc()
    @_property
    def ccc(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_ChinaPost()
    @_property
    def china_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Codabar()
    @_property
    def codabar(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Codablock128()
    @_property
    def codablock128(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_CodablockA()
    @_property
    def codablock_a(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_CodablockF()
    @_property
    def codablock_f(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_DutchKix()
    @_property
    def dutch_kix(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code128()
    @_property
    def code128(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code16k()
    @_property
    def code16k(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code32()
    @_property
    def code32(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code39()
    @_property
    def code39(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code39Ex()
    @_property
    def code39_ex(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code49()
    @_property
    def code49(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code93()
    @_property
    def code93(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Code93Ex()
    @_property
    def code93_ex(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_DataCode()
    @_property
    def data_code(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_DataMatrix()
    @_property
    def data_matrix(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UsPostNet()
    @_property
    def us_post_net(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean13()
    @_property
    def ean13(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean13Add2()
    @_property
    def ean13_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean13Add5()
    @_property
    def ean13_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean8()
    @_property
    def ean8(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean8Add2()
    @_property
    def ean8_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean8Add5()
    @_property
    def ean8_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean99()
    @_property
    def ean99(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean99Add2()
    @_property
    def ean99_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ean99Add5()
    @_property
    def ean99_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Eanv()
    @_property
    def eanv(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_EanvAdd2()
    @_property
    def eanv_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_EanvAdd5()
    @_property
    def eanv_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_ExtendedBase()
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1128()
    @_property
    def gs1128(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1128Coupon()
    @_property
    def gs1128_coupon(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1DatabarType1()
    @_property
    def gs1_databar_type1(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1DatabarType2()
    @_property
    def gs1_databar_type2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1DatabarType3()
    @_property
    def gs1_databar_type3(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_HanXin()
    @_property
    def han_xin(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_InfoMail()
    @_property
    def info_mail(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Isbn()
    @_property
    def isbn(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_IsbnAdd5()
    @_property
    def isbn_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Isbt()
    @_property
    def isbt(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Ismn()
    @_property
    def ismn(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_IsmnAdd2()
    @_property
    def ismn_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_IsmnAdd5()
    @_property
    def ismn_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Issn()
    @_property
    def issn(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_IssnAdd2()
    @_property
    def issn_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_IssnAdd5()
    @_property
    def issn_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_ItalianPost25()
    @_property
    def italian_post25(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_ItalianPost39()
    @_property
    def italian_post39(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_JapanPost()
    @_property
    def japan_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_KoreanPost()
    @_property
    def korean_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Maxicode()
    @_property
    def maxicode(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Micr()
    @_property
    def micr(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_MicroPdf417()
    @_property
    def micro_pdf417(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_MicroQr()
    @_property
    def micro_qr(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_MsTag()
    @_property
    def ms_tag(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Msi()
    @_property
    def msi(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_OcrA()
    @_property
    def ocr_a(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_OcrB()
    @_property
    def ocr_b(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Pdf417()
    @_property
    def pdf417(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Plessey()
    @_property
    def plessey(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Pzn()
    @_property
    def pzn(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Qr()
    @_property
    def qr(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Sisac()
    @_property
    def sisac(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_SwedenPost()
    @_property
    def sweden_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Telepen()
    @_property
    def telepen(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfDis()
    @_property
    def tf_dis(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfIata()
    @_property
    def tf_iata(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfInd()
    @_property
    def tf_ind(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfInt()
    @_property
    def tf_int(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfMat()
    @_property
    def tf_mat(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_TfStd()
    @_property
    def tf_std(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Tlc39()
    @_property
    def tlc39(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Trioptic39()
    @_property
    def trioptic39(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UccEan128()
    @_property
    def ucc_ean128(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UkPost()
    @_property
    def uk_post(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Unknown()
    @_property
    def unknown(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UpcCoupon()
    @_property
    def upc_coupon(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Upca()
    @_property
    def upca(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UpcaAdd2()
    @_property
    def upca_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UpcaAdd5()
    @_property
    def upca_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Upce()
    @_property
    def upce(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UpceAdd2()
    @_property
    def upce_add2(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UpceAdd5()
    @_property
    def upce_add5(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Us4StateFics()
    @_property
    def us4_state_fics(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UsIntelligent()
    @_property
    def us_intelligent(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UsIntelligentPkg()
    @_property
    def us_intelligent_pkg(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_UsPlanet()
    @_property
    def us_planet(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologies::get_Gs1DWCode()
    @_property
    def gs1_d_w_code(cls) -> winrt.system.UInt32: ...

@typing.final
class BarcodeSymbologies(winrt.system.Object, metaclass=BarcodeSymbologies_Static):
    pass

@typing.final
class BarcodeSymbologyAttributes(winrt.system.Object):
    # System.Boolean Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_IsCheckDigitValidationEnabled()
    @_property
    def is_check_digit_validation_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.BarcodeSymbologyAttributes::put_IsCheckDigitValidationEnabled(System.Boolean)
    @is_check_digit_validation_enabled.setter
    def is_check_digit_validation_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_IsCheckDigitTransmissionEnabled()
    @_property
    def is_check_digit_transmission_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.BarcodeSymbologyAttributes::put_IsCheckDigitTransmissionEnabled(System.Boolean)
    @is_check_digit_transmission_enabled.setter
    def is_check_digit_transmission_enabled(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.BarcodeSymbologyDecodeLengthKind Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_DecodeLengthKind()
    @_property
    def decode_length_kind(self) -> BarcodeSymbologyDecodeLengthKind: ...
    # System.Void Windows.Devices.PointOfService.BarcodeSymbologyAttributes::put_DecodeLengthKind(Windows.Devices.PointOfService.BarcodeSymbologyDecodeLengthKind)
    @decode_length_kind.setter
    def decode_length_kind(self, value: BarcodeSymbologyDecodeLengthKind) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_DecodeLength2()
    @_property
    def decode_length2(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.BarcodeSymbologyAttributes::put_DecodeLength2(System.UInt32)
    @decode_length2.setter
    def decode_length2(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_DecodeLength1()
    @_property
    def decode_length1(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.BarcodeSymbologyAttributes::put_DecodeLength1(System.UInt32)
    @decode_length1.setter
    def decode_length1(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_IsCheckDigitTransmissionSupported()
    @_property
    def is_check_digit_transmission_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_IsCheckDigitValidationSupported()
    @_property
    def is_check_digit_validation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.BarcodeSymbologyAttributes::get_IsDecodeLengthSupported()
    @_property
    def is_decode_length_supported(self) -> bool: ...

@typing.final
class CashDrawer_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.CashDrawer> Windows.Devices.PointOfService.CashDrawer::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[CashDrawer]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.CashDrawer> Windows.Devices.PointOfService.CashDrawer::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[CashDrawer]: ...
    # System.String Windows.Devices.PointOfService.CashDrawer::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.CashDrawer::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class CashDrawer(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=CashDrawer_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.CashDrawer::CheckHealthAsync(Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel)
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedCashDrawer> Windows.Devices.PointOfService.CashDrawer::ClaimDrawerAsync()
    def claim_drawer_async(self) -> windows_foundation.IAsyncOperation[ClaimedCashDrawer]: ...
    # System.Void Windows.Devices.PointOfService.CashDrawer::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.CashDrawer::GetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.CashDrawer::add_StatusUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.CashDrawer,Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs>)
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[CashDrawer, CashDrawerStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.CashDrawer::remove_StatusUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.CashDrawerCapabilities Windows.Devices.PointOfService.CashDrawer::get_Capabilities()
    @_property
    def capabilities(self) -> CashDrawerCapabilities: ...
    # System.String Windows.Devices.PointOfService.CashDrawer::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Devices.PointOfService.CashDrawerEventSource Windows.Devices.PointOfService.CashDrawer::get_DrawerEventSource()
    @_property
    def drawer_event_source(self) -> CashDrawerEventSource: ...
    # System.Boolean Windows.Devices.PointOfService.CashDrawer::get_IsDrawerOpen()
    @_property
    def is_drawer_open(self) -> bool: ...
    # Windows.Devices.PointOfService.CashDrawerStatus Windows.Devices.PointOfService.CashDrawer::get_Status()
    @_property
    def status(self) -> CashDrawerStatus: ...

@typing.final
class CashDrawerCapabilities(winrt.system.Object):
    # System.Boolean Windows.Devices.PointOfService.CashDrawerCapabilities::get_IsDrawerOpenSensorAvailable()
    @_property
    def is_drawer_open_sensor_available(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.CashDrawerCapabilities::get_IsStatisticsReportingSupported()
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.CashDrawerCapabilities::get_IsStatisticsUpdatingSupported()
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.CashDrawerCapabilities::get_IsStatusMultiDrawerDetectSupported()
    @_property
    def is_status_multi_drawer_detect_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.CashDrawerCapabilities::get_IsStatusReportingSupported()
    @_property
    def is_status_reporting_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.UnifiedPosPowerReportingType Windows.Devices.PointOfService.CashDrawerCapabilities::get_PowerReportingType()
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...

@typing.final
class CashDrawerCloseAlarm(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.CashDrawerCloseAlarm::StartAsync()
    def start_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.CashDrawerCloseAlarm::add_AlarmTimeoutExpired(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.CashDrawerCloseAlarm,System.Object>)
    def add_alarm_timeout_expired(self, handler: windows_foundation.TypedEventHandler[CashDrawerCloseAlarm, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerCloseAlarm::remove_AlarmTimeoutExpired(Windows.Foundation.EventRegistrationToken)
    def remove_alarm_timeout_expired(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.CashDrawerCloseAlarm::get_BeepFrequency()
    @_property
    def beep_frequency(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerCloseAlarm::put_BeepFrequency(System.UInt32)
    @beep_frequency.setter
    def beep_frequency(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.CashDrawerCloseAlarm::get_BeepDuration()
    @_property
    def beep_duration(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerCloseAlarm::put_BeepDuration(Windows.Foundation.TimeSpan)
    @beep_duration.setter
    def beep_duration(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.CashDrawerCloseAlarm::get_BeepDelay()
    @_property
    def beep_delay(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerCloseAlarm::put_BeepDelay(Windows.Foundation.TimeSpan)
    @beep_delay.setter
    def beep_delay(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.CashDrawerCloseAlarm::get_AlarmTimeout()
    @_property
    def alarm_timeout(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerCloseAlarm::put_AlarmTimeout(Windows.Foundation.TimeSpan)
    @alarm_timeout.setter
    def alarm_timeout(self, value: datetime.timedelta) -> None: ...

@typing.final
class CashDrawerClosedEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    # Windows.Devices.PointOfService.CashDrawer Windows.Devices.PointOfService.CashDrawerClosedEventArgs::get_CashDrawer()
    @_property
    def cash_drawer(self) -> CashDrawer: ...

@typing.final
class CashDrawerEventSource(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.CashDrawerEventSource::add_DrawerClosed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.CashDrawerEventSource,Windows.Devices.PointOfService.CashDrawerClosedEventArgs>)
    def add_drawer_closed(self, handler: windows_foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerEventSource::remove_DrawerClosed(Windows.Foundation.EventRegistrationToken)
    def remove_drawer_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.CashDrawerEventSource::add_DrawerOpened(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.CashDrawerEventSource,Windows.Devices.PointOfService.CashDrawerOpenedEventArgs>)
    def add_drawer_opened(self, handler: windows_foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerOpenedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.CashDrawerEventSource::remove_DrawerOpened(Windows.Foundation.EventRegistrationToken)
    def remove_drawer_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CashDrawerOpenedEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    # Windows.Devices.PointOfService.CashDrawer Windows.Devices.PointOfService.CashDrawerOpenedEventArgs::get_CashDrawer()
    @_property
    def cash_drawer(self) -> CashDrawer: ...

@typing.final
class CashDrawerStatus(winrt.system.Object):
    # System.UInt32 Windows.Devices.PointOfService.CashDrawerStatus::get_ExtendedStatus()
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    # Windows.Devices.PointOfService.CashDrawerStatusKind Windows.Devices.PointOfService.CashDrawerStatus::get_StatusKind()
    @_property
    def status_kind(self) -> CashDrawerStatusKind: ...

@typing.final
class CashDrawerStatusUpdatedEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.CashDrawerStatus Windows.Devices.PointOfService.CashDrawerStatusUpdatedEventArgs::get_Status()
    @_property
    def status(self) -> CashDrawerStatus: ...

@typing.final
class ClaimedBarcodeScanner(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::DisableAsync()
    def disable_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::EnableAsync()
    def enable_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.BarcodeSymbologyAttributes> Windows.Devices.PointOfService.ClaimedBarcodeScanner::GetSymbologyAttributesAsync(System.UInt32)
    def get_symbology_attributes_async(self, barcode_symbology: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[BarcodeSymbologyAttributes]: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::HideVideoPreview()
    def hide_video_preview(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::ResetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::RetainDevice()
    def retain_device(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::SetActiveProfileAsync(System.String)
    def set_active_profile_async(self, profile: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::SetActiveSymbologiesAsync(Windows.Foundation.Collections.IIterable`1<System.UInt32>)
    def set_active_symbologies_async(self, symbologies: typing.Iterable[winrt.system.UInt32], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedBarcodeScanner::SetSymbologyAttributesAsync(System.UInt32,Windows.Devices.PointOfService.BarcodeSymbologyAttributes)
    def set_symbology_attributes_async(self, barcode_symbology: winrt.system.UInt32, attributes: BarcodeSymbologyAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedBarcodeScanner::ShowVideoPreviewAsync()
    def show_video_preview_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::StartSoftwareTriggerAsync()
    def start_software_trigger_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::StopSoftwareTriggerAsync()
    def stop_software_trigger_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedBarcodeScanner::UpdateStatisticsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>)
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_DataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedBarcodeScanner,Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs>)
    def add_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_DataReceived(Windows.Foundation.EventRegistrationToken)
    def remove_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_ErrorOccurred(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedBarcodeScanner,Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs>)
    def add_error_occurred(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_ErrorOccurred(Windows.Foundation.EventRegistrationToken)
    def remove_error_occurred(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_ImagePreviewReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedBarcodeScanner,Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs>)
    def add_image_preview_received(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_ImagePreviewReceived(Windows.Foundation.EventRegistrationToken)
    def remove_image_preview_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_ReleaseDeviceRequested(Windows.Foundation.EventHandler`1<Windows.Devices.PointOfService.ClaimedBarcodeScanner>)
    def add_release_device_requested(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_ReleaseDeviceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_TriggerPressed(Windows.Foundation.EventHandler`1<Windows.Devices.PointOfService.ClaimedBarcodeScanner>)
    def add_trigger_pressed(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_TriggerPressed(Windows.Foundation.EventRegistrationToken)
    def remove_trigger_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_TriggerReleased(Windows.Foundation.EventHandler`1<Windows.Devices.PointOfService.ClaimedBarcodeScanner>)
    def add_trigger_released(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_TriggerReleased(Windows.Foundation.EventRegistrationToken)
    def remove_trigger_released(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedBarcodeScanner::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedBarcodeScanner,Windows.Devices.PointOfService.ClaimedBarcodeScannerClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, ClaimedBarcodeScannerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedBarcodeScanner::get_IsDisabledOnDataReceived()
    @_property
    def is_disabled_on_data_received(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::put_IsDisabledOnDataReceived(System.Boolean)
    @is_disabled_on_data_received.setter
    def is_disabled_on_data_received(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedBarcodeScanner::get_IsDecodeDataEnabled()
    @_property
    def is_decode_data_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::put_IsDecodeDataEnabled(System.Boolean)
    @is_decode_data_enabled.setter
    def is_decode_data_enabled(self, value: bool) -> None: ...
    # System.String Windows.Devices.PointOfService.ClaimedBarcodeScanner::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedBarcodeScanner::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedBarcodeScanner::get_IsVideoPreviewShownOnEnable()
    @_property
    def is_video_preview_shown_on_enable(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedBarcodeScanner::put_IsVideoPreviewShownOnEnable(System.Boolean)
    @is_video_preview_shown_on_enable.setter
    def is_video_preview_shown_on_enable(self, value: bool) -> None: ...

@typing.final
class ClaimedBarcodeScannerClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedCashDrawer(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.PointOfService.ClaimedCashDrawer::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::DisableAsync()
    def disable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::EnableAsync()
    def enable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::OpenDrawerAsync()
    def open_drawer_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::ResetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::RetainDeviceAsync()
    def retain_device_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedCashDrawer::UpdateStatisticsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>)
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedCashDrawer::add_ReleaseDeviceRequested(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedCashDrawer,System.Object>)
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedCashDrawer, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedCashDrawer::remove_ReleaseDeviceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedCashDrawer::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedCashDrawer,Windows.Devices.PointOfService.ClaimedCashDrawerClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedCashDrawer, ClaimedCashDrawerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedCashDrawer::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.CashDrawerCloseAlarm Windows.Devices.PointOfService.ClaimedCashDrawer::get_CloseAlarm()
    @_property
    def close_alarm(self) -> CashDrawerCloseAlarm: ...
    # System.String Windows.Devices.PointOfService.ClaimedCashDrawer::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedCashDrawer::get_IsDrawerOpen()
    @_property
    def is_drawer_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedCashDrawer::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...

@typing.final
class ClaimedCashDrawerClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedJournalPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    # Windows.Devices.PointOfService.JournalPrintJob Windows.Devices.PointOfService.ClaimedJournalPrinter::CreateJob()
    def create_job(self) -> JournalPrintJob: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::ValidateData(System.String)
    def validate_data(self, data: str, /) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedJournalPrinter::get_LineSpacing()
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedJournalPrinter::put_LineSpacing(System.UInt32)
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedJournalPrinter::get_LineHeight()
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedJournalPrinter::put_LineHeight(System.UInt32)
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsLetterQuality()
    @_property
    def is_letter_quality(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedJournalPrinter::put_IsLetterQuality(System.Boolean)
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterColorCartridge Windows.Devices.PointOfService.ClaimedJournalPrinter::get_ColorCartridge()
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    # System.Void Windows.Devices.PointOfService.ClaimedJournalPrinter::put_ColorCartridge(Windows.Devices.PointOfService.PosPrinterColorCartridge)
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedJournalPrinter::get_CharactersPerLine()
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedJournalPrinter::put_CharactersPerLine(System.UInt32)
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsCartridgeEmpty()
    @_property
    def is_cartridge_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsCartridgeRemoved()
    @_property
    def is_cartridge_removed(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsCoverOpen()
    @_property
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsHeadCleaning()
    @_property
    def is_head_cleaning(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsPaperEmpty()
    @_property
    def is_paper_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsPaperNearEnd()
    @_property
    def is_paper_near_end(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedJournalPrinter::get_IsReadyToPrint()
    @_property
    def is_ready_to_print(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedJournalPrinter::get_LineWidth()
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class ClaimedLineDisplay_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedLineDisplay> Windows.Devices.PointOfService.ClaimedLineDisplay::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[ClaimedLineDisplay]: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class ClaimedLineDisplay(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=ClaimedLineDisplay_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.ClaimedLineDisplay::CheckHealthAsync(Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel)
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayPowerStatus> Windows.Devices.PointOfService.ClaimedLineDisplay::CheckPowerStatusAsync()
    def check_power_status_async(self) -> windows_foundation.IAsyncOperation[LineDisplayPowerStatus]: ...
    # System.Void Windows.Devices.PointOfService.ClaimedLineDisplay::Close()
    def close(self) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayAttributes Windows.Devices.PointOfService.ClaimedLineDisplay::GetAttributes()
    def get_attributes(self) -> LineDisplayAttributes: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.ClaimedLineDisplay::GetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    # System.Void Windows.Devices.PointOfService.ClaimedLineDisplay::RetainDevice()
    def retain_device(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedLineDisplay::TryClearDescriptorsAsync()
    def try_clear_descriptors_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayWindow> Windows.Devices.PointOfService.ClaimedLineDisplay::TryCreateWindowAsync(Windows.Foundation.Rect,Windows.Foundation.Size)
    def try_create_window_async(self, viewport: windows_foundation.Rect, window_size: windows_foundation.Size, /) -> windows_foundation.IAsyncOperation[LineDisplayWindow]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedLineDisplay::TrySetDescriptorAsync(System.UInt32,Windows.Devices.PointOfService.LineDisplayDescriptorState)
    def try_set_descriptor_async(self, descriptor: winrt.system.UInt32, descriptor_state: LineDisplayDescriptorState, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayStoredBitmap> Windows.Devices.PointOfService.ClaimedLineDisplay::TryStoreStorageFileBitmapAsync(Windows.Storage.StorageFile)
    def try_store_storage_file_bitmap_async(self, bitmap: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[typing.Optional[LineDisplayStoredBitmap]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayStoredBitmap> Windows.Devices.PointOfService.ClaimedLineDisplay::TryStoreStorageFileBitmapAsync(Windows.Storage.StorageFile,Windows.Devices.PointOfService.LineDisplayHorizontalAlignment,Windows.Devices.PointOfService.LineDisplayVerticalAlignment,System.Int32)
    def try_store_storage_file_bitmap_with_alignment_and_width_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[typing.Optional[LineDisplayStoredBitmap]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayStoredBitmap> Windows.Devices.PointOfService.ClaimedLineDisplay::TryStoreStorageFileBitmapAsync(Windows.Storage.StorageFile,Windows.Devices.PointOfService.LineDisplayHorizontalAlignment,Windows.Devices.PointOfService.LineDisplayVerticalAlignment)
    def try_store_storage_file_bitmap_with_alignment_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, /) -> windows_foundation.IAsyncOperation[typing.Optional[LineDisplayStoredBitmap]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedLineDisplay::TryUpdateAttributesAsync(Windows.Devices.PointOfService.LineDisplayAttributes)
    def try_update_attributes_async(self, attributes: LineDisplayAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedLineDisplay::add_ReleaseDeviceRequested(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedLineDisplay,System.Object>)
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedLineDisplay::remove_ReleaseDeviceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedLineDisplay::add_StatusUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedLineDisplay,Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs>)
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, LineDisplayStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedLineDisplay::remove_StatusUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedLineDisplay::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedLineDisplay,Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, ClaimedLineDisplayClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedLineDisplay::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayCapabilities Windows.Devices.PointOfService.ClaimedLineDisplay::get_Capabilities()
    @_property
    def capabilities(self) -> LineDisplayCapabilities: ...
    # Windows.Devices.PointOfService.LineDisplayWindow Windows.Devices.PointOfService.ClaimedLineDisplay::get_DefaultWindow()
    @_property
    def default_window(self) -> LineDisplayWindow: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_DeviceControlDescription()
    @_property
    def device_control_description(self) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_DeviceControlVersion()
    @_property
    def device_control_version(self) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_DeviceServiceVersion()
    @_property
    def device_service_version(self) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_PhysicalDeviceDescription()
    @_property
    def physical_device_description(self) -> str: ...
    # System.String Windows.Devices.PointOfService.ClaimedLineDisplay::get_PhysicalDeviceName()
    @_property
    def physical_device_name(self) -> str: ...
    # Windows.Devices.PointOfService.LineDisplayCustomGlyphs Windows.Devices.PointOfService.ClaimedLineDisplay::get_CustomGlyphs()
    @_property
    def custom_glyphs(self) -> LineDisplayCustomGlyphs: ...
    # Windows.Foundation.Size Windows.Devices.PointOfService.ClaimedLineDisplay::get_MaxBitmapSizeInPixels()
    @_property
    def max_bitmap_size_in_pixels(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Collections.IVectorView`1<System.Int32> Windows.Devices.PointOfService.ClaimedLineDisplay::get_SupportedCharacterSets()
    @_property
    def supported_character_sets(self) -> typing.Sequence[winrt.system.Int32]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Size> Windows.Devices.PointOfService.ClaimedLineDisplay::get_SupportedScreenSizesInCharacters()
    @_property
    def supported_screen_sizes_in_characters(self) -> typing.Sequence[windows_foundation.Size]: ...

@typing.final
class ClaimedLineDisplayClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedMagneticStripeReader(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::AuthenticateDeviceAsync(System.Byte[])
    def authenticate_device_async(self, response_token: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::DeAuthenticateDeviceAsync(System.Byte[])
    def de_authenticate_device_async(self, response_token: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::DisableAsync()
    def disable_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::EnableAsync()
    def enable_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::ResetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::RetainDevice()
    def retain_device(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer> Windows.Devices.PointOfService.ClaimedMagneticStripeReader::RetrieveDeviceAuthenticationDataAsync()
    def retrieve_device_authentication_data_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::SetErrorReportingType(Windows.Devices.PointOfService.MagneticStripeReaderErrorReportingType)
    def set_error_reporting_type(self, value: MagneticStripeReaderErrorReportingType, /) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::UpdateKeyAsync(System.String,System.String)
    def update_key_async(self, key: str, key_name: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.PointOfService.ClaimedMagneticStripeReader::UpdateStatisticsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>)
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_AamvaCardDataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedMagneticStripeReader,Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs>)
    def add_aamva_card_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderAamvaCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_AamvaCardDataReceived(Windows.Foundation.EventRegistrationToken)
    def remove_aamva_card_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_BankCardDataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedMagneticStripeReader,Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs>)
    def add_bank_card_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderBankCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_BankCardDataReceived(Windows.Foundation.EventRegistrationToken)
    def remove_bank_card_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_ErrorOccurred(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedMagneticStripeReader,Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs>)
    def add_error_occurred(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderErrorOccurredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_ErrorOccurred(Windows.Foundation.EventRegistrationToken)
    def remove_error_occurred(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_ReleaseDeviceRequested(Windows.Foundation.EventHandler`1<Windows.Devices.PointOfService.ClaimedMagneticStripeReader>)
    def add_release_device_requested(self, handler: windows_foundation.EventHandler[ClaimedMagneticStripeReader], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_ReleaseDeviceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_VendorSpecificDataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedMagneticStripeReader,Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>)
    def add_vendor_specific_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_VendorSpecificDataReceived(Windows.Foundation.EventRegistrationToken)
    def remove_vendor_specific_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedMagneticStripeReader::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedMagneticStripeReader,Windows.Devices.PointOfService.ClaimedMagneticStripeReaderClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, ClaimedMagneticStripeReaderClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackIds Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_TracksToRead()
    @_property
    def tracks_to_read(self) -> MagneticStripeReaderTrackIds: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::put_TracksToRead(Windows.Devices.PointOfService.MagneticStripeReaderTrackIds)
    @tracks_to_read.setter
    def tracks_to_read(self, value: MagneticStripeReaderTrackIds) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_IsTransmitSentinelsEnabled()
    @_property
    def is_transmit_sentinels_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::put_IsTransmitSentinelsEnabled(System.Boolean)
    @is_transmit_sentinels_enabled.setter
    def is_transmit_sentinels_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_IsDisabledOnDataReceived()
    @_property
    def is_disabled_on_data_received(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::put_IsDisabledOnDataReceived(System.Boolean)
    @is_disabled_on_data_received.setter
    def is_disabled_on_data_received(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_IsDecodeDataEnabled()
    @_property
    def is_decode_data_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::put_IsDecodeDataEnabled(System.Boolean)
    @is_decode_data_enabled.setter
    def is_decode_data_enabled(self, value: bool) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_DataEncryptionAlgorithm()
    @_property
    def data_encryption_algorithm(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedMagneticStripeReader::put_DataEncryptionAlgorithm(System.UInt32)
    @data_encryption_algorithm.setter
    def data_encryption_algorithm(self, value: winrt.system.UInt32) -> None: ...
    # System.String Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_IsDeviceAuthenticated()
    @_property
    def is_device_authenticated(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedMagneticStripeReader::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...

@typing.final
class ClaimedMagneticStripeReaderClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedPosPrinter(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedPosPrinter::DisableAsync()
    def disable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedPosPrinter::EnableAsync()
    def enable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedPosPrinter::ResetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedPosPrinter::RetainDeviceAsync()
    def retain_device_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedPosPrinter::UpdateStatisticsAsync(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>)
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedPosPrinter::add_ReleaseDeviceRequested(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedPosPrinter,Windows.Devices.PointOfService.PosPrinterReleaseDeviceRequestedEventArgs>)
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedPosPrinter, PosPrinterReleaseDeviceRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::remove_ReleaseDeviceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.ClaimedPosPrinter::add_Closed(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.ClaimedPosPrinter,Windows.Devices.PointOfService.ClaimedPosPrinterClosedEventArgs>)
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedPosPrinter, ClaimedPosPrinterClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::remove_Closed(Windows.Foundation.EventRegistrationToken)
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterMapMode Windows.Devices.PointOfService.ClaimedPosPrinter::get_MapMode()
    @_property
    def map_mode(self) -> PosPrinterMapMode: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::put_MapMode(Windows.Devices.PointOfService.PosPrinterMapMode)
    @map_mode.setter
    def map_mode(self, value: PosPrinterMapMode) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedPosPrinter::get_IsCharacterSetMappingEnabled()
    @_property
    def is_character_set_mapping_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::put_IsCharacterSetMappingEnabled(System.Boolean)
    @is_character_set_mapping_enabled.setter
    def is_character_set_mapping_enabled(self, value: bool) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedPosPrinter::get_CharacterSet()
    @_property
    def character_set(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedPosPrinter::put_CharacterSet(System.UInt32)
    @character_set.setter
    def character_set(self, value: winrt.system.UInt32) -> None: ...
    # System.String Windows.Devices.PointOfService.ClaimedPosPrinter::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedPosPrinter::get_IsCoverOpen()
    @_property
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedPosPrinter::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # Windows.Devices.PointOfService.ClaimedJournalPrinter Windows.Devices.PointOfService.ClaimedPosPrinter::get_Journal()
    @_property
    def journal(self) -> ClaimedJournalPrinter: ...
    # Windows.Devices.PointOfService.ClaimedReceiptPrinter Windows.Devices.PointOfService.ClaimedPosPrinter::get_Receipt()
    @_property
    def receipt(self) -> ClaimedReceiptPrinter: ...
    # Windows.Devices.PointOfService.ClaimedSlipPrinter Windows.Devices.PointOfService.ClaimedPosPrinter::get_Slip()
    @_property
    def slip(self) -> ClaimedSlipPrinter: ...

@typing.final
class ClaimedPosPrinterClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedReceiptPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    # Windows.Devices.PointOfService.ReceiptPrintJob Windows.Devices.PointOfService.ClaimedReceiptPrinter::CreateJob()
    def create_job(self) -> ReceiptPrintJob: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::ValidateData(System.String)
    def validate_data(self, data: str, /) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_LinesToPaperCut()
    @_property
    def lines_to_paper_cut(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Size Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_PageSize()
    @_property
    def page_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Rect Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_PrintArea()
    @_property
    def print_area(self) -> windows_foundation.Rect: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_SidewaysMaxChars()
    @_property
    def sideways_max_chars(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_SidewaysMaxLines()
    @_property
    def sideways_max_lines(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_LineSpacing()
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedReceiptPrinter::put_LineSpacing(System.UInt32)
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_LineHeight()
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedReceiptPrinter::put_LineHeight(System.UInt32)
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsLetterQuality()
    @_property
    def is_letter_quality(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedReceiptPrinter::put_IsLetterQuality(System.Boolean)
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterColorCartridge Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_ColorCartridge()
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    # System.Void Windows.Devices.PointOfService.ClaimedReceiptPrinter::put_ColorCartridge(Windows.Devices.PointOfService.PosPrinterColorCartridge)
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_CharactersPerLine()
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedReceiptPrinter::put_CharactersPerLine(System.UInt32)
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsCartridgeEmpty()
    @_property
    def is_cartridge_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsCartridgeRemoved()
    @_property
    def is_cartridge_removed(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsCoverOpen()
    @_property
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsHeadCleaning()
    @_property
    def is_head_cleaning(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsPaperEmpty()
    @_property
    def is_paper_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsPaperNearEnd()
    @_property
    def is_paper_near_end(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_IsReadyToPrint()
    @_property
    def is_ready_to_print(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedReceiptPrinter::get_LineWidth()
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class ClaimedSlipPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::ChangePrintSide(Windows.Devices.PointOfService.PosPrinterPrintSide)
    def change_print_side(self, print_side: PosPrinterPrintSide, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::CloseJaws()
    def close_jaws(self) -> None: ...
    # Windows.Devices.PointOfService.SlipPrintJob Windows.Devices.PointOfService.ClaimedSlipPrinter::CreateJob()
    def create_job(self) -> SlipPrintJob: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedSlipPrinter::InsertSlipAsync(Windows.Foundation.TimeSpan)
    def insert_slip_async(self, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::OpenJaws()
    def open_jaws(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ClaimedSlipPrinter::RemoveSlipAsync(Windows.Foundation.TimeSpan)
    def remove_slip_async(self, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::ValidateData(System.String)
    def validate_data(self, data: str, /) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_LinesNearEndToEnd()
    @_property
    def lines_near_end_to_end(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_MaxLines()
    @_property
    def max_lines(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Size Windows.Devices.PointOfService.ClaimedSlipPrinter::get_PageSize()
    @_property
    def page_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Rect Windows.Devices.PointOfService.ClaimedSlipPrinter::get_PrintArea()
    @_property
    def print_area(self) -> windows_foundation.Rect: ...
    # Windows.Devices.PointOfService.PosPrinterPrintSide Windows.Devices.PointOfService.ClaimedSlipPrinter::get_PrintSide()
    @_property
    def print_side(self) -> PosPrinterPrintSide: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_SidewaysMaxChars()
    @_property
    def sideways_max_chars(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_SidewaysMaxLines()
    @_property
    def sideways_max_lines(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_LineSpacing()
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::put_LineSpacing(System.UInt32)
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_LineHeight()
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::put_LineHeight(System.UInt32)
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsLetterQuality()
    @_property
    def is_letter_quality(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::put_IsLetterQuality(System.Boolean)
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterColorCartridge Windows.Devices.PointOfService.ClaimedSlipPrinter::get_ColorCartridge()
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::put_ColorCartridge(Windows.Devices.PointOfService.PosPrinterColorCartridge)
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_CharactersPerLine()
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ClaimedSlipPrinter::put_CharactersPerLine(System.UInt32)
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsCartridgeEmpty()
    @_property
    def is_cartridge_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsCartridgeRemoved()
    @_property
    def is_cartridge_removed(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsCoverOpen()
    @_property
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsHeadCleaning()
    @_property
    def is_head_cleaning(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsPaperEmpty()
    @_property
    def is_paper_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsPaperNearEnd()
    @_property
    def is_paper_near_end(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ClaimedSlipPrinter::get_IsReadyToPrint()
    @_property
    def is_ready_to_print(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ClaimedSlipPrinter::get_LineWidth()
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class JournalPrintJob(winrt.system.Object, ImplementsIPosPrinterJob):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.JournalPrintJob::ExecuteAsync()
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::FeedPaperByLine(System.Int32)
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::FeedPaperByMapModeUnit(System.Int32)
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::Print(System.String)
    def print(self, data: str, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::Print(System.String,Windows.Devices.PointOfService.PosPrinterPrintOptions)
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::PrintLine(System.String)
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.JournalPrintJob::PrintLine()
    def print_newline(self) -> None: ...

@typing.final
class JournalPrinterCapabilities(winrt.system.Object, ImplementsICommonPosPrintStationCapabilities):
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.JournalPrinterCapabilities::get_CartridgeSensors()
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.JournalPrinterCapabilities::get_ColorCartridgeCapabilities()
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsBoldSupported()
    @_property
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsDualColorSupported()
    @_property
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsItalicSupported()
    @_property
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsPrinterPresent()
    @_property
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.JournalPrinterCapabilities::get_SupportedCharactersPerLine()
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsReversePaperFeedByLineSupported()
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsReversePaperFeedByMapModeUnitSupported()
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsReverseVideoSupported()
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsStrikethroughSupported()
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsSubscriptSupported()
    @_property
    def is_subscript_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.JournalPrinterCapabilities::get_IsSuperscriptSupported()
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class LineDisplay_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplay> Windows.Devices.PointOfService.LineDisplay::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[LineDisplay]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplay> Windows.Devices.PointOfService.LineDisplay::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[LineDisplay]: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...
    # Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector Windows.Devices.PointOfService.LineDisplay::get_StatisticsCategorySelector()
    @_property
    def statistics_category_selector(cls) -> LineDisplayStatisticsCategorySelector: ...

@typing.final
class LineDisplay(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=LineDisplay_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.LineDisplayPowerStatus> Windows.Devices.PointOfService.LineDisplay::CheckPowerStatusAsync()
    def check_power_status_async(self) -> windows_foundation.IAsyncOperation[LineDisplayPowerStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedLineDisplay> Windows.Devices.PointOfService.LineDisplay::ClaimAsync()
    def claim_async(self) -> windows_foundation.IAsyncOperation[ClaimedLineDisplay]: ...
    # System.Void Windows.Devices.PointOfService.LineDisplay::Close()
    def close(self) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayCapabilities Windows.Devices.PointOfService.LineDisplay::get_Capabilities()
    @_property
    def capabilities(self) -> LineDisplayCapabilities: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_DeviceControlDescription()
    @_property
    def device_control_description(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_DeviceControlVersion()
    @_property
    def device_control_version(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_DeviceServiceVersion()
    @_property
    def device_service_version(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_PhysicalDeviceDescription()
    @_property
    def physical_device_description(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplay::get_PhysicalDeviceName()
    @_property
    def physical_device_name(self) -> str: ...

@typing.final
class LineDisplayAttributes(winrt.system.Object):
    # Windows.Foundation.Size Windows.Devices.PointOfService.LineDisplayAttributes::get_ScreenSizeInCharacters()
    @_property
    def screen_size_in_characters(self) -> windows_foundation.Size: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_ScreenSizeInCharacters(Windows.Foundation.Size)
    @screen_size_in_characters.setter
    def screen_size_in_characters(self, value: windows_foundation.Size) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayAttributes::get_IsPowerNotifyEnabled()
    @_property
    def is_power_notify_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_IsPowerNotifyEnabled(System.Boolean)
    @is_power_notify_enabled.setter
    def is_power_notify_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayAttributes::get_IsCharacterSetMappingEnabled()
    @_property
    def is_character_set_mapping_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_IsCharacterSetMappingEnabled(System.Boolean)
    @is_character_set_mapping_enabled.setter
    def is_character_set_mapping_enabled(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayWindow Windows.Devices.PointOfService.LineDisplayAttributes::get_CurrentWindow()
    @_property
    def current_window(self) -> LineDisplayWindow: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_CurrentWindow(Windows.Devices.PointOfService.LineDisplayWindow)
    @current_window.setter
    def current_window(self, value: LineDisplayWindow) -> None: ...
    # System.Int32 Windows.Devices.PointOfService.LineDisplayAttributes::get_CharacterSet()
    @_property
    def character_set(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_CharacterSet(System.Int32)
    @character_set.setter
    def character_set(self, value: winrt.system.Int32) -> None: ...
    # System.Int32 Windows.Devices.PointOfService.LineDisplayAttributes::get_Brightness()
    @_property
    def brightness(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_Brightness(System.Int32)
    @brightness.setter
    def brightness(self, value: winrt.system.Int32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.LineDisplayAttributes::get_BlinkRate()
    @_property
    def blink_rate(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayAttributes::put_BlinkRate(Windows.Foundation.TimeSpan)
    @blink_rate.setter
    def blink_rate(self, value: datetime.timedelta) -> None: ...

@typing.final
class LineDisplayCapabilities(winrt.system.Object):
    # Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanBlink()
    @_property
    def can_blink(self) -> LineDisplayTextAttributeGranularity: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanChangeBlinkRate()
    @_property
    def can_change_blink_rate(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanChangeScreenSize()
    @_property
    def can_change_screen_size(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanDisplayBitmaps()
    @_property
    def can_display_bitmaps(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanDisplayCustomGlyphs()
    @_property
    def can_display_custom_glyphs(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanMapCharacterSets()
    @_property
    def can_map_character_sets(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanReadCharacterAtCursor()
    @_property
    def can_read_character_at_cursor(self) -> bool: ...
    # Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity Windows.Devices.PointOfService.LineDisplayCapabilities::get_CanReverse()
    @_property
    def can_reverse(self) -> LineDisplayTextAttributeGranularity: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsBrightnessSupported()
    @_property
    def is_brightness_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsCursorSupported()
    @_property
    def is_cursor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsHorizontalMarqueeSupported()
    @_property
    def is_horizontal_marquee_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsInterCharacterWaitSupported()
    @_property
    def is_inter_character_wait_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsStatisticsReportingSupported()
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsStatisticsUpdatingSupported()
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCapabilities::get_IsVerticalMarqueeSupported()
    @_property
    def is_vertical_marquee_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.UnifiedPosPowerReportingType Windows.Devices.PointOfService.LineDisplayCapabilities::get_PowerReportingType()
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    # System.UInt32 Windows.Devices.PointOfService.LineDisplayCapabilities::get_SupportedDescriptors()
    @_property
    def supported_descriptors(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.LineDisplayCapabilities::get_SupportedWindows()
    @_property
    def supported_windows(self) -> winrt.system.UInt32: ...

@typing.final
class LineDisplayCursor(winrt.system.Object):
    # Windows.Devices.PointOfService.LineDisplayCursorAttributes Windows.Devices.PointOfService.LineDisplayCursor::GetAttributes()
    def get_attributes(self) -> LineDisplayCursorAttributes: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayCursor::TryUpdateAttributesAsync(Windows.Devices.PointOfService.LineDisplayCursorAttributes)
    def try_update_attributes_async(self, attributes: LineDisplayCursorAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_CanCustomize()
    @_property
    def can_customize(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsBlinkSupported()
    @_property
    def is_blink_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsBlockSupported()
    @_property
    def is_block_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsHalfBlockSupported()
    @_property
    def is_half_block_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsOtherSupported()
    @_property
    def is_other_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsReverseSupported()
    @_property
    def is_reverse_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursor::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...

@typing.final
class LineDisplayCursorAttributes(winrt.system.Object):
    # Windows.Foundation.Point Windows.Devices.PointOfService.LineDisplayCursorAttributes::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayCursorAttributes::put_Position(Windows.Foundation.Point)
    @position.setter
    def position(self, value: windows_foundation.Point) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursorAttributes::get_IsBlinkEnabled()
    @_property
    def is_blink_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayCursorAttributes::put_IsBlinkEnabled(System.Boolean)
    @is_blink_enabled.setter
    def is_blink_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.LineDisplayCursorAttributes::get_IsAutoAdvanceEnabled()
    @_property
    def is_auto_advance_enabled(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayCursorAttributes::put_IsAutoAdvanceEnabled(System.Boolean)
    @is_auto_advance_enabled.setter
    def is_auto_advance_enabled(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayCursorType Windows.Devices.PointOfService.LineDisplayCursorAttributes::get_CursorType()
    @_property
    def cursor_type(self) -> LineDisplayCursorType: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayCursorAttributes::put_CursorType(Windows.Devices.PointOfService.LineDisplayCursorType)
    @cursor_type.setter
    def cursor_type(self, value: LineDisplayCursorType) -> None: ...

@typing.final
class LineDisplayCustomGlyphs(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayCustomGlyphs::TryRedefineAsync(System.UInt32,Windows.Storage.Streams.IBuffer)
    def try_redefine_async(self, glyph_code: winrt.system.UInt32, glyph_data: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.Size Windows.Devices.PointOfService.LineDisplayCustomGlyphs::get_SizeInPixels()
    @_property
    def size_in_pixels(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.LineDisplayCustomGlyphs::get_SupportedGlyphCodes()
    @_property
    def supported_glyph_codes(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class LineDisplayMarquee(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayMarquee::TryStartScrollingAsync(Windows.Devices.PointOfService.LineDisplayScrollDirection)
    def try_start_scrolling_async(self, direction: LineDisplayScrollDirection, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayMarquee::TryStopScrollingAsync()
    def try_stop_scrolling_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.LineDisplayMarquee::get_ScrollWaitInterval()
    @_property
    def scroll_wait_interval(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayMarquee::put_ScrollWaitInterval(Windows.Foundation.TimeSpan)
    @scroll_wait_interval.setter
    def scroll_wait_interval(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.LineDisplayMarquee::get_RepeatWaitInterval()
    @_property
    def repeat_wait_interval(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayMarquee::put_RepeatWaitInterval(Windows.Foundation.TimeSpan)
    @repeat_wait_interval.setter
    def repeat_wait_interval(self, value: datetime.timedelta) -> None: ...
    # Windows.Devices.PointOfService.LineDisplayMarqueeFormat Windows.Devices.PointOfService.LineDisplayMarquee::get_Format()
    @_property
    def format(self) -> LineDisplayMarqueeFormat: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayMarquee::put_Format(Windows.Devices.PointOfService.LineDisplayMarqueeFormat)
    @format.setter
    def format(self, value: LineDisplayMarqueeFormat) -> None: ...

@typing.final
class LineDisplayStatisticsCategorySelector(winrt.system.Object):
    # System.String Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector::get_AllStatistics()
    @_property
    def all_statistics(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector::get_ManufacturerStatistics()
    @_property
    def manufacturer_statistics(self) -> str: ...
    # System.String Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector::get_UnifiedPosStatistics()
    @_property
    def unified_pos_statistics(self) -> str: ...

@typing.final
class LineDisplayStatusUpdatedEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.LineDisplayPowerStatus Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs::get_Status()
    @_property
    def status(self) -> LineDisplayPowerStatus: ...

@typing.final
class LineDisplayStoredBitmap(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayStoredBitmap::TryDeleteAsync()
    def try_delete_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.String Windows.Devices.PointOfService.LineDisplayStoredBitmap::get_EscapeSequence()
    @_property
    def escape_sequence(self) -> str: ...

@typing.final
class LineDisplayWindow(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayWindow::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.UInt32> Windows.Devices.PointOfService.LineDisplayWindow::ReadCharacterAtCursorAsync()
    def read_character_at_cursor_async(self) -> windows_foundation.IAsyncOperation[winrt.system.UInt32]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryClearTextAsync()
    def try_clear_text_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStorageFileBitmapAtCursorAsync(Windows.Storage.StorageFile)
    def try_display_storage_file_bitmap_at_cursor_async(self, bitmap: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStorageFileBitmapAtCursorAsync(Windows.Storage.StorageFile,Windows.Devices.PointOfService.LineDisplayHorizontalAlignment,Windows.Devices.PointOfService.LineDisplayVerticalAlignment,System.Int32)
    def try_display_storage_file_bitmap_at_cursor_with_alignment_and_width_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStorageFileBitmapAtCursorAsync(Windows.Storage.StorageFile,Windows.Devices.PointOfService.LineDisplayHorizontalAlignment,Windows.Devices.PointOfService.LineDisplayVerticalAlignment)
    def try_display_storage_file_bitmap_at_cursor_with_alignment_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStorageFileBitmapAtPointAsync(Windows.Storage.StorageFile,Windows.Foundation.Point)
    def try_display_storage_file_bitmap_at_point_async(self, bitmap: windows_storage.StorageFile, offset_in_pixels: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStorageFileBitmapAtPointAsync(Windows.Storage.StorageFile,Windows.Foundation.Point,System.Int32)
    def try_display_storage_file_bitmap_at_point_with_width_async(self, bitmap: windows_storage.StorageFile, offset_in_pixels: windows_foundation.Point, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayStoredBitmapAtCursorAsync(Windows.Devices.PointOfService.LineDisplayStoredBitmap)
    def try_display_stored_bitmap_at_cursor_async(self, bitmap: LineDisplayStoredBitmap, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayTextAsync(System.String,Windows.Devices.PointOfService.LineDisplayTextAttribute)
    def try_display_text_async(self, text: str, display_attribute: LineDisplayTextAttribute, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayTextAsync(System.String,Windows.Devices.PointOfService.LineDisplayTextAttribute,Windows.Foundation.Point)
    def try_display_text_at_position_async(self, text: str, display_attribute: LineDisplayTextAttribute, start_position: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryDisplayTextAsync(System.String)
    def try_display_text_normal_async(self, text: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryRefreshAsync()
    def try_refresh_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.LineDisplayWindow::TryScrollTextAsync(Windows.Devices.PointOfService.LineDisplayScrollDirection,System.UInt32)
    def try_scroll_text_async(self, direction: LineDisplayScrollDirection, number_of_columns_or_rows: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.TimeSpan Windows.Devices.PointOfService.LineDisplayWindow::get_InterCharacterWaitInterval()
    @_property
    def inter_character_wait_interval(self) -> datetime.timedelta: ...
    # System.Void Windows.Devices.PointOfService.LineDisplayWindow::put_InterCharacterWaitInterval(Windows.Foundation.TimeSpan)
    @inter_character_wait_interval.setter
    def inter_character_wait_interval(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.Size Windows.Devices.PointOfService.LineDisplayWindow::get_SizeInCharacters()
    @_property
    def size_in_characters(self) -> windows_foundation.Size: ...
    # Windows.Devices.PointOfService.LineDisplayCursor Windows.Devices.PointOfService.LineDisplayWindow::get_Cursor()
    @_property
    def cursor(self) -> LineDisplayCursor: ...
    # Windows.Devices.PointOfService.LineDisplayMarquee Windows.Devices.PointOfService.LineDisplayWindow::get_Marquee()
    @_property
    def marquee(self) -> LineDisplayMarquee: ...

@typing.final
class MagneticStripeReader_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.MagneticStripeReader> Windows.Devices.PointOfService.MagneticStripeReader::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[MagneticStripeReader]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.MagneticStripeReader> Windows.Devices.PointOfService.MagneticStripeReader::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[MagneticStripeReader]: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReader::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReader::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class MagneticStripeReader(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=MagneticStripeReader_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.MagneticStripeReader::CheckHealthAsync(Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel)
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedMagneticStripeReader> Windows.Devices.PointOfService.MagneticStripeReader::ClaimReaderAsync()
    def claim_reader_async(self) -> windows_foundation.IAsyncOperation[ClaimedMagneticStripeReader]: ...
    # System.Void Windows.Devices.PointOfService.MagneticStripeReader::Close()
    def close(self) -> None: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderErrorReportingType Windows.Devices.PointOfService.MagneticStripeReader::GetErrorReportingType()
    def get_error_reporting_type(self) -> MagneticStripeReaderErrorReportingType: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer> Windows.Devices.PointOfService.MagneticStripeReader::RetrieveStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def retrieve_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.MagneticStripeReader::add_StatusUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.MagneticStripeReader,Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs>)
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[MagneticStripeReader, MagneticStripeReaderStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.MagneticStripeReader::remove_StatusUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderCapabilities Windows.Devices.PointOfService.MagneticStripeReader::get_Capabilities()
    @_property
    def capabilities(self) -> MagneticStripeReaderCapabilities: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationProtocol Windows.Devices.PointOfService.MagneticStripeReader::get_DeviceAuthenticationProtocol()
    @_property
    def device_authentication_protocol(self) -> MagneticStripeReaderAuthenticationProtocol: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReader::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.UInt32[] Windows.Devices.PointOfService.MagneticStripeReader::get_SupportedCardTypes()
    @_property
    def supported_card_types(self) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderAamvaCardDataReceivedEventArgs(winrt.system.Object):
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Address()
    @_property
    def address(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_BirthDate()
    @_property
    def birth_date(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_City()
    @_property
    def city(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Class()
    @_property
    def class_(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Endorsements()
    @_property
    def endorsements(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_ExpirationDate()
    @_property
    def expiration_date(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_EyeColor()
    @_property
    def eye_color(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_FirstName()
    @_property
    def first_name(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Gender()
    @_property
    def gender(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_HairColor()
    @_property
    def hair_color(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Height()
    @_property
    def height(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_LicenseNumber()
    @_property
    def license_number(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_PostalCode()
    @_property
    def postal_code(self) -> str: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderReport Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Report()
    @_property
    def report(self) -> MagneticStripeReaderReport: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Restrictions()
    @_property
    def restrictions(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_State()
    @_property
    def state(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Suffix()
    @_property
    def suffix(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Surname()
    @_property
    def surname(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs::get_Weight()
    @_property
    def weight(self) -> str: ...

@typing.final
class MagneticStripeReaderBankCardDataReceivedEventArgs(winrt.system.Object):
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_AccountNumber()
    @_property
    def account_number(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_ExpirationDate()
    @_property
    def expiration_date(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_FirstName()
    @_property
    def first_name(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_MiddleInitial()
    @_property
    def middle_initial(self) -> str: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderReport Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_Report()
    @_property
    def report(self) -> MagneticStripeReaderReport: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_ServiceCode()
    @_property
    def service_code(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_Suffix()
    @_property
    def suffix(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_Surname()
    @_property
    def surname(self) -> str: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class MagneticStripeReaderCapabilities(winrt.system.Object):
    # Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationLevel Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_AuthenticationLevel()
    @_property
    def authentication_level(self) -> MagneticStripeReaderAuthenticationLevel: ...
    # System.String Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_CardAuthentication()
    @_property
    def card_authentication(self) -> str: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsIsoSupported()
    @_property
    def is_iso_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsJisOneSupported()
    @_property
    def is_jis_one_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsJisTwoSupported()
    @_property
    def is_jis_two_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsStatisticsReportingSupported()
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsStatisticsUpdatingSupported()
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsTrackDataMaskingSupported()
    @_property
    def is_track_data_masking_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_IsTransmitSentinelsSupported()
    @_property
    def is_transmit_sentinels_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.UnifiedPosPowerReportingType Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_PowerReportingType()
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderCapabilities::get_SupportedEncryptionAlgorithms()
    @_property
    def supported_encryption_algorithms(self) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderCardTypes_Static(type):
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderCardTypes::get_Aamva()
    @_property
    def aamva(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderCardTypes::get_Bank()
    @_property
    def bank(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderCardTypes::get_ExtendedBase()
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderCardTypes::get_Unknown()
    @_property
    def unknown(cls) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderCardTypes(winrt.system.Object, metaclass=MagneticStripeReaderCardTypes_Static):
    pass

@typing.final
class MagneticStripeReaderEncryptionAlgorithms_Static(type):
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms::get_ExtendedBase()
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms::get_None()
    @_property
    def none(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms::get_TripleDesDukpt()
    @_property
    def triple_des_dukpt(cls) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderEncryptionAlgorithms(winrt.system.Object, metaclass=MagneticStripeReaderEncryptionAlgorithms_Static):
    pass

@typing.final
class MagneticStripeReaderErrorOccurredEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.UnifiedPosErrorData Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_ErrorData()
    @_property
    def error_data(self) -> UnifiedPosErrorData: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderReport Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_PartialInputData()
    @_property
    def partial_input_data(self) -> MagneticStripeReaderReport: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_Track1Status()
    @_property
    def track1_status(self) -> MagneticStripeReaderTrackErrorType: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_Track2Status()
    @_property
    def track2_status(self) -> MagneticStripeReaderTrackErrorType: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_Track3Status()
    @_property
    def track3_status(self) -> MagneticStripeReaderTrackErrorType: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs::get_Track4Status()
    @_property
    def track4_status(self) -> MagneticStripeReaderTrackErrorType: ...

@typing.final
class MagneticStripeReaderReport(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.MagneticStripeReaderReport::get_AdditionalSecurityInformation()
    @_property
    def additional_security_information(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.MagneticStripeReaderReport::get_CardAuthenticationData()
    @_property
    def card_authentication_data(self) -> windows_storage_streams.IBuffer: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderReport::get_CardAuthenticationDataLength()
    @_property
    def card_authentication_data_length(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderReport::get_CardType()
    @_property
    def card_type(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> Windows.Devices.PointOfService.MagneticStripeReaderReport::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[str, str]: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackData Windows.Devices.PointOfService.MagneticStripeReaderReport::get_Track1()
    @_property
    def track1(self) -> MagneticStripeReaderTrackData: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackData Windows.Devices.PointOfService.MagneticStripeReaderReport::get_Track2()
    @_property
    def track2(self) -> MagneticStripeReaderTrackData: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackData Windows.Devices.PointOfService.MagneticStripeReaderReport::get_Track3()
    @_property
    def track3(self) -> MagneticStripeReaderTrackData: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderTrackData Windows.Devices.PointOfService.MagneticStripeReaderReport::get_Track4()
    @_property
    def track4(self) -> MagneticStripeReaderTrackData: ...

@typing.final
class MagneticStripeReaderStatusUpdatedEventArgs(winrt.system.Object):
    # System.UInt32 Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs::get_ExtendedStatus()
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    # Windows.Devices.PointOfService.MagneticStripeReaderStatus Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs::get_Status()
    @_property
    def status(self) -> MagneticStripeReaderStatus: ...

@typing.final
class MagneticStripeReaderTrackData(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.MagneticStripeReaderTrackData::get_Data()
    @_property
    def data(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.MagneticStripeReaderTrackData::get_DiscretionaryData()
    @_property
    def discretionary_data(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.PointOfService.MagneticStripeReaderTrackData::get_EncryptedData()
    @_property
    def encrypted_data(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.MagneticStripeReaderReport Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs::get_Report()
    @_property
    def report(self) -> MagneticStripeReaderReport: ...

@typing.final
class PosPrinter_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.PosPrinter> Windows.Devices.PointOfService.PosPrinter::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[PosPrinter]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.PosPrinter> Windows.Devices.PointOfService.PosPrinter::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[PosPrinter]: ...
    # System.String Windows.Devices.PointOfService.PosPrinter::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.PointOfService.PosPrinter::GetDeviceSelector(Windows.Devices.PointOfService.PosConnectionTypes)
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class PosPrinter(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=PosPrinter_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.PosPrinter::CheckHealthAsync(Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel)
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.PointOfService.ClaimedPosPrinter> Windows.Devices.PointOfService.PosPrinter::ClaimPrinterAsync()
    def claim_printer_async(self) -> windows_foundation.IAsyncOperation[ClaimedPosPrinter]: ...
    # System.Void Windows.Devices.PointOfService.PosPrinter::Close()
    def close(self) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterFontProperty Windows.Devices.PointOfService.PosPrinter::GetFontProperty(System.String)
    def get_font_property(self, typeface: str, /) -> PosPrinterFontProperty: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.PointOfService.PosPrinter::GetStatisticsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.PointOfService.PosPrinter::add_StatusUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.PointOfService.PosPrinter,Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs>)
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[PosPrinter, PosPrinterStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.PointOfService.PosPrinter::remove_StatusUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterCapabilities Windows.Devices.PointOfService.PosPrinter::get_Capabilities()
    @_property
    def capabilities(self) -> PosPrinterCapabilities: ...
    # System.String Windows.Devices.PointOfService.PosPrinter::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Devices.PointOfService.PosPrinterStatus Windows.Devices.PointOfService.PosPrinter::get_Status()
    @_property
    def status(self) -> PosPrinterStatus: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.PosPrinter::get_SupportedCharacterSets()
    @_property
    def supported_character_sets(self) -> typing.Sequence[winrt.system.UInt32]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Devices.PointOfService.PosPrinter::get_SupportedTypeFaces()
    @_property
    def supported_type_faces(self) -> typing.Sequence[str]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.PosPrinter::get_SupportedBarcodeSymbologies()
    @_property
    def supported_barcode_symbologies(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class PosPrinterCapabilities(winrt.system.Object):
    # System.Boolean Windows.Devices.PointOfService.PosPrinterCapabilities::get_CanMapCharacterSet()
    @_property
    def can_map_character_set(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterCapabilities::get_DefaultCharacterSet()
    @_property
    def default_character_set(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterCapabilities::get_HasCoverSensor()
    @_property
    def has_cover_sensor(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterCapabilities::get_IsStatisticsReportingSupported()
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterCapabilities::get_IsStatisticsUpdatingSupported()
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterCapabilities::get_IsTransactionSupported()
    @_property
    def is_transaction_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.JournalPrinterCapabilities Windows.Devices.PointOfService.PosPrinterCapabilities::get_Journal()
    @_property
    def journal(self) -> JournalPrinterCapabilities: ...
    # Windows.Devices.PointOfService.UnifiedPosPowerReportingType Windows.Devices.PointOfService.PosPrinterCapabilities::get_PowerReportingType()
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    # Windows.Devices.PointOfService.ReceiptPrinterCapabilities Windows.Devices.PointOfService.PosPrinterCapabilities::get_Receipt()
    @_property
    def receipt(self) -> ReceiptPrinterCapabilities: ...
    # Windows.Devices.PointOfService.SlipPrinterCapabilities Windows.Devices.PointOfService.PosPrinterCapabilities::get_Slip()
    @_property
    def slip(self) -> SlipPrinterCapabilities: ...

@typing.final
class PosPrinterCharacterSetIds_Static(type):
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterCharacterSetIds::get_Ansi()
    @_property
    def ansi(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterCharacterSetIds::get_Ascii()
    @_property
    def ascii(cls) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterCharacterSetIds::get_Utf16LE()
    @_property
    def utf16_l_e(cls) -> winrt.system.UInt32: ...

@typing.final
class PosPrinterCharacterSetIds(winrt.system.Object, metaclass=PosPrinterCharacterSetIds_Static):
    pass

@typing.final
class PosPrinterFontProperty(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.SizeUInt32> Windows.Devices.PointOfService.PosPrinterFontProperty::get_CharacterSizes()
    @_property
    def character_sizes(self) -> typing.Sequence[SizeUInt32]: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterFontProperty::get_IsScalableToAnySize()
    @_property
    def is_scalable_to_any_size(self) -> bool: ...
    # System.String Windows.Devices.PointOfService.PosPrinterFontProperty::get_TypeFace()
    @_property
    def type_face(self) -> str: ...

@typing.final
class PosPrinterPrintOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Underline()
    @_property
    def underline(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Underline(System.Boolean)
    @underline.setter
    def underline(self, value: bool) -> None: ...
    # System.String Windows.Devices.PointOfService.PosPrinterPrintOptions::get_TypeFace()
    @_property
    def type_face(self) -> str: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_TypeFace(System.String)
    @type_face.setter
    def type_face(self, value: str) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Superscript()
    @_property
    def superscript(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Superscript(System.Boolean)
    @superscript.setter
    def superscript(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Subscript()
    @_property
    def subscript(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Subscript(System.Boolean)
    @subscript.setter
    def subscript(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Strikethrough()
    @_property
    def strikethrough(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Strikethrough(System.Boolean)
    @strikethrough.setter
    def strikethrough(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_ReverseVideo()
    @_property
    def reverse_video(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_ReverseVideo(System.Boolean)
    @reverse_video.setter
    def reverse_video(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Italic()
    @_property
    def italic(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Italic(System.Boolean)
    @italic.setter
    def italic(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_DoubleWide()
    @_property
    def double_wide(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_DoubleWide(System.Boolean)
    @double_wide.setter
    def double_wide(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_DoubleHigh()
    @_property
    def double_high(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_DoubleHigh(System.Boolean)
    @double_high.setter
    def double_high(self, value: bool) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterPrintOptions::get_CharacterSet()
    @_property
    def character_set(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_CharacterSet(System.UInt32)
    @character_set.setter
    def character_set(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterPrintOptions::get_CharacterHeight()
    @_property
    def character_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_CharacterHeight(System.UInt32)
    @character_height.setter
    def character_height(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Bold()
    @_property
    def bold(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Bold(System.Boolean)
    @bold.setter
    def bold(self, value: bool) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterAlignment Windows.Devices.PointOfService.PosPrinterPrintOptions::get_Alignment()
    @_property
    def alignment(self) -> PosPrinterAlignment: ...
    # System.Void Windows.Devices.PointOfService.PosPrinterPrintOptions::put_Alignment(Windows.Devices.PointOfService.PosPrinterAlignment)
    @alignment.setter
    def alignment(self, value: PosPrinterAlignment) -> None: ...

@typing.final
class PosPrinterReleaseDeviceRequestedEventArgs(winrt.system.Object):
    pass

@typing.final
class PosPrinterStatus(winrt.system.Object):
    # System.UInt32 Windows.Devices.PointOfService.PosPrinterStatus::get_ExtendedStatus()
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    # Windows.Devices.PointOfService.PosPrinterStatusKind Windows.Devices.PointOfService.PosPrinterStatus::get_StatusKind()
    @_property
    def status_kind(self) -> PosPrinterStatusKind: ...

@typing.final
class PosPrinterStatusUpdatedEventArgs(winrt.system.Object):
    # Windows.Devices.PointOfService.PosPrinterStatus Windows.Devices.PointOfService.PosPrinterStatusUpdatedEventArgs::get_Status()
    @_property
    def status(self) -> PosPrinterStatus: ...

@typing.final
class ReceiptPrintJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::CutPaper(System.Double)
    def cut_paper(self, percentage: winrt.system.Double, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::CutPaper()
    def cut_paper_default(self) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::DrawRuledLine(System.String,Windows.Devices.PointOfService.PosPrinterLineDirection,System.UInt32,Windows.Devices.PointOfService.PosPrinterLineStyle,System.UInt32)
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.ReceiptPrintJob::ExecuteAsync()
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::FeedPaperByLine(System.Int32)
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::FeedPaperByMapModeUnit(System.Int32)
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::MarkFeed(Windows.Devices.PointOfService.PosPrinterMarkFeedKind)
    def mark_feed(self, kind: PosPrinterMarkFeedKind, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::Print(System.String)
    def print(self, data: str, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::Print(System.String,Windows.Devices.PointOfService.PosPrinterPrintOptions)
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintBarcode(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintBarcodeCustomAlign(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,System.UInt32)
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintLine(System.String)
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintLine()
    def print_newline(self) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::PrintSavedBitmap(System.UInt32)
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetBarcodeRotation(Windows.Devices.PointOfService.PosPrinterRotation)
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetPrintArea(Windows.Foundation.Rect)
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::SetPrintRotation(Windows.Devices.PointOfService.PosPrinterRotation,System.Boolean)
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.ReceiptPrintJob::StampPaper()
    def stamp_paper(self) -> None: ...

@typing.final
class ReceiptPrinterCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_CartridgeSensors()
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_ColorCartridgeCapabilities()
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsBoldSupported()
    @_property
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsDualColorSupported()
    @_property
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsItalicSupported()
    @_property
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsPrinterPresent()
    @_property
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_SupportedCharactersPerLine()
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_Is180RotationSupported()
    @_property
    def is180_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsBarcodeSupported()
    @_property
    def is_barcode_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsBitmapSupported()
    @_property
    def is_bitmap_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsLeft90RotationSupported()
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsPrintAreaSupported()
    @_property
    def is_print_area_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsRight90RotationSupported()
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_RuledLineCapabilities()
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_SupportedBarcodeRotations()
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_SupportedBitmapRotations()
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_CanCutPaper()
    @_property
    def can_cut_paper(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsStampSupported()
    @_property
    def is_stamp_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.PosPrinterMarkFeedCapabilities Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_MarkFeedCapabilities()
    @_property
    def mark_feed_capabilities(self) -> PosPrinterMarkFeedCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsReversePaperFeedByLineSupported()
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsReversePaperFeedByMapModeUnitSupported()
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsReverseVideoSupported()
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsStrikethroughSupported()
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsSubscriptSupported()
    @_property
    def is_subscript_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ReceiptPrinterCapabilities::get_IsSuperscriptSupported()
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class SlipPrintJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::DrawRuledLine(System.String,Windows.Devices.PointOfService.PosPrinterLineDirection,System.UInt32,Windows.Devices.PointOfService.PosPrinterLineStyle,System.UInt32)
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.SlipPrintJob::ExecuteAsync()
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::FeedPaperByLine(System.Int32)
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::FeedPaperByMapModeUnit(System.Int32)
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::Print(System.String)
    def print(self, data: str, /) -> None: ...
    @typing.overload
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::Print(System.String,Windows.Devices.PointOfService.PosPrinterPrintOptions)
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintBarcode(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintBarcodeCustomAlign(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,System.UInt32)
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintLine(System.String)
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintLine()
    def print_newline(self) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::PrintSavedBitmap(System.UInt32)
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetBarcodeRotation(Windows.Devices.PointOfService.PosPrinterRotation)
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetPrintArea(Windows.Foundation.Rect)
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.SlipPrintJob::SetPrintRotation(Windows.Devices.PointOfService.PosPrinterRotation,System.Boolean)
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...

@typing.final
class SlipPrinterCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.SlipPrinterCapabilities::get_CartridgeSensors()
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.SlipPrinterCapabilities::get_ColorCartridgeCapabilities()
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsBoldSupported()
    @_property
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsDualColorSupported()
    @_property
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsItalicSupported()
    @_property
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsPrinterPresent()
    @_property
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.SlipPrinterCapabilities::get_SupportedCharactersPerLine()
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_Is180RotationSupported()
    @_property
    def is180_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsBarcodeSupported()
    @_property
    def is_barcode_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsBitmapSupported()
    @_property
    def is_bitmap_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsLeft90RotationSupported()
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsPrintAreaSupported()
    @_property
    def is_print_area_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsRight90RotationSupported()
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities Windows.Devices.PointOfService.SlipPrinterCapabilities::get_RuledLineCapabilities()
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.SlipPrinterCapabilities::get_SupportedBarcodeRotations()
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.SlipPrinterCapabilities::get_SupportedBitmapRotations()
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsBothSidesPrintingSupported()
    @_property
    def is_both_sides_printing_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsFullLengthSupported()
    @_property
    def is_full_length_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsReversePaperFeedByLineSupported()
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsReversePaperFeedByMapModeUnitSupported()
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsReverseVideoSupported()
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsStrikethroughSupported()
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsSubscriptSupported()
    @_property
    def is_subscript_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.SlipPrinterCapabilities::get_IsSuperscriptSupported()
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class UnifiedPosErrorData(winrt.system.Object):
    def __new__(cls: typing.Type[Self], message: str, severity: UnifiedPosErrorSeverity, reason: UnifiedPosErrorReason, extended_reason: winrt.system.UInt32) -> Self: ...
    # System.UInt32 Windows.Devices.PointOfService.UnifiedPosErrorData::get_ExtendedReason()
    @_property
    def extended_reason(self) -> winrt.system.UInt32: ...
    # System.String Windows.Devices.PointOfService.UnifiedPosErrorData::get_Message()
    @_property
    def message(self) -> str: ...
    # Windows.Devices.PointOfService.UnifiedPosErrorReason Windows.Devices.PointOfService.UnifiedPosErrorData::get_Reason()
    @_property
    def reason(self) -> UnifiedPosErrorReason: ...
    # Windows.Devices.PointOfService.UnifiedPosErrorSeverity Windows.Devices.PointOfService.UnifiedPosErrorData::get_Severity()
    @_property
    def severity(self) -> UnifiedPosErrorSeverity: ...

class ImplementsICashDrawerEventSourceEventArgs():
    # Windows.Devices.PointOfService.CashDrawer Windows.Devices.PointOfService.ICashDrawerEventSourceEventArgs::get_CashDrawer()
    @_property
    @abstractmethod
    def cash_drawer(self) -> CashDrawer: ...

@typing.final
class ICashDrawerEventSourceEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    # Windows.Devices.PointOfService.CashDrawer Windows.Devices.PointOfService.ICashDrawerEventSourceEventArgs::get_CashDrawer()
    @_property
    def cash_drawer(self) -> CashDrawer: ...

class ImplementsICommonClaimedPosPrinterStation():
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::ValidateData(System.String)
    @abstractmethod
    def validate_data(self, data: str, /) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_CharactersPerLine()
    @_property
    @abstractmethod
    def characters_per_line(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_CharactersPerLine(System.UInt32)
    @characters_per_line.setter
    @abstractmethod
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterColorCartridge Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_ColorCartridge()
    @_property
    @abstractmethod
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_ColorCartridge(Windows.Devices.PointOfService.PosPrinterColorCartridge)
    @color_cartridge.setter
    @abstractmethod
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCartridgeEmpty()
    @_property
    @abstractmethod
    def is_cartridge_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCartridgeRemoved()
    @_property
    @abstractmethod
    def is_cartridge_removed(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCoverOpen()
    @_property
    @abstractmethod
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsHeadCleaning()
    @_property
    @abstractmethod
    def is_head_cleaning(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsLetterQuality()
    @_property
    @abstractmethod
    def is_letter_quality(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_IsLetterQuality(System.Boolean)
    @is_letter_quality.setter
    @abstractmethod
    def is_letter_quality(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsPaperEmpty()
    @_property
    @abstractmethod
    def is_paper_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsPaperNearEnd()
    @_property
    @abstractmethod
    def is_paper_near_end(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsReadyToPrint()
    @_property
    @abstractmethod
    def is_ready_to_print(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineHeight()
    @_property
    @abstractmethod
    def line_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_LineHeight(System.UInt32)
    @line_height.setter
    @abstractmethod
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineSpacing()
    @_property
    @abstractmethod
    def line_spacing(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_LineSpacing(System.UInt32)
    @line_spacing.setter
    @abstractmethod
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineWidth()
    @_property
    @abstractmethod
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class ICommonClaimedPosPrinterStation(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::ValidateData(System.String)
    def validate_data(self, data: str, /) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_CharactersPerLine()
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_CharactersPerLine(System.UInt32)
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Devices.PointOfService.PosPrinterColorCartridge Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_ColorCartridge()
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_ColorCartridge(Windows.Devices.PointOfService.PosPrinterColorCartridge)
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCartridgeEmpty()
    @_property
    def is_cartridge_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCartridgeRemoved()
    @_property
    def is_cartridge_removed(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsCoverOpen()
    @_property
    def is_cover_open(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsHeadCleaning()
    @_property
    def is_head_cleaning(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsLetterQuality()
    @_property
    def is_letter_quality(self) -> bool: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_IsLetterQuality(System.Boolean)
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsPaperEmpty()
    @_property
    def is_paper_empty(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsPaperNearEnd()
    @_property
    def is_paper_near_end(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_IsReadyToPrint()
    @_property
    def is_ready_to_print(self) -> bool: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineHeight()
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_LineHeight(System.UInt32)
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineSpacing()
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::put_LineSpacing(System.UInt32)
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation::get_LineWidth()
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

class ImplementsICommonPosPrintStationCapabilities():
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_CartridgeSensors()
    @_property
    @abstractmethod
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_ColorCartridgeCapabilities()
    @_property
    @abstractmethod
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsBoldSupported()
    @_property
    @abstractmethod
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    @abstractmethod
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    @abstractmethod
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    @abstractmethod
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDualColorSupported()
    @_property
    @abstractmethod
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsItalicSupported()
    @_property
    @abstractmethod
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    @abstractmethod
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    @abstractmethod
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPrinterPresent()
    @_property
    @abstractmethod
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsUnderlineSupported()
    @_property
    @abstractmethod
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_SupportedCharactersPerLine()
    @_property
    @abstractmethod
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class ICommonPosPrintStationCapabilities(winrt.system.Object, ImplementsICommonPosPrintStationCapabilities):
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_CartridgeSensors()
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_ColorCartridgeCapabilities()
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsBoldSupported()
    @_property
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDualColorSupported()
    @_property
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsItalicSupported()
    @_property
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPrinterPresent()
    @_property
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_SupportedCharactersPerLine()
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...

class ImplementsICommonReceiptSlipCapabilities():
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_Is180RotationSupported()
    @_property
    @abstractmethod
    def is180_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsBarcodeSupported()
    @_property
    @abstractmethod
    def is_barcode_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsBitmapSupported()
    @_property
    @abstractmethod
    def is_bitmap_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsLeft90RotationSupported()
    @_property
    @abstractmethod
    def is_left90_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsPrintAreaSupported()
    @_property
    @abstractmethod
    def is_print_area_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsRight90RotationSupported()
    @_property
    @abstractmethod
    def is_right90_rotation_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_RuledLineCapabilities()
    @_property
    @abstractmethod
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_SupportedBarcodeRotations()
    @_property
    @abstractmethod
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_SupportedBitmapRotations()
    @_property
    @abstractmethod
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...

@typing.final
class ICommonReceiptSlipCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_Is180RotationSupported()
    @_property
    def is180_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsBarcodeSupported()
    @_property
    def is_barcode_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsBitmapSupported()
    @_property
    def is_bitmap_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsLeft90RotationSupported()
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsPrintAreaSupported()
    @_property
    def is_print_area_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_IsRight90RotationSupported()
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    # Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_RuledLineCapabilities()
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_SupportedBarcodeRotations()
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.PointOfService.PosPrinterRotation> Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities::get_SupportedBitmapRotations()
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    # Windows.Devices.PointOfService.PosPrinterCartridgeSensors Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_CartridgeSensors()
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    # Windows.Devices.PointOfService.PosPrinterColorCapabilities Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_ColorCartridgeCapabilities()
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsBoldSupported()
    @_property
    def is_bold_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighDoubleWidePrintSupported()
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleHighPrintSupported()
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDoubleWidePrintSupported()
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsDualColorSupported()
    @_property
    def is_dual_color_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsItalicSupported()
    @_property
    def is_italic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperEmptySensorSupported()
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPaperNearEndSensorSupported()
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsPrinterPresent()
    @_property
    def is_printer_present(self) -> bool: ...
    # System.Boolean Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_IsUnderlineSupported()
    @_property
    def is_underline_supported(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities::get_SupportedCharactersPerLine()
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...

class ImplementsIPosPrinterJob():
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.IPosPrinterJob::ExecuteAsync()
    @abstractmethod
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::Print(System.String)
    @abstractmethod
    def print(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine(System.String)
    @abstractmethod
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine()
    @abstractmethod
    def print_newline(self) -> None: ...

@typing.final
class IPosPrinterJob(winrt.system.Object, ImplementsIPosPrinterJob):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.IPosPrinterJob::ExecuteAsync()
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::Print(System.String)
    def print(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine(System.String)
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine()
    def print_newline(self) -> None: ...

class ImplementsIReceiptOrSlipJob():
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::DrawRuledLine(System.String,Windows.Devices.PointOfService.PosPrinterLineDirection,System.UInt32,Windows.Devices.PointOfService.PosPrinterLineStyle,System.UInt32)
    @abstractmethod
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBarcode(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,Windows.Devices.PointOfService.PosPrinterAlignment)
    @abstractmethod
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBarcodeCustomAlign(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,System.UInt32)
    @abstractmethod
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    @abstractmethod
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    @abstractmethod
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    @abstractmethod
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    @abstractmethod
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintSavedBitmap(System.UInt32)
    @abstractmethod
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBarcodeRotation(Windows.Devices.PointOfService.PosPrinterRotation)
    @abstractmethod
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    @abstractmethod
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    @abstractmethod
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    @abstractmethod
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    @abstractmethod
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetPrintArea(Windows.Foundation.Rect)
    @abstractmethod
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetPrintRotation(Windows.Devices.PointOfService.PosPrinterRotation,System.Boolean)
    @abstractmethod
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...

@typing.final
class IReceiptOrSlipJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::DrawRuledLine(System.String,Windows.Devices.PointOfService.PosPrinterLineDirection,System.UInt32,Windows.Devices.PointOfService.PosPrinterLineStyle,System.UInt32)
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.PointOfService.IPosPrinterJob::ExecuteAsync()
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::Print(System.String)
    def print(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBarcode(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBarcodeCustomAlign(System.String,System.UInt32,System.UInt32,System.UInt32,Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition,System.UInt32)
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintBitmap(Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine(System.String)
    def print_line(self, data: str, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IPosPrinterJob::PrintLine()
    def print_newline(self) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::PrintSavedBitmap(System.UInt32)
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBarcodeRotation(Windows.Devices.PointOfService.PosPrinterRotation)
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment)
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32,System.UInt32)
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,Windows.Devices.PointOfService.PosPrinterAlignment,System.UInt32)
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetCustomAlignedBitmap(System.UInt32,Windows.Graphics.Imaging.BitmapFrame,System.UInt32)
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetPrintArea(Windows.Foundation.Rect)
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    # System.Void Windows.Devices.PointOfService.IReceiptOrSlipJob::SetPrintRotation(Windows.Devices.PointOfService.PosPrinterRotation,System.Boolean)
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...

