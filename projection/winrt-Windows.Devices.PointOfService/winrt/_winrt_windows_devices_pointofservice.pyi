# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.storage as windows_storage
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.devices.pointofservice import BarcodeScannerStatus, BarcodeSymbologyDecodeLengthKind, CashDrawerStatusKind, LineDisplayCursorType, LineDisplayDescriptorState, LineDisplayHorizontalAlignment, LineDisplayMarqueeFormat, LineDisplayPowerStatus, LineDisplayScrollDirection, LineDisplayTextAttribute, LineDisplayTextAttributeGranularity, LineDisplayVerticalAlignment, MagneticStripeReaderAuthenticationLevel, MagneticStripeReaderAuthenticationProtocol, MagneticStripeReaderErrorReportingType, MagneticStripeReaderStatus, MagneticStripeReaderTrackErrorType, MagneticStripeReaderTrackIds, PosConnectionTypes, PosPrinterAlignment, PosPrinterBarcodeTextPosition, PosPrinterCartridgeSensors, PosPrinterColorCapabilities, PosPrinterColorCartridge, PosPrinterLineDirection, PosPrinterLineStyle, PosPrinterMapMode, PosPrinterMarkFeedCapabilities, PosPrinterMarkFeedKind, PosPrinterPrintSide, PosPrinterRotation, PosPrinterRuledLineCapabilities, PosPrinterStatusKind, UnifiedPosErrorReason, UnifiedPosErrorSeverity, UnifiedPosHealthCheckLevel, UnifiedPosPowerReportingType

Self = typing.TypeVar('Self')

@typing.final
class SizeUInt32:
    width: winrt.system.UInt32
    height: winrt.system.UInt32
    def __init__(self, width: winrt.system.UInt32 = 0, height: winrt.system.UInt32 = 0) -> None: ...

@typing.final
class BarcodeScanner_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[BarcodeScanner]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[BarcodeScanner]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class BarcodeScanner(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=BarcodeScanner_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    def claim_scanner_async(self) -> windows_foundation.IAsyncOperation[ClaimedBarcodeScanner]: ...
    def close(self) -> None: ...
    def get_supported_profiles(self) -> typing.Sequence[str]: ...
    def get_supported_symbologies_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[winrt.system.UInt32]]: ...
    def is_profile_supported(self, profile: str, /) -> bool: ...
    def is_symbology_supported_async(self, barcode_symbology: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def retrieve_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[BarcodeScanner, BarcodeScannerStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def capabilities(self) -> BarcodeScannerCapabilities: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def video_device_id(self) -> str: ...

@typing.final
class BarcodeScannerCapabilities(winrt.system.Object):
    @_property
    def is_image_preview_supported(self) -> bool: ...
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    @_property
    def is_software_trigger_supported(self) -> bool: ...
    @_property
    def is_video_preview_supported(self) -> bool: ...

@typing.final
class BarcodeScannerDataReceivedEventArgs(winrt.system.Object):
    @_property
    def report(self) -> BarcodeScannerReport: ...

@typing.final
class BarcodeScannerErrorOccurredEventArgs(winrt.system.Object):
    @_property
    def error_data(self) -> UnifiedPosErrorData: ...
    @_property
    def is_retriable(self) -> bool: ...
    @_property
    def partial_input_data(self) -> BarcodeScannerReport: ...

@typing.final
class BarcodeScannerImagePreviewReceivedEventArgs(winrt.system.Object):
    @_property
    def preview(self) -> windows_storage_streams.IRandomAccessStreamWithContentType: ...

@typing.final
class BarcodeScannerReport(winrt.system.Object):
    def __new__(cls: typing.Type[Self], scan_data_type: winrt.system.UInt32, scan_data: windows_storage_streams.ImplementsIBuffer, scan_data_label: windows_storage_streams.ImplementsIBuffer) -> Self: ...
    @_property
    def scan_data(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def scan_data_label(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def scan_data_type(self) -> winrt.system.UInt32: ...

@typing.final
class BarcodeScannerStatusUpdatedEventArgs(winrt.system.Object):
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> BarcodeScannerStatus: ...

@typing.final
class BarcodeSymbologies_Static(type):
    def get_name(cls, scan_data_type: winrt.system.UInt32, /) -> str: ...
    @_property
    def code11(cls) -> winrt.system.UInt32: ...
    @_property
    def aus_post(cls) -> winrt.system.UInt32: ...
    @_property
    def aztec(cls) -> winrt.system.UInt32: ...
    @_property
    def can_post(cls) -> winrt.system.UInt32: ...
    @_property
    def ccab(cls) -> winrt.system.UInt32: ...
    @_property
    def ccc(cls) -> winrt.system.UInt32: ...
    @_property
    def china_post(cls) -> winrt.system.UInt32: ...
    @_property
    def codabar(cls) -> winrt.system.UInt32: ...
    @_property
    def codablock128(cls) -> winrt.system.UInt32: ...
    @_property
    def codablock_a(cls) -> winrt.system.UInt32: ...
    @_property
    def codablock_f(cls) -> winrt.system.UInt32: ...
    @_property
    def dutch_kix(cls) -> winrt.system.UInt32: ...
    @_property
    def code128(cls) -> winrt.system.UInt32: ...
    @_property
    def code16k(cls) -> winrt.system.UInt32: ...
    @_property
    def code32(cls) -> winrt.system.UInt32: ...
    @_property
    def code39(cls) -> winrt.system.UInt32: ...
    @_property
    def code39_ex(cls) -> winrt.system.UInt32: ...
    @_property
    def code49(cls) -> winrt.system.UInt32: ...
    @_property
    def code93(cls) -> winrt.system.UInt32: ...
    @_property
    def code93_ex(cls) -> winrt.system.UInt32: ...
    @_property
    def data_code(cls) -> winrt.system.UInt32: ...
    @_property
    def data_matrix(cls) -> winrt.system.UInt32: ...
    @_property
    def us_post_net(cls) -> winrt.system.UInt32: ...
    @_property
    def ean13(cls) -> winrt.system.UInt32: ...
    @_property
    def ean13_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def ean13_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def ean8(cls) -> winrt.system.UInt32: ...
    @_property
    def ean8_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def ean8_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def ean99(cls) -> winrt.system.UInt32: ...
    @_property
    def ean99_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def ean99_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def eanv(cls) -> winrt.system.UInt32: ...
    @_property
    def eanv_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def eanv_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1128(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1128_coupon(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1_databar_type1(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1_databar_type2(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1_databar_type3(cls) -> winrt.system.UInt32: ...
    @_property
    def han_xin(cls) -> winrt.system.UInt32: ...
    @_property
    def info_mail(cls) -> winrt.system.UInt32: ...
    @_property
    def isbn(cls) -> winrt.system.UInt32: ...
    @_property
    def isbn_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def isbt(cls) -> winrt.system.UInt32: ...
    @_property
    def ismn(cls) -> winrt.system.UInt32: ...
    @_property
    def ismn_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def ismn_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def issn(cls) -> winrt.system.UInt32: ...
    @_property
    def issn_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def issn_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def italian_post25(cls) -> winrt.system.UInt32: ...
    @_property
    def italian_post39(cls) -> winrt.system.UInt32: ...
    @_property
    def japan_post(cls) -> winrt.system.UInt32: ...
    @_property
    def korean_post(cls) -> winrt.system.UInt32: ...
    @_property
    def maxicode(cls) -> winrt.system.UInt32: ...
    @_property
    def micr(cls) -> winrt.system.UInt32: ...
    @_property
    def micro_pdf417(cls) -> winrt.system.UInt32: ...
    @_property
    def micro_qr(cls) -> winrt.system.UInt32: ...
    @_property
    def ms_tag(cls) -> winrt.system.UInt32: ...
    @_property
    def msi(cls) -> winrt.system.UInt32: ...
    @_property
    def ocr_a(cls) -> winrt.system.UInt32: ...
    @_property
    def ocr_b(cls) -> winrt.system.UInt32: ...
    @_property
    def pdf417(cls) -> winrt.system.UInt32: ...
    @_property
    def plessey(cls) -> winrt.system.UInt32: ...
    @_property
    def pzn(cls) -> winrt.system.UInt32: ...
    @_property
    def qr(cls) -> winrt.system.UInt32: ...
    @_property
    def sisac(cls) -> winrt.system.UInt32: ...
    @_property
    def sweden_post(cls) -> winrt.system.UInt32: ...
    @_property
    def telepen(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_dis(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_iata(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_ind(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_int(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_mat(cls) -> winrt.system.UInt32: ...
    @_property
    def tf_std(cls) -> winrt.system.UInt32: ...
    @_property
    def tlc39(cls) -> winrt.system.UInt32: ...
    @_property
    def trioptic39(cls) -> winrt.system.UInt32: ...
    @_property
    def ucc_ean128(cls) -> winrt.system.UInt32: ...
    @_property
    def uk_post(cls) -> winrt.system.UInt32: ...
    @_property
    def unknown(cls) -> winrt.system.UInt32: ...
    @_property
    def upc_coupon(cls) -> winrt.system.UInt32: ...
    @_property
    def upca(cls) -> winrt.system.UInt32: ...
    @_property
    def upca_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def upca_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def upce(cls) -> winrt.system.UInt32: ...
    @_property
    def upce_add2(cls) -> winrt.system.UInt32: ...
    @_property
    def upce_add5(cls) -> winrt.system.UInt32: ...
    @_property
    def us4_state_fics(cls) -> winrt.system.UInt32: ...
    @_property
    def us_intelligent(cls) -> winrt.system.UInt32: ...
    @_property
    def us_intelligent_pkg(cls) -> winrt.system.UInt32: ...
    @_property
    def us_planet(cls) -> winrt.system.UInt32: ...
    @_property
    def gs1_d_w_code(cls) -> winrt.system.UInt32: ...

@typing.final
class BarcodeSymbologies(winrt.system.Object, metaclass=BarcodeSymbologies_Static):
    pass

@typing.final
class BarcodeSymbologyAttributes(winrt.system.Object):
    @_property
    def is_check_digit_validation_enabled(self) -> bool: ...
    @is_check_digit_validation_enabled.setter
    def is_check_digit_validation_enabled(self, value: bool) -> None: ...
    @_property
    def is_check_digit_transmission_enabled(self) -> bool: ...
    @is_check_digit_transmission_enabled.setter
    def is_check_digit_transmission_enabled(self, value: bool) -> None: ...
    @_property
    def decode_length_kind(self) -> BarcodeSymbologyDecodeLengthKind: ...
    @decode_length_kind.setter
    def decode_length_kind(self, value: BarcodeSymbologyDecodeLengthKind) -> None: ...
    @_property
    def decode_length2(self) -> winrt.system.UInt32: ...
    @decode_length2.setter
    def decode_length2(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def decode_length1(self) -> winrt.system.UInt32: ...
    @decode_length1.setter
    def decode_length1(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_check_digit_transmission_supported(self) -> bool: ...
    @_property
    def is_check_digit_validation_supported(self) -> bool: ...
    @_property
    def is_decode_length_supported(self) -> bool: ...

@typing.final
class CashDrawer_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[CashDrawer]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[CashDrawer]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class CashDrawer(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=CashDrawer_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    def claim_drawer_async(self) -> windows_foundation.IAsyncOperation[ClaimedCashDrawer]: ...
    def close(self) -> None: ...
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[CashDrawer, CashDrawerStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def capabilities(self) -> CashDrawerCapabilities: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def drawer_event_source(self) -> CashDrawerEventSource: ...
    @_property
    def is_drawer_open(self) -> bool: ...
    @_property
    def status(self) -> CashDrawerStatus: ...

@typing.final
class CashDrawerCapabilities(winrt.system.Object):
    @_property
    def is_drawer_open_sensor_available(self) -> bool: ...
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    @_property
    def is_status_multi_drawer_detect_supported(self) -> bool: ...
    @_property
    def is_status_reporting_supported(self) -> bool: ...
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...

@typing.final
class CashDrawerCloseAlarm(winrt.system.Object):
    def start_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_alarm_timeout_expired(self, handler: windows_foundation.TypedEventHandler[CashDrawerCloseAlarm, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_alarm_timeout_expired(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def beep_frequency(self) -> winrt.system.UInt32: ...
    @beep_frequency.setter
    def beep_frequency(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def beep_duration(self) -> datetime.timedelta: ...
    @beep_duration.setter
    def beep_duration(self, value: datetime.timedelta) -> None: ...
    @_property
    def beep_delay(self) -> datetime.timedelta: ...
    @beep_delay.setter
    def beep_delay(self, value: datetime.timedelta) -> None: ...
    @_property
    def alarm_timeout(self) -> datetime.timedelta: ...
    @alarm_timeout.setter
    def alarm_timeout(self, value: datetime.timedelta) -> None: ...

@typing.final
class CashDrawerClosedEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    @_property
    def cash_drawer(self) -> CashDrawer: ...

@typing.final
class CashDrawerEventSource(winrt.system.Object):
    def add_drawer_closed(self, handler: windows_foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drawer_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drawer_opened(self, handler: windows_foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerOpenedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drawer_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CashDrawerOpenedEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    @_property
    def cash_drawer(self) -> CashDrawer: ...

@typing.final
class CashDrawerStatus(winrt.system.Object):
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    @_property
    def status_kind(self) -> CashDrawerStatusKind: ...

@typing.final
class CashDrawerStatusUpdatedEventArgs(winrt.system.Object):
    @_property
    def status(self) -> CashDrawerStatus: ...

@typing.final
class ClaimedBarcodeScanner(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def close(self) -> None: ...
    def disable_async(self) -> windows_foundation.IAsyncAction: ...
    def enable_async(self) -> windows_foundation.IAsyncAction: ...
    def get_symbology_attributes_async(self, barcode_symbology: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[BarcodeSymbologyAttributes]: ...
    def hide_video_preview(self) -> None: ...
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    def retain_device(self) -> None: ...
    def set_active_profile_async(self, profile: str, /) -> windows_foundation.IAsyncAction: ...
    def set_active_symbologies_async(self, symbologies: typing.Iterable[winrt.system.UInt32], /) -> windows_foundation.IAsyncAction: ...
    def set_symbology_attributes_async(self, barcode_symbology: winrt.system.UInt32, attributes: BarcodeSymbologyAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def show_video_preview_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def start_software_trigger_async(self) -> windows_foundation.IAsyncAction: ...
    def stop_software_trigger_async(self) -> windows_foundation.IAsyncAction: ...
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncAction: ...
    def add_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_error_occurred(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_error_occurred(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_image_preview_received(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_image_preview_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_release_device_requested(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_trigger_pressed(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_trigger_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_trigger_released(self, handler: windows_foundation.EventHandler[ClaimedBarcodeScanner], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_trigger_released(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedBarcodeScanner, ClaimedBarcodeScannerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_disabled_on_data_received(self) -> bool: ...
    @is_disabled_on_data_received.setter
    def is_disabled_on_data_received(self, value: bool) -> None: ...
    @_property
    def is_decode_data_enabled(self) -> bool: ...
    @is_decode_data_enabled.setter
    def is_decode_data_enabled(self, value: bool) -> None: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def is_video_preview_shown_on_enable(self) -> bool: ...
    @is_video_preview_shown_on_enable.setter
    def is_video_preview_shown_on_enable(self, value: bool) -> None: ...

@typing.final
class ClaimedBarcodeScannerClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedCashDrawer(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def close(self) -> None: ...
    def disable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def enable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def open_drawer_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def retain_device_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedCashDrawer, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedCashDrawer, ClaimedCashDrawerClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def close_alarm(self) -> CashDrawerCloseAlarm: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def is_drawer_open(self) -> bool: ...
    @_property
    def is_enabled(self) -> bool: ...

@typing.final
class ClaimedCashDrawerClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedJournalPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    def create_job(self) -> JournalPrintJob: ...
    def validate_data(self, data: str, /) -> bool: ...
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_letter_quality(self) -> bool: ...
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_cartridge_empty(self) -> bool: ...
    @_property
    def is_cartridge_removed(self) -> bool: ...
    @_property
    def is_cover_open(self) -> bool: ...
    @_property
    def is_head_cleaning(self) -> bool: ...
    @_property
    def is_paper_empty(self) -> bool: ...
    @_property
    def is_paper_near_end(self) -> bool: ...
    @_property
    def is_ready_to_print(self) -> bool: ...
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class ClaimedLineDisplay_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[ClaimedLineDisplay]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class ClaimedLineDisplay(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=ClaimedLineDisplay_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    def check_power_status_async(self) -> windows_foundation.IAsyncOperation[LineDisplayPowerStatus]: ...
    def close(self) -> None: ...
    def get_attributes(self) -> LineDisplayAttributes: ...
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    def retain_device(self) -> None: ...
    def try_clear_descriptors_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_create_window_async(self, viewport: windows_foundation.Rect, window_size: windows_foundation.Size, /) -> windows_foundation.IAsyncOperation[LineDisplayWindow]: ...
    def try_set_descriptor_async(self, descriptor: winrt.system.UInt32, descriptor_state: LineDisplayDescriptorState, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_store_storage_file_bitmap_async(self, bitmap: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[LineDisplayStoredBitmap]: ...
    def try_store_storage_file_bitmap_with_alignment_and_width_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[LineDisplayStoredBitmap]: ...
    def try_store_storage_file_bitmap_with_alignment_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, /) -> windows_foundation.IAsyncOperation[LineDisplayStoredBitmap]: ...
    def try_update_attributes_async(self, attributes: LineDisplayAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, LineDisplayStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedLineDisplay, ClaimedLineDisplayClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def capabilities(self) -> LineDisplayCapabilities: ...
    @_property
    def default_window(self) -> LineDisplayWindow: ...
    @_property
    def device_control_description(self) -> str: ...
    @_property
    def device_control_version(self) -> str: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def device_service_version(self) -> str: ...
    @_property
    def physical_device_description(self) -> str: ...
    @_property
    def physical_device_name(self) -> str: ...
    @_property
    def custom_glyphs(self) -> LineDisplayCustomGlyphs: ...
    @_property
    def max_bitmap_size_in_pixels(self) -> windows_foundation.Size: ...
    @_property
    def supported_character_sets(self) -> typing.Sequence[winrt.system.Int32]: ...
    @_property
    def supported_screen_sizes_in_characters(self) -> typing.Sequence[windows_foundation.Size]: ...

@typing.final
class ClaimedLineDisplayClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedMagneticStripeReader(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def authenticate_device_async(self, response_token: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncAction: ...
    def close(self) -> None: ...
    def de_authenticate_device_async(self, response_token: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncAction: ...
    def disable_async(self) -> windows_foundation.IAsyncAction: ...
    def enable_async(self) -> windows_foundation.IAsyncAction: ...
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    def retain_device(self) -> None: ...
    def retrieve_device_authentication_data_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def set_error_reporting_type(self, value: MagneticStripeReaderErrorReportingType, /) -> None: ...
    def update_key_async(self, key: str, key_name: str, /) -> windows_foundation.IAsyncAction: ...
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncAction: ...
    def add_aamva_card_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderAamvaCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_aamva_card_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_bank_card_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderBankCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_bank_card_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_error_occurred(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderErrorOccurredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_error_occurred(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_release_device_requested(self, handler: windows_foundation.EventHandler[ClaimedMagneticStripeReader], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_vendor_specific_data_received(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_vendor_specific_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedMagneticStripeReader, ClaimedMagneticStripeReaderClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def tracks_to_read(self) -> MagneticStripeReaderTrackIds: ...
    @tracks_to_read.setter
    def tracks_to_read(self, value: MagneticStripeReaderTrackIds) -> None: ...
    @_property
    def is_transmit_sentinels_enabled(self) -> bool: ...
    @is_transmit_sentinels_enabled.setter
    def is_transmit_sentinels_enabled(self, value: bool) -> None: ...
    @_property
    def is_disabled_on_data_received(self) -> bool: ...
    @is_disabled_on_data_received.setter
    def is_disabled_on_data_received(self, value: bool) -> None: ...
    @_property
    def is_decode_data_enabled(self) -> bool: ...
    @is_decode_data_enabled.setter
    def is_decode_data_enabled(self, value: bool) -> None: ...
    @_property
    def data_encryption_algorithm(self) -> winrt.system.UInt32: ...
    @data_encryption_algorithm.setter
    def data_encryption_algorithm(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def is_device_authenticated(self) -> bool: ...
    @_property
    def is_enabled(self) -> bool: ...

@typing.final
class ClaimedMagneticStripeReaderClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedPosPrinter(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def close(self) -> None: ...
    def disable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def enable_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def reset_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def retain_device_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def update_statistics_async(self, statistics: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_release_device_requested(self, handler: windows_foundation.TypedEventHandler[ClaimedPosPrinter, PosPrinterReleaseDeviceRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_release_device_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ClaimedPosPrinter, ClaimedPosPrinterClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def map_mode(self) -> PosPrinterMapMode: ...
    @map_mode.setter
    def map_mode(self, value: PosPrinterMapMode) -> None: ...
    @_property
    def is_character_set_mapping_enabled(self) -> bool: ...
    @is_character_set_mapping_enabled.setter
    def is_character_set_mapping_enabled(self, value: bool) -> None: ...
    @_property
    def character_set(self) -> winrt.system.UInt32: ...
    @character_set.setter
    def character_set(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def is_cover_open(self) -> bool: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def journal(self) -> ClaimedJournalPrinter: ...
    @_property
    def receipt(self) -> ClaimedReceiptPrinter: ...
    @_property
    def slip(self) -> ClaimedSlipPrinter: ...

@typing.final
class ClaimedPosPrinterClosedEventArgs(winrt.system.Object):
    pass

@typing.final
class ClaimedReceiptPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    def create_job(self) -> ReceiptPrintJob: ...
    def validate_data(self, data: str, /) -> bool: ...
    @_property
    def lines_to_paper_cut(self) -> winrt.system.UInt32: ...
    @_property
    def page_size(self) -> windows_foundation.Size: ...
    @_property
    def print_area(self) -> windows_foundation.Rect: ...
    @_property
    def sideways_max_chars(self) -> winrt.system.UInt32: ...
    @_property
    def sideways_max_lines(self) -> winrt.system.UInt32: ...
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_letter_quality(self) -> bool: ...
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_cartridge_empty(self) -> bool: ...
    @_property
    def is_cartridge_removed(self) -> bool: ...
    @_property
    def is_cover_open(self) -> bool: ...
    @_property
    def is_head_cleaning(self) -> bool: ...
    @_property
    def is_paper_empty(self) -> bool: ...
    @_property
    def is_paper_near_end(self) -> bool: ...
    @_property
    def is_ready_to_print(self) -> bool: ...
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class ClaimedSlipPrinter(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    def change_print_side(self, print_side: PosPrinterPrintSide, /) -> None: ...
    def close_jaws(self) -> None: ...
    def create_job(self) -> SlipPrintJob: ...
    def insert_slip_async(self, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def open_jaws(self) -> None: ...
    def remove_slip_async(self, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def validate_data(self, data: str, /) -> bool: ...
    @_property
    def lines_near_end_to_end(self) -> winrt.system.UInt32: ...
    @_property
    def max_lines(self) -> winrt.system.UInt32: ...
    @_property
    def page_size(self) -> windows_foundation.Size: ...
    @_property
    def print_area(self) -> windows_foundation.Rect: ...
    @_property
    def print_side(self) -> PosPrinterPrintSide: ...
    @_property
    def sideways_max_chars(self) -> winrt.system.UInt32: ...
    @_property
    def sideways_max_lines(self) -> winrt.system.UInt32: ...
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_letter_quality(self) -> bool: ...
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_cartridge_empty(self) -> bool: ...
    @_property
    def is_cartridge_removed(self) -> bool: ...
    @_property
    def is_cover_open(self) -> bool: ...
    @_property
    def is_head_cleaning(self) -> bool: ...
    @_property
    def is_paper_empty(self) -> bool: ...
    @_property
    def is_paper_near_end(self) -> bool: ...
    @_property
    def is_ready_to_print(self) -> bool: ...
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

@typing.final
class JournalPrintJob(winrt.system.Object, ImplementsIPosPrinterJob):
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def print(self, data: str, /) -> None: ...
    @typing.overload
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    def print_line(self, data: str, /) -> None: ...
    def print_newline(self) -> None: ...

@typing.final
class JournalPrinterCapabilities(winrt.system.Object, ImplementsICommonPosPrintStationCapabilities):
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    @_property
    def is_bold_supported(self) -> bool: ...
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_dual_color_supported(self) -> bool: ...
    @_property
    def is_italic_supported(self) -> bool: ...
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    @_property
    def is_printer_present(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    @_property
    def is_subscript_supported(self) -> bool: ...
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class LineDisplay_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[LineDisplay]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[LineDisplay]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...
    @_property
    def statistics_category_selector(cls) -> LineDisplayStatisticsCategorySelector: ...

@typing.final
class LineDisplay(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=LineDisplay_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_power_status_async(self) -> windows_foundation.IAsyncOperation[LineDisplayPowerStatus]: ...
    def claim_async(self) -> windows_foundation.IAsyncOperation[ClaimedLineDisplay]: ...
    def close(self) -> None: ...
    @_property
    def capabilities(self) -> LineDisplayCapabilities: ...
    @_property
    def device_control_description(self) -> str: ...
    @_property
    def device_control_version(self) -> str: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def device_service_version(self) -> str: ...
    @_property
    def physical_device_description(self) -> str: ...
    @_property
    def physical_device_name(self) -> str: ...

@typing.final
class LineDisplayAttributes(winrt.system.Object):
    @_property
    def screen_size_in_characters(self) -> windows_foundation.Size: ...
    @screen_size_in_characters.setter
    def screen_size_in_characters(self, value: windows_foundation.Size) -> None: ...
    @_property
    def is_power_notify_enabled(self) -> bool: ...
    @is_power_notify_enabled.setter
    def is_power_notify_enabled(self, value: bool) -> None: ...
    @_property
    def is_character_set_mapping_enabled(self) -> bool: ...
    @is_character_set_mapping_enabled.setter
    def is_character_set_mapping_enabled(self, value: bool) -> None: ...
    @_property
    def current_window(self) -> LineDisplayWindow: ...
    @current_window.setter
    def current_window(self, value: LineDisplayWindow) -> None: ...
    @_property
    def character_set(self) -> winrt.system.Int32: ...
    @character_set.setter
    def character_set(self, value: winrt.system.Int32) -> None: ...
    @_property
    def brightness(self) -> winrt.system.Int32: ...
    @brightness.setter
    def brightness(self, value: winrt.system.Int32) -> None: ...
    @_property
    def blink_rate(self) -> datetime.timedelta: ...
    @blink_rate.setter
    def blink_rate(self, value: datetime.timedelta) -> None: ...

@typing.final
class LineDisplayCapabilities(winrt.system.Object):
    @_property
    def can_blink(self) -> LineDisplayTextAttributeGranularity: ...
    @_property
    def can_change_blink_rate(self) -> bool: ...
    @_property
    def can_change_screen_size(self) -> bool: ...
    @_property
    def can_display_bitmaps(self) -> bool: ...
    @_property
    def can_display_custom_glyphs(self) -> bool: ...
    @_property
    def can_map_character_sets(self) -> bool: ...
    @_property
    def can_read_character_at_cursor(self) -> bool: ...
    @_property
    def can_reverse(self) -> LineDisplayTextAttributeGranularity: ...
    @_property
    def is_brightness_supported(self) -> bool: ...
    @_property
    def is_cursor_supported(self) -> bool: ...
    @_property
    def is_horizontal_marquee_supported(self) -> bool: ...
    @_property
    def is_inter_character_wait_supported(self) -> bool: ...
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    @_property
    def is_vertical_marquee_supported(self) -> bool: ...
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    @_property
    def supported_descriptors(self) -> winrt.system.UInt32: ...
    @_property
    def supported_windows(self) -> winrt.system.UInt32: ...

@typing.final
class LineDisplayCursor(winrt.system.Object):
    def get_attributes(self) -> LineDisplayCursorAttributes: ...
    def try_update_attributes_async(self, attributes: LineDisplayCursorAttributes, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def can_customize(self) -> bool: ...
    @_property
    def is_blink_supported(self) -> bool: ...
    @_property
    def is_block_supported(self) -> bool: ...
    @_property
    def is_half_block_supported(self) -> bool: ...
    @_property
    def is_other_supported(self) -> bool: ...
    @_property
    def is_reverse_supported(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...

@typing.final
class LineDisplayCursorAttributes(winrt.system.Object):
    @_property
    def position(self) -> windows_foundation.Point: ...
    @position.setter
    def position(self, value: windows_foundation.Point) -> None: ...
    @_property
    def is_blink_enabled(self) -> bool: ...
    @is_blink_enabled.setter
    def is_blink_enabled(self, value: bool) -> None: ...
    @_property
    def is_auto_advance_enabled(self) -> bool: ...
    @is_auto_advance_enabled.setter
    def is_auto_advance_enabled(self, value: bool) -> None: ...
    @_property
    def cursor_type(self) -> LineDisplayCursorType: ...
    @cursor_type.setter
    def cursor_type(self, value: LineDisplayCursorType) -> None: ...

@typing.final
class LineDisplayCustomGlyphs(winrt.system.Object):
    def try_redefine_async(self, glyph_code: winrt.system.UInt32, glyph_data: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def size_in_pixels(self) -> windows_foundation.Size: ...
    @_property
    def supported_glyph_codes(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class LineDisplayMarquee(winrt.system.Object):
    def try_start_scrolling_async(self, direction: LineDisplayScrollDirection, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_stop_scrolling_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def scroll_wait_interval(self) -> datetime.timedelta: ...
    @scroll_wait_interval.setter
    def scroll_wait_interval(self, value: datetime.timedelta) -> None: ...
    @_property
    def repeat_wait_interval(self) -> datetime.timedelta: ...
    @repeat_wait_interval.setter
    def repeat_wait_interval(self, value: datetime.timedelta) -> None: ...
    @_property
    def format(self) -> LineDisplayMarqueeFormat: ...
    @format.setter
    def format(self, value: LineDisplayMarqueeFormat) -> None: ...

@typing.final
class LineDisplayStatisticsCategorySelector(winrt.system.Object):
    @_property
    def all_statistics(self) -> str: ...
    @_property
    def manufacturer_statistics(self) -> str: ...
    @_property
    def unified_pos_statistics(self) -> str: ...

@typing.final
class LineDisplayStatusUpdatedEventArgs(winrt.system.Object):
    @_property
    def status(self) -> LineDisplayPowerStatus: ...

@typing.final
class LineDisplayStoredBitmap(winrt.system.Object):
    def try_delete_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def escape_sequence(self) -> str: ...

@typing.final
class LineDisplayWindow(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def close(self) -> None: ...
    def read_character_at_cursor_async(self) -> windows_foundation.IAsyncOperation[winrt.system.UInt32]: ...
    def try_clear_text_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_storage_file_bitmap_at_cursor_async(self, bitmap: windows_storage.StorageFile, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_storage_file_bitmap_at_cursor_with_alignment_and_width_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_storage_file_bitmap_at_cursor_with_alignment_async(self, bitmap: windows_storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_storage_file_bitmap_at_point_async(self, bitmap: windows_storage.StorageFile, offset_in_pixels: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_storage_file_bitmap_at_point_with_width_async(self, bitmap: windows_storage.StorageFile, offset_in_pixels: windows_foundation.Point, width_in_pixels: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_stored_bitmap_at_cursor_async(self, bitmap: LineDisplayStoredBitmap, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_text_async(self, text: str, display_attribute: LineDisplayTextAttribute, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_text_at_position_async(self, text: str, display_attribute: LineDisplayTextAttribute, start_position: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_display_text_normal_async(self, text: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_refresh_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_scroll_text_async(self, direction: LineDisplayScrollDirection, number_of_columns_or_rows: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def inter_character_wait_interval(self) -> datetime.timedelta: ...
    @inter_character_wait_interval.setter
    def inter_character_wait_interval(self, value: datetime.timedelta) -> None: ...
    @_property
    def size_in_characters(self) -> windows_foundation.Size: ...
    @_property
    def cursor(self) -> LineDisplayCursor: ...
    @_property
    def marquee(self) -> LineDisplayMarquee: ...

@typing.final
class MagneticStripeReader_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[MagneticStripeReader]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[MagneticStripeReader]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class MagneticStripeReader(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=MagneticStripeReader_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    def claim_reader_async(self) -> windows_foundation.IAsyncOperation[ClaimedMagneticStripeReader]: ...
    def close(self) -> None: ...
    def get_error_reporting_type(self) -> MagneticStripeReaderErrorReportingType: ...
    def retrieve_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[MagneticStripeReader, MagneticStripeReaderStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def capabilities(self) -> MagneticStripeReaderCapabilities: ...
    @_property
    def device_authentication_protocol(self) -> MagneticStripeReaderAuthenticationProtocol: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def supported_card_types(self) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderAamvaCardDataReceivedEventArgs(winrt.system.Object):
    @_property
    def address(self) -> str: ...
    @_property
    def birth_date(self) -> str: ...
    @_property
    def city(self) -> str: ...
    @_property
    def class_(self) -> str: ...
    @_property
    def endorsements(self) -> str: ...
    @_property
    def expiration_date(self) -> str: ...
    @_property
    def eye_color(self) -> str: ...
    @_property
    def first_name(self) -> str: ...
    @_property
    def gender(self) -> str: ...
    @_property
    def hair_color(self) -> str: ...
    @_property
    def height(self) -> str: ...
    @_property
    def license_number(self) -> str: ...
    @_property
    def postal_code(self) -> str: ...
    @_property
    def report(self) -> MagneticStripeReaderReport: ...
    @_property
    def restrictions(self) -> str: ...
    @_property
    def state(self) -> str: ...
    @_property
    def suffix(self) -> str: ...
    @_property
    def surname(self) -> str: ...
    @_property
    def weight(self) -> str: ...

@typing.final
class MagneticStripeReaderBankCardDataReceivedEventArgs(winrt.system.Object):
    @_property
    def account_number(self) -> str: ...
    @_property
    def expiration_date(self) -> str: ...
    @_property
    def first_name(self) -> str: ...
    @_property
    def middle_initial(self) -> str: ...
    @_property
    def report(self) -> MagneticStripeReaderReport: ...
    @_property
    def service_code(self) -> str: ...
    @_property
    def suffix(self) -> str: ...
    @_property
    def surname(self) -> str: ...
    @_property
    def title(self) -> str: ...

@typing.final
class MagneticStripeReaderCapabilities(winrt.system.Object):
    @_property
    def authentication_level(self) -> MagneticStripeReaderAuthenticationLevel: ...
    @_property
    def card_authentication(self) -> str: ...
    @_property
    def is_iso_supported(self) -> bool: ...
    @_property
    def is_jis_one_supported(self) -> bool: ...
    @_property
    def is_jis_two_supported(self) -> bool: ...
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    @_property
    def is_track_data_masking_supported(self) -> bool: ...
    @_property
    def is_transmit_sentinels_supported(self) -> bool: ...
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    @_property
    def supported_encryption_algorithms(self) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderCardTypes_Static(type):
    @_property
    def aamva(cls) -> winrt.system.UInt32: ...
    @_property
    def bank(cls) -> winrt.system.UInt32: ...
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    @_property
    def unknown(cls) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderCardTypes(winrt.system.Object, metaclass=MagneticStripeReaderCardTypes_Static):
    pass

@typing.final
class MagneticStripeReaderEncryptionAlgorithms_Static(type):
    @_property
    def extended_base(cls) -> winrt.system.UInt32: ...
    @_property
    def none(cls) -> winrt.system.UInt32: ...
    @_property
    def triple_des_dukpt(cls) -> winrt.system.UInt32: ...

@typing.final
class MagneticStripeReaderEncryptionAlgorithms(winrt.system.Object, metaclass=MagneticStripeReaderEncryptionAlgorithms_Static):
    pass

@typing.final
class MagneticStripeReaderErrorOccurredEventArgs(winrt.system.Object):
    @_property
    def error_data(self) -> UnifiedPosErrorData: ...
    @_property
    def partial_input_data(self) -> MagneticStripeReaderReport: ...
    @_property
    def track1_status(self) -> MagneticStripeReaderTrackErrorType: ...
    @_property
    def track2_status(self) -> MagneticStripeReaderTrackErrorType: ...
    @_property
    def track3_status(self) -> MagneticStripeReaderTrackErrorType: ...
    @_property
    def track4_status(self) -> MagneticStripeReaderTrackErrorType: ...

@typing.final
class MagneticStripeReaderReport(winrt.system.Object):
    @_property
    def additional_security_information(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def card_authentication_data(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def card_authentication_data_length(self) -> winrt.system.UInt32: ...
    @_property
    def card_type(self) -> winrt.system.UInt32: ...
    @_property
    def properties(self) -> typing.Mapping[str, str]: ...
    @_property
    def track1(self) -> MagneticStripeReaderTrackData: ...
    @_property
    def track2(self) -> MagneticStripeReaderTrackData: ...
    @_property
    def track3(self) -> MagneticStripeReaderTrackData: ...
    @_property
    def track4(self) -> MagneticStripeReaderTrackData: ...

@typing.final
class MagneticStripeReaderStatusUpdatedEventArgs(winrt.system.Object):
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> MagneticStripeReaderStatus: ...

@typing.final
class MagneticStripeReaderTrackData(winrt.system.Object):
    @_property
    def data(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def discretionary_data(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def encrypted_data(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(winrt.system.Object):
    @_property
    def report(self) -> MagneticStripeReaderReport: ...

@typing.final
class PosPrinter_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[PosPrinter]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[PosPrinter]: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_with_connection_types(cls, connection_types: PosConnectionTypes, /) -> str: ...

@typing.final
class PosPrinter(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=PosPrinter_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    def check_health_async(self, level: UnifiedPosHealthCheckLevel, /) -> windows_foundation.IAsyncOperation[str]: ...
    def claim_printer_async(self) -> windows_foundation.IAsyncOperation[ClaimedPosPrinter]: ...
    def close(self) -> None: ...
    def get_font_property(self, typeface: str, /) -> PosPrinterFontProperty: ...
    def get_statistics_async(self, statistics_categories: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[str]: ...
    def add_status_updated(self, handler: windows_foundation.TypedEventHandler[PosPrinter, PosPrinterStatusUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_status_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def capabilities(self) -> PosPrinterCapabilities: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def status(self) -> PosPrinterStatus: ...
    @_property
    def supported_character_sets(self) -> typing.Sequence[winrt.system.UInt32]: ...
    @_property
    def supported_type_faces(self) -> typing.Sequence[str]: ...
    @_property
    def supported_barcode_symbologies(self) -> typing.Sequence[winrt.system.UInt32]: ...

@typing.final
class PosPrinterCapabilities(winrt.system.Object):
    @_property
    def can_map_character_set(self) -> bool: ...
    @_property
    def default_character_set(self) -> winrt.system.UInt32: ...
    @_property
    def has_cover_sensor(self) -> bool: ...
    @_property
    def is_statistics_reporting_supported(self) -> bool: ...
    @_property
    def is_statistics_updating_supported(self) -> bool: ...
    @_property
    def is_transaction_supported(self) -> bool: ...
    @_property
    def journal(self) -> JournalPrinterCapabilities: ...
    @_property
    def power_reporting_type(self) -> UnifiedPosPowerReportingType: ...
    @_property
    def receipt(self) -> ReceiptPrinterCapabilities: ...
    @_property
    def slip(self) -> SlipPrinterCapabilities: ...

@typing.final
class PosPrinterCharacterSetIds_Static(type):
    @_property
    def ansi(cls) -> winrt.system.UInt32: ...
    @_property
    def ascii(cls) -> winrt.system.UInt32: ...
    @_property
    def utf16_l_e(cls) -> winrt.system.UInt32: ...

@typing.final
class PosPrinterCharacterSetIds(winrt.system.Object, metaclass=PosPrinterCharacterSetIds_Static):
    pass

@typing.final
class PosPrinterFontProperty(winrt.system.Object):
    @_property
    def character_sizes(self) -> typing.Sequence[SizeUInt32]: ...
    @_property
    def is_scalable_to_any_size(self) -> bool: ...
    @_property
    def type_face(self) -> str: ...

@typing.final
class PosPrinterPrintOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def underline(self) -> bool: ...
    @underline.setter
    def underline(self, value: bool) -> None: ...
    @_property
    def type_face(self) -> str: ...
    @type_face.setter
    def type_face(self, value: str) -> None: ...
    @_property
    def superscript(self) -> bool: ...
    @superscript.setter
    def superscript(self, value: bool) -> None: ...
    @_property
    def subscript(self) -> bool: ...
    @subscript.setter
    def subscript(self, value: bool) -> None: ...
    @_property
    def strikethrough(self) -> bool: ...
    @strikethrough.setter
    def strikethrough(self, value: bool) -> None: ...
    @_property
    def reverse_video(self) -> bool: ...
    @reverse_video.setter
    def reverse_video(self, value: bool) -> None: ...
    @_property
    def italic(self) -> bool: ...
    @italic.setter
    def italic(self, value: bool) -> None: ...
    @_property
    def double_wide(self) -> bool: ...
    @double_wide.setter
    def double_wide(self, value: bool) -> None: ...
    @_property
    def double_high(self) -> bool: ...
    @double_high.setter
    def double_high(self, value: bool) -> None: ...
    @_property
    def character_set(self) -> winrt.system.UInt32: ...
    @character_set.setter
    def character_set(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def character_height(self) -> winrt.system.UInt32: ...
    @character_height.setter
    def character_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bold(self) -> bool: ...
    @bold.setter
    def bold(self, value: bool) -> None: ...
    @_property
    def alignment(self) -> PosPrinterAlignment: ...
    @alignment.setter
    def alignment(self, value: PosPrinterAlignment) -> None: ...

@typing.final
class PosPrinterReleaseDeviceRequestedEventArgs(winrt.system.Object):
    pass

@typing.final
class PosPrinterStatus(winrt.system.Object):
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    @_property
    def status_kind(self) -> PosPrinterStatusKind: ...

@typing.final
class PosPrinterStatusUpdatedEventArgs(winrt.system.Object):
    @_property
    def status(self) -> PosPrinterStatus: ...

@typing.final
class ReceiptPrintJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    def cut_paper(self, percentage: winrt.system.Double, /) -> None: ...
    def cut_paper_default(self) -> None: ...
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    def mark_feed(self, kind: PosPrinterMarkFeedKind, /) -> None: ...
    @typing.overload
    def print(self, data: str, /) -> None: ...
    @typing.overload
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_line(self, data: str, /) -> None: ...
    def print_newline(self) -> None: ...
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...
    def stamp_paper(self) -> None: ...

@typing.final
class ReceiptPrinterCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    @_property
    def is_bold_supported(self) -> bool: ...
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_dual_color_supported(self) -> bool: ...
    @_property
    def is_italic_supported(self) -> bool: ...
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    @_property
    def is_printer_present(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    @_property
    def is180_rotation_supported(self) -> bool: ...
    @_property
    def is_barcode_supported(self) -> bool: ...
    @_property
    def is_bitmap_supported(self) -> bool: ...
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    @_property
    def is_print_area_supported(self) -> bool: ...
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def can_cut_paper(self) -> bool: ...
    @_property
    def is_stamp_supported(self) -> bool: ...
    @_property
    def mark_feed_capabilities(self) -> PosPrinterMarkFeedCapabilities: ...
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    @_property
    def is_subscript_supported(self) -> bool: ...
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class SlipPrintJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def feed_paper_by_line(self, line_count: winrt.system.Int32, /) -> None: ...
    def feed_paper_by_map_mode_unit(self, distance: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def print(self, data: str, /) -> None: ...
    @typing.overload
    def print(self, data: str, print_options: PosPrinterPrintOptions, /) -> None: ...
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_line(self, data: str, /) -> None: ...
    def print_newline(self) -> None: ...
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...

@typing.final
class SlipPrinterCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    @_property
    def is_bold_supported(self) -> bool: ...
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_dual_color_supported(self) -> bool: ...
    @_property
    def is_italic_supported(self) -> bool: ...
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    @_property
    def is_printer_present(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...
    @_property
    def is180_rotation_supported(self) -> bool: ...
    @_property
    def is_barcode_supported(self) -> bool: ...
    @_property
    def is_bitmap_supported(self) -> bool: ...
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    @_property
    def is_print_area_supported(self) -> bool: ...
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def is_both_sides_printing_supported(self) -> bool: ...
    @_property
    def is_full_length_supported(self) -> bool: ...
    @_property
    def is_reverse_paper_feed_by_line_supported(self) -> bool: ...
    @_property
    def is_reverse_paper_feed_by_map_mode_unit_supported(self) -> bool: ...
    @_property
    def is_reverse_video_supported(self) -> bool: ...
    @_property
    def is_strikethrough_supported(self) -> bool: ...
    @_property
    def is_subscript_supported(self) -> bool: ...
    @_property
    def is_superscript_supported(self) -> bool: ...

@typing.final
class UnifiedPosErrorData(winrt.system.Object):
    def __new__(cls: typing.Type[Self], message: str, severity: UnifiedPosErrorSeverity, reason: UnifiedPosErrorReason, extended_reason: winrt.system.UInt32) -> Self: ...
    @_property
    def extended_reason(self) -> winrt.system.UInt32: ...
    @_property
    def message(self) -> str: ...
    @_property
    def reason(self) -> UnifiedPosErrorReason: ...
    @_property
    def severity(self) -> UnifiedPosErrorSeverity: ...

class ImplementsICashDrawerEventSourceEventArgs():
    pass

@typing.final
class ICashDrawerEventSourceEventArgs(winrt.system.Object, ImplementsICashDrawerEventSourceEventArgs):
    @_property
    def cash_drawer(self) -> CashDrawer: ...

class ImplementsICommonClaimedPosPrinterStation():
    pass

@typing.final
class ICommonClaimedPosPrinterStation(winrt.system.Object, ImplementsICommonClaimedPosPrinterStation):
    def validate_data(self, data: str, /) -> bool: ...
    @_property
    def characters_per_line(self) -> winrt.system.UInt32: ...
    @characters_per_line.setter
    def characters_per_line(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def color_cartridge(self) -> PosPrinterColorCartridge: ...
    @color_cartridge.setter
    def color_cartridge(self, value: PosPrinterColorCartridge) -> None: ...
    @_property
    def is_cartridge_empty(self) -> bool: ...
    @_property
    def is_cartridge_removed(self) -> bool: ...
    @_property
    def is_cover_open(self) -> bool: ...
    @_property
    def is_head_cleaning(self) -> bool: ...
    @_property
    def is_letter_quality(self) -> bool: ...
    @is_letter_quality.setter
    def is_letter_quality(self, value: bool) -> None: ...
    @_property
    def is_paper_empty(self) -> bool: ...
    @_property
    def is_paper_near_end(self) -> bool: ...
    @_property
    def is_ready_to_print(self) -> bool: ...
    @_property
    def line_height(self) -> winrt.system.UInt32: ...
    @line_height.setter
    def line_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def line_spacing(self) -> winrt.system.UInt32: ...
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def line_width(self) -> winrt.system.UInt32: ...

class ImplementsICommonPosPrintStationCapabilities():
    pass

@typing.final
class ICommonPosPrintStationCapabilities(winrt.system.Object, ImplementsICommonPosPrintStationCapabilities):
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    @_property
    def is_bold_supported(self) -> bool: ...
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_dual_color_supported(self) -> bool: ...
    @_property
    def is_italic_supported(self) -> bool: ...
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    @_property
    def is_printer_present(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...

class ImplementsICommonReceiptSlipCapabilities():
    pass

@typing.final
class ICommonReceiptSlipCapabilities(winrt.system.Object, ImplementsICommonReceiptSlipCapabilities, ImplementsICommonPosPrintStationCapabilities):
    @_property
    def is180_rotation_supported(self) -> bool: ...
    @_property
    def is_barcode_supported(self) -> bool: ...
    @_property
    def is_bitmap_supported(self) -> bool: ...
    @_property
    def is_left90_rotation_supported(self) -> bool: ...
    @_property
    def is_print_area_supported(self) -> bool: ...
    @_property
    def is_right90_rotation_supported(self) -> bool: ...
    @_property
    def ruled_line_capabilities(self) -> PosPrinterRuledLineCapabilities: ...
    @_property
    def supported_barcode_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def supported_bitmap_rotations(self) -> typing.Sequence[PosPrinterRotation]: ...
    @_property
    def cartridge_sensors(self) -> PosPrinterCartridgeSensors: ...
    @_property
    def color_cartridge_capabilities(self) -> PosPrinterColorCapabilities: ...
    @_property
    def is_bold_supported(self) -> bool: ...
    @_property
    def is_double_high_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_double_high_print_supported(self) -> bool: ...
    @_property
    def is_double_wide_print_supported(self) -> bool: ...
    @_property
    def is_dual_color_supported(self) -> bool: ...
    @_property
    def is_italic_supported(self) -> bool: ...
    @_property
    def is_paper_empty_sensor_supported(self) -> bool: ...
    @_property
    def is_paper_near_end_sensor_supported(self) -> bool: ...
    @_property
    def is_printer_present(self) -> bool: ...
    @_property
    def is_underline_supported(self) -> bool: ...
    @_property
    def supported_characters_per_line(self) -> typing.Sequence[winrt.system.UInt32]: ...

class ImplementsIPosPrinterJob():
    pass

@typing.final
class IPosPrinterJob(winrt.system.Object, ImplementsIPosPrinterJob):
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def print(self, data: str, /) -> None: ...
    def print_line(self, data: str, /) -> None: ...
    def print_newline(self) -> None: ...

class ImplementsIReceiptOrSlipJob():
    pass

@typing.final
class IReceiptOrSlipJob(winrt.system.Object, ImplementsIReceiptOrSlipJob, ImplementsIPosPrinterJob):
    def draw_ruled_line(self, position_list: str, line_direction: PosPrinterLineDirection, line_width: winrt.system.UInt32, line_style: PosPrinterLineStyle, line_color: winrt.system.UInt32, /) -> None: ...
    def execute_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def print(self, data: str, /) -> None: ...
    def print_barcode(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment, /) -> None: ...
    def print_barcode_custom_align(self, data: str, symbology: winrt.system.UInt32, height: winrt.system.UInt32, width: winrt.system.UInt32, text_position: PosPrinterBarcodeTextPosition, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def print_bitmap_custom_width_custom_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def print_bitmap_custom_width_standard_align(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def print_custom_aligned_bitmap(self, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def print_line(self, data: str, /) -> None: ...
    def print_newline(self) -> None: ...
    def print_saved_bitmap(self, bitmap_number: winrt.system.UInt32, /) -> None: ...
    def set_barcode_rotation(self, value: PosPrinterRotation, /) -> None: ...
    def set_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, /) -> None: ...
    def set_bitmap_custom_width_custom_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, width: winrt.system.UInt32, /) -> None: ...
    def set_bitmap_custom_width_standard_align(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment: PosPrinterAlignment, width: winrt.system.UInt32, /) -> None: ...
    def set_custom_aligned_bitmap(self, bitmap_number: winrt.system.UInt32, bitmap: windows_graphics_imaging.BitmapFrame, alignment_distance: winrt.system.UInt32, /) -> None: ...
    def set_print_area(self, value: windows_foundation.Rect, /) -> None: ...
    def set_print_rotation(self, value: PosPrinterRotation, include_bitmaps: bool, /) -> None: ...

