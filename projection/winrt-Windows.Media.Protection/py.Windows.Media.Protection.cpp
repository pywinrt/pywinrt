// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Media.Protection.h"


namespace py::cpp::Windows::Media::Protection
{
    // ----- ComponentLoadFailedEventArgs class --------------------

    static PyObject* _new_ComponentLoadFailedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::ComponentLoadFailedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::ComponentLoadFailedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ComponentLoadFailedEventArgs(py::wrapper::Windows::Media::Protection::ComponentLoadFailedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ComponentLoadFailedEventArgs_get_Completion(py::wrapper::Windows::Media::Protection::ComponentLoadFailedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.ComponentLoadFailedEventArgs", L"Completion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Completion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ComponentLoadFailedEventArgs_get_Information(py::wrapper::Windows::Media::Protection::ComponentLoadFailedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.ComponentLoadFailedEventArgs", L"Information"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Information());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ComponentLoadFailedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::ComponentLoadFailedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ComponentLoadFailedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::ComponentLoadFailedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ComponentLoadFailedEventArgs[] = {
        { "_assign_array_", _assign_array_ComponentLoadFailedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ComponentLoadFailedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ComponentLoadFailedEventArgs[] = {
        { "completion", reinterpret_cast<getter>(ComponentLoadFailedEventArgs_get_Completion), nullptr, nullptr, nullptr },
        { "information", reinterpret_cast<getter>(ComponentLoadFailedEventArgs_get_Information), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ComponentLoadFailedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ComponentLoadFailedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ComponentLoadFailedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ComponentLoadFailedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ComponentLoadFailedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ComponentLoadFailedEventArgs =
    {
        "winrt._winrt_windows_media_protection.ComponentLoadFailedEventArgs",
        sizeof(py::wrapper::Windows::Media::Protection::ComponentLoadFailedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ComponentLoadFailedEventArgs
    };

    // ----- ComponentRenewal class --------------------

    static PyObject* _new_ComponentRenewal(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::ComponentRenewal>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::ComponentRenewal>::type_name);
        return nullptr;
    }

    static PyObject* ComponentRenewal_RenewSystemComponentsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.ComponentRenewal", L"RenewSystemComponentsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Protection::RevocationAndRenewalInformation>(args, 0);

                return py::convert(winrt::Windows::Media::Protection::ComponentRenewal::RenewSystemComponentsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_ComponentRenewal[] = {
        { }
    };

    static PyGetSetDef _getset_ComponentRenewal[] = {
        { }
    };

    static PyType_Slot _type_slots_ComponentRenewal[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ComponentRenewal) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ComponentRenewal) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ComponentRenewal) },
        { },
    };

    static PyType_Spec type_spec_ComponentRenewal =
    {
        "winrt._winrt_windows_media_protection.ComponentRenewal",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ComponentRenewal
    };

    static PyGetSetDef getset_ComponentRenewal_Static[] = {
        { }
    };

    static PyMethodDef methods_ComponentRenewal_Static[] = {
        { "renew_system_components_async", reinterpret_cast<PyCFunction>(ComponentRenewal_RenewSystemComponentsAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ComponentRenewal_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ComponentRenewal_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ComponentRenewal_Static) },
        { }
    };

    static PyType_Spec type_spec_ComponentRenewal_Static =
    {
        "winrt._winrt_windows_media_protection.ComponentRenewal_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ComponentRenewal_Static
    };

    // ----- HdcpSession class --------------------

    static PyObject* _new_HdcpSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Protection::HdcpSession instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_HdcpSession(py::wrapper::Windows::Media::Protection::HdcpSession* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HdcpSession_Close(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.HdcpSession", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdcpSession_GetEffectiveProtection(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.HdcpSession", L"GetEffectiveProtection", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetEffectiveProtection());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdcpSession_IsEffectiveProtectionAtLeast(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.HdcpSession", L"IsEffectiveProtectionAtLeast", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Protection::HdcpProtection>(args, 0);

                return py::convert(self->obj.IsEffectiveProtectionAtLeast(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdcpSession_SetDesiredMinProtectionAsync(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.HdcpSession", L"SetDesiredMinProtectionAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Protection::HdcpProtection>(args, 0);

                return py::convert(self->obj.SetDesiredMinProtectionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdcpSession_add_ProtectionChanged(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.HdcpSession", L"ProtectionChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Protection::HdcpSession, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ProtectionChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdcpSession_remove_ProtectionChanged(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.HdcpSession", L"ProtectionChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ProtectionChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HdcpSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::HdcpSession>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HdcpSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::HdcpSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HdcpSession(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_HdcpSession(py::wrapper::Windows::Media::Protection::HdcpSession* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HdcpSession[] = {
        { "close", reinterpret_cast<PyCFunction>(HdcpSession_Close), METH_VARARGS, nullptr },
        { "get_effective_protection", reinterpret_cast<PyCFunction>(HdcpSession_GetEffectiveProtection), METH_VARARGS, nullptr },
        { "is_effective_protection_at_least", reinterpret_cast<PyCFunction>(HdcpSession_IsEffectiveProtectionAtLeast), METH_VARARGS, nullptr },
        { "set_desired_min_protection_async", reinterpret_cast<PyCFunction>(HdcpSession_SetDesiredMinProtectionAsync), METH_VARARGS, nullptr },
        { "add_protection_changed", reinterpret_cast<PyCFunction>(HdcpSession_add_ProtectionChanged), METH_O, nullptr },
        { "remove_protection_changed", reinterpret_cast<PyCFunction>(HdcpSession_remove_ProtectionChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_HdcpSession, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HdcpSession), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_HdcpSession), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_HdcpSession), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_HdcpSession[] = {
        { }
    };

    static PyType_Slot _type_slots_HdcpSession[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HdcpSession) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HdcpSession) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HdcpSession) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HdcpSession) },
        { },
    };

    static PyType_Spec type_spec_HdcpSession =
    {
        "winrt._winrt_windows_media_protection.HdcpSession",
        sizeof(py::wrapper::Windows::Media::Protection::HdcpSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HdcpSession
    };

    // ----- MediaProtectionManager class --------------------

    static PyObject* _new_MediaProtectionManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Protection::MediaProtectionManager instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MediaProtectionManager(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MediaProtectionManager_get_Properties(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.MediaProtectionManager", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_add_ComponentLoadFailed(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"ComponentLoadFailed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Protection::ComponentLoadFailedEventHandler>(arg);

            return py::convert(self->obj.ComponentLoadFailed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_remove_ComponentLoadFailed(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"ComponentLoadFailed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ComponentLoadFailed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_add_RebootNeeded(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"RebootNeeded"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Protection::RebootNeededEventHandler>(arg);

            return py::convert(self->obj.RebootNeeded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_remove_RebootNeeded(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"RebootNeeded"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.RebootNeeded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_add_ServiceRequested(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"ServiceRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Protection::ServiceRequestedEventHandler>(arg);

            return py::convert(self->obj.ServiceRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaProtectionManager_remove_ServiceRequested(py::wrapper::Windows::Media::Protection::MediaProtectionManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Protection.MediaProtectionManager", L"ServiceRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ServiceRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MediaProtectionManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::MediaProtectionManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MediaProtectionManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::MediaProtectionManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaProtectionManager[] = {
        { "add_component_load_failed", reinterpret_cast<PyCFunction>(MediaProtectionManager_add_ComponentLoadFailed), METH_O, nullptr },
        { "remove_component_load_failed", reinterpret_cast<PyCFunction>(MediaProtectionManager_remove_ComponentLoadFailed), METH_O, nullptr },
        { "add_reboot_needed", reinterpret_cast<PyCFunction>(MediaProtectionManager_add_RebootNeeded), METH_O, nullptr },
        { "remove_reboot_needed", reinterpret_cast<PyCFunction>(MediaProtectionManager_remove_RebootNeeded), METH_O, nullptr },
        { "add_service_requested", reinterpret_cast<PyCFunction>(MediaProtectionManager_add_ServiceRequested), METH_O, nullptr },
        { "remove_service_requested", reinterpret_cast<PyCFunction>(MediaProtectionManager_remove_ServiceRequested), METH_O, nullptr },
        { "_assign_array_", _assign_array_MediaProtectionManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MediaProtectionManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MediaProtectionManager[] = {
        { "properties", reinterpret_cast<getter>(MediaProtectionManager_get_Properties), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MediaProtectionManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MediaProtectionManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MediaProtectionManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MediaProtectionManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MediaProtectionManager) },
        { },
    };

    static PyType_Spec type_spec_MediaProtectionManager =
    {
        "winrt._winrt_windows_media_protection.MediaProtectionManager",
        sizeof(py::wrapper::Windows::Media::Protection::MediaProtectionManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaProtectionManager
    };

    // ----- MediaProtectionPMPServer class --------------------

    static PyObject* _new_MediaProtectionPMPServer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 0);

                winrt::Windows::Media::Protection::MediaProtectionPMPServer instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MediaProtectionPMPServer(py::wrapper::Windows::Media::Protection::MediaProtectionPMPServer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MediaProtectionPMPServer_get_Properties(py::wrapper::Windows::Media::Protection::MediaProtectionPMPServer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.MediaProtectionPMPServer", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_MediaProtectionPMPServer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::MediaProtectionPMPServer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MediaProtectionPMPServer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::MediaProtectionPMPServer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaProtectionPMPServer[] = {
        { "_assign_array_", _assign_array_MediaProtectionPMPServer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MediaProtectionPMPServer), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MediaProtectionPMPServer[] = {
        { "properties", reinterpret_cast<getter>(MediaProtectionPMPServer_get_Properties), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MediaProtectionPMPServer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MediaProtectionPMPServer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MediaProtectionPMPServer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MediaProtectionPMPServer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MediaProtectionPMPServer) },
        { },
    };

    static PyType_Spec type_spec_MediaProtectionPMPServer =
    {
        "winrt._winrt_windows_media_protection.MediaProtectionPMPServer",
        sizeof(py::wrapper::Windows::Media::Protection::MediaProtectionPMPServer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaProtectionPMPServer
    };

    // ----- MediaProtectionServiceCompletion class --------------------

    static PyObject* _new_MediaProtectionServiceCompletion(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::MediaProtectionServiceCompletion>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::MediaProtectionServiceCompletion>::type_name);
        return nullptr;
    }

    static void _dealloc_MediaProtectionServiceCompletion(py::wrapper::Windows::Media::Protection::MediaProtectionServiceCompletion* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MediaProtectionServiceCompletion_Complete(py::wrapper::Windows::Media::Protection::MediaProtectionServiceCompletion* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.MediaProtectionServiceCompletion", L"Complete", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                self->obj.Complete(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_MediaProtectionServiceCompletion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::MediaProtectionServiceCompletion>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MediaProtectionServiceCompletion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::MediaProtectionServiceCompletion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaProtectionServiceCompletion[] = {
        { "complete", reinterpret_cast<PyCFunction>(MediaProtectionServiceCompletion_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_MediaProtectionServiceCompletion, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MediaProtectionServiceCompletion), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MediaProtectionServiceCompletion[] = {
        { }
    };

    static PyType_Slot _type_slots_MediaProtectionServiceCompletion[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MediaProtectionServiceCompletion) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MediaProtectionServiceCompletion) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MediaProtectionServiceCompletion) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MediaProtectionServiceCompletion) },
        { },
    };

    static PyType_Spec type_spec_MediaProtectionServiceCompletion =
    {
        "winrt._winrt_windows_media_protection.MediaProtectionServiceCompletion",
        sizeof(py::wrapper::Windows::Media::Protection::MediaProtectionServiceCompletion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaProtectionServiceCompletion
    };

    // ----- ProtectionCapabilities class --------------------

    static PyObject* _new_ProtectionCapabilities(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Protection::ProtectionCapabilities instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ProtectionCapabilities(py::wrapper::Windows::Media::Protection::ProtectionCapabilities* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectionCapabilities_IsTypeSupported(py::wrapper::Windows::Media::Protection::ProtectionCapabilities* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Protection.ProtectionCapabilities", L"IsTypeSupported", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.IsTypeSupported(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectionCapabilities(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::ProtectionCapabilities>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectionCapabilities(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::ProtectionCapabilities>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectionCapabilities[] = {
        { "is_type_supported", reinterpret_cast<PyCFunction>(ProtectionCapabilities_IsTypeSupported), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ProtectionCapabilities, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectionCapabilities), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectionCapabilities[] = {
        { }
    };

    static PyType_Slot _type_slots_ProtectionCapabilities[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectionCapabilities) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectionCapabilities) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectionCapabilities) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectionCapabilities) },
        { },
    };

    static PyType_Spec type_spec_ProtectionCapabilities =
    {
        "winrt._winrt_windows_media_protection.ProtectionCapabilities",
        sizeof(py::wrapper::Windows::Media::Protection::ProtectionCapabilities),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectionCapabilities
    };

    // ----- RevocationAndRenewalInformation class --------------------

    static PyObject* _new_RevocationAndRenewalInformation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::RevocationAndRenewalInformation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::RevocationAndRenewalInformation>::type_name);
        return nullptr;
    }

    static void _dealloc_RevocationAndRenewalInformation(py::wrapper::Windows::Media::Protection::RevocationAndRenewalInformation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RevocationAndRenewalInformation_get_Items(py::wrapper::Windows::Media::Protection::RevocationAndRenewalInformation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalInformation", L"Items"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Items());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RevocationAndRenewalInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::RevocationAndRenewalInformation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RevocationAndRenewalInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::RevocationAndRenewalInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RevocationAndRenewalInformation[] = {
        { "_assign_array_", _assign_array_RevocationAndRenewalInformation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RevocationAndRenewalInformation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_RevocationAndRenewalInformation[] = {
        { "items", reinterpret_cast<getter>(RevocationAndRenewalInformation_get_Items), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_RevocationAndRenewalInformation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_RevocationAndRenewalInformation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RevocationAndRenewalInformation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RevocationAndRenewalInformation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RevocationAndRenewalInformation) },
        { },
    };

    static PyType_Spec type_spec_RevocationAndRenewalInformation =
    {
        "winrt._winrt_windows_media_protection.RevocationAndRenewalInformation",
        sizeof(py::wrapper::Windows::Media::Protection::RevocationAndRenewalInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RevocationAndRenewalInformation
    };

    // ----- RevocationAndRenewalItem class --------------------

    static PyObject* _new_RevocationAndRenewalItem(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::RevocationAndRenewalItem>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::RevocationAndRenewalItem>::type_name);
        return nullptr;
    }

    static void _dealloc_RevocationAndRenewalItem(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RevocationAndRenewalItem_get_HeaderHash(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalItem", L"HeaderHash"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HeaderHash());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RevocationAndRenewalItem_get_Name(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalItem", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RevocationAndRenewalItem_get_PublicKeyHash(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalItem", L"PublicKeyHash"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PublicKeyHash());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RevocationAndRenewalItem_get_Reasons(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalItem", L"Reasons"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Reasons());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RevocationAndRenewalItem_get_RenewalId(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.RevocationAndRenewalItem", L"RenewalId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RenewalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_RevocationAndRenewalItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::RevocationAndRenewalItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RevocationAndRenewalItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::RevocationAndRenewalItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RevocationAndRenewalItem[] = {
        { "_assign_array_", _assign_array_RevocationAndRenewalItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RevocationAndRenewalItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_RevocationAndRenewalItem[] = {
        { "header_hash", reinterpret_cast<getter>(RevocationAndRenewalItem_get_HeaderHash), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(RevocationAndRenewalItem_get_Name), nullptr, nullptr, nullptr },
        { "public_key_hash", reinterpret_cast<getter>(RevocationAndRenewalItem_get_PublicKeyHash), nullptr, nullptr, nullptr },
        { "reasons", reinterpret_cast<getter>(RevocationAndRenewalItem_get_Reasons), nullptr, nullptr, nullptr },
        { "renewal_id", reinterpret_cast<getter>(RevocationAndRenewalItem_get_RenewalId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_RevocationAndRenewalItem[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_RevocationAndRenewalItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RevocationAndRenewalItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RevocationAndRenewalItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RevocationAndRenewalItem) },
        { },
    };

    static PyType_Spec type_spec_RevocationAndRenewalItem =
    {
        "winrt._winrt_windows_media_protection.RevocationAndRenewalItem",
        sizeof(py::wrapper::Windows::Media::Protection::RevocationAndRenewalItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RevocationAndRenewalItem
    };

    // ----- ServiceRequestedEventArgs class --------------------

    static PyObject* _new_ServiceRequestedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::ServiceRequestedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::ServiceRequestedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ServiceRequestedEventArgs(py::wrapper::Windows::Media::Protection::ServiceRequestedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ServiceRequestedEventArgs_get_Completion(py::wrapper::Windows::Media::Protection::ServiceRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.ServiceRequestedEventArgs", L"Completion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Completion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ServiceRequestedEventArgs_get_Request(py::wrapper::Windows::Media::Protection::ServiceRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.ServiceRequestedEventArgs", L"Request"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ServiceRequestedEventArgs_get_MediaPlaybackItem(py::wrapper::Windows::Media::Protection::ServiceRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.ServiceRequestedEventArgs", L"MediaPlaybackItem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaPlaybackItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ServiceRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::ServiceRequestedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ServiceRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::ServiceRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ServiceRequestedEventArgs[] = {
        { "_assign_array_", _assign_array_ServiceRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ServiceRequestedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ServiceRequestedEventArgs[] = {
        { "completion", reinterpret_cast<getter>(ServiceRequestedEventArgs_get_Completion), nullptr, nullptr, nullptr },
        { "request", reinterpret_cast<getter>(ServiceRequestedEventArgs_get_Request), nullptr, nullptr, nullptr },
        { "media_playback_item", reinterpret_cast<getter>(ServiceRequestedEventArgs_get_MediaPlaybackItem), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ServiceRequestedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ServiceRequestedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ServiceRequestedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ServiceRequestedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ServiceRequestedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ServiceRequestedEventArgs =
    {
        "winrt._winrt_windows_media_protection.ServiceRequestedEventArgs",
        sizeof(py::wrapper::Windows::Media::Protection::ServiceRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ServiceRequestedEventArgs
    };

    // ----- IMediaProtectionServiceRequest interface --------------------

    static PyObject* _new_IMediaProtectionServiceRequest(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Protection::IMediaProtectionServiceRequest>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Protection::IMediaProtectionServiceRequest>::type_name);
        return nullptr;
    }

    static void _dealloc_IMediaProtectionServiceRequest(py::wrapper::Windows::Media::Protection::IMediaProtectionServiceRequest* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IMediaProtectionServiceRequest_get_ProtectionSystem(py::wrapper::Windows::Media::Protection::IMediaProtectionServiceRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.IMediaProtectionServiceRequest", L"ProtectionSystem"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProtectionSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IMediaProtectionServiceRequest_get_Type(py::wrapper::Windows::Media::Protection::IMediaProtectionServiceRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Protection.IMediaProtectionServiceRequest", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IMediaProtectionServiceRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Protection::IMediaProtectionServiceRequest>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IMediaProtectionServiceRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Protection::IMediaProtectionServiceRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IMediaProtectionServiceRequest[] = {
        { "_assign_array_", _assign_array_IMediaProtectionServiceRequest, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IMediaProtectionServiceRequest), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IMediaProtectionServiceRequest[] = {
        { "protection_system", reinterpret_cast<getter>(IMediaProtectionServiceRequest_get_ProtectionSystem), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(IMediaProtectionServiceRequest_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IMediaProtectionServiceRequest[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IMediaProtectionServiceRequest) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IMediaProtectionServiceRequest) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IMediaProtectionServiceRequest) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IMediaProtectionServiceRequest) },
        { },
    };

    static PyType_Spec type_spec_IMediaProtectionServiceRequest =
    {
        "winrt._winrt_windows_media_protection.IMediaProtectionServiceRequest",
        sizeof(py::wrapper::Windows::Media::Protection::IMediaProtectionServiceRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IMediaProtectionServiceRequest
    };

    // ----- Windows.Media.Protection Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Media::Protection");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_media_protection",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Media::Protection

PyMODINIT_FUNC PyInit__winrt_windows_media_protection(void) noexcept
{
    using namespace py::cpp::Windows::Media::Protection;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ComponentLoadFailedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ComponentRenewal_Static{PyType_FromSpec(&type_spec_ComponentRenewal_Static)};
    if (!type_ComponentRenewal_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ComponentRenewal, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ComponentRenewal_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_HdcpSession, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MediaProtectionManager, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MediaProtectionPMPServer, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MediaProtectionServiceCompletion, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectionCapabilities, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_RevocationAndRenewalInformation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_RevocationAndRenewalItem, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ServiceRequestedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IMediaProtectionServiceRequest, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
