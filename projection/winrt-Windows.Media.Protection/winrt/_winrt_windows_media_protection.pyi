# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.playback

from winrt.windows.media.protection import GraphicsTrustStatus, HdcpProtection, HdcpSetProtectionResult, ProtectionCapabilityResult, RenewalStatus, RevocationAndRenewalReasons
from winrt.windows.media.protection import ComponentLoadFailedEventHandler, RebootNeededEventHandler, ServiceRequestedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class ComponentLoadFailedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComponentLoadFailedEventArgs: ...
    @_property
    def completion(self) -> typing.Optional[MediaProtectionServiceCompletion]: ...
    @_property
    def information(self) -> typing.Optional[RevocationAndRenewalInformation]: ...

@typing.final
class ComponentRenewal_Static(type):
    def renew_system_components_async(cls, information: typing.Optional[RevocationAndRenewalInformation], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[RenewalStatus, winrt.system.UInt32]: ...

@typing.final
class ComponentRenewal(winrt.system.Object, metaclass=ComponentRenewal_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComponentRenewal: ...

@typing.final
class HdcpSession(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HdcpSession: ...
    def __new__(cls: typing.Type[HdcpSession]) -> HdcpSession:...
    def close(self) -> None: ...
    def get_effective_protection(self) -> typing.Optional[typing.Optional[HdcpProtection]]: ...
    def is_effective_protection_at_least(self, protection: HdcpProtection, /) -> bool: ...
    def set_desired_min_protection_async(self, protection: HdcpProtection, /) -> winrt.windows.foundation.IAsyncOperation[HdcpSetProtectionResult]: ...
    def add_protection_changed(self, handler: winrt.windows.foundation.TypedEventHandler[HdcpSession, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_protection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class MediaProtectionManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionManager: ...
    def __new__(cls: typing.Type[MediaProtectionManager]) -> MediaProtectionManager:...
    def add_component_load_failed(self, handler: typing.Optional[ComponentLoadFailedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_component_load_failed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_reboot_needed(self, handler: typing.Optional[RebootNeededEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_reboot_needed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_service_requested(self, handler: typing.Optional[ServiceRequestedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_service_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...

@typing.final
class MediaProtectionPMPServer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionPMPServer: ...
    def __new__(cls: typing.Type[MediaProtectionPMPServer], p_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> MediaProtectionPMPServer:...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...

@typing.final
class MediaProtectionServiceCompletion(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionServiceCompletion: ...
    def complete(self, success: bool, /) -> None: ...

@typing.final
class ProtectionCapabilities(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProtectionCapabilities: ...
    def __new__(cls: typing.Type[ProtectionCapabilities]) -> ProtectionCapabilities:...
    def is_type_supported(self, type: str, key_system: str, /) -> ProtectionCapabilityResult: ...

@typing.final
class RevocationAndRenewalInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RevocationAndRenewalInformation: ...
    @_property
    def items(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[RevocationAndRenewalItem]]: ...

@typing.final
class RevocationAndRenewalItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RevocationAndRenewalItem: ...
    @_property
    def header_hash(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def public_key_hash(self) -> str: ...
    @_property
    def reasons(self) -> RevocationAndRenewalReasons: ...
    @_property
    def renewal_id(self) -> str: ...

@typing.final
class ServiceRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ServiceRequestedEventArgs: ...
    @_property
    def completion(self) -> typing.Optional[MediaProtectionServiceCompletion]: ...
    @_property
    def request(self) -> typing.Optional[IMediaProtectionServiceRequest]: ...
    @_property
    def media_playback_item(self) -> typing.Optional[winrt.windows.media.playback.MediaPlaybackItem]: ...

@typing.final
class IMediaProtectionServiceRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMediaProtectionServiceRequest: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...

