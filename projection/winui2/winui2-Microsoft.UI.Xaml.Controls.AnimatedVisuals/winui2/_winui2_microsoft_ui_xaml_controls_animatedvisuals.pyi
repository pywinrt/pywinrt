# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.ui as windows_ui
import winrt.windows.ui.composition as windows_ui_composition
import winui2.microsoft.ui.xaml.controls as microsoft_ui_xaml_controls

Self = typing.TypeVar('Self')

@typing.final
class AnimatedAcceptVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedBackVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedChevronDownSmallVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedChevronRightDownSmallVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedChevronUpDownSmallVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedFindVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedGlobalNavigationButtonVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

@typing.final
class AnimatedSettingsVisualSource(winrt.system.Object, microsoft_ui_xaml_controls.IAnimatedVisualSource2, microsoft_ui_xaml_controls.IAnimatedVisualSource):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource::SetColorProperty(System.String,Windows.UI.Color)
    def set_color_property(self, property_name: str, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]], /) -> None: ...
    # Microsoft.UI.Xaml.Controls.IAnimatedVisual Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource::TryCreateAnimatedVisual(Windows.UI.Composition.Compositor,System.Object&)
    def try_create_animated_visual(self, compositor: windows_ui_composition.Compositor, /) -> typing.Tuple[microsoft_ui_xaml_controls.IAnimatedVisual, winrt.system.Object]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Double> Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource::get_Markers()
    @_property
    def markers(self) -> typing.Mapping[str, winrt.system.Double]: ...

