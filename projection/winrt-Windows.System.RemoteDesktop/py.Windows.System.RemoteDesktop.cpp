// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.System.RemoteDesktop.h"


namespace py::cpp::Windows::System::RemoteDesktop
{
    // ----- InteractiveSession class --------------------

    static PyObject* _new_InteractiveSession(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::System::RemoteDesktop::InteractiveSession>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::System::RemoteDesktop::InteractiveSession>::type_name);
        return nullptr;
    }

    static PyObject* InteractiveSession_get_IsRemote(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.System.RemoteDesktop.InteractiveSession", L"IsRemote"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::System::RemoteDesktop::InteractiveSession::IsRemote());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InteractiveSession[] = {
        { }
    };

    static PyGetSetDef _getset_InteractiveSession[] = {
        { }
    };

    static PyType_Slot _type_slots_InteractiveSession[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_InteractiveSession) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_InteractiveSession) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_InteractiveSession) },
        { },
    };

    static PyType_Spec type_spec_InteractiveSession =
    {
        "winrt._winrt_windows_system_remotedesktop.InteractiveSession",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InteractiveSession
    };

    static PyGetSetDef getset_InteractiveSession_Static[] = {
        { "is_remote", reinterpret_cast<getter>(InteractiveSession_get_IsRemote), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_InteractiveSession_Static[] = {
        { }
    };

    static PyType_Slot type_slots_InteractiveSession_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_InteractiveSession_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_InteractiveSession_Static) },
        { }
    };

    static PyType_Spec type_spec_InteractiveSession_Static =
    {
        "winrt._winrt_windows_system_remotedesktop.InteractiveSession_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_InteractiveSession_Static
    };

    // ----- Windows.System.RemoteDesktop Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::System::RemoteDesktop");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_system_remotedesktop",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::System::RemoteDesktop

PyMODINIT_FUNC PyInit__winrt_windows_system_remotedesktop(void) noexcept
{
    using namespace py::cpp::Windows::System::RemoteDesktop;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_InteractiveSession_Static{PyType_FromSpec(&type_spec_InteractiveSession_Static)};
    if (!type_InteractiveSession_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_InteractiveSession, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_InteractiveSession_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
