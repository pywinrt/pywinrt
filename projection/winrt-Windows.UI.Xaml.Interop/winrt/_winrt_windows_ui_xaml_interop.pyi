# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation

from winrt.windows.ui.xaml.interop import NotifyCollectionChangedAction, TypeKind
from winrt.windows.ui.xaml.interop import BindableVectorChangedEventHandler, NotifyCollectionChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class TypeName:
    name: str
    kind: TypeKind
    def __init__(self, name: str = "", kind: TypeKind = TypeKind(0)) -> None: ...

class NotifyCollectionChangedEventArgs_Static(type):
    pass

class NotifyCollectionChangedEventArgs(winrt.system.Object, metaclass=NotifyCollectionChangedEventArgs_Static):
    def __new__(cls: typing.Type[Self], action: NotifyCollectionChangedAction, new_items: ImplementsIBindableVector, old_items: ImplementsIBindableVector, new_index: winrt.system.Int32, old_index: winrt.system.Int32) -> Self: ...
    # Windows.UI.Xaml.Interop.NotifyCollectionChangedAction Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs::get_Action()
    @_property
    @typing.final
    def action(self) -> NotifyCollectionChangedAction: ...
    # Windows.UI.Xaml.Interop.IBindableVector Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs::get_NewItems()
    @_property
    @typing.final
    def new_items(self) -> IBindableVector: ...
    # System.Int32 Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs::get_NewStartingIndex()
    @_property
    @typing.final
    def new_starting_index(self) -> winrt.system.Int32: ...
    # Windows.UI.Xaml.Interop.IBindableVector Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs::get_OldItems()
    @_property
    @typing.final
    def old_items(self) -> IBindableVector: ...
    # System.Int32 Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs::get_OldStartingIndex()
    @_property
    @typing.final
    def old_starting_index(self) -> winrt.system.Int32: ...

class ImplementsIBindableIterable():
    pass

@typing.final
class IBindableIterable(winrt.system.Object, ImplementsIBindableIterable):
    # Windows.UI.Xaml.Interop.IBindableIterator Windows.UI.Xaml.Interop.IBindableIterable::First()
    def first(self) -> IBindableIterator: ...

class ImplementsIBindableIterator():
    pass

@typing.final
class IBindableIterator(winrt.system.Object, ImplementsIBindableIterator):
    # System.Boolean Windows.UI.Xaml.Interop.IBindableIterator::MoveNext()
    def move_next(self) -> bool: ...
    # System.Object Windows.UI.Xaml.Interop.IBindableIterator::get_Current()
    @_property
    def current(self) -> winrt.system.Object: ...
    # System.Boolean Windows.UI.Xaml.Interop.IBindableIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

class ImplementsIBindableObservableVector():
    pass

@typing.final
class IBindableObservableVector(winrt.system.Object, ImplementsIBindableObservableVector, ImplementsIBindableVector, ImplementsIBindableIterable):
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::Append(System.Object)
    def append(self, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::Clear()
    def clear(self) -> None: ...
    # Windows.UI.Xaml.Interop.IBindableIterator Windows.UI.Xaml.Interop.IBindableIterable::First()
    def first(self) -> IBindableIterator: ...
    # System.Object Windows.UI.Xaml.Interop.IBindableVector::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> winrt.system.Object: ...
    # Windows.UI.Xaml.Interop.IBindableVectorView Windows.UI.Xaml.Interop.IBindableVector::GetView()
    def get_view(self) -> IBindableVectorView: ...
    # System.Boolean Windows.UI.Xaml.Interop.IBindableVector::IndexOf(System.Object,System.UInt32&)
    def index_of(self, value: winrt.system.Object, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::InsertAt(System.UInt32,System.Object)
    def insert_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::SetAt(System.UInt32,System.Object)
    def set_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Interop.IBindableObservableVector::add_VectorChanged(Windows.UI.Xaml.Interop.BindableVectorChangedEventHandler)
    def add_vector_changed(self, handler: BindableVectorChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableObservableVector::remove_VectorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_vector_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.UI.Xaml.Interop.IBindableVector::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class ImplementsIBindableVector():
    pass

@typing.final
class IBindableVector(winrt.system.Object, ImplementsIBindableVector, ImplementsIBindableIterable):
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::Append(System.Object)
    def append(self, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::Clear()
    def clear(self) -> None: ...
    # Windows.UI.Xaml.Interop.IBindableIterator Windows.UI.Xaml.Interop.IBindableIterable::First()
    def first(self) -> IBindableIterator: ...
    # System.Object Windows.UI.Xaml.Interop.IBindableVector::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> winrt.system.Object: ...
    # Windows.UI.Xaml.Interop.IBindableVectorView Windows.UI.Xaml.Interop.IBindableVector::GetView()
    def get_view(self) -> IBindableVectorView: ...
    # System.Boolean Windows.UI.Xaml.Interop.IBindableVector::IndexOf(System.Object,System.UInt32&)
    def index_of(self, value: winrt.system.Object, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::InsertAt(System.UInt32,System.Object)
    def insert_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Windows.UI.Xaml.Interop.IBindableVector::SetAt(System.UInt32,System.Object)
    def set_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # System.UInt32 Windows.UI.Xaml.Interop.IBindableVector::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class ImplementsIBindableVectorView():
    pass

@typing.final
class IBindableVectorView(winrt.system.Object, ImplementsIBindableVectorView, ImplementsIBindableIterable):
    # Windows.UI.Xaml.Interop.IBindableIterator Windows.UI.Xaml.Interop.IBindableIterable::First()
    def first(self) -> IBindableIterator: ...
    # System.Object Windows.UI.Xaml.Interop.IBindableVectorView::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> winrt.system.Object: ...
    # System.Boolean Windows.UI.Xaml.Interop.IBindableVectorView::IndexOf(System.Object,System.UInt32&)
    def index_of(self, value: winrt.system.Object, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.UInt32 Windows.UI.Xaml.Interop.IBindableVectorView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class ImplementsINotifyCollectionChanged():
    pass

@typing.final
class INotifyCollectionChanged(winrt.system.Object, ImplementsINotifyCollectionChanged):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Interop.INotifyCollectionChanged::add_CollectionChanged(Windows.UI.Xaml.Interop.NotifyCollectionChangedEventHandler)
    def add_collection_changed(self, handler: NotifyCollectionChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Interop.INotifyCollectionChanged::remove_CollectionChanged(Windows.Foundation.EventRegistrationToken)
    def remove_collection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

