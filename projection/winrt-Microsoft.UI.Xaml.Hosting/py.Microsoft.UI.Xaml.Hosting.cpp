// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.UI.Xaml.Hosting.h"


namespace py::cpp::Microsoft::UI::Xaml::Hosting
{
    // ----- DesktopWindowXamlSource class --------------------

    static PyObject* _new_DesktopWindowXamlSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DesktopWindowXamlSource(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesktopWindowXamlSource_Close(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_Initialize(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"Initialize", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::WindowId>(args, 0);

                self->obj.Initialize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_NavigateFocus(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"NavigateFocus", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest>(args, 0);

                return py::convert(self->obj.NavigateFocus(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_get_SystemBackdrop(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"SystemBackdrop"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SystemBackdrop());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopWindowXamlSource_put_SystemBackdrop(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"SystemBackdrop"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::SystemBackdrop>(arg);

            self->obj.SystemBackdrop(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopWindowXamlSource_get_Content(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DesktopWindowXamlSource_put_Content(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(arg);

            self->obj.Content(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DesktopWindowXamlSource_get_HasFocus(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"HasFocus"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HasFocus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_get_SiteBridge(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"SiteBridge"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SiteBridge());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_add_GotFocus(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"GotFocus"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource, winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs>>(arg);

            return py::convert(self->obj.GotFocus(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_remove_GotFocus(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"GotFocus"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GotFocus(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_add_TakeFocusRequested(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"TakeFocusRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource, winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs>>(arg);

            return py::convert(self->obj.TakeFocusRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DesktopWindowXamlSource_remove_TakeFocusRequested(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", L"TakeFocusRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TakeFocusRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesktopWindowXamlSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesktopWindowXamlSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_DesktopWindowXamlSource(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_DesktopWindowXamlSource(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesktopWindowXamlSource[] = {
        { "close", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_Close), METH_VARARGS, nullptr },
        { "initialize", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_Initialize), METH_VARARGS, nullptr },
        { "navigate_focus", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_NavigateFocus), METH_VARARGS, nullptr },
        { "add_got_focus", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_add_GotFocus), METH_O, nullptr },
        { "remove_got_focus", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_remove_GotFocus), METH_O, nullptr },
        { "add_take_focus_requested", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_add_TakeFocusRequested), METH_O, nullptr },
        { "remove_take_focus_requested", reinterpret_cast<PyCFunction>(DesktopWindowXamlSource_remove_TakeFocusRequested), METH_O, nullptr },
        { "_assign_array_", _assign_array_DesktopWindowXamlSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesktopWindowXamlSource), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_DesktopWindowXamlSource), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_DesktopWindowXamlSource), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_DesktopWindowXamlSource[] = {
        { "system_backdrop", reinterpret_cast<getter>(DesktopWindowXamlSource_get_SystemBackdrop), reinterpret_cast<setter>(DesktopWindowXamlSource_put_SystemBackdrop), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(DesktopWindowXamlSource_get_Content), reinterpret_cast<setter>(DesktopWindowXamlSource_put_Content), nullptr, nullptr },
        { "has_focus", reinterpret_cast<getter>(DesktopWindowXamlSource_get_HasFocus), nullptr, nullptr, nullptr },
        { "site_bridge", reinterpret_cast<getter>(DesktopWindowXamlSource_get_SiteBridge), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DesktopWindowXamlSource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesktopWindowXamlSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesktopWindowXamlSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesktopWindowXamlSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesktopWindowXamlSource) },
        { },
    };

    static PyType_Spec type_spec_DesktopWindowXamlSource =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.DesktopWindowXamlSource",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesktopWindowXamlSource
    };

    // ----- DesktopWindowXamlSourceGotFocusEventArgs class --------------------

    static PyObject* _new_DesktopWindowXamlSourceGotFocusEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_DesktopWindowXamlSourceGotFocusEventArgs(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesktopWindowXamlSourceGotFocusEventArgs_get_Request(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs", L"Request"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesktopWindowXamlSourceGotFocusEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesktopWindowXamlSourceGotFocusEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesktopWindowXamlSourceGotFocusEventArgs[] = {
        { "_assign_array_", _assign_array_DesktopWindowXamlSourceGotFocusEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesktopWindowXamlSourceGotFocusEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DesktopWindowXamlSourceGotFocusEventArgs[] = {
        { "request", reinterpret_cast<getter>(DesktopWindowXamlSourceGotFocusEventArgs_get_Request), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DesktopWindowXamlSourceGotFocusEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesktopWindowXamlSourceGotFocusEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesktopWindowXamlSourceGotFocusEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesktopWindowXamlSourceGotFocusEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesktopWindowXamlSourceGotFocusEventArgs) },
        { },
    };

    static PyType_Spec type_spec_DesktopWindowXamlSourceGotFocusEventArgs =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.DesktopWindowXamlSourceGotFocusEventArgs",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesktopWindowXamlSourceGotFocusEventArgs
    };

    // ----- DesktopWindowXamlSourceTakeFocusRequestedEventArgs class --------------------

    static PyObject* _new_DesktopWindowXamlSourceTakeFocusRequestedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_DesktopWindowXamlSourceTakeFocusRequestedEventArgs(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesktopWindowXamlSourceTakeFocusRequestedEventArgs_get_Request(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs", L"Request"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesktopWindowXamlSourceTakeFocusRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesktopWindowXamlSourceTakeFocusRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] = {
        { "_assign_array_", _assign_array_DesktopWindowXamlSourceTakeFocusRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesktopWindowXamlSourceTakeFocusRequestedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] = {
        { "request", reinterpret_cast<getter>(DesktopWindowXamlSourceTakeFocusRequestedEventArgs_get_Request), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesktopWindowXamlSourceTakeFocusRequestedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesktopWindowXamlSourceTakeFocusRequestedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesktopWindowXamlSourceTakeFocusRequestedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesktopWindowXamlSourceTakeFocusRequestedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_DesktopWindowXamlSourceTakeFocusRequestedEventArgs =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesktopWindowXamlSourceTakeFocusRequestedEventArgs
    };

    // ----- ElementCompositionPreview class --------------------

    static PyObject* _new_ElementCompositionPreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview>::type_name);
        return nullptr;
    }

    static void _dealloc_ElementCompositionPreview(py::wrapper::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ElementCompositionPreview_GetElementChildVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"GetElementChildVisual", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::GetElementChildVisual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_GetElementVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"GetElementVisual", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::GetElementVisual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_GetPointerPositionPropertySet(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"GetPointerPositionPropertySet", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::GetPointerPositionPropertySet(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_GetScrollViewerManipulationPropertySet(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"GetScrollViewerManipulationPropertySet", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::GetScrollViewerManipulationPropertySet(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_SetElementChildVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"SetElementChildVisual", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::Visual>(args, 1);

                winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::SetElementChildVisual(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_SetImplicitHideAnimation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"SetImplicitHideAnimation", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionAnimationBase>(args, 1);

                winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::SetImplicitHideAnimation(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_SetImplicitShowAnimation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"SetImplicitShowAnimation", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Composition::ICompositionAnimationBase>(args, 1);

                winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::SetImplicitShowAnimation(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ElementCompositionPreview_SetIsTranslationEnabled(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", L"SetIsTranslationEnabled", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::UIElement>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview::SetIsTranslationEnabled(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ElementCompositionPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ElementCompositionPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ElementCompositionPreview[] = {
        { "_assign_array_", _assign_array_ElementCompositionPreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ElementCompositionPreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ElementCompositionPreview[] = {
        { }
    };

    static PyType_Slot _type_slots_ElementCompositionPreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ElementCompositionPreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ElementCompositionPreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ElementCompositionPreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ElementCompositionPreview) },
        { },
    };

    static PyType_Spec type_spec_ElementCompositionPreview =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.ElementCompositionPreview",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::ElementCompositionPreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ElementCompositionPreview
    };

    static PyGetSetDef getset_ElementCompositionPreview_Static[] = {
        { }
    };

    static PyMethodDef methods_ElementCompositionPreview_Static[] = {
        { "get_element_child_visual", reinterpret_cast<PyCFunction>(ElementCompositionPreview_GetElementChildVisual), METH_VARARGS, nullptr },
        { "get_element_visual", reinterpret_cast<PyCFunction>(ElementCompositionPreview_GetElementVisual), METH_VARARGS, nullptr },
        { "get_pointer_position_property_set", reinterpret_cast<PyCFunction>(ElementCompositionPreview_GetPointerPositionPropertySet), METH_VARARGS, nullptr },
        { "get_scroll_viewer_manipulation_property_set", reinterpret_cast<PyCFunction>(ElementCompositionPreview_GetScrollViewerManipulationPropertySet), METH_VARARGS, nullptr },
        { "set_element_child_visual", reinterpret_cast<PyCFunction>(ElementCompositionPreview_SetElementChildVisual), METH_VARARGS, nullptr },
        { "set_implicit_hide_animation", reinterpret_cast<PyCFunction>(ElementCompositionPreview_SetImplicitHideAnimation), METH_VARARGS, nullptr },
        { "set_implicit_show_animation", reinterpret_cast<PyCFunction>(ElementCompositionPreview_SetImplicitShowAnimation), METH_VARARGS, nullptr },
        { "set_is_translation_enabled", reinterpret_cast<PyCFunction>(ElementCompositionPreview_SetIsTranslationEnabled), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ElementCompositionPreview_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ElementCompositionPreview_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ElementCompositionPreview_Static) },
        { }
    };

    static PyType_Spec type_spec_ElementCompositionPreview_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.ElementCompositionPreview_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ElementCompositionPreview_Static
    };

    // ----- WindowsXamlManager class --------------------

    static PyObject* _new_WindowsXamlManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::WindowsXamlManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Hosting::WindowsXamlManager>::type_name);
        return nullptr;
    }

    static void _dealloc_WindowsXamlManager(py::wrapper::Microsoft::UI::Xaml::Hosting::WindowsXamlManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WindowsXamlManager_Close(py::wrapper::Microsoft::UI::Xaml::Hosting::WindowsXamlManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.WindowsXamlManager", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WindowsXamlManager_InitializeForCurrentThread(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Hosting.WindowsXamlManager", L"InitializeForCurrentThread", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::UI::Xaml::Hosting::WindowsXamlManager::InitializeForCurrentThread());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_WindowsXamlManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::WindowsXamlManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WindowsXamlManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::WindowsXamlManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_WindowsXamlManager(py::wrapper::Microsoft::UI::Xaml::Hosting::WindowsXamlManager* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_WindowsXamlManager(py::wrapper::Microsoft::UI::Xaml::Hosting::WindowsXamlManager* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowsXamlManager[] = {
        { "close", reinterpret_cast<PyCFunction>(WindowsXamlManager_Close), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WindowsXamlManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WindowsXamlManager), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_WindowsXamlManager), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_WindowsXamlManager), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_WindowsXamlManager[] = {
        { }
    };

    static PyType_Slot _type_slots_WindowsXamlManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WindowsXamlManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WindowsXamlManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WindowsXamlManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WindowsXamlManager) },
        { },
    };

    static PyType_Spec type_spec_WindowsXamlManager =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.WindowsXamlManager",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::WindowsXamlManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowsXamlManager
    };

    static PyGetSetDef getset_WindowsXamlManager_Static[] = {
        { }
    };

    static PyMethodDef methods_WindowsXamlManager_Static[] = {
        { "initialize_for_current_thread", reinterpret_cast<PyCFunction>(WindowsXamlManager_InitializeForCurrentThread), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_WindowsXamlManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_WindowsXamlManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_WindowsXamlManager_Static) },
        { }
    };

    static PyType_Spec type_spec_WindowsXamlManager_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.WindowsXamlManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_WindowsXamlManager_Static
    };

    // ----- XamlSourceFocusNavigationRequest class --------------------

    static PyObject* _new_XamlSourceFocusNavigationRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason>(args, 0);

                winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);

                winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);
                auto param2 = py::convert_to<winrt::guid>(args, 2);

                winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_XamlSourceFocusNavigationRequest(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* XamlSourceFocusNavigationRequest_get_CorrelationId(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest", L"CorrelationId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CorrelationId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* XamlSourceFocusNavigationRequest_get_HintRect(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest", L"HintRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HintRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* XamlSourceFocusNavigationRequest_get_Reason(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest", L"Reason"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_XamlSourceFocusNavigationRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_XamlSourceFocusNavigationRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_XamlSourceFocusNavigationRequest[] = {
        { "_assign_array_", _assign_array_XamlSourceFocusNavigationRequest, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_XamlSourceFocusNavigationRequest), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_XamlSourceFocusNavigationRequest[] = {
        { "correlation_id", reinterpret_cast<getter>(XamlSourceFocusNavigationRequest_get_CorrelationId), nullptr, nullptr, nullptr },
        { "hint_rect", reinterpret_cast<getter>(XamlSourceFocusNavigationRequest_get_HintRect), nullptr, nullptr, nullptr },
        { "reason", reinterpret_cast<getter>(XamlSourceFocusNavigationRequest_get_Reason), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_XamlSourceFocusNavigationRequest[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_XamlSourceFocusNavigationRequest) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_XamlSourceFocusNavigationRequest) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_XamlSourceFocusNavigationRequest) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_XamlSourceFocusNavigationRequest) },
        { },
    };

    static PyType_Spec type_spec_XamlSourceFocusNavigationRequest =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.XamlSourceFocusNavigationRequest",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_XamlSourceFocusNavigationRequest
    };

    // ----- XamlSourceFocusNavigationResult class --------------------

    static PyObject* _new_XamlSourceFocusNavigationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_XamlSourceFocusNavigationResult(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* XamlSourceFocusNavigationResult_get_WasFocusMoved(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult", L"WasFocusMoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.WasFocusMoved());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_XamlSourceFocusNavigationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_XamlSourceFocusNavigationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_XamlSourceFocusNavigationResult[] = {
        { "_assign_array_", _assign_array_XamlSourceFocusNavigationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_XamlSourceFocusNavigationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_XamlSourceFocusNavigationResult[] = {
        { "was_focus_moved", reinterpret_cast<getter>(XamlSourceFocusNavigationResult_get_WasFocusMoved), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_XamlSourceFocusNavigationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_XamlSourceFocusNavigationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_XamlSourceFocusNavigationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_XamlSourceFocusNavigationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_XamlSourceFocusNavigationResult) },
        { },
    };

    static PyType_Spec type_spec_XamlSourceFocusNavigationResult =
    {
        "winrt._winrt_microsoft_ui_xaml_hosting.XamlSourceFocusNavigationResult",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_XamlSourceFocusNavigationResult
    };

    // ----- Microsoft.UI.Xaml.Hosting Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::UI::Xaml::Hosting");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_ui_xaml_hosting",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::UI::Xaml::Hosting

PyMODINIT_FUNC PyInit__winrt_microsoft_ui_xaml_hosting(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Xaml::Hosting;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DesktopWindowXamlSource, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DesktopWindowXamlSourceGotFocusEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DesktopWindowXamlSourceTakeFocusRequestedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ElementCompositionPreview_Static{PyType_FromSpec(&type_spec_ElementCompositionPreview_Static)};
    if (!type_ElementCompositionPreview_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ElementCompositionPreview, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ElementCompositionPreview_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_WindowsXamlManager_Static{PyType_FromSpec(&type_spec_WindowsXamlManager_Static)};
    if (!type_WindowsXamlManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WindowsXamlManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_WindowsXamlManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_XamlSourceFocusNavigationRequest, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_XamlSourceFocusNavigationResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
