# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections

from winrt.windows.data.json import JsonErrorStatus, JsonValueType

Self = typing.TypeVar('Self')

@typing.final
class JsonArray_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[JsonArray]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[JsonArray]]: ...

@typing.final
class JsonArray(winrt.system.Object, winrt._winrt.MutableSequence[IJsonValue], metaclass=JsonArray_Static):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IJsonValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> IJsonValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IJsonValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: IJsonValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[IJsonValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JsonArray: ...
    def __new__(cls: typing.Type[JsonArray]) -> JsonArray:...
    def append(self, value: typing.Optional[IJsonValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IJsonValue]]: ...
    def get_array(self) -> typing.Optional[JsonArray]: ...
    def get_array_at(self, index: winrt.system.UInt32, /) -> typing.Optional[JsonArray]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IJsonValue]: ...
    def get_boolean(self) -> bool: ...
    def get_boolean_at(self, index: winrt.system.UInt32, /) -> bool: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IJsonValue], /) -> winrt.system.UInt32: ...
    def get_number(self) -> winrt.system.Double: ...
    def get_number_at(self, index: winrt.system.UInt32, /) -> winrt.system.Double: ...
    def get_object(self) -> typing.Optional[JsonObject]: ...
    def get_object_at(self, index: winrt.system.UInt32, /) -> typing.Optional[JsonObject]: ...
    def get_string(self) -> str: ...
    def get_string_at(self, index: winrt.system.UInt32, /) -> str: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[IJsonValue]]: ...
    def index_of(self, value: typing.Optional[IJsonValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[IJsonValue], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[IJsonValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[IJsonValue], /) -> None: ...
    def stringify(self) -> str: ...
    def to_string(self) -> str: ...
    @_property
    def value_type(self) -> JsonValueType: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class JsonError_Static(type):
    def get_json_status(cls, hresult: winrt.system.Int32, /) -> JsonErrorStatus: ...

@typing.final
class JsonError(winrt.system.Object, metaclass=JsonError_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JsonError: ...

@typing.final
class JsonObject_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[JsonObject]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[JsonObject]]: ...

@typing.final
class JsonObject(winrt.system.Object, winrt._winrt.MutableMapping[str, IJsonValue], metaclass=JsonObject_Static):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: IJsonValue) -> None: ...
    def __getitem__(self, key: str) -> IJsonValue: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JsonObject: ...
    def __new__(cls: typing.Type[JsonObject]) -> JsonObject:...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, IJsonValue]]]: ...
    def get_array(self) -> typing.Optional[JsonArray]: ...
    def get_boolean(self) -> bool: ...
    @typing.overload
    def get_named_array(self, name: str, /) -> typing.Optional[JsonArray]: ...
    @typing.overload
    def get_named_array(self, name: str, default_value: typing.Optional[JsonArray], /) -> typing.Optional[JsonArray]: ...
    @typing.overload
    def get_named_boolean(self, name: str, /) -> bool: ...
    @typing.overload
    def get_named_boolean(self, name: str, default_value: bool, /) -> bool: ...
    @typing.overload
    def get_named_number(self, name: str, /) -> winrt.system.Double: ...
    @typing.overload
    def get_named_number(self, name: str, default_value: winrt.system.Double, /) -> winrt.system.Double: ...
    @typing.overload
    def get_named_object(self, name: str, /) -> typing.Optional[JsonObject]: ...
    @typing.overload
    def get_named_object(self, name: str, default_value: typing.Optional[JsonObject], /) -> typing.Optional[JsonObject]: ...
    @typing.overload
    def get_named_string(self, name: str, /) -> str: ...
    @typing.overload
    def get_named_string(self, name: str, default_value: str, /) -> str: ...
    @typing.overload
    def get_named_value(self, name: str, /) -> typing.Optional[JsonValue]: ...
    @typing.overload
    def get_named_value(self, name: str, default_value: typing.Optional[JsonValue], /) -> typing.Optional[JsonValue]: ...
    def get_number(self) -> winrt.system.Double: ...
    def get_object(self) -> typing.Optional[JsonObject]: ...
    def get_string(self) -> str: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, IJsonValue]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: typing.Optional[IJsonValue], /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[IJsonValue]: ...
    def remove(self, key: str, /) -> None: ...
    def set_named_value(self, name: str, value: typing.Optional[IJsonValue], /) -> None: ...
    def stringify(self) -> str: ...
    def to_string(self) -> str: ...
    @_property
    def value_type(self) -> JsonValueType: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class JsonValue_Static(type):
    def create_boolean_value(cls, input: bool, /) -> typing.Optional[JsonValue]: ...
    def create_null_value(cls) -> typing.Optional[JsonValue]: ...
    def create_number_value(cls, input: winrt.system.Double, /) -> typing.Optional[JsonValue]: ...
    def create_string_value(cls, input: str, /) -> typing.Optional[JsonValue]: ...
    def parse(cls, input: str, /) -> typing.Optional[JsonValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[JsonValue]]: ...

@typing.final
class JsonValue(winrt.system.Object, metaclass=JsonValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JsonValue: ...
    def get_array(self) -> typing.Optional[JsonArray]: ...
    def get_boolean(self) -> bool: ...
    def get_number(self) -> winrt.system.Double: ...
    def get_object(self) -> typing.Optional[JsonObject]: ...
    def get_string(self) -> str: ...
    def stringify(self) -> str: ...
    def to_string(self) -> str: ...
    @_property
    def value_type(self) -> JsonValueType: ...

@typing.final
class IJsonValue(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IJsonValue: ...
    def get_array(self) -> typing.Optional[JsonArray]: ...
    def get_boolean(self) -> bool: ...
    def get_number(self) -> winrt.system.Double: ...
    def get_object(self) -> typing.Optional[JsonObject]: ...
    def get_string(self) -> str: ...
    def stringify(self) -> str: ...
    @_property
    def value_type(self) -> JsonValueType: ...

