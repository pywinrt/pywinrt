# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.content
import winrt.microsoft.ui.input
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.foundation
import winrt.windows.graphics.imaging

from winrt.microsoft.ui.input.dragdrop import DragDropModifiers, DragUIContentMode

Self = typing.TypeVar('Self')

@typing.final
class DragDropManager_Static(type):
    def get_for_island(cls, content: typing.Optional[winrt.microsoft.ui.content.ContentIsland], /) -> typing.Optional[DragDropManager]: ...

@typing.final
class DragDropManager(winrt.system.Object, metaclass=DragDropManager_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragDropManager: ...
    def close(self) -> None: ...
    def add_target_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DragDropManager, DropOperationTargetRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def are_concurrent_operations_enabled(self) -> bool: ...
    @are_concurrent_operations_enabled.setter
    def are_concurrent_operations_enabled(self, value: bool) -> None: ...

@typing.final
class DragInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragInfo: ...
    @_property
    def allowed_operations(self) -> winrt.windows.applicationmodel.datatransfer.DataPackageOperation: ...
    @_property
    def data(self) -> typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackageView]: ...
    @_property
    def modifiers(self) -> DragDropModifiers: ...
    @_property
    def position(self) -> winrt.windows.foundation.Point: ...

@typing.final
class DragOperation(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragOperation: ...
    def __new__(cls: typing.Type[DragOperation]) -> DragOperation:...
    def close(self) -> None: ...
    @typing.overload
    def set_drag_u_i_content_from_software_bitmap(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> None: ...
    @typing.overload
    def set_drag_u_i_content_from_software_bitmap(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], anchor_point: winrt.windows.foundation.Point, /) -> None: ...
    def start_async(self, initial_target: typing.Optional[DragDropManager], initial_pointer_point: typing.Optional[winrt.microsoft.ui.input.PointerPoint], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...
    @_property
    def drag_u_i_content_mode(self) -> DragUIContentMode: ...
    @drag_u_i_content_mode.setter
    def drag_u_i_content_mode(self, value: DragUIContentMode) -> None: ...
    @_property
    def allowed_operations(self) -> winrt.windows.applicationmodel.datatransfer.DataPackageOperation: ...
    @allowed_operations.setter
    def allowed_operations(self, value: winrt.windows.applicationmodel.datatransfer.DataPackageOperation) -> None: ...
    @_property
    def data(self) -> typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackage]: ...

@typing.final
class DragUIOverride(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragUIOverride: ...
    def clear(self) -> None: ...
    @typing.overload
    def set_content_from_software_bitmap(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> None: ...
    @typing.overload
    def set_content_from_software_bitmap(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], anchor_point: winrt.windows.foundation.Point, /) -> None: ...
    @_property
    def is_glyph_visible(self) -> bool: ...
    @is_glyph_visible.setter
    def is_glyph_visible(self, value: bool) -> None: ...
    @_property
    def is_content_visible(self) -> bool: ...
    @is_content_visible.setter
    def is_content_visible(self, value: bool) -> None: ...
    @_property
    def is_caption_visible(self) -> bool: ...
    @is_caption_visible.setter
    def is_caption_visible(self, value: bool) -> None: ...
    @_property
    def caption(self) -> str: ...
    @caption.setter
    def caption(self, value: str) -> None: ...

@typing.final
class DropOperationTargetRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DropOperationTargetRequestedEventArgs: ...
    def set_target(self, target: typing.Optional[IDropOperationTarget], /) -> None: ...

@typing.final
class IDropOperationTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDropOperationTarget: ...
    def drop_async(self, drag_info: typing.Optional[DragInfo], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...
    def enter_async(self, drag_info: typing.Optional[DragInfo], drag_u_i_override: typing.Optional[DragUIOverride], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...
    def leave_async(self, drag_info: typing.Optional[DragInfo], /) -> winrt.windows.foundation.IAsyncAction: ...
    def over_async(self, drag_info: typing.Optional[DragInfo], drag_u_i_override: typing.Optional[DragUIOverride], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...

