// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Phone.System.UserProfile.GameServices.Core.h"


namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core
{
    // ----- GameService class --------------------

    static PyObject* _new_GameService(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService>::type_name);
        return nullptr;
    }

    static PyObject* GameService_GetAuthenticationStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetAuthenticationStatus", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetAuthenticationStatus());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetGamerProfileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetGamerProfileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetGamerProfileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetInstalledGameItemsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetInstalledGameItemsAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetInstalledGameItemsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetPartnerTokenAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetPartnerTokenAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetPartnerTokenAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GetPrivilegesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GetPrivilegesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GetPrivilegesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GrantAchievement(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GrantAchievement", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GrantAchievement(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_GrantAvatarAward(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"GrantAvatarAward", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::GrantAvatarAward(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_NotifyPartnerTokenExpired(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"NotifyPartnerTokenExpired", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::NotifyPartnerTokenExpired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_PostResult(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"PostResult", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind>(args, 1);
                auto param2 = py::convert_to<int64_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 4);

                winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::PostResult(param0, param1, param2, param3, param4);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameService_get_ServiceUri(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameService", L"ServiceUri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService::ServiceUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameService[] = {
        { }
    };

    static PyGetSetDef _getset_GameService[] = {
        { }
    };

    static PyType_Slot _type_slots_GameService[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameService) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameService) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameService) },
        { },
    };

    static PyType_Spec type_spec_GameService =
    {
        "winrt._winrt_windows_phone_system_userprofile_gameservices_core.GameService",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameService
    };

    static PyGetSetDef getset_GameService_Static[] = {
        { "service_uri", reinterpret_cast<getter>(GameService_get_ServiceUri), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_GameService_Static[] = {
        { "get_authentication_status", reinterpret_cast<PyCFunction>(GameService_GetAuthenticationStatus), METH_VARARGS, nullptr },
        { "get_gamer_profile_async", reinterpret_cast<PyCFunction>(GameService_GetGamerProfileAsync), METH_VARARGS, nullptr },
        { "get_installed_game_items_async", reinterpret_cast<PyCFunction>(GameService_GetInstalledGameItemsAsync), METH_VARARGS, nullptr },
        { "get_partner_token_async", reinterpret_cast<PyCFunction>(GameService_GetPartnerTokenAsync), METH_VARARGS, nullptr },
        { "get_privileges_async", reinterpret_cast<PyCFunction>(GameService_GetPrivilegesAsync), METH_VARARGS, nullptr },
        { "grant_achievement", reinterpret_cast<PyCFunction>(GameService_GrantAchievement), METH_VARARGS, nullptr },
        { "grant_avatar_award", reinterpret_cast<PyCFunction>(GameService_GrantAvatarAward), METH_VARARGS, nullptr },
        { "notify_partner_token_expired", reinterpret_cast<PyCFunction>(GameService_NotifyPartnerTokenExpired), METH_VARARGS, nullptr },
        { "post_result", reinterpret_cast<PyCFunction>(GameService_PostResult), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_GameService_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_GameService_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_GameService_Static) },
        { }
    };

    static PyType_Spec type_spec_GameService_Static =
    {
        "winrt._winrt_windows_phone_system_userprofile_gameservices_core.GameService_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_GameService_Static
    };

    // ----- GameServicePropertyCollection class --------------------

    static PyObject* _new_GameServicePropertyCollection(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>::type_name);
        return nullptr;
    }

    static void _dealloc_GameServicePropertyCollection(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameServicePropertyCollection_GetPropertyAsync(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.UserProfile.GameServices.Core.GameServicePropertyCollection", L"GetPropertyAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetPropertyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_GameServicePropertyCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GameServicePropertyCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameServicePropertyCollection[] = {
        { "get_property_async", reinterpret_cast<PyCFunction>(GameServicePropertyCollection_GetPropertyAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GameServicePropertyCollection, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameServicePropertyCollection), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameServicePropertyCollection[] = {
        { }
    };

    static PyType_Slot _type_slots_GameServicePropertyCollection[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GameServicePropertyCollection) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GameServicePropertyCollection) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GameServicePropertyCollection) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GameServicePropertyCollection) },
        { },
    };

    static PyType_Spec type_spec_GameServicePropertyCollection =
    {
        "winrt._winrt_windows_phone_system_userprofile_gameservices_core.GameServicePropertyCollection",
        sizeof(py::wrapper::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameServicePropertyCollection
    };

    // ----- Windows.Phone.System.UserProfile.GameServices.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::System::UserProfile::GameServices::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_phone_system_userprofile_gameservices_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Phone::System::UserProfile::GameServices::Core

PyMODINIT_FUNC PyInit__winrt_windows_phone_system_userprofile_gameservices_core(void) noexcept
{
    using namespace py::cpp::Windows::Phone::System::UserProfile::GameServices::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_GameService_Static{PyType_FromSpec(&type_spec_GameService_Static)};
    if (!type_GameService_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GameService, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_GameService_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GameServicePropertyCollection, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
