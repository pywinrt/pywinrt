// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.System.h"


namespace py::cpp::Microsoft::Windows::System
{
    // ----- EnvironmentManager class --------------------

    static PyObject* _new_EnvironmentManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::System::EnvironmentManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::System::EnvironmentManager>::type_name);
        return nullptr;
    }

    static void _dealloc_EnvironmentManager(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EnvironmentManager_AddExecutableFileExtension(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"AddExecutableFileExtension", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddExecutableFileExtension(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_AppendToPath(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"AppendToPath", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AppendToPath(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_GetEnvironmentVariable(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"GetEnvironmentVariable", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetEnvironmentVariable(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_GetEnvironmentVariables(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"GetEnvironmentVariables", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetEnvironmentVariables());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_GetForMachine(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"GetForMachine", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::System::EnvironmentManager::GetForMachine());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_GetForProcess(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"GetForProcess", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::System::EnvironmentManager::GetForProcess());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"GetForUser", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::System::EnvironmentManager::GetForUser());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_RemoveExecutableFileExtension(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"RemoveExecutableFileExtension", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.RemoveExecutableFileExtension(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_RemoveFromPath(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"RemoveFromPath", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.RemoveFromPath(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_SetEnvironmentVariable(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.System.EnvironmentManager", L"SetEnvironmentVariable", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetEnvironmentVariable(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_get_AreChangesTracked(py::wrapper::Microsoft::Windows::System::EnvironmentManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.EnvironmentManager", L"AreChangesTracked"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AreChangesTracked());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnvironmentManager_get_IsSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.System.EnvironmentManager", L"IsSupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::Windows::System::EnvironmentManager::IsSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_EnvironmentManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::System::EnvironmentManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_EnvironmentManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::System::EnvironmentManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnvironmentManager[] = {
        { "add_executable_file_extension", reinterpret_cast<PyCFunction>(EnvironmentManager_AddExecutableFileExtension), METH_VARARGS, nullptr },
        { "append_to_path", reinterpret_cast<PyCFunction>(EnvironmentManager_AppendToPath), METH_VARARGS, nullptr },
        { "get_environment_variable", reinterpret_cast<PyCFunction>(EnvironmentManager_GetEnvironmentVariable), METH_VARARGS, nullptr },
        { "get_environment_variables", reinterpret_cast<PyCFunction>(EnvironmentManager_GetEnvironmentVariables), METH_VARARGS, nullptr },
        { "remove_executable_file_extension", reinterpret_cast<PyCFunction>(EnvironmentManager_RemoveExecutableFileExtension), METH_VARARGS, nullptr },
        { "remove_from_path", reinterpret_cast<PyCFunction>(EnvironmentManager_RemoveFromPath), METH_VARARGS, nullptr },
        { "set_environment_variable", reinterpret_cast<PyCFunction>(EnvironmentManager_SetEnvironmentVariable), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_EnvironmentManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnvironmentManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnvironmentManager[] = {
        { "are_changes_tracked", reinterpret_cast<getter>(EnvironmentManager_get_AreChangesTracked), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EnvironmentManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_EnvironmentManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_EnvironmentManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_EnvironmentManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_EnvironmentManager) },
        { },
    };

    static PyType_Spec type_spec_EnvironmentManager =
    {
        "winrt._winrt_microsoft_windows_system.EnvironmentManager",
        sizeof(py::wrapper::Microsoft::Windows::System::EnvironmentManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnvironmentManager
    };

    static PyGetSetDef getset_EnvironmentManager_Static[] = {
        { "is_supported", reinterpret_cast<getter>(EnvironmentManager_get_IsSupported), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_EnvironmentManager_Static[] = {
        { "get_for_machine", reinterpret_cast<PyCFunction>(EnvironmentManager_GetForMachine), METH_VARARGS, nullptr },
        { "get_for_process", reinterpret_cast<PyCFunction>(EnvironmentManager_GetForProcess), METH_VARARGS, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(EnvironmentManager_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_EnvironmentManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_EnvironmentManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_EnvironmentManager_Static) },
        { }
    };

    static PyType_Spec type_spec_EnvironmentManager_Static =
    {
        "winrt._winrt_microsoft_windows_system.EnvironmentManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_EnvironmentManager_Static
    };

    // ----- Microsoft.Windows.System Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::System");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_system",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::System

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_system(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::System;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_EnvironmentManager_Static{PyType_FromSpec(&type_spec_EnvironmentManager_Static)};
    if (!type_EnvironmentManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_EnvironmentManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_EnvironmentManager_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
