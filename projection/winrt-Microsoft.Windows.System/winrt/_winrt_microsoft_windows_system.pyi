# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections

Self = typing.TypeVar('Self')

@typing.final
class EnvironmentManager_Static(type):
    def get_for_machine(cls) -> typing.Optional[EnvironmentManager]: ...
    def get_for_process(cls) -> typing.Optional[EnvironmentManager]: ...
    def get_for_user(cls) -> typing.Optional[EnvironmentManager]: ...
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class EnvironmentManager(winrt.system.Object, metaclass=EnvironmentManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnvironmentManager: ...
    def add_executable_file_extension(self, path_ext: str, /) -> None: ...
    def append_to_path(self, path: str, /) -> None: ...
    def get_environment_variable(self, name: str, /) -> str: ...
    def get_environment_variables(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def remove_executable_file_extension(self, path_ext: str, /) -> None: ...
    def remove_from_path(self, path: str, /) -> None: ...
    def set_environment_variable(self, name: str, value: str, /) -> None: ...
    @_property
    def are_changes_tracked(self) -> bool: ...

