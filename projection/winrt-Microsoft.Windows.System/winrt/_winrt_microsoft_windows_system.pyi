# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections as windows_foundation_collections

Self = typing.TypeVar('Self')

@typing.final
class EnvironmentManager_Static(type):
    # Microsoft.Windows.System.EnvironmentManager Microsoft.Windows.System.EnvironmentManager::GetForMachine()
    def get_for_machine(cls) -> EnvironmentManager: ...
    # Microsoft.Windows.System.EnvironmentManager Microsoft.Windows.System.EnvironmentManager::GetForProcess()
    def get_for_process(cls) -> EnvironmentManager: ...
    # Microsoft.Windows.System.EnvironmentManager Microsoft.Windows.System.EnvironmentManager::GetForUser()
    def get_for_user(cls) -> EnvironmentManager: ...
    # System.Boolean Microsoft.Windows.System.EnvironmentManager::get_IsSupported()
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class EnvironmentManager(winrt.system.Object, metaclass=EnvironmentManager_Static):
    # System.Void Microsoft.Windows.System.EnvironmentManager::AddExecutableFileExtension(System.String)
    def add_executable_file_extension(self, path_ext: str, /) -> None: ...
    # System.Void Microsoft.Windows.System.EnvironmentManager::AppendToPath(System.String)
    def append_to_path(self, path: str, /) -> None: ...
    # System.String Microsoft.Windows.System.EnvironmentManager::GetEnvironmentVariable(System.String)
    def get_environment_variable(self, name: str, /) -> str: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> Microsoft.Windows.System.EnvironmentManager::GetEnvironmentVariables()
    def get_environment_variables(self) -> typing.Mapping[str, str]: ...
    # System.Void Microsoft.Windows.System.EnvironmentManager::RemoveExecutableFileExtension(System.String)
    def remove_executable_file_extension(self, path_ext: str, /) -> None: ...
    # System.Void Microsoft.Windows.System.EnvironmentManager::RemoveFromPath(System.String)
    def remove_from_path(self, path: str, /) -> None: ...
    # System.Void Microsoft.Windows.System.EnvironmentManager::SetEnvironmentVariable(System.String,System.String)
    def set_environment_variable(self, name: str, value: str, /) -> None: ...
    # System.Boolean Microsoft.Windows.System.EnvironmentManager::get_AreChangesTracked()
    @_property
    def are_changes_tracked(self) -> bool: ...

