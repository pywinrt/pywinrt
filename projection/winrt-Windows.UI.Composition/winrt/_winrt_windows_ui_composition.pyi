# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.graphics
import winrt.windows.graphics.directx
import winrt.windows.graphics.effects
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.core

from winrt.windows.ui.composition import AnimationControllerProgressBehavior, AnimationDelayBehavior, AnimationDirection, AnimationIterationBehavior, AnimationPropertyAccessMode, AnimationStopBehavior, CompositionBackfaceVisibility, CompositionBatchTypes, CompositionBitmapInterpolationMode, CompositionBorderMode, CompositionColorSpace, CompositionCompositeMode, CompositionDropShadowSourcePolicy, CompositionEasingFunctionMode, CompositionEffectFactoryLoadStatus, CompositionGetValueStatus, CompositionGradientExtendMode, CompositionMappingMode, CompositionStretch, CompositionStrokeCap, CompositionStrokeLineJoin

Self = typing.TypeVar('Self')

@typing.final
class InkTrailPoint:
    point: winrt.windows.foundation.Point
    radius: winrt.system.Single
    def __init__(self, point: winrt.windows.foundation.Point, radius: winrt.system.Single) -> None: ...

@typing.final
class AmbientLight(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AmbientLight: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def intensity(self) -> winrt.system.Single: ...
    @intensity.setter
    def intensity(self, value: winrt.system.Single) -> None: ...

@typing.final
class AnimationController_Static(type):
    @_property
    def max_playback_rate(cls) -> winrt.system.Single: ...
    @_property
    def min_playback_rate(cls) -> winrt.system.Single: ...

@typing.final
class AnimationController(winrt.system.Object, metaclass=AnimationController_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimationController: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    @_property
    def progress_behavior(self) -> AnimationControllerProgressBehavior: ...
    @progress_behavior.setter
    def progress_behavior(self, value: AnimationControllerProgressBehavior) -> None: ...
    @_property
    def progress(self) -> winrt.system.Single: ...
    @progress.setter
    def progress(self, value: winrt.system.Single) -> None: ...
    @_property
    def playback_rate(self) -> winrt.system.Single: ...
    @playback_rate.setter
    def playback_rate(self, value: winrt.system.Single) -> None: ...

@typing.final
class AnimationPropertyInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimationPropertyInfo: ...
    def get_resolved_composition_object(self) -> typing.Optional[CompositionObject]: ...
    def get_resolved_composition_object_property(self) -> str: ...
    @_property
    def access_mode(self) -> AnimationPropertyAccessMode: ...
    @access_mode.setter
    def access_mode(self, value: AnimationPropertyAccessMode) -> None: ...

@typing.final
class BackEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackEasingFunction: ...
    @_property
    def amplitude(self) -> winrt.system.Single: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...

@typing.final
class BooleanKeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BooleanKeyFrameAnimation: ...
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: bool, /) -> None: ...

@typing.final
class BounceEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BounceEasingFunction: ...
    @_property
    def bounces(self) -> winrt.system.Int32: ...
    @_property
    def bounciness(self) -> winrt.system.Single: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...

@typing.final
class BounceScalarNaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BounceScalarNaturalMotionAnimation: ...
    @_property
    def restitution(self) -> winrt.system.Single: ...
    @restitution.setter
    def restitution(self, value: winrt.system.Single) -> None: ...
    @_property
    def acceleration(self) -> winrt.system.Single: ...
    @acceleration.setter
    def acceleration(self, value: winrt.system.Single) -> None: ...

@typing.final
class BounceVector2NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BounceVector2NaturalMotionAnimation: ...
    @_property
    def restitution(self) -> winrt.system.Single: ...
    @restitution.setter
    def restitution(self, value: winrt.system.Single) -> None: ...
    @_property
    def acceleration(self) -> winrt.system.Single: ...
    @acceleration.setter
    def acceleration(self, value: winrt.system.Single) -> None: ...

@typing.final
class BounceVector3NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BounceVector3NaturalMotionAnimation: ...
    @_property
    def restitution(self) -> winrt.system.Single: ...
    @restitution.setter
    def restitution(self, value: winrt.system.Single) -> None: ...
    @_property
    def acceleration(self) -> winrt.system.Single: ...
    @acceleration.setter
    def acceleration(self, value: winrt.system.Single) -> None: ...

@typing.final
class CircleEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CircleEasingFunction: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...

@typing.final
class ColorKeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorKeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.ui.Color, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.ui.Color, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...
    @_property
    def interpolation_color_space(self) -> CompositionColorSpace: ...
    @interpolation_color_space.setter
    def interpolation_color_space(self, value: CompositionColorSpace) -> None: ...

@typing.final
class CompositionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionAnimation: ...
    def clear_all_parameters(self) -> None: ...
    def clear_parameter(self, key: str, /) -> None: ...
    def set_boolean_parameter(self, key: str, value: bool, /) -> None: ...
    def set_color_parameter(self, key: str, value: winrt.windows.ui.Color, /) -> None: ...
    def set_expression_reference_parameter(self, parameter_name: str, source: typing.Optional[IAnimationObject], /) -> None: ...
    def set_matrix3x2_parameter(self, key: str, value: winrt.windows.foundation.numerics.Matrix3x2, /) -> None: ...
    def set_matrix4x4_parameter(self, key: str, value: winrt.windows.foundation.numerics.Matrix4x4, /) -> None: ...
    def set_quaternion_parameter(self, key: str, value: winrt.windows.foundation.numerics.Quaternion, /) -> None: ...
    def set_reference_parameter(self, key: str, composition_object: typing.Optional[CompositionObject], /) -> None: ...
    def set_scalar_parameter(self, key: str, value: winrt.system.Single, /) -> None: ...
    def set_vector2_parameter(self, key: str, value: winrt.windows.foundation.numerics.Vector2, /) -> None: ...
    def set_vector3_parameter(self, key: str, value: winrt.windows.foundation.numerics.Vector3, /) -> None: ...
    def set_vector4_parameter(self, key: str, value: winrt.windows.foundation.numerics.Vector4, /) -> None: ...
    @_property
    def target(self) -> str: ...
    @target.setter
    def target(self, value: str) -> None: ...
    @_property
    def initial_value_expressions(self) -> typing.Optional[InitialValueExpressionCollection]: ...

@typing.final
class CompositionAnimationGroup(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[CompositionAnimation]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionAnimationGroup: ...
    def add(self, value: typing.Optional[CompositionAnimation], /) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[CompositionAnimation]]: ...
    def remove(self, value: typing.Optional[CompositionAnimation], /) -> None: ...
    def remove_all(self) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...

@typing.final
class CompositionBackdropBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionBackdropBrush: ...

@typing.final
class CompositionBatchCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionBatchCompletedEventArgs: ...

@typing.final
class CompositionBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionBrush: ...

@typing.final
class CompositionCapabilities_Static(type):
    def get_for_current_view(cls) -> typing.Optional[CompositionCapabilities]: ...

@typing.final
class CompositionCapabilities(winrt.system.Object, metaclass=CompositionCapabilities_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionCapabilities: ...
    def are_effects_fast(self) -> bool: ...
    def are_effects_supported(self) -> bool: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CompositionCapabilities, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CompositionClip(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionClip: ...
    @_property
    def transform_matrix(self) -> winrt.windows.foundation.numerics.Matrix3x2: ...
    @transform_matrix.setter
    def transform_matrix(self, value: winrt.windows.foundation.numerics.Matrix3x2) -> None: ...
    @_property
    def scale(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @scale.setter
    def scale(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def center_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @center_point.setter
    def center_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def anchor_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @anchor_point.setter
    def anchor_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionColorBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionColorBrush: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...

@typing.final
class CompositionColorGradientStop(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionColorGradientStop: ...
    @_property
    def offset(self) -> winrt.system.Single: ...
    @offset.setter
    def offset(self, value: winrt.system.Single) -> None: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...

@typing.final
class CompositionColorGradientStopCollection(winrt.system.Object, winrt._winrt.MutableSequence[CompositionColorGradientStop]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[CompositionColorGradientStop]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> CompositionColorGradientStop: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[CompositionColorGradientStop]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: CompositionColorGradientStop) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[CompositionColorGradientStop]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionColorGradientStopCollection: ...
    def append(self, value: typing.Optional[CompositionColorGradientStop], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[CompositionColorGradientStop]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[CompositionColorGradientStop]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[CompositionColorGradientStop], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[CompositionColorGradientStop]]: ...
    def index_of(self, value: typing.Optional[CompositionColorGradientStop], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[CompositionColorGradientStop], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[CompositionColorGradientStop], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[CompositionColorGradientStop], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class CompositionCommitBatch(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionCommitBatch: ...
    def add_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CompositionBatchCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_active(self) -> bool: ...
    @_property
    def is_ended(self) -> bool: ...

@typing.final
class CompositionContainerShape(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionContainerShape: ...
    @_property
    def shapes(self) -> typing.Optional[CompositionShapeCollection]: ...

@typing.final
class CompositionDrawingSurface(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionDrawingSurface: ...
    def resize(self, size_pixels: winrt.windows.graphics.SizeInt32, /) -> None: ...
    @typing.overload
    def scroll(self, offset: winrt.windows.graphics.PointInt32, /) -> None: ...
    @typing.overload
    def scroll(self, offset: winrt.windows.graphics.PointInt32, scroll_rect: winrt.windows.graphics.RectInt32, /) -> None: ...
    @typing.overload
    def scroll_with_clip(self, offset: winrt.windows.graphics.PointInt32, clip_rect: winrt.windows.graphics.RectInt32, /) -> None: ...
    @typing.overload
    def scroll_with_clip(self, offset: winrt.windows.graphics.PointInt32, clip_rect: winrt.windows.graphics.RectInt32, scroll_rect: winrt.windows.graphics.RectInt32, /) -> None: ...
    @_property
    def alpha_mode(self) -> winrt.windows.graphics.directx.DirectXAlphaMode: ...
    @_property
    def pixel_format(self) -> winrt.windows.graphics.directx.DirectXPixelFormat: ...
    @_property
    def size(self) -> winrt.windows.foundation.Size: ...
    @_property
    def size_int32(self) -> winrt.windows.graphics.SizeInt32: ...

@typing.final
class CompositionEasingFunction_Static(type):
    def create_back_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, amplitude: winrt.system.Single, /) -> typing.Optional[BackEasingFunction]: ...
    def create_bounce_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, bounces: winrt.system.Int32, bounciness: winrt.system.Single, /) -> typing.Optional[BounceEasingFunction]: ...
    def create_circle_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, /) -> typing.Optional[CircleEasingFunction]: ...
    def create_cubic_bezier_easing_function(cls, owner: typing.Optional[Compositor], control_point1: winrt.windows.foundation.numerics.Vector2, control_point2: winrt.windows.foundation.numerics.Vector2, /) -> typing.Optional[CubicBezierEasingFunction]: ...
    def create_elastic_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, oscillations: winrt.system.Int32, springiness: winrt.system.Single, /) -> typing.Optional[ElasticEasingFunction]: ...
    def create_exponential_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, exponent: winrt.system.Single, /) -> typing.Optional[ExponentialEasingFunction]: ...
    def create_linear_easing_function(cls, owner: typing.Optional[Compositor], /) -> typing.Optional[LinearEasingFunction]: ...
    def create_power_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, power: winrt.system.Single, /) -> typing.Optional[PowerEasingFunction]: ...
    def create_sine_easing_function(cls, owner: typing.Optional[Compositor], mode: CompositionEasingFunctionMode, /) -> typing.Optional[SineEasingFunction]: ...
    @typing.overload
    def create_step_easing_function(cls, owner: typing.Optional[Compositor], /) -> typing.Optional[StepEasingFunction]: ...
    @typing.overload
    def create_step_easing_function(cls, owner: typing.Optional[Compositor], step_count: winrt.system.Int32, /) -> typing.Optional[StepEasingFunction]: ...

@typing.final
class CompositionEasingFunction(winrt.system.Object, metaclass=CompositionEasingFunction_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionEasingFunction: ...

@typing.final
class CompositionEffectBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionEffectBrush: ...
    def get_source_parameter(self, name: str, /) -> typing.Optional[CompositionBrush]: ...
    def set_source_parameter(self, name: str, source: typing.Optional[CompositionBrush], /) -> None: ...

@typing.final
class CompositionEffectFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionEffectFactory: ...
    def create_brush(self) -> typing.Optional[CompositionEffectBrush]: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def load_status(self) -> CompositionEffectFactoryLoadStatus: ...

@typing.final
class CompositionEffectSourceParameter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionEffectSourceParameter: ...
    def __new__(cls: typing.Type[CompositionEffectSourceParameter], name: str) -> CompositionEffectSourceParameter:...
    @_property
    def name(self) -> str: ...

@typing.final
class CompositionEllipseGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionEllipseGeometry: ...
    @_property
    def radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @radius.setter
    def radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def center(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @center.setter
    def center(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionGeometricClip(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionGeometricClip: ...
    @_property
    def view_box(self) -> typing.Optional[CompositionViewBox]: ...
    @view_box.setter
    def view_box(self, value: typing.Optional[CompositionViewBox]) -> None: ...
    @_property
    def geometry(self) -> typing.Optional[CompositionGeometry]: ...
    @geometry.setter
    def geometry(self, value: typing.Optional[CompositionGeometry]) -> None: ...

@typing.final
class CompositionGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionGeometry: ...
    @_property
    def trim_start(self) -> winrt.system.Single: ...
    @trim_start.setter
    def trim_start(self, value: winrt.system.Single) -> None: ...
    @_property
    def trim_offset(self) -> winrt.system.Single: ...
    @trim_offset.setter
    def trim_offset(self, value: winrt.system.Single) -> None: ...
    @_property
    def trim_end(self) -> winrt.system.Single: ...
    @trim_end.setter
    def trim_end(self, value: winrt.system.Single) -> None: ...

@typing.final
class CompositionGradientBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionGradientBrush: ...
    @_property
    def transform_matrix(self) -> winrt.windows.foundation.numerics.Matrix3x2: ...
    @transform_matrix.setter
    def transform_matrix(self, value: winrt.windows.foundation.numerics.Matrix3x2) -> None: ...
    @_property
    def scale(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @scale.setter
    def scale(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def interpolation_space(self) -> CompositionColorSpace: ...
    @interpolation_space.setter
    def interpolation_space(self, value: CompositionColorSpace) -> None: ...
    @_property
    def extend_mode(self) -> CompositionGradientExtendMode: ...
    @extend_mode.setter
    def extend_mode(self, value: CompositionGradientExtendMode) -> None: ...
    @_property
    def center_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @center_point.setter
    def center_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def anchor_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @anchor_point.setter
    def anchor_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def color_stops(self) -> typing.Optional[CompositionColorGradientStopCollection]: ...
    @_property
    def mapping_mode(self) -> CompositionMappingMode: ...
    @mapping_mode.setter
    def mapping_mode(self, value: CompositionMappingMode) -> None: ...

@typing.final
class CompositionGraphicsDevice(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionGraphicsDevice: ...
    def capture_async(self, capture_visual: typing.Optional[Visual], size: winrt.windows.graphics.SizeInt32, pixel_format: winrt.windows.graphics.directx.DirectXPixelFormat, alpha_mode: winrt.windows.graphics.directx.DirectXAlphaMode, sdr_boost: winrt.system.Single, /) -> winrt.windows.foundation.IAsyncOperation[ICompositionSurface]: ...
    def create_drawing_surface(self, size_pixels: winrt.windows.foundation.Size, pixel_format: winrt.windows.graphics.directx.DirectXPixelFormat, alpha_mode: winrt.windows.graphics.directx.DirectXAlphaMode, /) -> typing.Optional[CompositionDrawingSurface]: ...
    def create_drawing_surface2(self, size_pixels: winrt.windows.graphics.SizeInt32, pixel_format: winrt.windows.graphics.directx.DirectXPixelFormat, alpha_mode: winrt.windows.graphics.directx.DirectXAlphaMode, /) -> typing.Optional[CompositionDrawingSurface]: ...
    def create_mipmap_surface(self, size_pixels: winrt.windows.graphics.SizeInt32, pixel_format: winrt.windows.graphics.directx.DirectXPixelFormat, alpha_mode: winrt.windows.graphics.directx.DirectXAlphaMode, /) -> typing.Optional[CompositionMipmapSurface]: ...
    def create_virtual_drawing_surface(self, size_pixels: winrt.windows.graphics.SizeInt32, pixel_format: winrt.windows.graphics.directx.DirectXPixelFormat, alpha_mode: winrt.windows.graphics.directx.DirectXAlphaMode, /) -> typing.Optional[CompositionVirtualDrawingSurface]: ...
    def trim(self) -> None: ...
    def add_rendering_device_replaced(self, handler: winrt.windows.foundation.TypedEventHandler[CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_rendering_device_replaced(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CompositionLight(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionLight: ...
    @_property
    def targets(self) -> typing.Optional[VisualUnorderedCollection]: ...
    @_property
    def exclusions_from_targets(self) -> typing.Optional[VisualUnorderedCollection]: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...

@typing.final
class CompositionLineGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionLineGeometry: ...
    @_property
    def start(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @start.setter
    def start(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def end(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @end.setter
    def end(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionLinearGradientBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionLinearGradientBrush: ...
    @_property
    def start_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @start_point.setter
    def start_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def end_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @end_point.setter
    def end_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionMaskBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionMaskBrush: ...
    @_property
    def source(self) -> typing.Optional[CompositionBrush]: ...
    @source.setter
    def source(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def mask(self) -> typing.Optional[CompositionBrush]: ...
    @mask.setter
    def mask(self, value: typing.Optional[CompositionBrush]) -> None: ...

@typing.final
class CompositionMipmapSurface(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionMipmapSurface: ...
    def get_drawing_surface_for_level(self, level: winrt.system.UInt32, /) -> typing.Optional[CompositionDrawingSurface]: ...
    @_property
    def alpha_mode(self) -> winrt.windows.graphics.directx.DirectXAlphaMode: ...
    @_property
    def level_count(self) -> winrt.system.UInt32: ...
    @_property
    def pixel_format(self) -> winrt.windows.graphics.directx.DirectXPixelFormat: ...
    @_property
    def size_int32(self) -> winrt.windows.graphics.SizeInt32: ...

@typing.final
class CompositionNineGridBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionNineGridBrush: ...
    @typing.overload
    def set_inset_scales(self, scale: winrt.system.Single, /) -> None: ...
    @typing.overload
    def set_inset_scales(self, left: winrt.system.Single, top: winrt.system.Single, right: winrt.system.Single, bottom: winrt.system.Single, /) -> None: ...
    @typing.overload
    def set_insets(self, inset: winrt.system.Single, /) -> None: ...
    @typing.overload
    def set_insets(self, left: winrt.system.Single, top: winrt.system.Single, right: winrt.system.Single, bottom: winrt.system.Single, /) -> None: ...
    @_property
    def top_inset_scale(self) -> winrt.system.Single: ...
    @top_inset_scale.setter
    def top_inset_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def top_inset(self) -> winrt.system.Single: ...
    @top_inset.setter
    def top_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def source(self) -> typing.Optional[CompositionBrush]: ...
    @source.setter
    def source(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def right_inset_scale(self) -> winrt.system.Single: ...
    @right_inset_scale.setter
    def right_inset_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def right_inset(self) -> winrt.system.Single: ...
    @right_inset.setter
    def right_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def left_inset_scale(self) -> winrt.system.Single: ...
    @left_inset_scale.setter
    def left_inset_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def left_inset(self) -> winrt.system.Single: ...
    @left_inset.setter
    def left_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def is_center_hollow(self) -> bool: ...
    @is_center_hollow.setter
    def is_center_hollow(self, value: bool) -> None: ...
    @_property
    def bottom_inset_scale(self) -> winrt.system.Single: ...
    @bottom_inset_scale.setter
    def bottom_inset_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def bottom_inset(self) -> winrt.system.Single: ...
    @bottom_inset.setter
    def bottom_inset(self, value: winrt.system.Single) -> None: ...

@typing.final
class CompositionObject_Static(type):
    def start_animation_group_with_i_animation_object(cls, target: typing.Optional[IAnimationObject], animation: typing.Optional[ICompositionAnimationBase], /) -> None: ...
    def start_animation_with_i_animation_object(cls, target: typing.Optional[IAnimationObject], property_name: str, animation: typing.Optional[CompositionAnimation], /) -> None: ...

@typing.final
class CompositionObject(winrt.system.Object, metaclass=CompositionObject_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionObject: ...
    def close(self) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[AnimationPropertyInfo], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[CompositionAnimation], /) -> None: ...
    @typing.overload
    def start_animation(self, property_name: str, animation: typing.Optional[CompositionAnimation], animation_controller: typing.Optional[AnimationController], /) -> None: ...
    def start_animation_group(self, value: typing.Optional[ICompositionAnimationBase], /) -> None: ...
    def stop_animation(self, property_name: str, /) -> None: ...
    def stop_animation_group(self, value: typing.Optional[ICompositionAnimationBase], /) -> None: ...
    def try_get_animation_controller(self, property_name: str, /) -> typing.Optional[AnimationController]: ...
    @_property
    def compositor(self) -> typing.Optional[Compositor]: ...
    @_property
    def dispatcher(self) -> typing.Optional[winrt.windows.ui.core.CoreDispatcher]: ...
    @_property
    def properties(self) -> typing.Optional[CompositionPropertySet]: ...
    @_property
    def implicit_animations(self) -> typing.Optional[ImplicitAnimationCollection]: ...
    @implicit_animations.setter
    def implicit_animations(self, value: typing.Optional[ImplicitAnimationCollection]) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...

@typing.final
class CompositionPath(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionPath: ...
    def __new__(cls: typing.Type[CompositionPath], source: typing.Optional[winrt.windows.graphics.IGeometrySource2D]) -> CompositionPath:...

@typing.final
class CompositionPathGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionPathGeometry: ...
    @_property
    def path(self) -> typing.Optional[CompositionPath]: ...
    @path.setter
    def path(self, value: typing.Optional[CompositionPath]) -> None: ...

@typing.final
class CompositionProjectedShadow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionProjectedShadow: ...
    @_property
    def min_blur_radius(self) -> winrt.system.Single: ...
    @min_blur_radius.setter
    def min_blur_radius(self, value: winrt.system.Single) -> None: ...
    @_property
    def max_blur_radius(self) -> winrt.system.Single: ...
    @max_blur_radius.setter
    def max_blur_radius(self, value: winrt.system.Single) -> None: ...
    @_property
    def light_source(self) -> typing.Optional[CompositionLight]: ...
    @light_source.setter
    def light_source(self, value: typing.Optional[CompositionLight]) -> None: ...
    @_property
    def blur_radius_multiplier(self) -> winrt.system.Single: ...
    @blur_radius_multiplier.setter
    def blur_radius_multiplier(self, value: winrt.system.Single) -> None: ...
    @_property
    def casters(self) -> typing.Optional[CompositionProjectedShadowCasterCollection]: ...
    @_property
    def receivers(self) -> typing.Optional[CompositionProjectedShadowReceiverUnorderedCollection]: ...

@typing.final
class CompositionProjectedShadowCaster(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionProjectedShadowCaster: ...
    @_property
    def casting_visual(self) -> typing.Optional[Visual]: ...
    @casting_visual.setter
    def casting_visual(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def brush(self) -> typing.Optional[CompositionBrush]: ...
    @brush.setter
    def brush(self, value: typing.Optional[CompositionBrush]) -> None: ...

@typing.final
class CompositionProjectedShadowCasterCollection_Static(type):
    @_property
    def max_respected_casters(cls) -> winrt.system.Int32: ...

@typing.final
class CompositionProjectedShadowCasterCollection(winrt.system.Object, metaclass=CompositionProjectedShadowCasterCollection_Static):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[CompositionProjectedShadowCaster]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionProjectedShadowCasterCollection: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[CompositionProjectedShadowCaster]]: ...
    def insert_above(self, new_caster: typing.Optional[CompositionProjectedShadowCaster], reference: typing.Optional[CompositionProjectedShadowCaster], /) -> None: ...
    def insert_at_bottom(self, new_caster: typing.Optional[CompositionProjectedShadowCaster], /) -> None: ...
    def insert_at_top(self, new_caster: typing.Optional[CompositionProjectedShadowCaster], /) -> None: ...
    def insert_below(self, new_caster: typing.Optional[CompositionProjectedShadowCaster], reference: typing.Optional[CompositionProjectedShadowCaster], /) -> None: ...
    def remove(self, caster: typing.Optional[CompositionProjectedShadowCaster], /) -> None: ...
    def remove_all(self) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...

@typing.final
class CompositionProjectedShadowReceiver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionProjectedShadowReceiver: ...
    @_property
    def receiving_visual(self) -> typing.Optional[Visual]: ...
    @receiving_visual.setter
    def receiving_visual(self, value: typing.Optional[Visual]) -> None: ...

@typing.final
class CompositionProjectedShadowReceiverUnorderedCollection(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[CompositionProjectedShadowReceiver]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionProjectedShadowReceiverUnorderedCollection: ...
    def add(self, value: typing.Optional[CompositionProjectedShadowReceiver], /) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[CompositionProjectedShadowReceiver]]: ...
    def remove(self, value: typing.Optional[CompositionProjectedShadowReceiver], /) -> None: ...
    def remove_all(self) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...

@typing.final
class CompositionPropertySet(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionPropertySet: ...
    def insert_boolean(self, property_name: str, value: bool, /) -> None: ...
    def insert_color(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def insert_matrix3x2(self, property_name: str, value: winrt.windows.foundation.numerics.Matrix3x2, /) -> None: ...
    def insert_matrix4x4(self, property_name: str, value: winrt.windows.foundation.numerics.Matrix4x4, /) -> None: ...
    def insert_quaternion(self, property_name: str, value: winrt.windows.foundation.numerics.Quaternion, /) -> None: ...
    def insert_scalar(self, property_name: str, value: winrt.system.Single, /) -> None: ...
    def insert_vector2(self, property_name: str, value: winrt.windows.foundation.numerics.Vector2, /) -> None: ...
    def insert_vector3(self, property_name: str, value: winrt.windows.foundation.numerics.Vector3, /) -> None: ...
    def insert_vector4(self, property_name: str, value: winrt.windows.foundation.numerics.Vector4, /) -> None: ...
    def try_get_boolean(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, bool]: ...
    def try_get_color(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.ui.Color]: ...
    def try_get_matrix3x2(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Matrix3x2]: ...
    def try_get_matrix4x4(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Matrix4x4]: ...
    def try_get_quaternion(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Quaternion]: ...
    def try_get_scalar(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.system.Single]: ...
    def try_get_vector2(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Vector2]: ...
    def try_get_vector3(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Vector3]: ...
    def try_get_vector4(self, property_name: str, /) -> typing.Tuple[CompositionGetValueStatus, winrt.windows.foundation.numerics.Vector4]: ...

@typing.final
class CompositionRadialGradientBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionRadialGradientBrush: ...
    @_property
    def gradient_origin_offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @gradient_origin_offset.setter
    def gradient_origin_offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def ellipse_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @ellipse_radius.setter
    def ellipse_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def ellipse_center(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @ellipse_center.setter
    def ellipse_center(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionRectangleGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionRectangleGeometry: ...
    @_property
    def size(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @size.setter
    def size(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionRoundedRectangleGeometry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionRoundedRectangleGeometry: ...
    @_property
    def size(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @size.setter
    def size(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def corner_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @corner_radius.setter
    def corner_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionScopedBatch(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionScopedBatch: ...
    def end(self) -> None: ...
    def resume(self) -> None: ...
    def suspend(self) -> None: ...
    def add_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CompositionBatchCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_active(self) -> bool: ...
    @_property
    def is_ended(self) -> bool: ...

@typing.final
class CompositionShadow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionShadow: ...

@typing.final
class CompositionShape(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionShape: ...
    @_property
    def transform_matrix(self) -> winrt.windows.foundation.numerics.Matrix3x2: ...
    @transform_matrix.setter
    def transform_matrix(self, value: winrt.windows.foundation.numerics.Matrix3x2) -> None: ...
    @_property
    def scale(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @scale.setter
    def scale(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def center_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @center_point.setter
    def center_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class CompositionShapeCollection(winrt.system.Object, winrt._winrt.MutableSequence[CompositionShape]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[CompositionShape]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> CompositionShape: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[CompositionShape]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: CompositionShape) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[CompositionShape]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionShapeCollection: ...
    def append(self, value: typing.Optional[CompositionShape], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[CompositionShape]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[CompositionShape]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[CompositionShape], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[CompositionShape]]: ...
    def index_of(self, value: typing.Optional[CompositionShape], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[CompositionShape], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[CompositionShape], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[CompositionShape], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class CompositionSpriteShape(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionSpriteShape: ...
    @_property
    def stroke_thickness(self) -> winrt.system.Single: ...
    @stroke_thickness.setter
    def stroke_thickness(self, value: winrt.system.Single) -> None: ...
    @_property
    def stroke_start_cap(self) -> CompositionStrokeCap: ...
    @stroke_start_cap.setter
    def stroke_start_cap(self, value: CompositionStrokeCap) -> None: ...
    @_property
    def stroke_miter_limit(self) -> winrt.system.Single: ...
    @stroke_miter_limit.setter
    def stroke_miter_limit(self, value: winrt.system.Single) -> None: ...
    @_property
    def stroke_line_join(self) -> CompositionStrokeLineJoin: ...
    @stroke_line_join.setter
    def stroke_line_join(self, value: CompositionStrokeLineJoin) -> None: ...
    @_property
    def stroke_end_cap(self) -> CompositionStrokeCap: ...
    @stroke_end_cap.setter
    def stroke_end_cap(self, value: CompositionStrokeCap) -> None: ...
    @_property
    def stroke_dash_offset(self) -> winrt.system.Single: ...
    @stroke_dash_offset.setter
    def stroke_dash_offset(self, value: winrt.system.Single) -> None: ...
    @_property
    def stroke_dash_cap(self) -> CompositionStrokeCap: ...
    @stroke_dash_cap.setter
    def stroke_dash_cap(self, value: CompositionStrokeCap) -> None: ...
    @_property
    def stroke_brush(self) -> typing.Optional[CompositionBrush]: ...
    @stroke_brush.setter
    def stroke_brush(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def is_stroke_non_scaling(self) -> bool: ...
    @is_stroke_non_scaling.setter
    def is_stroke_non_scaling(self, value: bool) -> None: ...
    @_property
    def geometry(self) -> typing.Optional[CompositionGeometry]: ...
    @geometry.setter
    def geometry(self, value: typing.Optional[CompositionGeometry]) -> None: ...
    @_property
    def fill_brush(self) -> typing.Optional[CompositionBrush]: ...
    @fill_brush.setter
    def fill_brush(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def stroke_dash_array(self) -> typing.Optional[CompositionStrokeDashArray]: ...

@typing.final
class CompositionStrokeDashArray(winrt.system.Object, winrt._winrt.MutableSequence[winrt.system.Single]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[winrt.system.Single]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> winrt.system.Single: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.system.Single]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: winrt.system.Single) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.system.Single]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionStrokeDashArray: ...
    def append(self, value: winrt.system.Single, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.system.Single]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> winrt.system.Single: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.system.Single], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def index_of(self, value: winrt.system.Single, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: winrt.system.Single, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.system.Single], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: winrt.system.Single, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class CompositionSurfaceBrush(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionSurfaceBrush: ...
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Single: ...
    @vertical_alignment_ratio.setter
    def vertical_alignment_ratio(self, value: winrt.system.Single) -> None: ...
    @_property
    def surface(self) -> typing.Optional[ICompositionSurface]: ...
    @surface.setter
    def surface(self, value: typing.Optional[ICompositionSurface]) -> None: ...
    @_property
    def stretch(self) -> CompositionStretch: ...
    @stretch.setter
    def stretch(self, value: CompositionStretch) -> None: ...
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Single: ...
    @horizontal_alignment_ratio.setter
    def horizontal_alignment_ratio(self, value: winrt.system.Single) -> None: ...
    @_property
    def bitmap_interpolation_mode(self) -> CompositionBitmapInterpolationMode: ...
    @bitmap_interpolation_mode.setter
    def bitmap_interpolation_mode(self, value: CompositionBitmapInterpolationMode) -> None: ...
    @_property
    def transform_matrix(self) -> winrt.windows.foundation.numerics.Matrix3x2: ...
    @transform_matrix.setter
    def transform_matrix(self, value: winrt.windows.foundation.numerics.Matrix3x2) -> None: ...
    @_property
    def scale(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @scale.setter
    def scale(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def center_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @center_point.setter
    def center_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def anchor_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @anchor_point.setter
    def anchor_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def snap_to_pixels(self) -> bool: ...
    @snap_to_pixels.setter
    def snap_to_pixels(self, value: bool) -> None: ...

@typing.final
class CompositionTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionTarget: ...
    @_property
    def root(self) -> typing.Optional[Visual]: ...
    @root.setter
    def root(self, value: typing.Optional[Visual]) -> None: ...

@typing.final
class CompositionTexture(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionTexture: ...
    @_property
    def source_rect(self) -> winrt.windows.graphics.RectInt32: ...
    @source_rect.setter
    def source_rect(self, value: winrt.windows.graphics.RectInt32) -> None: ...
    @_property
    def color_space(self) -> winrt.windows.graphics.directx.DirectXColorSpace: ...
    @color_space.setter
    def color_space(self, value: winrt.windows.graphics.directx.DirectXColorSpace) -> None: ...
    @_property
    def alpha_mode(self) -> winrt.windows.graphics.directx.DirectXAlphaMode: ...
    @alpha_mode.setter
    def alpha_mode(self, value: winrt.windows.graphics.directx.DirectXAlphaMode) -> None: ...

@typing.final
class CompositionTransform(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionTransform: ...

@typing.final
class CompositionViewBox(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionViewBox: ...
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Single: ...
    @vertical_alignment_ratio.setter
    def vertical_alignment_ratio(self, value: winrt.system.Single) -> None: ...
    @_property
    def stretch(self) -> CompositionStretch: ...
    @stretch.setter
    def stretch(self, value: CompositionStretch) -> None: ...
    @_property
    def size(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @size.setter
    def size(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Single: ...
    @horizontal_alignment_ratio.setter
    def horizontal_alignment_ratio(self, value: winrt.system.Single) -> None: ...

@typing.final
class CompositionVirtualDrawingSurface(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionVirtualDrawingSurface: ...
    def trim(self, rects: winrt.system.Array[winrt.windows.graphics.RectInt32], /) -> None: ...

@typing.final
class CompositionVisualSurface(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositionVisualSurface: ...
    @_property
    def source_visual(self) -> typing.Optional[Visual]: ...
    @source_visual.setter
    def source_visual(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def source_size(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @source_size.setter
    def source_size(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def source_offset(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @source_offset.setter
    def source_offset(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...

@typing.final
class Compositor_Static(type):
    @_property
    def max_global_playback_rate(cls) -> winrt.system.Single: ...
    @_property
    def min_global_playback_rate(cls) -> winrt.system.Single: ...

@typing.final
class Compositor(winrt.system.Object, metaclass=Compositor_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Compositor: ...
    def __new__(cls: typing.Type[Compositor]) -> Compositor:...
    def close(self) -> None: ...
    def create_ambient_light(self) -> typing.Optional[AmbientLight]: ...
    def create_animation_controller(self) -> typing.Optional[AnimationController]: ...
    def create_animation_group(self) -> typing.Optional[CompositionAnimationGroup]: ...
    def create_animation_property_info(self) -> typing.Optional[AnimationPropertyInfo]: ...
    def create_backdrop_brush(self) -> typing.Optional[CompositionBackdropBrush]: ...
    def create_boolean_key_frame_animation(self) -> typing.Optional[BooleanKeyFrameAnimation]: ...
    def create_bounce_scalar_animation(self) -> typing.Optional[BounceScalarNaturalMotionAnimation]: ...
    def create_bounce_vector2_animation(self) -> typing.Optional[BounceVector2NaturalMotionAnimation]: ...
    def create_bounce_vector3_animation(self) -> typing.Optional[BounceVector3NaturalMotionAnimation]: ...
    @typing.overload
    def create_color_brush(self) -> typing.Optional[CompositionColorBrush]: ...
    @typing.overload
    def create_color_brush(self, color: winrt.windows.ui.Color, /) -> typing.Optional[CompositionColorBrush]: ...
    @typing.overload
    def create_color_gradient_stop(self) -> typing.Optional[CompositionColorGradientStop]: ...
    @typing.overload
    def create_color_gradient_stop(self, offset: winrt.system.Single, color: winrt.windows.ui.Color, /) -> typing.Optional[CompositionColorGradientStop]: ...
    def create_color_key_frame_animation(self) -> typing.Optional[ColorKeyFrameAnimation]: ...
    def create_container_shape(self) -> typing.Optional[CompositionContainerShape]: ...
    def create_container_visual(self) -> typing.Optional[ContainerVisual]: ...
    def create_cubic_bezier_easing_function(self, control_point1: winrt.windows.foundation.numerics.Vector2, control_point2: winrt.windows.foundation.numerics.Vector2, /) -> typing.Optional[CubicBezierEasingFunction]: ...
    def create_distant_light(self) -> typing.Optional[DistantLight]: ...
    def create_drop_shadow(self) -> typing.Optional[DropShadow]: ...
    @typing.overload
    def create_effect_factory(self, graphics_effect: typing.Optional[winrt.windows.graphics.effects.IGraphicsEffect], /) -> typing.Optional[CompositionEffectFactory]: ...
    @typing.overload
    def create_effect_factory(self, graphics_effect: typing.Optional[winrt.windows.graphics.effects.IGraphicsEffect], animatable_properties: typing.Iterable[str], /) -> typing.Optional[CompositionEffectFactory]: ...
    def create_ellipse_geometry(self) -> typing.Optional[CompositionEllipseGeometry]: ...
    @typing.overload
    def create_expression_animation(self) -> typing.Optional[ExpressionAnimation]: ...
    @typing.overload
    def create_expression_animation(self, expression: str, /) -> typing.Optional[ExpressionAnimation]: ...
    @typing.overload
    def create_geometric_clip(self) -> typing.Optional[CompositionGeometricClip]: ...
    @typing.overload
    def create_geometric_clip(self, geometry: typing.Optional[CompositionGeometry], /) -> typing.Optional[CompositionGeometricClip]: ...
    def create_host_backdrop_brush(self) -> typing.Optional[CompositionBackdropBrush]: ...
    def create_implicit_animation_collection(self) -> typing.Optional[ImplicitAnimationCollection]: ...
    @typing.overload
    def create_inset_clip(self) -> typing.Optional[InsetClip]: ...
    @typing.overload
    def create_inset_clip(self, left_inset: winrt.system.Single, top_inset: winrt.system.Single, right_inset: winrt.system.Single, bottom_inset: winrt.system.Single, /) -> typing.Optional[InsetClip]: ...
    def create_layer_visual(self) -> typing.Optional[LayerVisual]: ...
    def create_line_geometry(self) -> typing.Optional[CompositionLineGeometry]: ...
    def create_linear_easing_function(self) -> typing.Optional[LinearEasingFunction]: ...
    def create_linear_gradient_brush(self) -> typing.Optional[CompositionLinearGradientBrush]: ...
    def create_mask_brush(self) -> typing.Optional[CompositionMaskBrush]: ...
    def create_nine_grid_brush(self) -> typing.Optional[CompositionNineGridBrush]: ...
    @typing.overload
    def create_path_geometry(self) -> typing.Optional[CompositionPathGeometry]: ...
    @typing.overload
    def create_path_geometry(self, path: typing.Optional[CompositionPath], /) -> typing.Optional[CompositionPathGeometry]: ...
    def create_path_key_frame_animation(self) -> typing.Optional[PathKeyFrameAnimation]: ...
    def create_point_light(self) -> typing.Optional[PointLight]: ...
    def create_projected_shadow(self) -> typing.Optional[CompositionProjectedShadow]: ...
    def create_projected_shadow_caster(self) -> typing.Optional[CompositionProjectedShadowCaster]: ...
    def create_projected_shadow_receiver(self) -> typing.Optional[CompositionProjectedShadowReceiver]: ...
    def create_property_set(self) -> typing.Optional[CompositionPropertySet]: ...
    def create_quaternion_key_frame_animation(self) -> typing.Optional[QuaternionKeyFrameAnimation]: ...
    def create_radial_gradient_brush(self) -> typing.Optional[CompositionRadialGradientBrush]: ...
    @typing.overload
    def create_rectangle_clip(self) -> typing.Optional[RectangleClip]: ...
    @typing.overload
    def create_rectangle_clip(self, left: winrt.system.Single, top: winrt.system.Single, right: winrt.system.Single, bottom: winrt.system.Single, /) -> typing.Optional[RectangleClip]: ...
    @typing.overload
    def create_rectangle_clip(self, left: winrt.system.Single, top: winrt.system.Single, right: winrt.system.Single, bottom: winrt.system.Single, top_left_radius: winrt.windows.foundation.numerics.Vector2, top_right_radius: winrt.windows.foundation.numerics.Vector2, bottom_right_radius: winrt.windows.foundation.numerics.Vector2, bottom_left_radius: winrt.windows.foundation.numerics.Vector2, /) -> typing.Optional[RectangleClip]: ...
    def create_rectangle_geometry(self) -> typing.Optional[CompositionRectangleGeometry]: ...
    @typing.overload
    def create_redirect_visual(self) -> typing.Optional[RedirectVisual]: ...
    @typing.overload
    def create_redirect_visual(self, source: typing.Optional[Visual], /) -> typing.Optional[RedirectVisual]: ...
    def create_rounded_rectangle_geometry(self) -> typing.Optional[CompositionRoundedRectangleGeometry]: ...
    def create_scalar_key_frame_animation(self) -> typing.Optional[ScalarKeyFrameAnimation]: ...
    def create_scoped_batch(self, batch_type: CompositionBatchTypes, /) -> typing.Optional[CompositionScopedBatch]: ...
    def create_shape_visual(self) -> typing.Optional[ShapeVisual]: ...
    def create_spot_light(self) -> typing.Optional[SpotLight]: ...
    def create_spring_scalar_animation(self) -> typing.Optional[SpringScalarNaturalMotionAnimation]: ...
    def create_spring_vector2_animation(self) -> typing.Optional[SpringVector2NaturalMotionAnimation]: ...
    def create_spring_vector3_animation(self) -> typing.Optional[SpringVector3NaturalMotionAnimation]: ...
    @typing.overload
    def create_sprite_shape(self) -> typing.Optional[CompositionSpriteShape]: ...
    @typing.overload
    def create_sprite_shape(self, geometry: typing.Optional[CompositionGeometry], /) -> typing.Optional[CompositionSpriteShape]: ...
    def create_sprite_visual(self) -> typing.Optional[SpriteVisual]: ...
    @typing.overload
    def create_step_easing_function(self) -> typing.Optional[StepEasingFunction]: ...
    @typing.overload
    def create_step_easing_function(self, step_count: winrt.system.Int32, /) -> typing.Optional[StepEasingFunction]: ...
    @typing.overload
    def create_surface_brush(self) -> typing.Optional[CompositionSurfaceBrush]: ...
    @typing.overload
    def create_surface_brush(self, surface: typing.Optional[ICompositionSurface], /) -> typing.Optional[CompositionSurfaceBrush]: ...
    def create_target_for_current_view(self) -> typing.Optional[CompositionTarget]: ...
    def create_vector2_key_frame_animation(self) -> typing.Optional[Vector2KeyFrameAnimation]: ...
    def create_vector3_key_frame_animation(self) -> typing.Optional[Vector3KeyFrameAnimation]: ...
    def create_vector4_key_frame_animation(self) -> typing.Optional[Vector4KeyFrameAnimation]: ...
    def create_view_box(self) -> typing.Optional[CompositionViewBox]: ...
    def create_visual_surface(self) -> typing.Optional[CompositionVisualSurface]: ...
    def get_commit_batch(self, batch_type: CompositionBatchTypes, /) -> typing.Optional[CompositionCommitBatch]: ...
    def request_commit_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def try_create_blurred_wallpaper_backdrop_brush(self) -> typing.Optional[CompositionBackdropBrush]: ...
    @_property
    def global_playback_rate(self) -> winrt.system.Single: ...
    @global_playback_rate.setter
    def global_playback_rate(self, value: winrt.system.Single) -> None: ...
    @_property
    def comment(self) -> str: ...
    @comment.setter
    def comment(self, value: str) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...

@typing.final
class ContainerVisual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContainerVisual: ...
    @_property
    def children(self) -> typing.Optional[VisualCollection]: ...

@typing.final
class CubicBezierEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CubicBezierEasingFunction: ...
    @_property
    def control_point1(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @_property
    def control_point2(self) -> winrt.windows.foundation.numerics.Vector2: ...

@typing.final
class DelegatedInkTrailVisual_Static(type):
    def create(cls, compositor: typing.Optional[Compositor], /) -> typing.Optional[DelegatedInkTrailVisual]: ...
    def create_for_swap_chain(cls, compositor: typing.Optional[Compositor], swap_chain: typing.Optional[ICompositionSurface], /) -> typing.Optional[DelegatedInkTrailVisual]: ...

@typing.final
class DelegatedInkTrailVisual(winrt.system.Object, metaclass=DelegatedInkTrailVisual_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DelegatedInkTrailVisual: ...
    def add_trail_points(self, ink_points: winrt.system.Array[InkTrailPoint], /) -> winrt.system.UInt32: ...
    def add_trail_points_with_prediction(self, ink_points: winrt.system.Array[InkTrailPoint], predicted_ink_points: winrt.system.Array[InkTrailPoint], /) -> winrt.system.UInt32: ...
    def remove_trail_points(self, generation_id: winrt.system.UInt32, /) -> None: ...
    def start_new_trail(self, color: winrt.windows.ui.Color, /) -> None: ...

@typing.final
class DistantLight(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DistantLight: ...
    @_property
    def direction(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @direction.setter
    def direction(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def coordinate_space(self) -> typing.Optional[Visual]: ...
    @coordinate_space.setter
    def coordinate_space(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def intensity(self) -> winrt.system.Single: ...
    @intensity.setter
    def intensity(self, value: winrt.system.Single) -> None: ...

@typing.final
class DropShadow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DropShadow: ...
    @_property
    def opacity(self) -> winrt.system.Single: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def mask(self) -> typing.Optional[CompositionBrush]: ...
    @mask.setter
    def mask(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def blur_radius(self) -> winrt.system.Single: ...
    @blur_radius.setter
    def blur_radius(self, value: winrt.system.Single) -> None: ...
    @_property
    def source_policy(self) -> CompositionDropShadowSourcePolicy: ...
    @source_policy.setter
    def source_policy(self, value: CompositionDropShadowSourcePolicy) -> None: ...

@typing.final
class ElasticEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElasticEasingFunction: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...
    @_property
    def oscillations(self) -> winrt.system.Int32: ...
    @_property
    def springiness(self) -> winrt.system.Single: ...

@typing.final
class ExponentialEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExponentialEasingFunction: ...
    @_property
    def exponent(self) -> winrt.system.Single: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...

@typing.final
class ExpressionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExpressionAnimation: ...
    @_property
    def expression(self) -> str: ...
    @expression.setter
    def expression(self, value: str) -> None: ...

@typing.final
class ImplicitAnimationCollection(winrt.system.Object, winrt._winrt.MutableMapping[str, ICompositionAnimationBase]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: ICompositionAnimationBase) -> None: ...
    def __getitem__(self, key: str) -> ICompositionAnimationBase: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImplicitAnimationCollection: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, ICompositionAnimationBase]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, ICompositionAnimationBase]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: typing.Optional[ICompositionAnimationBase], /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[ICompositionAnimationBase]: ...
    def remove(self, key: str, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class InitialValueExpressionCollection(winrt.system.Object, winrt._winrt.MutableMapping[str, str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InitialValueExpressionCollection: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class InsetClip(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InsetClip: ...
    @_property
    def top_inset(self) -> winrt.system.Single: ...
    @top_inset.setter
    def top_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def right_inset(self) -> winrt.system.Single: ...
    @right_inset.setter
    def right_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def left_inset(self) -> winrt.system.Single: ...
    @left_inset.setter
    def left_inset(self, value: winrt.system.Single) -> None: ...
    @_property
    def bottom_inset(self) -> winrt.system.Single: ...
    @bottom_inset.setter
    def bottom_inset(self, value: winrt.system.Single) -> None: ...

@typing.final
class KeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyFrameAnimation: ...
    @typing.overload
    def insert_expression_key_frame(self, normalized_progress_key: winrt.system.Single, value: str, /) -> None: ...
    @typing.overload
    def insert_expression_key_frame(self, normalized_progress_key: winrt.system.Single, value: str, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...
    @_property
    def stop_behavior(self) -> AnimationStopBehavior: ...
    @stop_behavior.setter
    def stop_behavior(self, value: AnimationStopBehavior) -> None: ...
    @_property
    def iteration_count(self) -> winrt.system.Int32: ...
    @iteration_count.setter
    def iteration_count(self, value: winrt.system.Int32) -> None: ...
    @_property
    def iteration_behavior(self) -> AnimationIterationBehavior: ...
    @iteration_behavior.setter
    def iteration_behavior(self, value: AnimationIterationBehavior) -> None: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...
    @_property
    def delay_time(self) -> datetime.timedelta: ...
    @delay_time.setter
    def delay_time(self, value: datetime.timedelta) -> None: ...
    @_property
    def key_frame_count(self) -> winrt.system.Int32: ...
    @_property
    def direction(self) -> AnimationDirection: ...
    @direction.setter
    def direction(self, value: AnimationDirection) -> None: ...
    @_property
    def delay_behavior(self) -> AnimationDelayBehavior: ...
    @delay_behavior.setter
    def delay_behavior(self, value: AnimationDelayBehavior) -> None: ...

@typing.final
class LayerVisual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LayerVisual: ...
    @_property
    def effect(self) -> typing.Optional[CompositionEffectBrush]: ...
    @effect.setter
    def effect(self, value: typing.Optional[CompositionEffectBrush]) -> None: ...
    @_property
    def shadow(self) -> typing.Optional[CompositionShadow]: ...
    @shadow.setter
    def shadow(self, value: typing.Optional[CompositionShadow]) -> None: ...

@typing.final
class LinearEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinearEasingFunction: ...

@typing.final
class NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NaturalMotionAnimation: ...
    @_property
    def stop_behavior(self) -> AnimationStopBehavior: ...
    @stop_behavior.setter
    def stop_behavior(self, value: AnimationStopBehavior) -> None: ...
    @_property
    def delay_time(self) -> datetime.timedelta: ...
    @delay_time.setter
    def delay_time(self, value: datetime.timedelta) -> None: ...
    @_property
    def delay_behavior(self) -> AnimationDelayBehavior: ...
    @delay_behavior.setter
    def delay_behavior(self, value: AnimationDelayBehavior) -> None: ...

@typing.final
class PathKeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PathKeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, path: typing.Optional[CompositionPath], /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, path: typing.Optional[CompositionPath], easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class PointLight(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointLight: ...
    @_property
    def quadratic_attenuation(self) -> winrt.system.Single: ...
    @quadratic_attenuation.setter
    def quadratic_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def linear_attenuation(self) -> winrt.system.Single: ...
    @linear_attenuation.setter
    def linear_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def coordinate_space(self) -> typing.Optional[Visual]: ...
    @coordinate_space.setter
    def coordinate_space(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def constant_attenuation(self) -> winrt.system.Single: ...
    @constant_attenuation.setter
    def constant_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def intensity(self) -> winrt.system.Single: ...
    @intensity.setter
    def intensity(self, value: winrt.system.Single) -> None: ...
    @_property
    def min_attenuation_cutoff(self) -> winrt.system.Single: ...
    @min_attenuation_cutoff.setter
    def min_attenuation_cutoff(self, value: winrt.system.Single) -> None: ...
    @_property
    def max_attenuation_cutoff(self) -> winrt.system.Single: ...
    @max_attenuation_cutoff.setter
    def max_attenuation_cutoff(self, value: winrt.system.Single) -> None: ...

@typing.final
class PowerEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PowerEasingFunction: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...
    @_property
    def power(self) -> winrt.system.Single: ...

@typing.final
class QuaternionKeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> QuaternionKeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Quaternion, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Quaternion, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class RectangleClip(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RectangleClip: ...
    @_property
    def top_right_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @top_right_radius.setter
    def top_right_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def top_left_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @top_left_radius.setter
    def top_left_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def top(self) -> winrt.system.Single: ...
    @top.setter
    def top(self, value: winrt.system.Single) -> None: ...
    @_property
    def right(self) -> winrt.system.Single: ...
    @right.setter
    def right(self, value: winrt.system.Single) -> None: ...
    @_property
    def left(self) -> winrt.system.Single: ...
    @left.setter
    def left(self, value: winrt.system.Single) -> None: ...
    @_property
    def bottom_right_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @bottom_right_radius.setter
    def bottom_right_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def bottom_left_radius(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @bottom_left_radius.setter
    def bottom_left_radius(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def bottom(self) -> winrt.system.Single: ...
    @bottom.setter
    def bottom(self, value: winrt.system.Single) -> None: ...

@typing.final
class RedirectVisual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RedirectVisual: ...
    @_property
    def source(self) -> typing.Optional[Visual]: ...
    @source.setter
    def source(self, value: typing.Optional[Visual]) -> None: ...

@typing.final
class RenderingDeviceReplacedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RenderingDeviceReplacedEventArgs: ...
    @_property
    def graphics_device(self) -> typing.Optional[CompositionGraphicsDevice]: ...

@typing.final
class ScalarKeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScalarKeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.system.Single, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.system.Single, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class ScalarNaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScalarNaturalMotionAnimation: ...
    @_property
    def initial_velocity(self) -> winrt.system.Single: ...
    @initial_velocity.setter
    def initial_velocity(self, value: winrt.system.Single) -> None: ...
    @_property
    def initial_value(self) -> typing.Optional[typing.Optional[winrt.system.Single]]: ...
    @initial_value.setter
    def initial_value(self, value: typing.Optional[typing.Optional[winrt.system.Single]]) -> None: ...
    @_property
    def final_value(self) -> typing.Optional[typing.Optional[winrt.system.Single]]: ...
    @final_value.setter
    def final_value(self, value: typing.Optional[typing.Optional[winrt.system.Single]]) -> None: ...

@typing.final
class ShapeVisual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShapeVisual: ...
    @_property
    def view_box(self) -> typing.Optional[CompositionViewBox]: ...
    @view_box.setter
    def view_box(self, value: typing.Optional[CompositionViewBox]) -> None: ...
    @_property
    def shapes(self) -> typing.Optional[CompositionShapeCollection]: ...

@typing.final
class SineEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SineEasingFunction: ...
    @_property
    def mode(self) -> CompositionEasingFunctionMode: ...

@typing.final
class SpotLight(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpotLight: ...
    @_property
    def quadratic_attenuation(self) -> winrt.system.Single: ...
    @quadratic_attenuation.setter
    def quadratic_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def outer_cone_color(self) -> winrt.windows.ui.Color: ...
    @outer_cone_color.setter
    def outer_cone_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def outer_cone_angle_in_degrees(self) -> winrt.system.Single: ...
    @outer_cone_angle_in_degrees.setter
    def outer_cone_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def outer_cone_angle(self) -> winrt.system.Single: ...
    @outer_cone_angle.setter
    def outer_cone_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def linear_attenuation(self) -> winrt.system.Single: ...
    @linear_attenuation.setter
    def linear_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def inner_cone_color(self) -> winrt.windows.ui.Color: ...
    @inner_cone_color.setter
    def inner_cone_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def inner_cone_angle_in_degrees(self) -> winrt.system.Single: ...
    @inner_cone_angle_in_degrees.setter
    def inner_cone_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def inner_cone_angle(self) -> winrt.system.Single: ...
    @inner_cone_angle.setter
    def inner_cone_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def direction(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @direction.setter
    def direction(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def coordinate_space(self) -> typing.Optional[Visual]: ...
    @coordinate_space.setter
    def coordinate_space(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def constant_attenuation(self) -> winrt.system.Single: ...
    @constant_attenuation.setter
    def constant_attenuation(self, value: winrt.system.Single) -> None: ...
    @_property
    def outer_cone_intensity(self) -> winrt.system.Single: ...
    @outer_cone_intensity.setter
    def outer_cone_intensity(self, value: winrt.system.Single) -> None: ...
    @_property
    def inner_cone_intensity(self) -> winrt.system.Single: ...
    @inner_cone_intensity.setter
    def inner_cone_intensity(self, value: winrt.system.Single) -> None: ...
    @_property
    def min_attenuation_cutoff(self) -> winrt.system.Single: ...
    @min_attenuation_cutoff.setter
    def min_attenuation_cutoff(self, value: winrt.system.Single) -> None: ...
    @_property
    def max_attenuation_cutoff(self) -> winrt.system.Single: ...
    @max_attenuation_cutoff.setter
    def max_attenuation_cutoff(self, value: winrt.system.Single) -> None: ...

@typing.final
class SpringScalarNaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpringScalarNaturalMotionAnimation: ...
    @_property
    def period(self) -> datetime.timedelta: ...
    @period.setter
    def period(self, value: datetime.timedelta) -> None: ...
    @_property
    def damping_ratio(self) -> winrt.system.Single: ...
    @damping_ratio.setter
    def damping_ratio(self, value: winrt.system.Single) -> None: ...

@typing.final
class SpringVector2NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpringVector2NaturalMotionAnimation: ...
    @_property
    def period(self) -> datetime.timedelta: ...
    @period.setter
    def period(self, value: datetime.timedelta) -> None: ...
    @_property
    def damping_ratio(self) -> winrt.system.Single: ...
    @damping_ratio.setter
    def damping_ratio(self, value: winrt.system.Single) -> None: ...

@typing.final
class SpringVector3NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpringVector3NaturalMotionAnimation: ...
    @_property
    def period(self) -> datetime.timedelta: ...
    @period.setter
    def period(self, value: datetime.timedelta) -> None: ...
    @_property
    def damping_ratio(self) -> winrt.system.Single: ...
    @damping_ratio.setter
    def damping_ratio(self, value: winrt.system.Single) -> None: ...

@typing.final
class SpriteVisual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpriteVisual: ...
    @_property
    def brush(self) -> typing.Optional[CompositionBrush]: ...
    @brush.setter
    def brush(self, value: typing.Optional[CompositionBrush]) -> None: ...
    @_property
    def shadow(self) -> typing.Optional[CompositionShadow]: ...
    @shadow.setter
    def shadow(self, value: typing.Optional[CompositionShadow]) -> None: ...

@typing.final
class StepEasingFunction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StepEasingFunction: ...
    @_property
    def step_count(self) -> winrt.system.Int32: ...
    @step_count.setter
    def step_count(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_initial_step_single_frame(self) -> bool: ...
    @is_initial_step_single_frame.setter
    def is_initial_step_single_frame(self, value: bool) -> None: ...
    @_property
    def is_final_step_single_frame(self) -> bool: ...
    @is_final_step_single_frame.setter
    def is_final_step_single_frame(self, value: bool) -> None: ...
    @_property
    def initial_step(self) -> winrt.system.Int32: ...
    @initial_step.setter
    def initial_step(self, value: winrt.system.Int32) -> None: ...
    @_property
    def final_step(self) -> winrt.system.Int32: ...
    @final_step.setter
    def final_step(self, value: winrt.system.Int32) -> None: ...

@typing.final
class Vector2KeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector2KeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector2, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector2, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class Vector2NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector2NaturalMotionAnimation: ...
    @_property
    def initial_velocity(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @initial_velocity.setter
    def initial_velocity(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def initial_value(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector2]]: ...
    @initial_value.setter
    def initial_value(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector2]]) -> None: ...
    @_property
    def final_value(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector2]]: ...
    @final_value.setter
    def final_value(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector2]]) -> None: ...

@typing.final
class Vector3KeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector3KeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector3, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector3, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class Vector3NaturalMotionAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector3NaturalMotionAnimation: ...
    @_property
    def initial_velocity(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @initial_velocity.setter
    def initial_velocity(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def initial_value(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector3]]: ...
    @initial_value.setter
    def initial_value(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector3]]) -> None: ...
    @_property
    def final_value(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector3]]: ...
    @final_value.setter
    def final_value(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.numerics.Vector3]]) -> None: ...

@typing.final
class Vector4KeyFrameAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector4KeyFrameAnimation: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector4, /) -> None: ...
    @typing.overload
    def insert_key_frame(self, normalized_progress_key: winrt.system.Single, value: winrt.windows.foundation.numerics.Vector4, easing_function: typing.Optional[CompositionEasingFunction], /) -> None: ...

@typing.final
class Visual(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Visual: ...
    @_property
    def transform_matrix(self) -> winrt.windows.foundation.numerics.Matrix4x4: ...
    @transform_matrix.setter
    def transform_matrix(self, value: winrt.windows.foundation.numerics.Matrix4x4) -> None: ...
    @_property
    def size(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @size.setter
    def size(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def scale(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @scale.setter
    def scale(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def rotation_axis(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @rotation_axis.setter
    def rotation_axis(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def rotation_angle_in_degrees(self) -> winrt.system.Single: ...
    @rotation_angle_in_degrees.setter
    def rotation_angle_in_degrees(self, value: winrt.system.Single) -> None: ...
    @_property
    def rotation_angle(self) -> winrt.system.Single: ...
    @rotation_angle.setter
    def rotation_angle(self, value: winrt.system.Single) -> None: ...
    @_property
    def orientation(self) -> winrt.windows.foundation.numerics.Quaternion: ...
    @orientation.setter
    def orientation(self, value: winrt.windows.foundation.numerics.Quaternion) -> None: ...
    @_property
    def opacity(self) -> winrt.system.Single: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Single) -> None: ...
    @_property
    def offset(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @offset.setter
    def offset(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    @_property
    def composite_mode(self) -> CompositionCompositeMode: ...
    @composite_mode.setter
    def composite_mode(self, value: CompositionCompositeMode) -> None: ...
    @_property
    def clip(self) -> typing.Optional[CompositionClip]: ...
    @clip.setter
    def clip(self, value: typing.Optional[CompositionClip]) -> None: ...
    @_property
    def center_point(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @center_point.setter
    def center_point(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def border_mode(self) -> CompositionBorderMode: ...
    @border_mode.setter
    def border_mode(self, value: CompositionBorderMode) -> None: ...
    @_property
    def backface_visibility(self) -> CompositionBackfaceVisibility: ...
    @backface_visibility.setter
    def backface_visibility(self, value: CompositionBackfaceVisibility) -> None: ...
    @_property
    def anchor_point(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @anchor_point.setter
    def anchor_point(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def parent(self) -> typing.Optional[ContainerVisual]: ...
    @_property
    def relative_size_adjustment(self) -> winrt.windows.foundation.numerics.Vector2: ...
    @relative_size_adjustment.setter
    def relative_size_adjustment(self, value: winrt.windows.foundation.numerics.Vector2) -> None: ...
    @_property
    def relative_offset_adjustment(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @relative_offset_adjustment.setter
    def relative_offset_adjustment(self, value: winrt.windows.foundation.numerics.Vector3) -> None: ...
    @_property
    def parent_for_transform(self) -> typing.Optional[Visual]: ...
    @parent_for_transform.setter
    def parent_for_transform(self, value: typing.Optional[Visual]) -> None: ...
    @_property
    def is_hit_test_visible(self) -> bool: ...
    @is_hit_test_visible.setter
    def is_hit_test_visible(self, value: bool) -> None: ...
    @_property
    def is_pixel_snapping_enabled(self) -> bool: ...
    @is_pixel_snapping_enabled.setter
    def is_pixel_snapping_enabled(self, value: bool) -> None: ...

@typing.final
class VisualCollection(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[Visual]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualCollection: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[Visual]]: ...
    def insert_above(self, new_child: typing.Optional[Visual], sibling: typing.Optional[Visual], /) -> None: ...
    def insert_at_bottom(self, new_child: typing.Optional[Visual], /) -> None: ...
    def insert_at_top(self, new_child: typing.Optional[Visual], /) -> None: ...
    def insert_below(self, new_child: typing.Optional[Visual], sibling: typing.Optional[Visual], /) -> None: ...
    def remove(self, child: typing.Optional[Visual], /) -> None: ...
    def remove_all(self) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...

@typing.final
class VisualUnorderedCollection(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[Visual]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualUnorderedCollection: ...
    def add(self, new_visual: typing.Optional[Visual], /) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[Visual]]: ...
    def remove(self, visual: typing.Optional[Visual], /) -> None: ...
    def remove_all(self) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...

@typing.final
class IAnimationObject(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimationObject: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[AnimationPropertyInfo], /) -> None: ...

@typing.final
class ICompositionAnimationBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICompositionAnimationBase: ...

@typing.final
class ICompositionSupportsSystemBackdrop(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICompositionSupportsSystemBackdrop: ...
    @_property
    def system_backdrop(self) -> typing.Optional[CompositionBrush]: ...
    @system_backdrop.setter
    def system_backdrop(self, value: typing.Optional[CompositionBrush]) -> None: ...

@typing.final
class ICompositionSurface(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICompositionSurface: ...

@typing.final
class ICompositionSurfaceFacade(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICompositionSurfaceFacade: ...
    def get_real_surface(self) -> typing.Optional[ICompositionSurface]: ...

@typing.final
class IVisualElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVisualElement: ...

@typing.final
class IVisualElement2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVisualElement2: ...
    def get_visual_internal(self) -> typing.Optional[Visual]: ...

