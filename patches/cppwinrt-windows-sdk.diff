diff --git a/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h b/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
index f785012b8..fe0b1208a 100644
--- a/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
+++ b/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
@@ -7583,20 +7583,48 @@ namespace winrt::impl
                 {
                     if (is_weak_ref(count_or_pointer))
                     {
-                        return decode_weak_ref(count_or_pointer)->increment_strong();
+                        auto target = decode_weak_ref(count_or_pointer)->increment_strong();
+
+                        if constexpr (has_toggle_reference::value)
+                        {
+                            if (target == 2)
+                            {
+                                D::toggle_reference(static_cast<D*>(this), false);
+                            }
+                        }
+
+                        return target;
                     }
 
                     uintptr_t const target = count_or_pointer + 1;
 
                     if (m_references.compare_exchange_weak(count_or_pointer, target, std::memory_order_relaxed))
                     {
+                        if constexpr (has_toggle_reference::value)
+                        {
+                            if (target == 2)
+                            {
+                                D::toggle_reference(static_cast<D*>(this), false);
+                            }
+                        }
+
                         return static_cast<uint32_t>(target);
                     }
                 }
             }
             else
             {
-                return 1 + m_references.fetch_add(1, std::memory_order_relaxed);
+                auto target = 1 + m_references.fetch_add(1, std::memory_order_relaxed);
+
+                if constexpr (has_toggle_reference::value)
+                {
+                    if (target == 2)
+                    {
+                        D::toggle_reference(static_cast<D*>(this), false);
+                    }
+                }
+
+                return target;
             }
         }
 
@@ -7604,6 +7632,14 @@ namespace winrt::impl
         {
             uint32_t const target = subtract_reference();
 
+            if constexpr (has_toggle_reference::value)
+            {
+                if (target == 1)
+                {
+                    D::toggle_reference(static_cast<D*>(this), true);
+                }
+            }
+
             if (target == 0)
             {
                 if constexpr (has_final_release::value)
@@ -7770,6 +7806,18 @@ namespace winrt::impl
             static constexpr bool value = get_value<D>(0);
         };
 
+        class has_toggle_reference
+        {
+            template <typename U, typename = decltype(std::declval<U>().toggle_reference(0, false))>
+            static constexpr bool get_value(int) { return true; }
+            template <typename>
+            static constexpr bool get_value(...) { return false; }
+
+        public:
+
+            static constexpr bool value = get_value<D>(0);
+        };
+
         using is_agile = std::negation<std::disjunction<std::is_same<non_agile, I>...>>;
         using is_inspectable = std::disjunction<std::is_base_of<Windows::Foundation::IInspectable, I>...>;
         using is_weak_ref_source = std::negation<std::disjunction<std::is_same<no_weak_ref, I>...>>;
diff --git a/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h b/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
index fe0b1208a..c29b63826 100644
--- a/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
+++ b/projection/winrt-sdk/src/winrt_sdk/cppwinrt/winrt/base.h
@@ -7533,6 +7533,11 @@ namespace winrt::impl
             return error_no_interface;
         }
 
+        virtual std::vector<guid> get_iids_tearoff() const noexcept
+        {
+            return {};
+        }
+
         root_implements() noexcept
         {
         }
@@ -7678,7 +7683,8 @@ namespace winrt::impl
         int32_t __stdcall NonDelegatingGetIids(uint32_t* count, guid** array) noexcept
         {
             auto const& local_iids = static_cast<D*>(this)->get_local_iids();
-            uint32_t const& local_count = local_iids.first;
+            auto tearoff_uuids = get_iids_tearoff();
+            auto local_count = local_iids.first + static_cast<uint32_t>(tearoff_uuids.size());
             if constexpr (root_implements_type::is_composing)
             {
                 if (local_count > 0)
@@ -7690,7 +7696,8 @@ namespace winrt::impl
                     {
                         return error_bad_alloc;
                     }
-                    auto next = std::copy(local_iids.second, local_iids.second + local_count, *array);
+                    auto next = std::copy(local_iids.second, local_iids.second + local_iids.first, *array);
+                    next = std::copy(tearoff_uuids.cbegin(), tearoff_uuids.cend(), next);
                     std::copy(inner_iids.cbegin(), inner_iids.cend(), next);
                 }
                 else
@@ -7708,7 +7715,8 @@ namespace winrt::impl
                     {
                         return error_bad_alloc;
                     }
-                    std::copy(local_iids.second, local_iids.second + local_count, *array);
+                    auto next = std::copy(local_iids.second, local_iids.second + local_iids.first, *array);
+                    std::copy(tearoff_uuids.cbegin(), tearoff_uuids.cend(), next);
                 }
                 else
                 {
